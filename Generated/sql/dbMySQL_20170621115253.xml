<?xml version="1.0"?>
<root>
  <ModuleHolder ModuleName="--Kernel tables" File="">
    <BlockHolder BlockName="--body" BlockCode=" 

-- kernel tables --
create table if not exists sysoptions(
sysoptionsid binary(16) primary key ,
name varchar(255) null,
value varchar(255) null,
optiontype varchar(255) null
)
go
create table if not exists typelist(
typelistid binary(16) primary key ,
name varchar(255) not null,
securitystyleid binary(16) null, /* default security style for type */
registerproc varchar(255) null,
deleteproc varchar(255) null,
hclproc varchar(255) null /* has children locked */,
propagateproc varchar(255) null /* propagate secrity styleto children */
)
go
create table if not exists instance(
instanceid binary(16) primary key ,
lockuserid binary(16) null, 
locksessionid binary(16) null, 
securitystyleid binary(16) null, /* default security style for document */
changestamp date null,
name varchar(255) null,
objtype varchar(255) null,
exportcounter integer null, 
 ownerpartname varchar(255) null
,ownerrowid binary(16) null
, status binary(16) null
, archived int null default 0
)
go
create table if not exists queryresult (
  queryresultid binary(16) not null ,
  result binary(16) null 
)
go
create table if not exists rpresult (
  rpresultid binary(16) not null ,
  parentlevel int not null ,
  partname varchar (255) null ,
  rowid binary(16) null )
go
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Tables" File="">
    <BlockHolder BlockName="--body" BlockCode=" 
/* TYPE=TPLC (Данные) */
GO

/*электроэнергия*/
create table if not exists tplc_e/*данные по электроэнергии*/ (
instanceid binary(16) ,
tplc_eid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'dcall') then
                alter table tplc_e add 
                dcall
 datetime null /* дата опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'dcounter') then
                alter table tplc_e add 
                dcounter
 datetime null /* дата счетчика */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e0') then
                alter table tplc_e add 
                e0
 double null /* энергия общ. */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e1') then
                alter table tplc_e add 
                e1
 double null /* энергия тариф 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e2') then
                alter table tplc_e add 
                e2
 double null /* энергия тариф 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e3') then
                alter table tplc_e add 
                e3
 double null /* энергия тариф 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e4') then
                alter table tplc_e add 
                e4
 double null /* энергия тариф 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e0s') then
                alter table tplc_e add 
                e0s
 double null /* энергия общ. ни */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e1s') then
                alter table tplc_e add 
                e1s
 double null /* энергия тариф 1 ни */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e2s') then
                alter table tplc_e add 
                e2s
 double null /* энергия тариф 2 ни */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e3s') then
                alter table tplc_e add 
                e3s
 double null /* энергия тариф 3 ни */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'e4s') then
                alter table tplc_e add 
                e4s
 double null /* энергия тариф 4 ни */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'ap') then
                alter table tplc_e add 
                ap
 double null /* активная + */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'am') then
                alter table tplc_e add 
                am
 double null /* активная -  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'rp') then
                alter table tplc_e add 
                rp
 double null /* реактивная + */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'rm') then
                alter table tplc_e add 
                rm
 double null /* реактивная - */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'i1') then
                alter table tplc_e add 
                i1
 double null /* ток ф1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'i2') then
                alter table tplc_e add 
                i2
 double null /* ток ф2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'i3') then
                alter table tplc_e add 
                i3
 double null /* ток ф3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'u1') then
                alter table tplc_e add 
                u1
 double null /* напряжение ф1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'u2') then
                alter table tplc_e add 
                u2
 double null /* напряжение ф2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'u3') then
                alter table tplc_e add 
                u3
 double null /* напряжение ф3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'oktime') then
                alter table tplc_e add 
                oktime
 double null /* время безошиб.работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'worktime') then
                alter table tplc_e add 
                worktime
 double null /* время работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_e' and 
           column_name   = 'errinfo') then
                alter table tplc_e add 
                errinfo
 varchar (255) null /* ошибки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplc_e' and 
           constraint_type   = 'primary key') then
            alter table tplc_e add constraint pk_tplc_e primary key (tplc_eid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*мгновенные значения*/
create table if not exists tplc_m/*текущие значения мгновенные*/ (
instanceid binary(16) ,
tplc_mid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dcall') then
                alter table tplc_m add 
                dcall
 datetime null /* дата опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dcounter') then
                alter table tplc_m add 
                dcounter
 datetime null /* дата счетчика */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'q1') then
                alter table tplc_m add 
                q1
 double null /* тепловая энергия канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'q2') then
                alter table tplc_m add 
                q2
 double null /* тепловая энергия канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 't1') then
                alter table tplc_m add 
                t1
 double null /* температура по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 't2') then
                alter table tplc_m add 
                t2
 double null /* температура по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dt12') then
                alter table tplc_m add 
                dt12
 double null /* разность температур по каналу 1 и 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 't3') then
                alter table tplc_m add 
                t3
 double null /* температура по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 't4') then
                alter table tplc_m add 
                t4
 double null /* температура по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 't5') then
                alter table tplc_m add 
                t5
 double null /* температура по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dt45') then
                alter table tplc_m add 
                dt45
 double null /* разность температур по каналу 4 и 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 't6') then
                alter table tplc_m add 
                t6
 double null /* температура по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v1') then
                alter table tplc_m add 
                v1
 double null /* объемный расход воды по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v2') then
                alter table tplc_m add 
                v2
 double null /* объемный расход воды по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dv12') then
                alter table tplc_m add 
                dv12
 double null /* разность объемов канал 1  (расход гвс) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v3') then
                alter table tplc_m add 
                v3
 double null /* объемный расход воды по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v4') then
                alter table tplc_m add 
                v4
 double null /* объемный расход воды по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v5') then
                alter table tplc_m add 
                v5
 double null /* объемный расход воды по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dv45') then
                alter table tplc_m add 
                dv45
 double null /* разность объемов канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v6') then
                alter table tplc_m add 
                v6
 double null /* объемный расход воды по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'm1') then
                alter table tplc_m add 
                m1
 double null /* масса воды по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'm2') then
                alter table tplc_m add 
                m2
 double null /* масса воды по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dm12') then
                alter table tplc_m add 
                dm12
 double null /* разность масс канал 1  (расход гвс) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'm3') then
                alter table tplc_m add 
                m3
 double null /* масса воды по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'm4') then
                alter table tplc_m add 
                m4
 double null /* масса воды по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'm5') then
                alter table tplc_m add 
                m5
 double null /* масса воды по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dm45') then
                alter table tplc_m add 
                dm45
 double null /* разность масс канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'm6') then
                alter table tplc_m add 
                m6
 double null /* масса воды по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'p1') then
                alter table tplc_m add 
                p1
 double null /* давление в трубопроводе 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'p2') then
                alter table tplc_m add 
                p2
 double null /* давление в трубопроводе 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'p3') then
                alter table tplc_m add 
                p3
 double null /* давление в трубопроводе 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'p4') then
                alter table tplc_m add 
                p4
 double null /* давление в трубопроводе 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'p5') then
                alter table tplc_m add 
                p5
 double null /* давление в трубопроводе 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'p6') then
                alter table tplc_m add 
                p6
 double null /* давление в трубопроводе 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'g1') then
                alter table tplc_m add 
                g1
 double null /* текущее значение расхода в трубопроводе 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'g2') then
                alter table tplc_m add 
                g2
 double null /* текущее значение расхода в трубопроводе 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'g3') then
                alter table tplc_m add 
                g3
 double null /* текущее значение расхода в трубопроводе 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'g4') then
                alter table tplc_m add 
                g4
 double null /* текущее значение расхода в трубопроводе 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'g5') then
                alter table tplc_m add 
                g5
 double null /* текущее значение расхода в трубопроводе 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'g6') then
                alter table tplc_m add 
                g6
 double null /* текущее значение расхода в трубопроводе 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'tcool') then
                alter table tplc_m add 
                tcool
 double null /* температура холодной воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'tce1') then
                alter table tplc_m add 
                tce1
 double null /* температура холодного конца канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'tce2') then
                alter table tplc_m add 
                tce2
 double null /* температура холодного конца канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'tsum1') then
                alter table tplc_m add 
                tsum1
 double null /* тотальное время счета tb1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'tsum2') then
                alter table tplc_m add 
                tsum2
 double null /* тотальное время счета tb2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'q1h') then
                alter table tplc_m add 
                q1h
 double null /* тепловая энергия канал 1 нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'q2h') then
                alter table tplc_m add 
                q2h
 double null /* тепловая энергия канал 2 нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v1h') then
                alter table tplc_m add 
                v1h
 double null /* объемный расход воды по каналу 1  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v2h') then
                alter table tplc_m add 
                v2h
 double null /* объемный расход воды по каналу 2  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v4h') then
                alter table tplc_m add 
                v4h
 double null /* объемный расход воды по каналу 4  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'v5h') then
                alter table tplc_m add 
                v5h
 double null /* объемный расход воды по каналу 5  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'errtime') then
                alter table tplc_m add 
                errtime
 double null /* время аварии */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'errtimeh') then
                alter table tplc_m add 
                errtimeh
 double null /* время аварии нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'hc') then
                alter table tplc_m add 
                hc
 varchar (360) null /* нештатные ситуации общ */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'sp') then
                alter table tplc_m add 
                sp
 double null /* схема потребления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'sp_tb1') then
                alter table tplc_m add 
                sp_tb1
 double null /* схема потребления tb1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'sp_tb2') then
                alter table tplc_m add 
                sp_tb2
 double null /* схема потребления tb2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'datetimecounter') then
                alter table tplc_m add 
                datetimecounter
 datetime null /* datetimecounter */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dg12') then
                alter table tplc_m add 
                dg12
 double null /* g1-g2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dg45') then
                alter table tplc_m add 
                dg45
 double null /* g4-g5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dp12') then
                alter table tplc_m add 
                dp12
 double null /* p1-p2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dp45') then
                alter table tplc_m add 
                dp45
 double null /* p4-p5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'unitsr') then
                alter table tplc_m add 
                unitsr
 varchar (24) null /* единицы измерения расхода */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'q3') then
                alter table tplc_m add 
                q3
 double null /* тепловая энергия канал 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'q4') then
                alter table tplc_m add 
                q4
 double null /* тепловая энергия канал 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'patm') then
                alter table tplc_m add 
                patm
 double null /* атмосферное давление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'q5') then
                alter table tplc_m add 
                q5
 double null /* тепловая энергия канал 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dq12') then
                alter table tplc_m add 
                dq12
 double null /* тепловая энергия потребитель 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dq45') then
                alter table tplc_m add 
                dq45
 double null /* тепловая энергия потребитель 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'pxb') then
                alter table tplc_m add 
                pxb
 double null /* давление холодной воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dq') then
                alter table tplc_m add 
                dq
 double null /* расход энергии потребитель 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'hc_1') then
                alter table tplc_m add 
                hc_1
 varchar (360) null /* нештатная ситуация 1 (тв1 или внешняя) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'hc_2') then
                alter table tplc_m add 
                hc_2
 varchar (360) null /* нештатная ситуация 2 (тв2 или внутренняя) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'thot') then
                alter table tplc_m add 
                thot
 double null /* температура горячей воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dans1') then
                alter table tplc_m add 
                dans1
 double null /* dans1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dans2') then
                alter table tplc_m add 
                dans2
 double null /* dans2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dans3') then
                alter table tplc_m add 
                dans3
 double null /* dans3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dans4') then
                alter table tplc_m add 
                dans4
 double null /* dans4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dans5') then
                alter table tplc_m add 
                dans5
 double null /* dans5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'dans6') then
                alter table tplc_m add 
                dans6
 double null /* dans6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'check_a') then
                alter table tplc_m add 
                check_a
 double null /* проверка архивных данных на нс (0 - не производилась, 1 - произведена) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'oktime') then
                alter table tplc_m add 
                oktime
 double null /* время безошиб.работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'worktime') then
                alter table tplc_m add 
                worktime
 double null /* время работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'tair1') then
                alter table tplc_m add 
                tair1
 double null /* температура воздуха канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'tair2') then
                alter table tplc_m add 
                tair2
 double null /* температура воздуха канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_m' and 
           column_name   = 'hc_code') then
                alter table tplc_m add 
                hc_code
 varchar (360) null /* код нештатной ситуации тепловычислителя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplc_m' and 
           constraint_type   = 'primary key') then
            alter table tplc_m add constraint pk_tplc_m primary key (tplc_mid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*заголовок*/
create table if not exists tplc_header/**/ (
instanceid binary(16) ,
tplc_headerid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_header' and 
           column_name   = 'id_bd') then
                alter table tplc_header add 
                id_bd binary(16) null /* устройство */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplc_header' and 
           constraint_type   = 'primary key') then
            alter table tplc_header add constraint pk_tplc_header primary key (tplc_headerid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*суточный архив*/
create table if not exists tplc_d/*суточный архив*/ (
instanceid binary(16) ,
tplc_did binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dcall') then
                alter table tplc_d add 
                dcall
 datetime null /* дата опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dcounter') then
                alter table tplc_d add 
                dcounter
 datetime null /* дата счетчика */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'q1') then
                alter table tplc_d add 
                q1
 double null /* тепловая энергия канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'q2') then
                alter table tplc_d add 
                q2
 double null /* тепловая энергия канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 't1') then
                alter table tplc_d add 
                t1
 double null /* температура по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 't2') then
                alter table tplc_d add 
                t2
 double null /* температура по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dt12') then
                alter table tplc_d add 
                dt12
 double null /* разность температур по каналу 1 и 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 't3') then
                alter table tplc_d add 
                t3
 double null /* температура по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 't4') then
                alter table tplc_d add 
                t4
 double null /* температура по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 't5') then
                alter table tplc_d add 
                t5
 double null /* температура по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dt45') then
                alter table tplc_d add 
                dt45
 double null /* разность температур по каналу 4 и 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 't6') then
                alter table tplc_d add 
                t6
 double null /* температура по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v1') then
                alter table tplc_d add 
                v1
 double null /* объемный расход воды по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v2') then
                alter table tplc_d add 
                v2
 double null /* объемный расход воды по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dv12') then
                alter table tplc_d add 
                dv12
 double null /* разность объемов канал 1  (расход гвс) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v3') then
                alter table tplc_d add 
                v3
 double null /* объемный расход воды по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v4') then
                alter table tplc_d add 
                v4
 double null /* объемный расход воды по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v5') then
                alter table tplc_d add 
                v5
 double null /* объемный расход воды по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dv45') then
                alter table tplc_d add 
                dv45
 double null /* разность объемов канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v6') then
                alter table tplc_d add 
                v6
 double null /* объемный расход воды по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'm1') then
                alter table tplc_d add 
                m1
 double null /* масса воды по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'm2') then
                alter table tplc_d add 
                m2
 double null /* масса воды по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dm12') then
                alter table tplc_d add 
                dm12
 double null /* разность масс канал 1  (расход гвс) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'm3') then
                alter table tplc_d add 
                m3
 double null /* масса воды по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'm4') then
                alter table tplc_d add 
                m4
 double null /* масса воды по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'm5') then
                alter table tplc_d add 
                m5
 double null /* масса воды по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dm45') then
                alter table tplc_d add 
                dm45
 double null /* разность масс канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'm6') then
                alter table tplc_d add 
                m6
 double null /* масса воды по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'p1') then
                alter table tplc_d add 
                p1
 double null /* давление в трубопроводе 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'p2') then
                alter table tplc_d add 
                p2
 double null /* давление в трубопроводе 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'p3') then
                alter table tplc_d add 
                p3
 double null /* давление в трубопроводе 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'p4') then
                alter table tplc_d add 
                p4
 double null /* давление в трубопроводе 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'p5') then
                alter table tplc_d add 
                p5
 double null /* давление в трубопроводе 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'p6') then
                alter table tplc_d add 
                p6
 double null /* давление в трубопроводе 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'g1') then
                alter table tplc_d add 
                g1
 double null /* текущее значение расхода в трубопроводе 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'g2') then
                alter table tplc_d add 
                g2
 double null /* текущее значение расхода в трубопроводе 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'g3') then
                alter table tplc_d add 
                g3
 double null /* текущее значение расхода в трубопроводе 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'g4') then
                alter table tplc_d add 
                g4
 double null /* текущее значение расхода в трубопроводе 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'g5') then
                alter table tplc_d add 
                g5
 double null /* текущее значение расхода в трубопроводе 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'g6') then
                alter table tplc_d add 
                g6
 double null /* текущее значение расхода в трубопроводе 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'tcool') then
                alter table tplc_d add 
                tcool
 double null /* температура холодной воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'tce1') then
                alter table tplc_d add 
                tce1
 double null /* температура холодного конца канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'tce2') then
                alter table tplc_d add 
                tce2
 double null /* температура холодного конца канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'tsum1') then
                alter table tplc_d add 
                tsum1
 double null /* тотальное время счета tb1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'tsum2') then
                alter table tplc_d add 
                tsum2
 double null /* тотальное время счета tb2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'q1h') then
                alter table tplc_d add 
                q1h
 double null /* тепловая энергия канал 1 нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'q2h') then
                alter table tplc_d add 
                q2h
 double null /* тепловая энергия канал 2 нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v1h') then
                alter table tplc_d add 
                v1h
 double null /* объемный расход воды по каналу 1  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v2h') then
                alter table tplc_d add 
                v2h
 double null /* объемный расход воды по каналу 2  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v4h') then
                alter table tplc_d add 
                v4h
 double null /* объемный расход воды по каналу 4  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'v5h') then
                alter table tplc_d add 
                v5h
 double null /* объемный расход воды по каналу 5  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'errtime') then
                alter table tplc_d add 
                errtime
 double null /* время аварии */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'errtimeh') then
                alter table tplc_d add 
                errtimeh
 double null /* время аварии нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'hc') then
                alter table tplc_d add 
                hc
 varchar (360) null /* нештатные ситуации общ */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'sp') then
                alter table tplc_d add 
                sp
 double null /* схема потребления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'sp_tb1') then
                alter table tplc_d add 
                sp_tb1
 double null /* схема потребления tb1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'sp_tb2') then
                alter table tplc_d add 
                sp_tb2
 double null /* схема потребления tb2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'datetimecounter') then
                alter table tplc_d add 
                datetimecounter
 datetime null /* datetimecounter */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dg12') then
                alter table tplc_d add 
                dg12
 double null /* g1-g2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dg45') then
                alter table tplc_d add 
                dg45
 double null /* g4-g5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dp12') then
                alter table tplc_d add 
                dp12
 double null /* p1-p2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dp45') then
                alter table tplc_d add 
                dp45
 double null /* p4-p5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'unitsr') then
                alter table tplc_d add 
                unitsr
 varchar (24) null /* единицы измерения расхода */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'q3') then
                alter table tplc_d add 
                q3
 double null /* тепловая энергия канал 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'q4') then
                alter table tplc_d add 
                q4
 double null /* тепловая энергия канал 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'patm') then
                alter table tplc_d add 
                patm
 double null /* атмосферное давление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'q5') then
                alter table tplc_d add 
                q5
 double null /* тепловая энергия канал 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dq12') then
                alter table tplc_d add 
                dq12
 double null /* тепловая энергия потребитель 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dq45') then
                alter table tplc_d add 
                dq45
 double null /* тепловая энергия потребитель 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'pxb') then
                alter table tplc_d add 
                pxb
 double null /* давление холодной воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dq') then
                alter table tplc_d add 
                dq
 double null /* расход энергии потребитель 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'hc_1') then
                alter table tplc_d add 
                hc_1
 varchar (360) null /* нештатная ситуация 1 (тв1 или внешняя) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'hc_2') then
                alter table tplc_d add 
                hc_2
 varchar (360) null /* нештатная ситуация 2 (тв2 или внутренняя) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'thot') then
                alter table tplc_d add 
                thot
 double null /* температура горячей воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dans1') then
                alter table tplc_d add 
                dans1
 double null /* dans1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dans2') then
                alter table tplc_d add 
                dans2
 double null /* dans2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dans3') then
                alter table tplc_d add 
                dans3
 double null /* dans3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dans4') then
                alter table tplc_d add 
                dans4
 double null /* dans4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dans5') then
                alter table tplc_d add 
                dans5
 double null /* dans5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'dans6') then
                alter table tplc_d add 
                dans6
 double null /* dans6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'check_a') then
                alter table tplc_d add 
                check_a
 double null /* проверка архивных данных на нс (0 - не производилась, 1 - произведена) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'oktime') then
                alter table tplc_d add 
                oktime
 double null /* время безошиб.работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'worktime') then
                alter table tplc_d add 
                worktime
 double null /* время работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'tair1') then
                alter table tplc_d add 
                tair1
 double null /* температура воздуха канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'tair2') then
                alter table tplc_d add 
                tair2
 double null /* температура воздуха канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_d' and 
           column_name   = 'hc_code') then
                alter table tplc_d add 
                hc_code
 varchar (360) null /* код нештатной ситуации тепловычислителя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplc_d' and 
           constraint_type   = 'primary key') then
            alter table tplc_d add constraint pk_tplc_d primary key (tplc_did);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*часовые архивы*/
create table if not exists tplc_h/*часовые архивы*/ (
instanceid binary(16) ,
tplc_hid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dcall') then
                alter table tplc_h add 
                dcall
 datetime null /* дата опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dcounter') then
                alter table tplc_h add 
                dcounter
 datetime null /* дата счетчика */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'q1') then
                alter table tplc_h add 
                q1
 double null /* тепловая энергия канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'q2') then
                alter table tplc_h add 
                q2
 double null /* тепловая энергия канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 't1') then
                alter table tplc_h add 
                t1
 double null /* температура по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 't2') then
                alter table tplc_h add 
                t2
 double null /* температура по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dt12') then
                alter table tplc_h add 
                dt12
 double null /* разность температур по каналу 1 и 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 't3') then
                alter table tplc_h add 
                t3
 double null /* температура по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 't4') then
                alter table tplc_h add 
                t4
 double null /* температура по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 't5') then
                alter table tplc_h add 
                t5
 double null /* температура по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dt45') then
                alter table tplc_h add 
                dt45
 double null /* разность температур по каналу 4 и 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 't6') then
                alter table tplc_h add 
                t6
 double null /* температура по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v1') then
                alter table tplc_h add 
                v1
 double null /* объемный расход воды по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v2') then
                alter table tplc_h add 
                v2
 double null /* объемный расход воды по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dv12') then
                alter table tplc_h add 
                dv12
 double null /* разность объемов канал 1  (расход гвс) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v3') then
                alter table tplc_h add 
                v3
 double null /* объемный расход воды по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v4') then
                alter table tplc_h add 
                v4
 double null /* объемный расход воды по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v5') then
                alter table tplc_h add 
                v5
 double null /* объемный расход воды по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dv45') then
                alter table tplc_h add 
                dv45
 double null /* разность объемов канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v6') then
                alter table tplc_h add 
                v6
 double null /* объемный расход воды по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'm1') then
                alter table tplc_h add 
                m1
 double null /* масса воды по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'm2') then
                alter table tplc_h add 
                m2
 double null /* масса воды по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dm12') then
                alter table tplc_h add 
                dm12
 double null /* разность масс канал 1  (расход гвс) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'm3') then
                alter table tplc_h add 
                m3
 double null /* масса воды по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'm4') then
                alter table tplc_h add 
                m4
 double null /* масса воды по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'm5') then
                alter table tplc_h add 
                m5
 double null /* масса воды по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dm45') then
                alter table tplc_h add 
                dm45
 double null /* разность масс канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'm6') then
                alter table tplc_h add 
                m6
 double null /* масса воды по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'p1') then
                alter table tplc_h add 
                p1
 double null /* давление в трубопроводе 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'p2') then
                alter table tplc_h add 
                p2
 double null /* давление в трубопроводе 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'p3') then
                alter table tplc_h add 
                p3
 double null /* давление в трубопроводе 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'p4') then
                alter table tplc_h add 
                p4
 double null /* давление в трубопроводе 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'p5') then
                alter table tplc_h add 
                p5
 double null /* давление в трубопроводе 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'p6') then
                alter table tplc_h add 
                p6
 double null /* давление в трубопроводе 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'g1') then
                alter table tplc_h add 
                g1
 double null /* текущее значение расхода в трубопроводе 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'g2') then
                alter table tplc_h add 
                g2
 double null /* текущее значение расхода в трубопроводе 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'g3') then
                alter table tplc_h add 
                g3
 double null /* текущее значение расхода в трубопроводе 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'g4') then
                alter table tplc_h add 
                g4
 double null /* текущее значение расхода в трубопроводе 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'g5') then
                alter table tplc_h add 
                g5
 double null /* текущее значение расхода в трубопроводе 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'g6') then
                alter table tplc_h add 
                g6
 double null /* текущее значение расхода в трубопроводе 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'tcool') then
                alter table tplc_h add 
                tcool
 double null /* температура холодной воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'tce1') then
                alter table tplc_h add 
                tce1
 double null /* температура холодного конца канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'tce2') then
                alter table tplc_h add 
                tce2
 double null /* температура холодного конца канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'tsum1') then
                alter table tplc_h add 
                tsum1
 double null /* тотальное время счета tb1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'tsum2') then
                alter table tplc_h add 
                tsum2
 double null /* тотальное время счета tb2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'q1h') then
                alter table tplc_h add 
                q1h
 double null /* тепловая энергия канал 1 нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'q2h') then
                alter table tplc_h add 
                q2h
 double null /* тепловая энергия канал 2 нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v1h') then
                alter table tplc_h add 
                v1h
 double null /* объемный расход воды по каналу 1  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v2h') then
                alter table tplc_h add 
                v2h
 double null /* объемный расход воды по каналу 2  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v4h') then
                alter table tplc_h add 
                v4h
 double null /* объемный расход воды по каналу 4  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'v5h') then
                alter table tplc_h add 
                v5h
 double null /* объемный расход воды по каналу 5  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'errtime') then
                alter table tplc_h add 
                errtime
 double null /* время аварии */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'errtimeh') then
                alter table tplc_h add 
                errtimeh
 double null /* время аварии нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'hc') then
                alter table tplc_h add 
                hc
 varchar (360) null /* нештатные ситуации общ */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'sp') then
                alter table tplc_h add 
                sp
 double null /* схема потребления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'sp_tb1') then
                alter table tplc_h add 
                sp_tb1
 double null /* схема потребления tb1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'sp_tb2') then
                alter table tplc_h add 
                sp_tb2
 double null /* схема потребления tb2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'datetimecounter') then
                alter table tplc_h add 
                datetimecounter
 datetime null /* datetimecounter */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dg12') then
                alter table tplc_h add 
                dg12
 double null /* g1-g2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dg45') then
                alter table tplc_h add 
                dg45
 double null /* g4-g5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dp12') then
                alter table tplc_h add 
                dp12
 double null /* p1-p2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dp45') then
                alter table tplc_h add 
                dp45
 double null /* p4-p5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'unitsr') then
                alter table tplc_h add 
                unitsr
 varchar (24) null /* единицы измерения расхода */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'q3') then
                alter table tplc_h add 
                q3
 double null /* тепловая энергия канал 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'q4') then
                alter table tplc_h add 
                q4
 double null /* тепловая энергия канал 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'patm') then
                alter table tplc_h add 
                patm
 double null /* атмосферное давление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'q5') then
                alter table tplc_h add 
                q5
 double null /* тепловая энергия канал 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dq12') then
                alter table tplc_h add 
                dq12
 double null /* тепловая энергия потребитель 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dq45') then
                alter table tplc_h add 
                dq45
 double null /* тепловая энергия потребитель 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'pxb') then
                alter table tplc_h add 
                pxb
 double null /* давление холодной воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dq') then
                alter table tplc_h add 
                dq
 double null /* расход энергии потребитель 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'hc_1') then
                alter table tplc_h add 
                hc_1
 varchar (360) null /* нештатная ситуация 1 (тв1 или внешняя) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'hc_2') then
                alter table tplc_h add 
                hc_2
 varchar (360) null /* нештатная ситуация 2 (тв2 или внутренняя) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'thot') then
                alter table tplc_h add 
                thot
 double null /* температура горячей воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dans1') then
                alter table tplc_h add 
                dans1
 double null /* dans1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dans2') then
                alter table tplc_h add 
                dans2
 double null /* dans2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dans3') then
                alter table tplc_h add 
                dans3
 double null /* dans3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dans4') then
                alter table tplc_h add 
                dans4
 double null /* dans4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dans5') then
                alter table tplc_h add 
                dans5
 double null /* dans5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'dans6') then
                alter table tplc_h add 
                dans6
 double null /* dans6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'check_a') then
                alter table tplc_h add 
                check_a
 double null /* проверка архивных данных на нс (0 - не производилась, 1 - произведена) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'oktime') then
                alter table tplc_h add 
                oktime
 double null /* время безошиб.работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'worktime') then
                alter table tplc_h add 
                worktime
 double null /* время работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'tair1') then
                alter table tplc_h add 
                tair1
 double null /* температура воздуха канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'tair2') then
                alter table tplc_h add 
                tair2
 double null /* температура воздуха канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_h' and 
           column_name   = 'hc_code') then
                alter table tplc_h add 
                hc_code
 varchar (360) null /* код нештатной ситуации тепловычислителя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplc_h' and 
           constraint_type   = 'primary key') then
            alter table tplc_h add constraint pk_tplc_h primary key (tplc_hid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*пропущенные архивы*/
create table if not exists tplc_missing/*пропущенные архивы*/ (
instanceid binary(16) ,
tplc_missingid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_missing' and 
           column_name   = 'atype') then
                alter table tplc_missing add 
                atype binary(16) null /* тип архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_missing' and 
           column_name   = 'adate') then
                alter table tplc_missing add 
                adate
 datetime null /* дата архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_missing' and 
           column_name   = 'querycount') then
                alter table tplc_missing add 
                querycount
 integer null /* количество попыток  опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplc_missing' and 
           constraint_type   = 'primary key') then
            alter table tplc_missing add constraint pk_tplc_missing primary key (tplc_missingid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*суммарные показатели*/
create table if not exists tplc_t/*суммарные показатели*/ (
instanceid binary(16) ,
tplc_tid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dcall') then
                alter table tplc_t add 
                dcall
 datetime null /* дата опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dcounter') then
                alter table tplc_t add 
                dcounter
 datetime null /* дата счетчика */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'q1') then
                alter table tplc_t add 
                q1
 double null /* тепловая энергия канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'q2') then
                alter table tplc_t add 
                q2
 double null /* тепловая энергия канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 't1') then
                alter table tplc_t add 
                t1
 double null /* температура по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 't2') then
                alter table tplc_t add 
                t2
 double null /* температура по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dt12') then
                alter table tplc_t add 
                dt12
 double null /* разность температур по каналу 1 и 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 't3') then
                alter table tplc_t add 
                t3
 double null /* температура по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 't4') then
                alter table tplc_t add 
                t4
 double null /* температура по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 't5') then
                alter table tplc_t add 
                t5
 double null /* температура по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dt45') then
                alter table tplc_t add 
                dt45
 double null /* разность температур по каналу 4 и 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 't6') then
                alter table tplc_t add 
                t6
 double null /* температура по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v1') then
                alter table tplc_t add 
                v1
 double null /* объемный расход воды по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v2') then
                alter table tplc_t add 
                v2
 double null /* объемный расход воды по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dv12') then
                alter table tplc_t add 
                dv12
 double null /* разность объемов канал 1  (расход гвс) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v3') then
                alter table tplc_t add 
                v3
 double null /* объемный расход воды по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v4') then
                alter table tplc_t add 
                v4
 double null /* объемный расход воды по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v5') then
                alter table tplc_t add 
                v5
 double null /* объемный расход воды по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dv45') then
                alter table tplc_t add 
                dv45
 double null /* разность объемов канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v6') then
                alter table tplc_t add 
                v6
 double null /* объемный расход воды по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'm1') then
                alter table tplc_t add 
                m1
 double null /* масса воды по каналу 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'm2') then
                alter table tplc_t add 
                m2
 double null /* масса воды по каналу 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dm12') then
                alter table tplc_t add 
                dm12
 double null /* разность масс канал 1  (расход гвс) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'm3') then
                alter table tplc_t add 
                m3
 double null /* масса воды по каналу 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'm4') then
                alter table tplc_t add 
                m4
 double null /* масса воды по каналу 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'm5') then
                alter table tplc_t add 
                m5
 double null /* масса воды по каналу 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dm45') then
                alter table tplc_t add 
                dm45
 double null /* разность масс канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'm6') then
                alter table tplc_t add 
                m6
 double null /* масса воды по каналу 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'p1') then
                alter table tplc_t add 
                p1
 double null /* давление в трубопроводе 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'p2') then
                alter table tplc_t add 
                p2
 double null /* давление в трубопроводе 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'p3') then
                alter table tplc_t add 
                p3
 double null /* давление в трубопроводе 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'p4') then
                alter table tplc_t add 
                p4
 double null /* давление в трубопроводе 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'p5') then
                alter table tplc_t add 
                p5
 double null /* давление в трубопроводе 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'p6') then
                alter table tplc_t add 
                p6
 double null /* давление в трубопроводе 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'g1') then
                alter table tplc_t add 
                g1
 double null /* текущее значение расхода в трубопроводе 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'g2') then
                alter table tplc_t add 
                g2
 double null /* текущее значение расхода в трубопроводе 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'g3') then
                alter table tplc_t add 
                g3
 double null /* текущее значение расхода в трубопроводе 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'g4') then
                alter table tplc_t add 
                g4
 double null /* текущее значение расхода в трубопроводе 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'g5') then
                alter table tplc_t add 
                g5
 double null /* текущее значение расхода в трубопроводе 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'g6') then
                alter table tplc_t add 
                g6
 double null /* текущее значение расхода в трубопроводе 6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'tcool') then
                alter table tplc_t add 
                tcool
 double null /* температура холодной воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'tce1') then
                alter table tplc_t add 
                tce1
 double null /* температура холодного конца канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'tce2') then
                alter table tplc_t add 
                tce2
 double null /* температура холодного конца канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'tsum1') then
                alter table tplc_t add 
                tsum1
 double null /* тотальное время счета tb1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'tsum2') then
                alter table tplc_t add 
                tsum2
 double null /* тотальное время счета tb2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'q1h') then
                alter table tplc_t add 
                q1h
 double null /* тепловая энергия канал 1 нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'q2h') then
                alter table tplc_t add 
                q2h
 double null /* тепловая энергия канал 2 нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v1h') then
                alter table tplc_t add 
                v1h
 double null /* объемный расход воды по каналу 1  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v2h') then
                alter table tplc_t add 
                v2h
 double null /* объемный расход воды по каналу 2  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v4h') then
                alter table tplc_t add 
                v4h
 double null /* объемный расход воды по каналу 4  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'v5h') then
                alter table tplc_t add 
                v5h
 double null /* объемный расход воды по каналу 5  нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'errtime') then
                alter table tplc_t add 
                errtime
 double null /* время аварии */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'errtimeh') then
                alter table tplc_t add 
                errtimeh
 double null /* время аварии нарастающим итогом */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'hc') then
                alter table tplc_t add 
                hc
 varchar (360) null /* нештатные ситуации общ */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'sp') then
                alter table tplc_t add 
                sp
 double null /* схема потребления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'sp_tb1') then
                alter table tplc_t add 
                sp_tb1
 double null /* схема потребления tb1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'sp_tb2') then
                alter table tplc_t add 
                sp_tb2
 double null /* схема потребления tb2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'datetimecounter') then
                alter table tplc_t add 
                datetimecounter
 datetime null /* datetimecounter */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dg12') then
                alter table tplc_t add 
                dg12
 double null /* g1-g2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dg45') then
                alter table tplc_t add 
                dg45
 double null /* g4-g5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dp12') then
                alter table tplc_t add 
                dp12
 double null /* p1-p2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dp45') then
                alter table tplc_t add 
                dp45
 double null /* p4-p5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'unitsr') then
                alter table tplc_t add 
                unitsr
 varchar (24) null /* единицы измерения расхода */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'q3') then
                alter table tplc_t add 
                q3
 double null /* тепловая энергия канал 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'q4') then
                alter table tplc_t add 
                q4
 double null /* тепловая энергия канал 4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'patm') then
                alter table tplc_t add 
                patm
 double null /* атмосферное давление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'q5') then
                alter table tplc_t add 
                q5
 double null /* тепловая энергия канал 5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dq12') then
                alter table tplc_t add 
                dq12
 double null /* тепловая энергия потребитель 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dq45') then
                alter table tplc_t add 
                dq45
 double null /* тепловая энергия потребитель 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'pxb') then
                alter table tplc_t add 
                pxb
 double null /* давление холодной воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dq') then
                alter table tplc_t add 
                dq
 double null /* расход энергии потребитель 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'hc_1') then
                alter table tplc_t add 
                hc_1
 varchar (360) null /* нештатная ситуация 1 (тв1 или внешняя) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'hc_2') then
                alter table tplc_t add 
                hc_2
 varchar (360) null /* нештатная ситуация 2 (тв2 или внутренняя) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'thot') then
                alter table tplc_t add 
                thot
 double null /* температура горячей воды */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dans1') then
                alter table tplc_t add 
                dans1
 double null /* dans1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dans2') then
                alter table tplc_t add 
                dans2
 double null /* dans2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dans3') then
                alter table tplc_t add 
                dans3
 double null /* dans3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dans4') then
                alter table tplc_t add 
                dans4
 double null /* dans4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dans5') then
                alter table tplc_t add 
                dans5
 double null /* dans5 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'dans6') then
                alter table tplc_t add 
                dans6
 double null /* dans6 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'check_a') then
                alter table tplc_t add 
                check_a
 double null /* проверка архивных данных на нс (0 - не производилась, 1 - произведена) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'oktime') then
                alter table tplc_t add 
                oktime
 double null /* время безошиб.работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'worktime') then
                alter table tplc_t add 
                worktime
 double null /* время работы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'tair1') then
                alter table tplc_t add 
                tair1
 double null /* температура воздуха канал 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'tair2') then
                alter table tplc_t add 
                tair2
 double null /* температура воздуха канал 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplc_t' and 
           column_name   = 'hc_code') then
                alter table tplc_t add 
                hc_code
 varchar (360) null /* код нештатной ситуации тепловычислителя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplc_t' and 
           constraint_type   = 'primary key') then
            alter table tplc_t add constraint pk_tplc_t primary key (tplc_tid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=TPN (Узел) */
GO

/*описание*/
create table if not exists tpn_def/*описание здания*/ (
instanceid binary(16) ,
tpn_defid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpn_def' and 
           column_name   = 'addr') then
                alter table tpn_def add 
                addr
 varchar (2000) null /* адрес */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpn_def' and 
           column_name   = 'thephone') then
                alter table tpn_def add 
                thephone
 varchar (40) null /* телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpn_def' and 
           column_name   = 'orgunit') then
                alter table tpn_def add 
                orgunit binary(16) null /* филиал */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpn_def' and 
           constraint_type   = 'primary key') then
            alter table tpn_def add constraint pk_tpn_def primary key (tpn_defid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=bpu (Сотрудник) */
GO

/*данные сотрудника*/
create table if not exists iu_u_def/*данные сотрудника*/ (
instanceid binary(16) ,
iu_u_defid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'theclient') then
                alter table iu_u_def add 
                theclient binary(16) null /* клиент */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'lastname') then
                alter table iu_u_def add 
                lastname
 varchar (120) null /* фамилия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'name') then
                alter table iu_u_def add 
                name
 varchar (120) null /* имя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'surname') then
                alter table iu_u_def add 
                surname
 varchar (120) null /* отчество */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'currole') then
                alter table iu_u_def add 
                currole binary(16) null /* роль в производстве */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'sendtomail') then
                alter table iu_u_def add 
                sendtomail
 integer null /* оповещать по почте */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'freelancer') then
                alter table iu_u_def add 
                freelancer
 integer null /* удаленная работа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'email') then
                alter table iu_u_def add 
                email
 varchar (60) null /* e-mail */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'thephone') then
                alter table iu_u_def add 
                thephone
 varchar (40) null /* телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def' and 
           column_name   = 'login') then
                alter table iu_u_def add 
                login
 varchar (64) null /* имя для входа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'iu_u_def' and 
           constraint_type   = 'primary key') then
            alter table iu_u_def add constraint pk_iu_u_def primary key (iu_u_defid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*данные сотрудника*/
create table if not exists iu_u_def_temp/*данные сотрудника temp table*/ (
sessionid binary(16) ,/*  id текущей сесии пользователя   */ 
instanceid binary(16) ,
iu_u_defid binary(16) not null  
,changestamp datetime not null /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'theclient') then
                alter table iu_u_def_temp add 
                theclient binary(16) null /* клиент */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'lastname') then
                alter table iu_u_def_temp add 
                lastname
 varchar (120) null /* фамилия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'name') then
                alter table iu_u_def_temp add 
                name
 varchar (120) null /* имя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'surname') then
                alter table iu_u_def_temp add 
                surname
 varchar (120) null /* отчество */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'currole') then
                alter table iu_u_def_temp add 
                currole binary(16) null /* роль в производстве */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'sendtomail') then
                alter table iu_u_def_temp add 
                sendtomail
 integer null /* оповещать по почте */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'freelancer') then
                alter table iu_u_def_temp add 
                freelancer
 integer null /* удаленная работа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'email') then
                alter table iu_u_def_temp add 
                email
 varchar (60) null /* e-mail */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'thephone') then
                alter table iu_u_def_temp add 
                thephone
 varchar (40) null /* телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           column_name   = 'login') then
                alter table iu_u_def_temp add 
                login
 varchar (64) null /* имя для входа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'iu_u_def_temp' and 
           constraint_type   = 'primary key') then
            alter table iu_u_def_temp add constraint pk_iu_u_def_temp primary key (sessionid,iu_u_defid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=MTZMetaModel (Спец.: Метамодель системы) */
GO

/*пакет генерации*/
create table if not exists genpackage/*пакет генерации*/ (
instanceid binary(16) ,
genpackageid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'genpackage' and 
           column_name   = 'name') then
                alter table genpackage add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'genpackage' and 
           constraint_type   = 'primary key') then
            alter table genpackage add constraint pk_genpackage primary key (genpackageid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*генераторы*/
create table if not exists generator_target/*генераторы*/ (
parentstructrowid binary(16) not null,
generator_targetid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'generator_target' and 
           column_name   = 'name') then
                alter table generator_target add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'generator_target' and 
           column_name   = 'targettype') then
                alter table generator_target add 
                targettype
 integer null /* тип платформы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'generator_target' and 
           column_name   = 'queuename') then
                alter table generator_target add 
                queuename
 varchar (255) null /* очередь */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'generator_target' and 
           column_name   = 'generatorprogid') then
                alter table generator_target add 
                generatorprogid
 varchar (255) null /* com класс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'generator_target' and 
           column_name   = 'generatorstyle') then
                alter table generator_target add 
                generatorstyle
 integer null /* вариант */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'generator_target' and 
           column_name   = 'thedevelopmentenv') then
                alter table generator_target add 
                thedevelopmentenv
 integer null /* среда разработки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'generator_target' and 
           constraint_type   = 'primary key') then
            alter table generator_target add constraint pk_generator_target primary key (generator_targetid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*библиотеки*/
create table if not exists genreference/*библиотеки, которые используются при генерации*/ (
parentstructrowid binary(16) not null,
genreferenceid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'genreference' and 
           column_name   = 'name') then
                alter table genreference add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'genreference' and 
           column_name   = 'refclassid') then
                alter table genreference add 
                refclassid
 varchar (40) null /* класс ссылки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'genreference' and 
           column_name   = 'versionmajor') then
                alter table genreference add 
                versionmajor
 integer null /* номер версии */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'genreference' and 
           column_name   = 'versionminor') then
                alter table genreference add 
                versionminor
 integer null /* подверсия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'genreference' and 
           constraint_type   = 'primary key') then
            alter table genreference add constraint pk_genreference primary key (genreferenceid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*ручной код*/
create table if not exists genmanualcode/*код, который не укладывается в описание модели*/ (
parentstructrowid binary(16) not null,
genmanualcodeid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'genmanualcode' and 
           column_name   = 'name') then
                alter table genmanualcode add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'genmanualcode' and 
           column_name   = 'the_alias') then
                alter table genmanualcode add 
                the_alias
 varchar (80) null /* псевдоним */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'genmanualcode' and 
           column_name   = 'code') then
                alter table genmanualcode add 
                code
 text null /* код */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'genmanualcode' and 
           constraint_type   = 'primary key') then
            alter table genmanualcode add constraint pk_genmanualcode primary key (genmanualcodeid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*контрольные элементы*/
create table if not exists gencontrols/*контрольные элементы, которые используются при генерации*/ (
parentstructrowid binary(16) not null,
gencontrolsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'gencontrols' and 
           column_name   = 'controlprogid') then
                alter table gencontrols add 
                controlprogid
 varchar (255) null /* progid контрольконо элемента */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'gencontrols' and 
           column_name   = 'controlclassid') then
                alter table gencontrols add 
                controlclassid
 varchar (40) null /* класс контрольногоэлемента */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'gencontrols' and 
           column_name   = 'versionmajor') then
                alter table gencontrols add 
                versionmajor
 integer null /* версия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'gencontrols' and 
           column_name   = 'versionminor') then
                alter table gencontrols add 
                versionminor
 integer null /* подверсия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'gencontrols' and 
           constraint_type   = 'primary key') then
            alter table gencontrols add constraint pk_gencontrols primary key (gencontrolsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*локализация*/
create table if not exists localizeinfo/**/ (
instanceid binary(16) ,
localizeinfoid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'localizeinfo' and 
           column_name   = 'langfull') then
                alter table localizeinfo add 
                langfull
 varchar (255) null /* язык - название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'localizeinfo' and 
           column_name   = 'langshort') then
                alter table localizeinfo add 
                langshort
 varchar (255) null /* код языка */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'localizeinfo' and 
           constraint_type   = 'primary key') then
            alter table localizeinfo add constraint pk_localizeinfo primary key (localizeinfoid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*тип поля*/
create table if not exists fieldtype/*типы полей, перечисления, интервалы*/ (
instanceid binary(16) ,
fieldtypeid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'name') then
                alter table fieldtype add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'typestyle') then
                alter table fieldtype add 
                typestyle
 integer null /* трактовка */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'the_comment') then
                alter table fieldtype add 
                the_comment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'allowsize') then
                alter table fieldtype add 
                allowsize
 integer null /* нужен размер */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'minimum') then
                alter table fieldtype add 
                minimum
 varchar (64) null /* минимум */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'maximum') then
                alter table fieldtype add 
                maximum
 varchar (64) null /* максимум */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'allowlikesearch') then
                alter table fieldtype add 
                allowlikesearch
 integer null /* поиск текста */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'gridsorttype') then
                alter table fieldtype add 
                gridsorttype
 integer null /* вариант сортировки в табличном представлении */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtype' and 
           column_name   = 'delayedsave') then
                alter table fieldtype add 
                delayedsave
 integer null /* отложенное сохранение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fieldtype' and 
           constraint_type   = 'primary key') then
            alter table fieldtype add constraint pk_fieldtype primary key (fieldtypeid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*зачения*/
create table if not exists enumitem/*для описания enum типов*/ (
parentstructrowid binary(16) not null,
enumitemid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'enumitem' and 
           column_name   = 'name') then
                alter table enumitem add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'enumitem' and 
           column_name   = 'namevalue') then
                alter table enumitem add 
                namevalue
 integer null /* значение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'enumitem' and 
           column_name   = 'nameincode') then
                alter table enumitem add 
                nameincode
 varchar (100) null /* название в коде */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'enumitem' and 
           constraint_type   = 'primary key') then
            alter table enumitem add constraint pk_enumitem primary key (enumitemid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*отображение*/
create table if not exists fieldtypemap/*отображение типа поля на физический тип хранения*/ (
parentstructrowid binary(16) not null,
fieldtypemapid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtypemap' and 
           column_name   = 'target') then
                alter table fieldtypemap add 
                target binary(16) null /* платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtypemap' and 
           column_name   = 'stoagetype') then
                alter table fieldtypemap add 
                stoagetype
 varchar (255) null /* тип хранения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldtypemap' and 
           column_name   = 'fixedsize') then
                alter table fieldtypemap add 
                fixedsize
 integer null /* размер */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fieldtypemap' and 
           constraint_type   = 'primary key') then
            alter table fieldtypemap add constraint pk_fieldtypemap primary key (fieldtypemapid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*методы и процедуры*/
create table if not exists sharedmethod/*методы и процедуры*/ (
instanceid binary(16) ,
sharedmethodid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'sharedmethod' and 
           column_name   = 'name') then
                alter table sharedmethod add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'sharedmethod' and 
           column_name   = 'the_comment') then
                alter table sharedmethod add 
                the_comment
 text null /* описание метода */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'sharedmethod' and 
           column_name   = 'returntype') then
                alter table sharedmethod add 
                returntype binary(16) null /* возвращаемый тип */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'sharedmethod' and 
           constraint_type   = 'primary key') then
            alter table sharedmethod add constraint pk_sharedmethod primary key (sharedmethodid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*реализация*/
create table if not exists script/*код метода на понятном конкретному генератору языке*/ (
parentstructrowid binary(16) not null,
scriptid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'script' and 
           column_name   = 'target') then
                alter table script add 
                target binary(16) null /* целевая платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'script' and 
           column_name   = 'code') then
                alter table script add 
                code
 text null /* скрипт */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'script' and 
           constraint_type   = 'primary key') then
            alter table script add constraint pk_script primary key (scriptid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*параметры*/
create table if not exists parameters/*параметры метода*/ (
parentstructrowid binary(16) not null,
parametersid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'sequence') then
                alter table parameters add 
                sequence
 integer null /* последовательность */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'name') then
                alter table parameters add 
                name
 varchar (80) null /* имя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'caption') then
                alter table parameters add 
                caption
 varchar (80) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'typeofparm') then
                alter table parameters add 
                typeofparm binary(16) null /* тип данных */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'datasize') then
                alter table parameters add 
                datasize
 integer null /* размер */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'allownull') then
                alter table parameters add 
                allownull
 integer null /* можно не задавать */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'outparam') then
                alter table parameters add 
                outparam
 integer null /* возвращает значение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'referencetype') then
                alter table parameters add 
                referencetype
 integer null /* тип ссылки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'reftotype') then
                alter table parameters add 
                reftotype binary(16) null /* ссылка на тип */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parameters' and 
           column_name   = 'reftopart') then
                alter table parameters add 
                reftopart binary(16) null /* ссылка на раздел */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'parameters' and 
           constraint_type   = 'primary key') then
            alter table parameters add constraint pk_parameters primary key (parametersid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*тип объекта*/
create table if not exists objecttype/*тип объекта (карточки)*/ (
instanceid binary(16) ,
objecttypeid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'package') then
                alter table objecttype add 
                package binary(16) null /* приложение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'the_comment') then
                alter table objecttype add 
                the_comment
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'name') then
                alter table objecttype add 
                name
 varchar (14) null /* код */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'issingleinstance') then
                alter table objecttype add 
                issingleinstance
 integer null /* допускается только один объект */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'chooseview') then
                alter table objecttype add 
                chooseview binary(16) null /* представление для выбора */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'onrun') then
                alter table objecttype add 
                onrun binary(16) null /* при запуске */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'oncreate') then
                alter table objecttype add 
                oncreate binary(16) null /* при создании */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'ondelete') then
                alter table objecttype add 
                ondelete binary(16) null /* при удалении */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'allowreftoobject') then
                alter table objecttype add 
                allowreftoobject
 integer null /* отображать при выборе ссылки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'allowsearch') then
                alter table objecttype add 
                allowsearch
 integer null /* отображать при поиске */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'replicatype') then
                alter table objecttype add 
                replicatype
 integer null /* тип репликации */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'thecomment') then
                alter table objecttype add 
                thecomment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'useownership') then
                alter table objecttype add 
                useownership
 integer null /* видмость зависит от пользователя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'usearchiving') then
                alter table objecttype add 
                usearchiving
 integer null /* архивировать вместо удаления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'commitfullobject') then
                alter table objecttype add 
                commitfullobject
 integer null /* сохранять объект целиком */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objecttype' and 
           column_name   = 'objiconcls') then
                alter table objecttype add 
                objiconcls
 varchar (80) null /* иконка объекта */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'objecttype' and 
           constraint_type   = 'primary key') then
            alter table objecttype add constraint pk_objecttype primary key (objecttypeid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*состояния*/
create table if not exists objstatus/*возможные логические состояния документа*/ (
parentstructrowid binary(16) not null,
objstatusid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objstatus' and 
           column_name   = 'name') then
                alter table objstatus add 
                name
 varchar (80) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objstatus' and 
           column_name   = 'isstartup') then
                alter table objstatus add 
                isstartup
 integer null /* начальное */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objstatus' and 
           column_name   = 'isarchive') then
                alter table objstatus add 
                isarchive
 integer null /* архивное */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objstatus' and 
           column_name   = 'the_comment') then
                alter table objstatus add 
                the_comment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'objstatus' and 
           constraint_type   = 'primary key') then
            alter table objstatus add constraint pk_objstatus primary key (objstatusid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*разрешенные переходы*/
create table if not exists nextstate/*матрица переходов */ (
parentstructrowid binary(16) not null,
nextstateid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'nextstate' and 
           column_name   = 'thestate') then
                alter table nextstate add 
                thestate binary(16) null /* разрешенное состояние */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'nextstate' and 
           constraint_type   = 'primary key') then
            alter table nextstate add constraint pk_nextstate primary key (nextstateid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*режим работы*/
create table if not exists objectmode/*режим работы*/ (
parentstructrowid binary(16) not null,
objectmodeid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objectmode' and 
           column_name   = 'name') then
                alter table objectmode add 
                name
 varchar (5) null /* название режима */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objectmode' and 
           column_name   = 'defaultmode') then
                alter table objectmode add 
                defaultmode
 integer null /* этот режим является основным режимом работы объекта */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'objectmode' and 
           column_name   = 'thecomment') then
                alter table objectmode add 
                thecomment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'objectmode' and 
           constraint_type   = 'primary key') then
            alter table objectmode add constraint pk_objectmode primary key (objectmodeid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*органичения разделов*/
create table if not exists structrestriction/*ораничения на доступ к разделу документа*/ (
parentstructrowid binary(16) not null,
structrestrictionid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'structrestriction' and 
           column_name   = 'struct') then
                alter table structrestriction add 
                struct binary(16) null /* структура, доступ к которой ограничен */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'structrestriction' and 
           column_name   = 'allowread') then
                alter table structrestriction add 
                allowread
 integer null /* разрешен просмотр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'structrestriction' and 
           column_name   = 'allowadd') then
                alter table structrestriction add 
                allowadd
 integer null /* разрешено добавлять */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'structrestriction' and 
           column_name   = 'allowedit') then
                alter table structrestriction add 
                allowedit
 integer null /* разрешено изменять */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'structrestriction' and 
           column_name   = 'allowdelete') then
                alter table structrestriction add 
                allowdelete
 integer null /* разрешено удалять */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'structrestriction' and 
           constraint_type   = 'primary key') then
            alter table structrestriction add constraint pk_structrestriction primary key (structrestrictionid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*ограничения методов*/
create table if not exists methodrestriction/*ограничение на использование методов раздела*/ (
parentstructrowid binary(16) not null,
methodrestrictionid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'methodrestriction' and 
           column_name   = 'part') then
                alter table methodrestriction add 
                part binary(16) null /* структура, которой принадлежит метод */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'methodrestriction' and 
           column_name   = 'method') then
                alter table methodrestriction add 
                method binary(16) null /* метод */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'methodrestriction' and 
           column_name   = 'isrestricted') then
                alter table methodrestriction add 
                isrestricted
 integer null /* запрещено использовать */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'methodrestriction' and 
           constraint_type   = 'primary key') then
            alter table methodrestriction add constraint pk_methodrestriction primary key (methodrestrictionid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*ограничения полей*/
create table if not exists fieldrestriction/*ограничения на доступ к полям раздела*/ (
parentstructrowid binary(16) not null,
fieldrestrictionid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldrestriction' and 
           column_name   = 'thepart') then
                alter table fieldrestriction add 
                thepart binary(16) null /* структура, которой принадлежит поле */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldrestriction' and 
           column_name   = 'thefield') then
                alter table fieldrestriction add 
                thefield binary(16) null /* поле, на которое накладывается ограничение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldrestriction' and 
           column_name   = 'allowread') then
                alter table fieldrestriction add 
                allowread
 integer null /* разрешен просмотр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldrestriction' and 
           column_name   = 'allowmodify') then
                alter table fieldrestriction add 
                allowmodify
 integer null /* разрешена модификация */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldrestriction' and 
           column_name   = 'mandatoryfield') then
                alter table fieldrestriction add 
                mandatoryfield
 integer null /* обязательное поле */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fieldrestriction' and 
           constraint_type   = 'primary key') then
            alter table fieldrestriction add constraint pk_fieldrestriction primary key (fieldrestrictionid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*методы типа*/
create table if not exists typemenu/*методы уровня типа*/ (
parentstructrowid binary(16) not null,
typemenuid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'typemenu' and 
           column_name   = 'name') then
                alter table typemenu add 
                name
 varchar (64) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'typemenu' and 
           column_name   = 'caption') then
                alter table typemenu add 
                caption
 varchar (80) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'typemenu' and 
           column_name   = 'tooltip') then
                alter table typemenu add 
                tooltip
 varchar (80) null /* подсказка */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'typemenu' and 
           column_name   = 'the_action') then
                alter table typemenu add 
                the_action binary(16) null /* метод */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'typemenu' and 
           column_name   = 'ismenuitem') then
                alter table typemenu add 
                ismenuitem
 integer null /* включать в меню */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'typemenu' and 
           column_name   = 'istoolbarbutton') then
                alter table typemenu add 
                istoolbarbutton
 integer null /* включать в тулбар */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'typemenu' and 
           column_name   = 'hotkey') then
                alter table typemenu add 
                hotkey
 varchar (20) null /* горячая клавиша */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'typemenu' and 
           constraint_type   = 'primary key') then
            alter table typemenu add constraint pk_typemenu primary key (typemenuid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*проверка правильности*/
create table if not exists instancevalidator/*проверка правильности для объекта в целом*/ (
parentstructrowid binary(16) not null,
instancevalidatorid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'instancevalidator' and 
           column_name   = 'target') then
                alter table instancevalidator add 
                target binary(16) null /* платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'instancevalidator' and 
           column_name   = 'code') then
                alter table instancevalidator add 
                code
 text null /* скрипт */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'instancevalidator' and 
           constraint_type   = 'primary key') then
            alter table instancevalidator add constraint pk_instancevalidator primary key (instancevalidatorid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*раздел*/
create table if not exists part/*раздел объекта*/ (
parentstructrowid binary(16) not null,
partid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
,parentrowid binary(16) 
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'sequence') then
                alter table part add 
                sequence
 integer null /* № п/п */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'parttype') then
                alter table part add 
                parttype
 integer null /* тип структры */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'caption') then
                alter table part add 
                caption
 varchar (255) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'name') then
                alter table part add 
                name
 varchar (20) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'the_comment') then
                alter table part add 
                the_comment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'nolog') then
                alter table part add 
                nolog
 integer null /* не записывать в журнал */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'manualregister') then
                alter table part add 
                manualregister
 integer null /* исключить из индексирования */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'oncreate') then
                alter table part add 
                oncreate binary(16) null /* при создании */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'onsave') then
                alter table part add 
                onsave binary(16) null /* при сохранении */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'onrun') then
                alter table part add 
                onrun binary(16) null /* при открытии */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'ondelete') then
                alter table part add 
                ondelete binary(16) null /* при удалении */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'addbehaivor') then
                alter table part add 
                addbehaivor
 integer null /* поведение при добавлении */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'extenderobject') then
                alter table part add 
                extenderobject binary(16) null /* объект расширения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'shablonbrief') then
                alter table part add 
                shablonbrief
 varchar (100) null /* шаблон для краткого отображения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'rulebrief') then
                alter table part add 
                rulebrief
 varchar (500) null /* правило составления brief поля */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'isjormalchange') then
                alter table part add 
                isjormalchange
 integer null /* вести журнал изменений */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'usearchiving') then
                alter table part add 
                usearchiving
 integer null /* архивировать вместо удаления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'integerpkey') then
                alter table part add 
                integerpkey
 integer null /* целочисленный ключ */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'part' and 
           column_name   = 'particoncls') then
                alter table part add 
                particoncls
 varchar (80) null /* иконка раздела */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'part' and 
           constraint_type   = 'primary key') then
            alter table part add constraint pk_part primary key (partid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*методы раздела*/
create table if not exists partmenu/*методы уровня раздела*/ (
parentstructrowid binary(16) not null,
partmenuid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partmenu' and 
           column_name   = 'name') then
                alter table partmenu add 
                name
 varchar (64) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partmenu' and 
           column_name   = 'caption') then
                alter table partmenu add 
                caption
 varchar (80) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partmenu' and 
           column_name   = 'tooltip') then
                alter table partmenu add 
                tooltip
 varchar (80) null /* подсказка */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partmenu' and 
           column_name   = 'the_action') then
                alter table partmenu add 
                the_action binary(16) null /* метод */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partmenu' and 
           column_name   = 'ismenuitem') then
                alter table partmenu add 
                ismenuitem
 integer null /* включать в меню */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partmenu' and 
           column_name   = 'istoolbarbutton') then
                alter table partmenu add 
                istoolbarbutton
 integer null /* в тулбар */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partmenu' and 
           column_name   = 'hotkey') then
                alter table partmenu add 
                hotkey
 varchar (20) null /* горячая клавиша */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'partmenu' and 
           constraint_type   = 'primary key') then
            alter table partmenu add constraint pk_partmenu primary key (partmenuid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*отображение параметров*/
create table if not exists partparammap/*отображение значений полей раздела на параметры метода*/ (
parentstructrowid binary(16) not null,
partparammapid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partparammap' and 
           column_name   = 'fieldname') then
                alter table partparammap add 
                fieldname
 varchar (255) null /* поле (значение) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partparammap' and 
           column_name   = 'paramname') then
                alter table partparammap add 
                paramname
 varchar (80) null /* параметр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partparammap' and 
           column_name   = 'noedit') then
                alter table partparammap add 
                noedit
 integer null /* редактировать параметр нельзя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'partparammap' and 
           constraint_type   = 'primary key') then
            alter table partparammap add constraint pk_partparammap primary key (partparammapid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*представление*/
create table if not exists partview/*вариант представления, который может использоваться для создания журнала*/ (
parentstructrowid binary(16) not null,
partviewid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview' and 
           column_name   = 'name') then
                alter table partview add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview' and 
           column_name   = 'the_alias') then
                alter table partview add 
                the_alias
 varchar (64) null /* псевдоним */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview' and 
           column_name   = 'forchoose') then
                alter table partview add 
                forchoose
 integer null /* для поиска */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview' and 
           column_name   = 'filterfield0') then
                alter table partview add 
                filterfield0
 varchar (255) null /* поле - фильтр 0 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview' and 
           column_name   = 'filterfield1') then
                alter table partview add 
                filterfield1
 varchar (255) null /* поле - фильтр 1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview' and 
           column_name   = 'filterfield2') then
                alter table partview add 
                filterfield2
 varchar (255) null /* поле - фильтр 2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview' and 
           column_name   = 'filterfield3') then
                alter table partview add 
                filterfield3
 varchar (255) null /* поле - фильтр 3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'partview' and 
           constraint_type   = 'primary key') then
            alter table partview add constraint pk_partview primary key (partviewid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*колонка*/
create table if not exists viewcolumn/*колонка пердставления*/ (
parentstructrowid binary(16) not null,
viewcolumnid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'viewcolumn' and 
           column_name   = 'sequence') then
                alter table viewcolumn add 
                sequence
 integer null /* № */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'viewcolumn' and 
           column_name   = 'name') then
                alter table viewcolumn add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'viewcolumn' and 
           column_name   = 'the_alias') then
                alter table viewcolumn add 
                the_alias
 varchar (64) null /* псвдоним */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'viewcolumn' and 
           column_name   = 'frompart') then
                alter table viewcolumn add 
                frompart binary(16) null /* раздел */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'viewcolumn' and 
           column_name   = 'field') then
                alter table viewcolumn add 
                field binary(16) null /* поле */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'viewcolumn' and 
           column_name   = 'aggregation') then
                alter table viewcolumn add 
                aggregation
 integer null /* агрегация */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'viewcolumn' and 
           column_name   = 'expression') then
                alter table viewcolumn add 
                expression
 text null /* формула */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'viewcolumn' and 
           column_name   = 'forcombo') then
                alter table viewcolumn add 
                forcombo
 integer null /* для комбо */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'viewcolumn' and 
           constraint_type   = 'primary key') then
            alter table viewcolumn add constraint pk_viewcolumn primary key (viewcolumnid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*связанные представления*/
create table if not exists partview_lnk/**/ (
parentstructrowid binary(16) not null,
partview_lnkid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview_lnk' and 
           column_name   = 'theview') then
                alter table partview_lnk add 
                theview binary(16) null /* представление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview_lnk' and 
           column_name   = 'thejoinsource') then
                alter table partview_lnk add 
                thejoinsource binary(16) null /* связь: поле для join источник */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview_lnk' and 
           column_name   = 'reftype') then
                alter table partview_lnk add 
                reftype
 integer null /* связывать как */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview_lnk' and 
           column_name   = 'thejoindestination') then
                alter table partview_lnk add 
                thejoindestination binary(16) null /* свзяь: поле для join приемник */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview_lnk' and 
           column_name   = 'handjoin') then
                alter table partview_lnk add 
                handjoin
 varchar (255) null /* ручной join */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'partview_lnk' and 
           column_name   = 'seq') then
                alter table partview_lnk add 
                seq
 integer null /* порядок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'partview_lnk' and 
           constraint_type   = 'primary key') then
            alter table partview_lnk add constraint pk_partview_lnk primary key (partview_lnkid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*логика на форме*/
create table if not exists validator/*действия в впроцессе редактирования*/ (
parentstructrowid binary(16) not null,
validatorid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'validator' and 
           column_name   = 'target') then
                alter table validator add 
                target binary(16) null /* целевая платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'validator' and 
           column_name   = 'code') then
                alter table validator add 
                code
 text null /* скрипт */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'validator' and 
           constraint_type   = 'primary key') then
            alter table validator add constraint pk_validator primary key (validatorid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*ограничение уникальности*/
create table if not exists uniqueconstraint/*ограничение уникальности*/ (
parentstructrowid binary(16) not null,
uniqueconstraintid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'uniqueconstraint' and 
           column_name   = 'name') then
                alter table uniqueconstraint add 
                name
 varchar (80) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'uniqueconstraint' and 
           column_name   = 'perparent') then
                alter table uniqueconstraint add 
                perparent
 integer null /* по родителю */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'uniqueconstraint' and 
           column_name   = 'thecomment') then
                alter table uniqueconstraint add 
                thecomment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'uniqueconstraint' and 
           constraint_type   = 'primary key') then
            alter table uniqueconstraint add constraint pk_uniqueconstraint primary key (uniqueconstraintid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*поля ограничения*/
create table if not exists constraintfield/*поля ограничения*/ (
parentstructrowid binary(16) not null,
constraintfieldid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'constraintfield' and 
           column_name   = 'thefield') then
                alter table constraintfield add 
                thefield binary(16) null /* поле */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'constraintfield' and 
           constraint_type   = 'primary key') then
            alter table constraintfield add constraint pk_constraintfield primary key (constraintfieldid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*интерфейсы расширения*/
create table if not exists extenderinterface/**/ (
parentstructrowid binary(16) not null,
extenderinterfaceid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'extenderinterface' and 
           column_name   = 'thename') then
                alter table extenderinterface add 
                thename
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'extenderinterface' and 
           column_name   = 'targetplatform') then
                alter table extenderinterface add 
                targetplatform binary(16) null /* целевая платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'extenderinterface' and 
           column_name   = 'theobject') then
                alter table extenderinterface add 
                theobject
 varchar (255) null /* объект */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'extenderinterface' and 
           column_name   = 'theconfig') then
                alter table extenderinterface add 
                theconfig
 varchar (512) null /* конфиг */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'extenderinterface' and 
           constraint_type   = 'primary key') then
            alter table extenderinterface add constraint pk_extenderinterface primary key (extenderinterfaceid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*поле*/
create table if not exists field/*поле*/ (
parentstructrowid binary(16) not null,
fieldid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'tabname') then
                alter table field add 
                tabname
 varchar (60) null /* имя вкладки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'fieldgroupbox') then
                alter table field add 
                fieldgroupbox
 varchar (60) null /* имя группы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'sequence') then
                alter table field add 
                sequence
 integer null /* № п/п */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'caption') then
                alter table field add 
                caption
 varchar (80) null /* надпись */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'name') then
                alter table field add 
                name
 varchar (64) null /* имя поля */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'fieldtype') then
                alter table field add 
                fieldtype binary(16) null /* тип поля */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'isbrief') then
                alter table field add 
                isbrief
 integer null /* краткая информация */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'istabbrief') then
                alter table field add 
                istabbrief
 integer null /* для отображения в таблице */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'allownull') then
                alter table field add 
                allownull
 integer null /* может быть пустым */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'datasize') then
                alter table field add 
                datasize
 integer null /* размер поля */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'referencetype') then
                alter table field add 
                referencetype
 integer null /* тип ссылки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'reftotype') then
                alter table field add 
                reftotype binary(16) null /* ссылка на тип */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'reftopart') then
                alter table field add 
                reftopart binary(16) null /* ссылка на раздел */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'thestyle') then
                alter table field add 
                thestyle
 varchar (50) null /* стиль */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'internalreference') then
                alter table field add 
                internalreference
 integer null /* ссылка в пределах объекта */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'createrefonly') then
                alter table field add 
                createrefonly
 integer null /* только создание объекта */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'isautonumber') then
                alter table field add 
                isautonumber
 integer null /* автонумерация */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'thenumerator') then
                alter table field add 
                thenumerator binary(16) null /* нумератор */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'zonetemplate') then
                alter table field add 
                zonetemplate
 varchar (255) null /* шаблон зоны нумерации */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'numberdatefield') then
                alter table field add 
                numberdatefield binary(16) null /* поле для расчета даты */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'thecomment') then
                alter table field add 
                thecomment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'shablonbrief') then
                alter table field add 
                shablonbrief
 varchar (100) null /* шаблон для краткого отображения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'thenameclass') then
                alter table field add 
                thenameclass
 varchar (100) null /* имя класса для мастера строк */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'field' and 
           column_name   = 'themask') then
                alter table field add 
                themask
 varchar (64) null /* маска */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'field' and 
           constraint_type   = 'primary key') then
            alter table field add constraint pk_field primary key (fieldid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*интерфейсы расширения*/
create table if not exists fldextenders/**/ (
parentstructrowid binary(16) not null,
fldextendersid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fldextenders' and 
           column_name   = 'thename') then
                alter table fldextenders add 
                thename
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fldextenders' and 
           column_name   = 'targetplatform') then
                alter table fldextenders add 
                targetplatform binary(16) null /* целевая платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fldextenders' and 
           column_name   = 'theobject') then
                alter table fldextenders add 
                theobject
 varchar (255) null /* объект */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fldextenders' and 
           column_name   = 'theconfig') then
                alter table fldextenders add 
                theconfig
 varchar (512) null /* конфиг */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fldextenders' and 
           constraint_type   = 'primary key') then
            alter table fldextenders add constraint pk_fldextenders primary key (fldextendersid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*описание источника данных*/
create table if not exists fieldsrcdef/*описание источника данных для полей типа referencesql */ (
parentstructrowid binary(16) not null,
fieldsrcdefid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'provider') then
                alter table fieldsrcdef add 
                provider
 varchar (128) null /* провайдер */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'connectionstring') then
                alter table fieldsrcdef add 
                connectionstring
 varchar (512) null /* строка соединения с источником */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'datasource') then
                alter table fieldsrcdef add 
                datasource
 varchar (512) null /* источник данных */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'idfield') then
                alter table fieldsrcdef add 
                idfield
 varchar (128) null /* id */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'briefstring') then
                alter table fieldsrcdef add 
                briefstring
 varchar (512) null /* источник краткой информации */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'filterstring') then
                alter table fieldsrcdef add 
                filterstring
 varchar (512) null /* фильтр источника данных */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'sortfield') then
                alter table fieldsrcdef add 
                sortfield
 varchar (512) null /* сортировка источника данных */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'descriptionstring') then
                alter table fieldsrcdef add 
                descriptionstring
 text null /* примечания */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldsrcdef' and 
           column_name   = 'dontshowdialog') then
                alter table fieldsrcdef add 
                dontshowdialog
 integer null /* не показывать форму выбора */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fieldsrcdef' and 
           constraint_type   = 'primary key') then
            alter table fieldsrcdef add constraint pk_fieldsrcdef primary key (fieldsrcdefid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*динамический фильтр*/
create table if not exists dinamicfilterscript/*выражение для построения дополнительного фильтра для ссылочных полей*/ (
parentstructrowid binary(16) not null,
dinamicfilterscriptid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'dinamicfilterscript' and 
           column_name   = 'target') then
                alter table dinamicfilterscript add 
                target binary(16) null /* целевая платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'dinamicfilterscript' and 
           column_name   = 'code') then
                alter table dinamicfilterscript add 
                code
 text null /* скрипт */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'dinamicfilterscript' and 
           constraint_type   = 'primary key') then
            alter table dinamicfilterscript add constraint pk_dinamicfilterscript primary key (dinamicfilterscriptid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*значение по умолчанию*/
create table if not exists fieldexpression/*выражение для вычисления поля
или значение по умолчанию*/ (
parentstructrowid binary(16) not null,
fieldexpressionid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldexpression' and 
           column_name   = 'target') then
                alter table fieldexpression add 
                target binary(16) null /* платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldexpression' and 
           column_name   = 'code') then
                alter table fieldexpression add 
                code
 text null /* скрипт */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fieldexpression' and 
           constraint_type   = 'primary key') then
            alter table fieldexpression add constraint pk_fieldexpression primary key (fieldexpressionid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*логика поля на форме*/
create table if not exists fieldvalidator/*логика взаимосвязей на форме при изменении поля*/ (
parentstructrowid binary(16) not null,
fieldvalidatorid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldvalidator' and 
           column_name   = 'target') then
                alter table fieldvalidator add 
                target binary(16) null /* платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldvalidator' and 
           column_name   = 'code') then
                alter table fieldvalidator add 
                code
 text null /* скрипт */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fieldvalidator' and 
           constraint_type   = 'primary key') then
            alter table fieldvalidator add constraint pk_fieldvalidator primary key (fieldvalidatorid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*методы поля*/
create table if not exists fieldmenu/*методы, ассоциированные с полем*/ (
parentstructrowid binary(16) not null,
fieldmenuid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldmenu' and 
           column_name   = 'name') then
                alter table fieldmenu add 
                name
 varchar (64) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldmenu' and 
           column_name   = 'caption') then
                alter table fieldmenu add 
                caption
 varchar (80) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldmenu' and 
           column_name   = 'tooltip') then
                alter table fieldmenu add 
                tooltip
 varchar (80) null /* подсказка */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldmenu' and 
           column_name   = 'actionid') then
                alter table fieldmenu add 
                actionid binary(16) null /* идентификатор вызываемого метода */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldmenu' and 
           column_name   = 'ismenuitem') then
                alter table fieldmenu add 
                ismenuitem
 integer null /* в меню */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldmenu' and 
           column_name   = 'istoolbarbutton') then
                alter table fieldmenu add 
                istoolbarbutton
 integer null /* в тулбар */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldmenu' and 
           column_name   = 'hotkey') then
                alter table fieldmenu add 
                hotkey
 varchar (20) null /* горячая клавиша */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fieldmenu' and 
           constraint_type   = 'primary key') then
            alter table fieldmenu add constraint pk_fieldmenu primary key (fieldmenuid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*отображение параметров*/
create table if not exists fieldparammap/*отображение значений на параметры метода*/ (
parentstructrowid binary(16) not null,
fieldparammapid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldparammap' and 
           column_name   = 'fieldname') then
                alter table fieldparammap add 
                fieldname
 varchar (255) null /* поле (значение) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldparammap' and 
           column_name   = 'paramname') then
                alter table fieldparammap add 
                paramname
 varchar (80) null /* параметр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fieldparammap' and 
           column_name   = 'noedit') then
                alter table fieldparammap add 
                noedit
 integer null /* редактировать параметр нельзя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fieldparammap' and 
           constraint_type   = 'primary key') then
            alter table fieldparammap add constraint pk_fieldparammap primary key (fieldparammapid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*приложение*/
create table if not exists mtzapp/*группа взаимосвязных документов*/ (
instanceid binary(16) ,
mtzappid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzapp' and 
           column_name   = 'name') then
                alter table mtzapp add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzapp' and 
           column_name   = 'dbname') then
                alter table mtzapp add 
                dbname
 varchar (64) null /* база данных */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzapp' and 
           column_name   = 'thecomment') then
                alter table mtzapp add 
                thecomment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'mtzapp' and 
           constraint_type   = 'primary key') then
            alter table mtzapp add constraint pk_mtzapp primary key (mtzappid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*обязательные приложения*/
create table if not exists parentpackage/*приложения от которых зависит данное приложение*/ (
parentstructrowid binary(16) not null,
parentpackageid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'parentpackage' and 
           column_name   = 'package') then
                alter table parentpackage add 
                package binary(16) null /* приложение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'parentpackage' and 
           constraint_type   = 'primary key') then
            alter table parentpackage add constraint pk_parentpackage primary key (parentpackageid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=MTZJrnl (Описание журнала) */
GO

/*колонки журнала*/
create table if not exists journalcolumn/*колонки журнала*/ (
instanceid binary(16) ,
journalcolumnid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalcolumn' and 
           column_name   = 'sequence') then
                alter table journalcolumn add 
                sequence
 integer null /* последовательность */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalcolumn' and 
           column_name   = 'name') then
                alter table journalcolumn add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalcolumn' and 
           column_name   = 'columnalignment') then
                alter table journalcolumn add 
                columnalignment
 integer null /* выравнивание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalcolumn' and 
           column_name   = 'colsort') then
                alter table journalcolumn add 
                colsort
 integer null /* сортировка колонки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalcolumn' and 
           column_name   = 'groupaggregation') then
                alter table journalcolumn add 
                groupaggregation
 integer null /* аггрегация при группировке */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'journalcolumn' and 
           constraint_type   = 'primary key') then
            alter table journalcolumn add constraint pk_journalcolumn primary key (journalcolumnid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*состав колонки*/
create table if not exists jcolumnsource/*состав колонки*/ (
parentstructrowid binary(16) not null,
jcolumnsourceid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'jcolumnsource' and 
           column_name   = 'srcpartview') then
                alter table jcolumnsource add 
                srcpartview binary(16) null /* представление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'jcolumnsource' and 
           column_name   = 'viewfield') then
                alter table jcolumnsource add 
                viewfield
 varchar (255) null /* поле представления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'jcolumnsource' and 
           constraint_type   = 'primary key') then
            alter table jcolumnsource add constraint pk_jcolumnsource primary key (jcolumnsourceid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*источники журнала*/
create table if not exists journalsrc/*источники журнала*/ (
instanceid binary(16) ,
journalsrcid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalsrc' and 
           column_name   = 'partview') then
                alter table journalsrc add 
                partview binary(16) null /* представление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalsrc' and 
           column_name   = 'onrun') then
                alter table journalsrc add 
                onrun
 integer null /* при открытии */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalsrc' and 
           column_name   = 'openmode') then
                alter table journalsrc add 
                openmode
 varchar (64) null /* режим открытия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journalsrc' and 
           column_name   = 'viewalias') then
                alter table journalsrc add 
                viewalias
 varchar (255) null /* псевдоним представления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'journalsrc' and 
           constraint_type   = 'primary key') then
            alter table journalsrc add constraint pk_journalsrc primary key (journalsrcid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*журнал*/
create table if not exists journal/*журнал*/ (
instanceid binary(16) ,
journalid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journal' and 
           column_name   = 'name') then
                alter table journal add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journal' and 
           column_name   = 'the_alias') then
                alter table journal add 
                the_alias
 varchar (32) null /* псевдоним */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journal' and 
           column_name   = 'thecomment') then
                alter table journal add 
                thecomment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journal' and 
           column_name   = 'jrnliconcls') then
                alter table journal add 
                jrnliconcls
 varchar (80) null /* иконка журнала */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'journal' and 
           column_name   = 'usefavorites') then
                alter table journal add 
                usefavorites
 integer null /* массовое выделение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'journal' and 
           constraint_type   = 'primary key') then
            alter table journal add constraint pk_journal primary key (journalid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=bpc (Клиент) */
GO

/*описание*/
create table if not exists bpc_info/*описание клиента*/ (
instanceid binary(16) ,
bpc_infoid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'bpc_info' and 
           column_name   = 'name') then
                alter table bpc_info add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'bpc_info' and 
           constraint_type   = 'primary key') then
            alter table bpc_info add constraint pk_bpc_info primary key (bpc_infoid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=MTZSystem (Спец.: Системные данные) */
GO

/*сессия пользователя*/
create table if not exists the_session/*зарегистрированные сессии пользователей*/ (
instanceid binary(16) ,
the_sessionid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'applicationid') then
                alter table the_session add 
                applicationid binary(16) null /* приложение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'userrole') then
                alter table the_session add 
                userrole binary(16) null /* текущая роль пользователя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'closedat') then
                alter table the_session add 
                closedat
 datetime null /* момент закрытия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'closed') then
                alter table the_session add 
                closed
 integer null /* закрыта */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'usersid') then
                alter table the_session add 
                usersid binary(16) null /* пользователь */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'lastaccess') then
                alter table the_session add 
                lastaccess
 datetime null /* последнее подтверждение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'startat') then
                alter table the_session add 
                startat
 datetime null /* момент открытия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'lang') then
                alter table the_session add 
                lang
 varchar (25) null /* локализация */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'the_session' and 
           column_name   = 'login') then
                alter table the_session add 
                login
 varchar (255) null /* login */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'the_session' and 
           constraint_type   = 'primary key') then
            alter table the_session add constraint pk_the_session primary key (the_sessionid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*разрешенные владельцы*/
create table if not exists sysrefcache/*владельцы информации для к объектам которых
разрешен достуа для  текущей сесии*/ (
instanceid binary(16) ,
sysrefcacheid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'sysrefcache' and 
           column_name   = 'cachetype') then
                alter table sysrefcache add 
                cachetype
 integer null /* тип кеширования */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'sysrefcache' and 
           column_name   = 'objectownerid') then
                alter table sysrefcache add 
                objectownerid binary(16) null /* идентификатор владельца */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'sysrefcache' and 
           column_name   = 'sessionid') then
                alter table sysrefcache add 
                sessionid binary(16) null /* сессия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'sysrefcache' and 
           column_name   = 'modulename') then
                alter table sysrefcache add 
                modulename
 varchar (40) null /* модуль */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'sysrefcache' and 
           constraint_type   = 'primary key') then
            alter table sysrefcache add constraint pk_sysrefcache primary key (sysrefcacheid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*журнал событий*/
create table if not exists syslog/*журнал событий, которые произошли в системе*/ (
instanceid binary(16) ,
syslogid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'syslog' and 
           column_name   = 'thesession') then
                alter table syslog add 
                thesession binary(16) null /* сессия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'syslog' and 
           column_name   = 'the_resource') then
                alter table syslog add 
                the_resource
 varchar (255) null /* ресурс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'syslog' and 
           column_name   = 'logstructid') then
                alter table syslog add 
                logstructid
 varchar (255) null /* раздел с которым происхоит действие */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'syslog' and 
           column_name   = 'verb') then
                alter table syslog add 
                verb
 varchar (80) null /* действие */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'syslog' and 
           column_name   = 'loginstanceid') then
                alter table syslog add 
                loginstanceid binary(16) null /* идентификатор документа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'syslog' and 
           constraint_type   = 'primary key') then
            alter table syslog add constraint pk_syslog primary key (syslogid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=TPLS (Схема подключения) */
GO

/*схема подключения*/
create table if not exists tpls_info/*схема подключения*/ (
instanceid binary(16) ,
tpls_infoid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_info' and 
           column_name   = 'name') then
                alter table tpls_info add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_info' and 
           column_name   = 'schema_imagefile_ext') then
        alter table tpls_info add 
            schema_imagefile_ext nvarchar(4) null;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_info' and 
           column_name   = 'schema_imagefile') then
                alter table tpls_info add 
                schema_imagefile varchar(255) null /* изображение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpls_info' and 
           constraint_type   = 'primary key') then
            alter table tpls_info add constraint pk_tpls_info primary key (tpls_infoid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*параметры на схеме*/
create table if not exists tpls_param/*параметры на схеме*/ (
instanceid binary(16) ,
tpls_paramid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_param' and 
           column_name   = 'archtype') then
                alter table tpls_param add 
                archtype binary(16) null /* тип архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_param' and 
           column_name   = 'param') then
                alter table tpls_param add 
                param binary(16) null /* параметр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_param' and 
           column_name   = 'pos_left') then
                alter table tpls_param add 
                pos_left
 double null /* x */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_param' and 
           column_name   = 'pos_top') then
                alter table tpls_param add 
                pos_top
 double null /* y */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_param' and 
           column_name   = 'hideparam') then
                alter table tpls_param add 
                hideparam
 integer null /* скрыть */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpls_param' and 
           column_name   = 'hideonschema') then
                alter table tpls_param add 
                hideonschema
 integer null /* не отображать на схеме */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpls_param' and 
           constraint_type   = 'primary key') then
            alter table tpls_param add constraint pk_tpls_param primary key (tpls_paramid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=MTZwp (Описание АРМ) */
GO

/*поведение журналов*/
create table if not exists armjournal/*описание действий журанлов*/ (
instanceid binary(16) ,
armjournalid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'armjournal' and 
           column_name   = 'thejournal') then
                alter table armjournal add 
                thejournal binary(16) null /* журнал */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'armjournal' and 
           constraint_type   = 'primary key') then
            alter table armjournal add constraint pk_armjournal primary key (armjournalid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*отчеты*/
create table if not exists armjrnlrep/*отчеты из журнала*/ (
parentstructrowid binary(16) not null,
armjrnlrepid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'armjrnlrep' and 
           column_name   = 'repname') then
                alter table armjrnlrep add 
                repname
 varchar (255) null /* название отчета */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'armjrnlrep' and 
           column_name   = 'thereport') then
                alter table armjrnlrep add 
                thereport binary(16) null /* отчет */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'armjrnlrep' and 
           constraint_type   = 'primary key') then
            alter table armjrnlrep add constraint pk_armjrnlrep primary key (armjrnlrepid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*действия*/
create table if not exists armjrnlrun/*дополнительные действия в журнале*/ (
parentstructrowid binary(16) not null,
armjrnlrunid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'armjrnlrun' and 
           column_name   = 'name') then
                alter table armjrnlrun add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'armjrnlrun' and 
           column_name   = 'theextention') then
                alter table armjrnlrun add 
                theextention binary(16) null /* расширение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'armjrnlrun' and 
           constraint_type   = 'primary key') then
            alter table armjrnlrun add constraint pk_armjrnlrun primary key (armjrnlrunid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*добавление*/
create table if not exists armjrnladd/*варианты обработки добавления*/ (
parentstructrowid binary(16) not null,
armjrnladdid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'armjrnladd' and 
           column_name   = 'name') then
                alter table armjrnladd add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'armjrnladd' and 
           column_name   = 'theextention') then
                alter table armjrnladd add 
                theextention binary(16) null /* расширение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'armjrnladd' and 
           constraint_type   = 'primary key') then
            alter table armjrnladd add constraint pk_armjrnladd primary key (armjrnladdid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*меню*/
create table if not exists entrypoints/*меню*/ (
instanceid binary(16) ,
entrypointsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
,parentrowid binary(16) 
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'sequence') then
                alter table entrypoints add 
                sequence
 integer null /* последовательность */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'name') then
                alter table entrypoints add 
                name
 varchar (38) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'caption') then
                alter table entrypoints add 
                caption
 varchar (255) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'astoolbaritem') then
                alter table entrypoints add 
                astoolbaritem
 integer null /* включить в тулбар */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'actiontype') then
                alter table entrypoints add 
                actiontype
 integer null /* вариант действия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'thefilter') then
                alter table entrypoints add 
                thefilter binary(16) null /* фильтр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'journal') then
                alter table entrypoints add 
                journal binary(16) null /* журнал */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'report') then
                alter table entrypoints add 
                report binary(16) null /* отчет */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'document') then
                alter table entrypoints add 
                document binary(16) null /* документ */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'method') then
                alter table entrypoints add 
                method binary(16) null /* метод */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'iconfile') then
                alter table entrypoints add 
                iconfile
 varchar (2000) null /* файл картинки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'theextention') then
                alter table entrypoints add 
                theextention binary(16) null /* расширение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'arm') then
                alter table entrypoints add 
                arm binary(16) null /* арм */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'thecomment') then
                alter table entrypoints add 
                thecomment
 text null /* примечание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'objecttype') then
                alter table entrypoints add 
                objecttype binary(16) null /* тип документа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'journalfixedquery') then
                alter table entrypoints add 
                journalfixedquery
 text null /* ограничения к журналу */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'allowadd') then
                alter table entrypoints add 
                allowadd
 integer null /* разрешено добавление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'allowedit') then
                alter table entrypoints add 
                allowedit
 integer null /* разрешено редактирование */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'allowdel') then
                alter table entrypoints add 
                allowdel
 integer null /* рарешено удаление */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'allowfilter') then
                alter table entrypoints add 
                allowfilter
 integer null /* разрешен фильтр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'entrypoints' and 
           column_name   = 'allowprint') then
                alter table entrypoints add 
                allowprint
 integer null /* разрешена печать */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'entrypoints' and 
           constraint_type   = 'primary key') then
            alter table entrypoints add constraint pk_entrypoints primary key (entrypointsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*привязка фильтра*/
create table if not exists epfilterlink/*привязка фильтра к журналу*/ (
parentstructrowid binary(16) not null,
epfilterlinkid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'epfilterlink' and 
           column_name   = 'rowsource') then
                alter table epfilterlink add 
                rowsource
 varchar (255) null /* источник */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'epfilterlink' and 
           column_name   = 'theexpression') then
                alter table epfilterlink add 
                theexpression
 text null /* выражение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'epfilterlink' and 
           column_name   = 'filterfield') then
                alter table epfilterlink add 
                filterfield
 varchar (255) null /* поле фильтра */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'epfilterlink' and 
           constraint_type   = 'primary key') then
            alter table epfilterlink add constraint pk_epfilterlink primary key (epfilterlinkid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*арм*/
create table if not exists workplace/*арм*/ (
instanceid binary(16) ,
workplaceid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'workplace' and 
           column_name   = 'name') then
                alter table workplace add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'workplace' and 
           column_name   = 'caption') then
                alter table workplace add 
                caption
 varchar (255) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'workplace' and 
           column_name   = 'theversion') then
                alter table workplace add 
                theversion
 varchar (30) null /* версия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'workplace' and 
           column_name   = 'theplatform') then
                alter table workplace add 
                theplatform
 integer null /* платформа реализации */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'workplace' and 
           column_name   = 'thecomment') then
                alter table workplace add 
                thecomment
 text null /* примечание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'workplace' and 
           constraint_type   = 'primary key') then
            alter table workplace add constraint pk_workplace primary key (workplaceid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*список типов*/
create table if not exists armtypes/*типы документов, которые подключаются в mdi режиме*/ (
instanceid binary(16) ,
armtypesid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'armtypes' and 
           column_name   = 'thedocumenttype') then
                alter table armtypes add 
                thedocumenttype binary(16) null /* тип документа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'armtypes' and 
           constraint_type   = 'primary key') then
            alter table armtypes add constraint pk_armtypes primary key (armtypesid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=bpdr (Роль сотрудника) */
GO

/*роль*/
create table if not exists iu_crole/*роль в процессе производства*/ (
instanceid binary(16) ,
iu_croleid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_crole' and 
           column_name   = 'archived') then
                alter table iu_crole add 
                archived int null default 0;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_crole' and 
           column_name   = 'name') then
                alter table iu_crole add 
                name
 varchar (120) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_crole' and 
           column_name   = 'allowsetuser') then
                alter table iu_crole add 
                allowsetuser
 integer null /* требует явного назначения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'iu_crole' and 
           constraint_type   = 'primary key') then
            alter table iu_crole add constraint pk_iu_crole primary key (iu_croleid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=TPLD (Справочник) */
GO

/*тип подключения*/
create table if not exists tpld_connecttype/*тип подключения*/ (
instanceid binary(16) ,
tpld_connecttypeid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_connecttype' and 
           column_name   = 'name') then
                alter table tpld_connecttype add 
                name
 varchar (128) null /* название  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_connecttype' and 
           constraint_type   = 'primary key') then
            alter table tpld_connecttype add constraint pk_tpld_connecttype primary key (tpld_connecttypeid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*класс устройства*/
create table if not exists tpld_devclass/*справочник классов устройств
тепло, электричество и т.п.*/ (
instanceid binary(16) ,
tpld_devclassid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_devclass' and 
           column_name   = 'name') then
                alter table tpld_devclass add 
                name
 varchar (128) null /* название  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_devclass' and 
           constraint_type   = 'primary key') then
            alter table tpld_devclass add constraint pk_tpld_devclass primary key (tpld_devclassid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*филиал организации*/
create table if not exists tpld_f/*филиал организации*/ (
instanceid binary(16) ,
tpld_fid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_f' and 
           column_name   = 'name') then
                alter table tpld_f add 
                name
 varchar (128) null /* название  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_f' and 
           constraint_type   = 'primary key') then
            alter table tpld_f add constraint pk_tpld_f primary key (tpld_fid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*снабжающая организация*/
create table if not exists tpld_snab/*снабжающая организация*/ (
instanceid binary(16) ,
tpld_snabid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snab' and 
           column_name   = 'cname') then
                alter table tpld_snab add 
                cname
 varchar (128) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snab' and 
           column_name   = 'caddress') then
                alter table tpld_snab add 
                caddress
 varchar (400) null /* адрес */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snab' and 
           column_name   = 'cfio') then
                alter table tpld_snab add 
                cfio
 varchar (128) null /* контактное лицо */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snab' and 
           column_name   = 'cphone') then
                alter table tpld_snab add 
                cphone
 varchar (64) null /* телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snab' and 
           column_name   = 'cregion') then
                alter table tpld_snab add 
                cregion
 varchar (128) null /* регион */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snab' and 
           column_name   = 'supplier') then
                alter table tpld_snab add 
                supplier binary(16) null /* поставщик */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_snab' and 
           constraint_type   = 'primary key') then
            alter table tpld_snab add constraint pk_tpld_snab primary key (tpld_snabid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*тип архива*/
create table if not exists tpld_paramtype/*тип архива*/ (
instanceid binary(16) ,
tpld_paramtypeid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_paramtype' and 
           column_name   = 'name') then
                alter table tpld_paramtype add 
                name
 varchar (64) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_paramtype' and 
           column_name   = 'thecode') then
                alter table tpld_paramtype add 
                thecode
 varchar (1) null /* код  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_paramtype' and 
           constraint_type   = 'primary key') then
            alter table tpld_paramtype add constraint pk_tpld_paramtype primary key (tpld_paramtypeid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*группа*/
create table if not exists tpld_grp/*группы узлов учета*/ (
instanceid binary(16) ,
tpld_grpid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_grp' and 
           column_name   = 'theclient') then
                alter table tpld_grp add 
                theclient binary(16) null /* клиент */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_grp' and 
           column_name   = 'cgrpnm') then
                alter table tpld_grp add 
                cgrpnm
 varchar (72) null /* название группы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_grp' and 
           column_name   = 'ctxt') then
                alter table tpld_grp add 
                ctxt
 varchar (800) null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_grp' and 
           constraint_type   = 'primary key') then
            alter table tpld_grp add constraint pk_tpld_grp primary key (tpld_grpid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*поставщик*/
create table if not exists tpld_snabtop/**/ (
instanceid binary(16) ,
tpld_snabtopid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snabtop' and 
           column_name   = 'cname') then
                alter table tpld_snabtop add 
                cname
 varchar (128) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snabtop' and 
           column_name   = 'caddress') then
                alter table tpld_snabtop add 
                caddress
 varchar (400) null /* адрес */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snabtop' and 
           column_name   = 'cfio') then
                alter table tpld_snabtop add 
                cfio
 varchar (128) null /* контактное лицо */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snabtop' and 
           column_name   = 'cphone') then
                alter table tpld_snabtop add 
                cphone
 varchar (64) null /* телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_snabtop' and 
           column_name   = 'cregion') then
                alter table tpld_snabtop add 
                cregion
 varchar (128) null /* регион */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_snabtop' and 
           constraint_type   = 'primary key') then
            alter table tpld_snabtop add constraint pk_tpld_snabtop primary key (tpld_snabtopid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*параметры*/
create table if not exists tpld_param/*параметры*/ (
instanceid binary(16) ,
tpld_paramid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_param' and 
           column_name   = 'name') then
                alter table tpld_param add 
                name
 varchar (128) null /* название  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_param' and 
           column_name   = 'paramfield') then
                alter table tpld_param add 
                paramfield
 varchar (128) null /* поле */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_param' and 
           column_name   = 'showas') then
                alter table tpld_param add 
                showas
 integer null /* отображать как */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_param' and 
           constraint_type   = 'primary key') then
            alter table tpld_param add constraint pk_tpld_param primary key (tpld_paramid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*тип устройства*/
create table if not exists tpld_devtype/*тип устройства*/ (
instanceid binary(16) ,
tpld_devtypeid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_devtype' and 
           column_name   = 'devclass') then
                alter table tpld_devtype add 
                devclass binary(16) null /* класс устройства */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_devtype' and 
           column_name   = 'name') then
                alter table tpld_devtype add 
                name
 varchar (128) null /* название  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpld_devtype' and 
           column_name   = 'driverlibname') then
                alter table tpld_devtype add 
                driverlibname
 varchar (255) null /* библиотека драйвера */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpld_devtype' and 
           constraint_type   = 'primary key') then
            alter table tpld_devtype add constraint pk_tpld_devtype primary key (tpld_devtypeid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=MTZUsers (Справочник: пользователи) */
GO

/*пользователи*/
create table if not exists users/*пользователи*/ (
instanceid binary(16) ,
usersid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'family') then
                alter table users add 
                family
 varchar (255) null /* фамилия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'name') then
                alter table users add 
                name
 varchar (64) null /* имя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'surname') then
                alter table users add 
                surname
 varchar (255) null /* отчество */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'login') then
                alter table users add 
                login
 varchar (64) null /* имя для входа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'password') then
                alter table users add 
                password varchar(80) null /* пароль */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'domainame') then
                alter table users add 
                domainame
 varchar (255) null /* доменное имя */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'email') then
                alter table users add 
                email varchar(255) null /* e-mail */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'phone') then
                alter table users add 
                phone
 varchar (20) null /* телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'users' and 
           column_name   = 'localphone') then
                alter table users add 
                localphone
 varchar (20) null /* местный телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'users' and 
           constraint_type   = 'primary key') then
            alter table users add constraint pk_users primary key (usersid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*группы*/
create table if not exists groups/*группы*/ (
instanceid binary(16) ,
groupsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'groups' and 
           column_name   = 'name') then
                alter table groups add 
                name
 varchar (80) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'groups' and 
           column_name   = 'adgroup') then
                alter table groups add 
                adgroup
 varchar (255) null /* группа ad */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'groups' and 
           constraint_type   = 'primary key') then
            alter table groups add constraint pk_groups primary key (groupsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*состав группы*/
create table if not exists groupuser/*состав группы*/ (
parentstructrowid binary(16) not null,
groupuserid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'groupuser' and 
           column_name   = 'theuser') then
                alter table groupuser add 
                theuser binary(16) null /* пользователь */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'groupuser' and 
           constraint_type   = 'primary key') then
            alter table groupuser add constraint pk_groupuser primary key (groupuserid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=TPSRV (Сервер) */
GO

/*модемы*/
create table if not exists tpsrv_modems/*модемы подключенные к данному серверу*/ (
instanceid binary(16) ,
tpsrv_modemsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_modems' and 
           column_name   = 'portnum') then
                alter table tpsrv_modems add 
                portnum
 varchar (20) null /* номер ком порта */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_modems' and 
           column_name   = 'isusable') then
                alter table tpsrv_modems add 
                isusable
 integer null /* может использоваться сервером */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_modems' and 
           column_name   = 'isused') then
                alter table tpsrv_modems add 
                isused
 integer null /* занят */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_modems' and 
           column_name   = 'useduntil') then
                alter table tpsrv_modems add 
                useduntil
 datetime null /* занят до */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpsrv_modems' and 
           constraint_type   = 'primary key') then
            alter table tpsrv_modems add constraint pk_tpsrv_modems primary key (tpsrv_modemsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*описание сервера*/
create table if not exists tpsrv_info/**/ (
instanceid binary(16) ,
tpsrv_infoid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_info' and 
           column_name   = 'name') then
                alter table tpsrv_info add 
                name
 varchar (255) null /* имя сервера */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_info' and 
           column_name   = 'ipaddr') then
                alter table tpsrv_info add 
                ipaddr
 varchar (20) null /* ip сервера */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpsrv_info' and 
           constraint_type   = 'primary key') then
            alter table tpsrv_info add constraint pk_tpsrv_info primary key (tpsrv_infoid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*ком порты*/
create table if not exists tpsrv_ports/*порты для установки прямой связи с тепловычислителем*/ (
instanceid binary(16) ,
tpsrv_portsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_ports' and 
           column_name   = 'portname') then
                alter table tpsrv_ports add 
                portname
 varchar (20) null /* номер порта */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_ports' and 
           column_name   = 'isusable') then
                alter table tpsrv_ports add 
                isusable
 integer null /* может использоваться сервером */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_ports' and 
           column_name   = 'isused') then
                alter table tpsrv_ports add 
                isused
 integer null /* занят */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpsrv_ports' and 
           column_name   = 'useduntil') then
                alter table tpsrv_ports add 
                useduntil
 datetime null /* занят до */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpsrv_ports' and 
           constraint_type   = 'primary key') then
            alter table tpsrv_ports add constraint pk_tpsrv_ports primary key (tpsrv_portsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=STDNumerator (Нумератор) */
GO

/*зоны*/
create table if not exists num_zones/*зоны уникальных нумеров*/ (
instanceid binary(16) ,
num_zonesid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'num_zones' and 
           column_name   = 'zonemask') then
                alter table num_zones add 
                zonemask
 varchar (255) null /* маска зоны */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'num_zones' and 
           constraint_type   = 'primary key') then
            alter table num_zones add constraint pk_num_zones primary key (num_zonesid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*номера*/
create table if not exists num_values/*уникальные номера*/ (
parentstructrowid binary(16) not null,
num_valuesid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'num_values' and 
           column_name   = 'the_value') then
                alter table num_values add 
                the_value
 integer null /* значение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'num_values' and 
           column_name   = 'ownerpartname') then
                alter table num_values add 
                ownerpartname
 varchar (64) null /* раздел */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'num_values' and 
           column_name   = 'ownerrowid') then
                alter table num_values add 
                ownerrowid binary(16) null /* идентификатор строки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'num_values' and 
           constraint_type   = 'primary key') then
            alter table num_values add constraint pk_num_values primary key (num_valuesid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*описание*/
create table if not exists num_head/*описание нумератора*/ (
instanceid binary(16) ,
num_headid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'num_head' and 
           column_name   = 'name') then
                alter table num_head add 
                name
 varchar (80) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'num_head' and 
           column_name   = 'shema') then
                alter table num_head add 
                shema
 integer null /* схема нумерации */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'num_head' and 
           constraint_type   = 'primary key') then
            alter table num_head add constraint pk_num_head primary key (num_headid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=TPLT (Устройство) */
GO

/*отчеты*/
create table if not exists tplt_reports/**/ (
instanceid binary(16) ,
tplt_reportsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_reports' and 
           column_name   = 'reptype') then
                alter table tplt_reports add 
                reptype binary(16) null /* данные */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_reports' and 
           column_name   = 'name') then
                alter table tplt_reports add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_reports' and 
           column_name   = 'thefile_ext') then
        alter table tplt_reports add 
            thefile_ext nvarchar(4) null;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_reports' and 
           column_name   = 'thefile') then
                alter table tplt_reports add 
                thefile varchar(255) null /* файл */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplt_reports' and 
           constraint_type   = 'primary key') then
            alter table tplt_reports add constraint pk_tplt_reports primary key (tplt_reportsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*параметры соединения*/
create table if not exists tplt_connect/*параметр компорта в узлах учета*/ (
instanceid binary(16) ,
tplt_connectid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'connectionenabled') then
                alter table tplt_connect add 
                connectionenabled
 integer null /* подключение разрешено */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'connecttype') then
                alter table tplt_connect add 
                connecttype binary(16) null /* тип подключения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'connectlimit') then
                alter table tplt_connect add 
                connectlimit
 double null /* время на соединение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'theserver') then
                alter table tplt_connect add 
                theserver binary(16) null /* сервер опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'netaddr') then
                alter table tplt_connect add 
                netaddr
 integer null /* сетевой адрес */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'cspeed') then
                alter table tplt_connect add 
                cspeed
 varchar (12) null /* скорость бод */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'cdatabit') then
                alter table tplt_connect add 
                cdatabit
 varchar (2) null /* биты данных */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'cparity') then
                alter table tplt_connect add 
                cparity
 integer null /* четность */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'cstopbits') then
                alter table tplt_connect add 
                cstopbits
 integer null /* стоповые биты */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'flowcontrol') then
                alter table tplt_connect add 
                flowcontrol
 varchar (2) null /* flowcontrol */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'comportnum') then
                alter table tplt_connect add 
                comportnum
 varchar (6) null /* com port */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'ipaddr') then
                alter table tplt_connect add 
                ipaddr
 varchar (15) null /* ip адрес */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'portnum') then
                alter table tplt_connect add 
                portnum
 integer null /* tcp порт */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'username') then
                alter table tplt_connect add 
                username
 varchar (100) null /* пользователь */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'password') then
                alter table tplt_connect add 
                password
 varchar (100) null /* пароль */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'ctowncode') then
                alter table tplt_connect add 
                ctowncode
 varchar (32) null /* код города */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'cphone') then
                alter table tplt_connect add 
                cphone
 varchar (48) null /* телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'atcommand') then
                alter table tplt_connect add 
                atcommand
 text null /* at команда */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_connect' and 
           column_name   = 'callerid') then
                alter table tplt_connect add 
                callerid
 varchar (64) null /* идентификатор промеж. устройства */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplt_connect' and 
           constraint_type   = 'primary key') then
            alter table tplt_connect add constraint pk_tplt_connect primary key (tplt_connectid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*граничные значения*/
create table if not exists tplt_valuebounds/*граничные значения проверяемых параметров*/ (
instanceid binary(16) ,
tplt_valueboundsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_valuebounds' and 
           column_name   = 'pname') then
                alter table tplt_valuebounds add 
                pname binary(16) null /* параметр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_valuebounds' and 
           column_name   = 'ptype') then
                alter table tplt_valuebounds add 
                ptype binary(16) null /* тип архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_valuebounds' and 
           column_name   = 'pmin') then
                alter table tplt_valuebounds add 
                pmin
 double null /* минимальное значение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_valuebounds' and 
           column_name   = 'pmax') then
                alter table tplt_valuebounds add 
                pmax
 double null /* максимальное значение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_valuebounds' and 
           column_name   = 'ismin') then
                alter table tplt_valuebounds add 
                ismin
 integer null /* проверять на минимум */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_valuebounds' and 
           column_name   = 'ismax') then
                alter table tplt_valuebounds add 
                ismax
 integer null /* проверять на максимум */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplt_valuebounds' and 
           constraint_type   = 'primary key') then
            alter table tplt_valuebounds add constraint pk_tplt_valuebounds primary key (tplt_valueboundsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*план опроса устройств*/
create table if not exists tplt_plancall/*план опроса устройств*/ (
instanceid binary(16) ,
tplt_plancallid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'cstatus') then
                alter table tplt_plancall add 
                cstatus
 integer null /* исключить из опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'nmaxcall') then
                alter table tplt_plancall add 
                nmaxcall
 integer null /* max число попыток дозвона */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'minrepeat') then
                alter table tplt_plancall add 
                minrepeat
 integer null /* повторить через (минут) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dlock') then
                alter table tplt_plancall add 
                dlock
 datetime null /* когда заблокирован */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dlastcall') then
                alter table tplt_plancall add 
                dlastcall
 datetime null /* последний опрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'ccurr') then
                alter table tplt_plancall add 
                ccurr
 integer null /* опрашивать текущие */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'icallcurr') then
                alter table tplt_plancall add 
                icallcurr
 integer null /* интервал (минут)  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dnextcurr') then
                alter table tplt_plancall add 
                dnextcurr
 datetime null /* следующий опрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'chour') then
                alter table tplt_plancall add 
                chour
 integer null /* опрашивать ч. */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'icall') then
                alter table tplt_plancall add 
                icall
 integer null /* интервал опроса (минут) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'numhour') then
                alter table tplt_plancall add 
                numhour
 integer null /* за сколько часов */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dnexthour') then
                alter table tplt_plancall add 
                dnexthour
 datetime null /* следующий опрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dlasthour') then
                alter table tplt_plancall add 
                dlasthour
 datetime null /* последний опрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'c24') then
                alter table tplt_plancall add 
                c24
 integer null /* опрашивать с. */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'icall24') then
                alter table tplt_plancall add 
                icall24
 integer null /* интервал (часов) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'num24') then
                alter table tplt_plancall add 
                num24
 integer null /* за сколько суток */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dnext24') then
                alter table tplt_plancall add 
                dnext24
 datetime null /* следующий опрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dlastday') then
                alter table tplt_plancall add 
                dlastday
 datetime null /* последний опрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'csum') then
                alter table tplt_plancall add 
                csum
 integer null /* опрашивать ит. */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'icallsum') then
                alter table tplt_plancall add 
                icallsum
 integer null /* интервал  (минут)  */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dnextsum') then
                alter table tplt_plancall add 
                dnextsum
 datetime null /* следующий опрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'cel') then
                alter table tplt_plancall add 
                cel
 integer null /* опрашивать эл. */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'iel') then
                alter table tplt_plancall add 
                iel
 integer null /* интервал (мин.) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_plancall' and 
           column_name   = 'dnextel') then
                alter table tplt_plancall add 
                dnextel
 date null /* дата следующего опроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplt_plancall' and 
           constraint_type   = 'primary key') then
            alter table tplt_plancall add constraint pk_tplt_plancall primary key (tplt_plancallid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*параметры для вывода*/
create table if not exists tplt_mask/*список параметров для вывода*/ (
instanceid binary(16) ,
tplt_maskid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_mask' and 
           column_name   = 'ptype') then
                alter table tplt_mask add 
                ptype binary(16) null /* тип архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_mask' and 
           column_name   = 'sequence') then
                alter table tplt_mask add 
                sequence
 integer null /* порядок вывода */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_mask' and 
           column_name   = 'pname') then
                alter table tplt_mask add 
                pname binary(16) null /* параметр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_mask' and 
           column_name   = 'paramformat') then
                alter table tplt_mask add 
                paramformat
 varchar (10) null /* формат */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_mask' and 
           column_name   = 'colwidth') then
                alter table tplt_mask add 
                colwidth
 double null /* ширина */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_mask' and 
           column_name   = 'phide') then
                alter table tplt_mask add 
                phide
 integer null /* скрыть */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplt_mask' and 
           constraint_type   = 'primary key') then
            alter table tplt_mask add constraint pk_tplt_mask primary key (tplt_maskid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*описание*/
create table if not exists tplt_bdevices/*подключенные к узлу устройства*/ (
instanceid binary(16) ,
tplt_bdevicesid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'thenode') then
                alter table tplt_bdevices add 
                thenode binary(16) null /* узел */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'name') then
                alter table tplt_bdevices add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'thephone') then
                alter table tplt_bdevices add 
                thephone
 varchar (40) null /* телефон */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'addr') then
                alter table tplt_bdevices add 
                addr
 text null /* адрес */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'devtype') then
                alter table tplt_bdevices add 
                devtype binary(16) null /* устройство */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'shab') then
                alter table tplt_bdevices add 
                shab binary(16) null /* снабжающая орг. */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'devgrp') then
                alter table tplt_bdevices add 
                devgrp binary(16) null /* группа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'theschema') then
                alter table tplt_bdevices add 
                theschema binary(16) null /* схема подключения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'theserver') then
                alter table tplt_bdevices add 
                theserver binary(16) null /* сервер */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'nplock') then
                alter table tplt_bdevices add 
                nplock
 datetime null /* заблокированно до */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_bdevices' and 
           column_name   = 'connected') then
                alter table tplt_bdevices add 
                connected
 integer null /* подключен */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplt_bdevices' and 
           constraint_type   = 'primary key') then
            alter table tplt_bdevices add constraint pk_tplt_bdevices primary key (tplt_bdevicesid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*договорные установки*/
create table if not exists tplt_contract/*договорные установки*/ (
instanceid binary(16) ,
tplt_contractid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld12') then
                alter table tplt_contract add 
                fld12
 varchar (96) null /* № прибора */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld13') then
                alter table tplt_contract add 
                fld13
 varchar (96) null /* №ключа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld14') then
                alter table tplt_contract add 
                fld14
 varchar (96) null /* d20об */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld15') then
                alter table tplt_contract add 
                fld15
 varchar (96) null /* d20пр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld16') then
                alter table tplt_contract add 
                fld16
 varchar (96) null /* dyгвс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld17') then
                alter table tplt_contract add 
                fld17
 varchar (96) null /* dyобр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld18') then
                alter table tplt_contract add 
                fld18
 varchar (96) null /* dyпр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld19') then
                alter table tplt_contract add 
                fld19
 varchar (96) null /* dрпроб */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld20') then
                alter table tplt_contract add 
                fld20
 varchar (96) null /* dрпрпр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld21') then
                alter table tplt_contract add 
                fld21
 varchar (96) null /* g(гвс)пр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld22') then
                alter table tplt_contract add 
                fld22
 varchar (96) null /* gгвс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld23') then
                alter table tplt_contract add 
                fld23
 varchar (96) null /* gоб(гвс min) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld24') then
                alter table tplt_contract add 
                fld24
 varchar (96) null /* gов */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld25') then
                alter table tplt_contract add 
                fld25
 varchar (96) null /* gпр(гвс min) */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld26') then
                alter table tplt_contract add 
                fld26
 varchar (96) null /* gпр_minоб */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld27') then
                alter table tplt_contract add 
                fld27
 varchar (96) null /* gпр_minпр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld28') then
                alter table tplt_contract add 
                fld28
 varchar (96) null /* gпроб */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld29') then
                alter table tplt_contract add 
                fld29
 varchar (96) null /* gпрпр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld30') then
                alter table tplt_contract add 
                fld30
 varchar (96) null /* gут */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld31') then
                alter table tplt_contract add 
                fld31
 varchar (96) null /* д20об */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld32') then
                alter table tplt_contract add 
                fld32
 varchar (96) null /* д20пр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld33') then
                alter table tplt_contract add 
                fld33
 varchar (96) null /* договор */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld34') then
                alter table tplt_contract add 
                fld34
 varchar (96) null /* договор g2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld35') then
                alter table tplt_contract add 
                fld35
 varchar (96) null /* договор g1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld36') then
                alter table tplt_contract add 
                fld36
 varchar (96) null /* источник */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld37') then
                alter table tplt_contract add 
                fld37
 varchar (96) null /* магистраль */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld40') then
                alter table tplt_contract add 
                fld40
 varchar (96) null /* расходомер */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld41') then
                alter table tplt_contract add 
                fld41
 varchar (96) null /* расходомер гвс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld42') then
                alter table tplt_contract add 
                fld42
 varchar (96) null /* робр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld43') then
                alter table tplt_contract add 
                fld43
 varchar (96) null /* рпр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld45') then
                alter table tplt_contract add 
                fld45
 varchar (96) null /* способ отбора */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld46') then
                alter table tplt_contract add 
                fld46
 varchar (96) null /* т_график */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld47') then
                alter table tplt_contract add 
                fld47
 varchar (96) null /* теп_камера */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld48') then
                alter table tplt_contract add 
                fld48
 varchar (96) null /* тип расходомера */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld49') then
                alter table tplt_contract add 
                fld49
 varchar (96) null /* тип термометра */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld50') then
                alter table tplt_contract add 
                fld50
 varchar (96) null /* формула */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld51') then
                alter table tplt_contract add 
                fld51
 varchar (96) null /* наименование счетчика */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld52') then
                alter table tplt_contract add 
                fld52
 varchar (96) null /* схема */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld53') then
                alter table tplt_contract add 
                fld53
 varchar (96) null /* qот */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld54') then
                alter table tplt_contract add 
                fld54
 varchar (96) null /* qв */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld55') then
                alter table tplt_contract add 
                fld55
 varchar (96) null /* qгвс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld56') then
                alter table tplt_contract add 
                fld56
 varchar (96) null /* qну */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld57') then
                alter table tplt_contract add 
                fld57
 varchar (96) null /* gот */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld58') then
                alter table tplt_contract add 
                fld58
 varchar (96) null /* gв */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld59') then
                alter table tplt_contract add 
                fld59
 varchar (96) null /* gну */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld60') then
                alter table tplt_contract add 
                fld60
 varchar (96) null /* часов_архив */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld61') then
                alter table tplt_contract add 
                fld61
 varchar (96) null /* сут_архив */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld62') then
                alter table tplt_contract add 
                fld62
 varchar (96) null /* термопреобр гвс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld63') then
                alter table tplt_contract add 
                fld63
 varchar (96) null /* т1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld64') then
                alter table tplt_contract add 
                fld64
 varchar (96) null /* т2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld65') then
                alter table tplt_contract add 
                fld65
 varchar (96) null /* т3 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld66') then
                alter table tplt_contract add 
                fld66
 varchar (96) null /* т4 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld67') then
                alter table tplt_contract add 
                fld67
 varchar (96) null /* gтех */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld68') then
                alter table tplt_contract add 
                fld68
 varchar (96) null /* gтех_гвс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld69') then
                alter table tplt_contract add 
                fld69
 varchar (96) null /* gгвс_м */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld70') then
                alter table tplt_contract add 
                fld70
 varchar (96) null /* qтех */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld71') then
                alter table tplt_contract add 
                fld71
 varchar (96) null /* qвент */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld72') then
                alter table tplt_contract add 
                fld72
 varchar (96) null /* тхв */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld73') then
                alter table tplt_contract add 
                fld73
 varchar (96) null /* расходомер гвсц */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld81') then
                alter table tplt_contract add 
                fld81
 varchar (96) null /* формула2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld82') then
                alter table tplt_contract add 
                fld82
 varchar (96) null /* термопреобр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld83') then
                alter table tplt_contract add 
                fld83
 varchar (96) null /* gвент */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld84') then
                alter table tplt_contract add 
                fld84
 varchar (96) null /* код уутэ */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld85') then
                alter table tplt_contract add 
                fld85
 varchar (96) null /* сист_теплопотребления */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld86') then
                alter table tplt_contract add 
                fld86
 varchar (96) null /* qтех_гвс */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld87') then
                alter table tplt_contract add 
                fld87
 varchar (96) null /* qтех_гвс ср */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld88') then
                alter table tplt_contract add 
                fld88
 varchar (96) null /* qгвс ср */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld89') then
                alter table tplt_contract add 
                fld89
 varchar (96) null /* дата поверки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld90') then
                alter table tplt_contract add 
                fld90
 varchar (96) null /* фамилия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld92') then
                alter table tplt_contract add 
                fld92
 varchar (96) null /* узел учета */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld93') then
                alter table tplt_contract add 
                fld93
 varchar (96) null /* стр.адрес */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld94') then
                alter table tplt_contract add 
                fld94
 varchar (96) null /* g(гвс)обр */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld95') then
                alter table tplt_contract add 
                fld95
 varchar (96) null /* dyгвсц */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld96') then
                alter table tplt_contract add 
                fld96
 varchar (96) null /* цена_имп_m1 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld97') then
                alter table tplt_contract add 
                fld97
 varchar (96) null /* цена_имп_m2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld98') then
                alter table tplt_contract add 
                fld98
 varchar (96) null /* цена_имп_m1гв */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld99') then
                alter table tplt_contract add 
                fld99
 varchar (96) null /* цена_имп_m2гв */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld100') then
                alter table tplt_contract add 
                fld100
 varchar (96) null /* доп_погр_изм_m1% */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld101') then
                alter table tplt_contract add 
                fld101
 varchar (96) null /* доп_погр_изм_m2% */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld102') then
                alter table tplt_contract add 
                fld102
 varchar (96) null /* доп_погр_изм_m1гв% */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld103') then
                alter table tplt_contract add 
                fld103
 varchar (96) null /* доп_погр_изм_m2гв% */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tplt_contract' and 
           column_name   = 'fld104') then
                alter table tplt_contract add 
                fld104
 varchar (96) null /* расходомер m2 */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tplt_contract' and 
           constraint_type   = 'primary key') then
            alter table tplt_contract add constraint pk_tplt_contract primary key (tplt_contractid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=MTZExt (Расширения функциональности) */
GO

/*описание*/
create table if not exists mtzext_def/*список зарегистрированных расширений*/ (
instanceid binary(16) ,
mtzext_defid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzext_def' and 
           column_name   = 'name') then
                alter table mtzext_def add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzext_def' and 
           column_name   = 'exttype') then
                alter table mtzext_def add 
                exttype
 integer null /* тип расширения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzext_def' and 
           column_name   = 'thedescription') then
                alter table mtzext_def add 
                thedescription
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'mtzext_def' and 
           constraint_type   = 'primary key') then
            alter table mtzext_def add constraint pk_mtzext_def primary key (mtzext_defid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*реализации расширения*/
create table if not exists mtzextrel/*реализации расширения для разных разработческих плаформ*/ (
instanceid binary(16) ,
mtzextrelid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzextrel' and 
           column_name   = 'theplatform') then
                alter table mtzextrel add 
                theplatform
 integer null /* реализация */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzextrel' and 
           column_name   = 'theclassname') then
                alter table mtzextrel add 
                theclassname
 varchar (255) null /* название класса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'mtzextrel' and 
           column_name   = 'thelibraryname') then
                alter table mtzextrel add 
                thelibraryname
 varchar (255) null /* название библиотеки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'mtzextrel' and 
           constraint_type   = 'primary key') then
            alter table mtzextrel add constraint pk_mtzextrel primary key (mtzextrelid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=bprcfg (Настройка роли) */
GO

/*модуль*/
create table if not exists iu_rcfg_mod/**/ (
instanceid binary(16) ,
iu_rcfg_modid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'sequence') then
                alter table iu_rcfg_mod add 
                sequence
 integer null /* № п/п */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'caption') then
                alter table iu_rcfg_mod add 
                caption
 varchar (80) null /* надпись */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'moduleaccessible') then
                alter table iu_rcfg_mod add 
                moduleaccessible
 integer null /* разрешен */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'theicon') then
                alter table iu_rcfg_mod add 
                theicon
 varchar (64) null /* иконка */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'name') then
                alter table iu_rcfg_mod add 
                name
 varchar (255) null /* название меню */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'groupname') then
                alter table iu_rcfg_mod add 
                groupname
 varchar (60) null /* меню верхнего урровня */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'allobjects') then
                alter table iu_rcfg_mod add 
                allobjects
 integer null /* вся фирма */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'colegsobject') then
                alter table iu_rcfg_mod add 
                colegsobject
 integer null /* объекты коллег */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'substructobjects') then
                alter table iu_rcfg_mod add 
                substructobjects
 integer null /* подчиненные подразделения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'mydocmode') then
                alter table iu_rcfg_mod add 
                mydocmode
 varchar (10) null /* мои документы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'otherdocmode') then
                alter table iu_rcfg_mod add 
                otherdocmode
 varchar (10) null /* чужие документы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'controldocmode') then
                alter table iu_rcfg_mod add 
                controldocmode
 varchar (10) null /* документы на контроле */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           column_name   = 'visiblecontrol') then
                alter table iu_rcfg_mod add 
                visiblecontrol
 integer null /* управление видимостью */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'iu_rcfg_mod' and 
           constraint_type   = 'primary key') then
            alter table iu_rcfg_mod add constraint pk_iu_rcfg_mod primary key (iu_rcfg_modid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*режим документа*/
create table if not exists iu_rcfg_docmode/*какую карточку документа открывать*/ (
instanceid binary(16) ,
iu_rcfg_docmodeid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_docmode' and 
           column_name   = 'the_document') then
                alter table iu_rcfg_docmode add 
                the_document binary(16) null /* тип документа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_docmode' and 
           column_name   = 'addmode') then
                alter table iu_rcfg_docmode add 
                addmode
 varchar (4) null /* режим для  создания */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_docmode' and 
           column_name   = 'editmode') then
                alter table iu_rcfg_docmode add 
                editmode
 varchar (4) null /* режим для редактирования */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_docmode' and 
           column_name   = 'allowadd') then
                alter table iu_rcfg_docmode add 
                allowadd
 integer null /* можно создавать */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_docmode' and 
           column_name   = 'allowdelete') then
                alter table iu_rcfg_docmode add 
                allowdelete
 integer null /* можно удалять */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'iu_rcfg_docmode' and 
           constraint_type   = 'primary key') then
            alter table iu_rcfg_docmode add constraint pk_iu_rcfg_docmode primary key (iu_rcfg_docmodeid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*роль*/
create table if not exists iu_rcfg_def/*роль для настройки*/ (
instanceid binary(16) ,
iu_rcfg_defid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_def' and 
           column_name   = 'archived') then
                alter table iu_rcfg_def add 
                archived int null default 0;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_rcfg_def' and 
           column_name   = 'therole') then
                alter table iu_rcfg_def add 
                therole binary(16) null /* роль */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'iu_rcfg_def' and 
           constraint_type   = 'primary key') then
            alter table iu_rcfg_def add constraint pk_iu_rcfg_def primary key (iu_rcfg_defid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=TPQ (Запрос на обработку) */
GO

/*описание*/
create table if not exists tpq_def/**/ (
instanceid binary(16) ,
tpq_defid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_def' and 
           column_name   = 'thesessionid') then
                alter table tpq_def add 
                thesessionid binary(16) null /* сессия */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_def' and 
           column_name   = 'thedevice') then
                alter table tpq_def add 
                thedevice binary(16) null /* тепловычислитель */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_def' and 
           column_name   = 'archtype') then
                alter table tpq_def add 
                archtype binary(16) null /* тип архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_def' and 
           column_name   = 'archtime') then
                alter table tpq_def add 
                archtime
 datetime null /* время */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_def' and 
           column_name   = 'querytime') then
                alter table tpq_def add 
                querytime
 datetime null /* время  постановки запроса */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_def' and 
           column_name   = 'isurgent') then
                alter table tpq_def add 
                isurgent
 integer null /* срочный запрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_def' and 
           column_name   = 'repeattimes') then
                alter table tpq_def add 
                repeattimes
 integer null /* количество повторений при ошибке */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_def' and 
           column_name   = 'repeatinterval') then
                alter table tpq_def add 
                repeatinterval
 integer null /* интервал между повторами */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpq_def' and 
           constraint_type   = 'primary key') then
            alter table tpq_def add constraint pk_tpq_def primary key (tpq_defid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*результат обработки*/
create table if not exists tpq_result/**/ (
instanceid binary(16) ,
tpq_resultid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'textresult') then
                alter table tpq_result add 
                textresult
 varchar (255) null /* текстовый результат */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'momentarch') then
                alter table tpq_result add 
                momentarch binary(16) null /* запись мгновенного архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'hourarch') then
                alter table tpq_result add 
                hourarch binary(16) null /* запись часового архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'dayarch') then
                alter table tpq_result add 
                dayarch binary(16) null /* запись суточного архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'totalarch') then
                alter table tpq_result add 
                totalarch binary(16) null /* запись итогового архива */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'iserror') then
                alter table tpq_result add 
                iserror
 integer null /* обработан с ошибкой */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'logmessage') then
                alter table tpq_result add 
                logmessage
 text null /* протокол */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'starttime') then
                alter table tpq_result add 
                starttime
 datetime null /* время начала обработки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'tpq_result' and 
           column_name   = 'endtime') then
                alter table tpq_result add 
                endtime
 datetime null /* время завершения обработки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'tpq_result' and 
           constraint_type   = 'primary key') then
            alter table tpq_result add constraint pk_tpq_result primary key (tpq_resultid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=MTZFltr (Описание фильтра) */
GO

/*группа полей фильтра*/
create table if not exists filterfieldgroup/*группа полей фильтра*/ (
instanceid binary(16) ,
filterfieldgroupid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'filterfieldgroup' and 
           column_name   = 'sequence') then
                alter table filterfieldgroup add 
                sequence
 integer null /* последовательность */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'filterfieldgroup' and 
           column_name   = 'name') then
                alter table filterfieldgroup add 
                name
 varchar (64) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'filterfieldgroup' and 
           column_name   = 'caption') then
                alter table filterfieldgroup add 
                caption
 varchar (255) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'filterfieldgroup' and 
           column_name   = 'allowignore') then
                alter table filterfieldgroup add 
                allowignore
 integer null /* можно отключать */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'filterfieldgroup' and 
           constraint_type   = 'primary key') then
            alter table filterfieldgroup add constraint pk_filterfieldgroup primary key (filterfieldgroupid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*поле фильтра*/
create table if not exists fileterfield/*поле фильтра*/ (
parentstructrowid binary(16) not null,
fileterfieldid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'sequence') then
                alter table fileterfield add 
                sequence
 integer null /* последовательность */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'name') then
                alter table fileterfield add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'caption') then
                alter table fileterfield add 
                caption
 varchar (255) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'fieldtype') then
                alter table fileterfield add 
                fieldtype binary(16) null /* тип поля */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'fieldsize') then
                alter table fileterfield add 
                fieldsize
 integer null /* размер */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'reftype') then
                alter table fileterfield add 
                reftype
 integer null /* тип ссылки */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'reftotype') then
                alter table fileterfield add 
                reftotype binary(16) null /* тип, куда ссылаемся */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'reftopart') then
                alter table fileterfield add 
                reftopart binary(16) null /* раздел, куда ссылаемся */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'fileterfield' and 
           column_name   = 'valuearray') then
                alter table fileterfield add 
                valuearray
 integer null /* массив значений */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'fileterfield' and 
           constraint_type   = 'primary key') then
            alter table fileterfield add constraint pk_fileterfield primary key (fileterfieldid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*фильтр*/
create table if not exists filters/*фильтр*/ (
instanceid binary(16) ,
filtersid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'filters' and 
           column_name   = 'name') then
                alter table filters add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'filters' and 
           column_name   = 'thecaption') then
                alter table filters add 
                thecaption
 varchar (80) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'filters' and 
           column_name   = 'thecomment') then
                alter table filters add 
                thecomment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'filters' and 
           constraint_type   = 'primary key') then
            alter table filters add constraint pk_filters primary key (filtersid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=bpdi (Интерфейс) */
GO

/*модуль*/
create table if not exists iu_int_modules/**/ (
instanceid binary(16) ,
iu_int_modulesid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'sequence') then
                alter table iu_int_modules add 
                sequence
 integer null /* № п/п */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'theicon') then
                alter table iu_int_modules add 
                theicon
 varchar (64) null /* иконка */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'groupname') then
                alter table iu_int_modules add 
                groupname
 varchar (60) null /* меню верхнего урровня */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'name') then
                alter table iu_int_modules add 
                name
 varchar (255) null /* название меню */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'caption') then
                alter table iu_int_modules add 
                caption
 varchar (80) null /* надпись */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'visiblecontrol') then
                alter table iu_int_modules add 
                visiblecontrol
 integer null /* управление видимостью */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'controldocmode') then
                alter table iu_int_modules add 
                controldocmode
 varchar (10) null /* документы на контроле */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'otherdocmode') then
                alter table iu_int_modules add 
                otherdocmode
 varchar (10) null /* чужие документы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'mydocmode') then
                alter table iu_int_modules add 
                mydocmode
 varchar (10) null /* мои документы */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'allobjects') then
                alter table iu_int_modules add 
                allobjects
 integer null /* вся фирма */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'colegsobject') then
                alter table iu_int_modules add 
                colegsobject
 integer null /* объекты коллег */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'iu_int_modules' and 
           column_name   = 'substructobjects') then
                alter table iu_int_modules add 
                substructobjects
 integer null /* подчиненные подразделения */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'iu_int_modules' and 
           constraint_type   = 'primary key') then
            alter table iu_int_modules add constraint pk_iu_int_modules primary key (iu_int_modulesid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
/* TYPE=MTZRprt (Описание отчета) */
GO

/*секции*/
create table if not exists rptstruct/*секции*/ (
instanceid binary(16) ,
rptstructid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
,parentrowid binary(16) 
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptstruct' and 
           column_name   = 'name') then
                alter table rptstruct add 
                name
 varchar (64) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptstruct' and 
           column_name   = 'caption') then
                alter table rptstruct add 
                caption
 varchar (255) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'rptstruct' and 
           constraint_type   = 'primary key') then
            alter table rptstruct add constraint pk_rptstruct primary key (rptstructid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*поля секции*/
create table if not exists rptfields/*поля секции*/ (
parentstructrowid binary(16) not null,
rptfieldsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptfields' and 
           column_name   = 'name') then
                alter table rptfields add 
                name
 varchar (64) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptfields' and 
           column_name   = 'fieldtype') then
                alter table rptfields add 
                fieldtype binary(16) null /* тип поля */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptfields' and 
           column_name   = 'fieldsize') then
                alter table rptfields add 
                fieldsize
 integer null /* размер */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptfields' and 
           column_name   = 'caption') then
                alter table rptfields add 
                caption
 varchar (255) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'rptfields' and 
           constraint_type   = 'primary key') then
            alter table rptfields add constraint pk_rptfields primary key (rptfieldsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*формулы*/
create table if not exists rptformula/*формулы*/ (
instanceid binary(16) ,
rptformulaid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptformula' and 
           column_name   = 'name') then
                alter table rptformula add 
                name
 varchar (64) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptformula' and 
           column_name   = 'code') then
                alter table rptformula add 
                code
 text null /* выражение */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'rptformula' and 
           column_name   = 'platform') then
                alter table rptformula add 
                platform binary(16) null /* платформа */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'rptformula' and 
           constraint_type   = 'primary key') then
            alter table rptformula add constraint pk_rptformula primary key (rptformulaid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO

/*описание*/
create table if not exists reports/*описание*/ (
instanceid binary(16) ,
reportsid binary(16) not null  
,changestamp datetime  null  /* время последнего изменения */
,timestamp timestamp not null  /* для организации инкрементального индексирования полнотекстовой информации */
,locksessionid binary(16) null  /* temporary lock */
,lockuserid binary(16) null /* checkout lock */
,securitystyleid binary(16) null /* security formula */
)
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'name') then
                alter table reports add 
                name
 varchar (255) null /* название */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'reportfile_ext') then
        alter table reports add 
            reportfile_ext nvarchar(4) null;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'reportfile') then
                alter table reports add 
                reportfile varchar(255) null /* файл отчета */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'caption') then
                alter table reports add 
                caption
 varchar (255) null /* заголовок */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'preparemethod') then
                alter table reports add 
                preparemethod binary(16) null /* метод для формирования */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'reporttype') then
                alter table reports add 
                reporttype
 integer null /* тип отчета */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'thereportext') then
                alter table reports add 
                thereportext binary(16) null /* расширение для создания отчета */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'reportview') then
                alter table reports add 
                reportview
 varchar (255) null /* базовый запрос */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go

drop procedure if exists alter_col
go
create procedure alter_col() begin
        if not exists (select 1 from information_schema.columns where
           table_schema = database() and
           table_name   = 'reports' and 
           column_name   = 'thecomment') then
                alter table reports add 
                thecomment
 text null /* описание */;
        end if;
end 
go
call alter_col(); 
go

drop procedure if exists alter_col
go



drop procedure if exists alter_pk
go
create procedure alter_pk() begin
    if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and 
           table_name   = 'reports' and 
           constraint_type   = 'primary key') then
            alter table reports add constraint pk_reports primary key (reportsid);
    end if;
end 
go
call alter_pk(); 
go

drop procedure if exists alter_pk
go
GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--Index" BlockCode=" 


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplc_e' 
  and   index_name   = 'parent_tplc_e' ) then
   create index parent_tplc_e on tplc_e(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplc_m' 
  and   index_name   = 'parent_tplc_m' ) then
   create index parent_tplc_m on tplc_m(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplc_header' 
  and   index_name   = 'parent_tplc_header' ) then
   create index parent_tplc_header on tplc_header(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplc_d' 
  and   index_name   = 'parent_tplc_d' ) then
   create index parent_tplc_d on tplc_d(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplc_h' 
  and   index_name   = 'parent_tplc_h' ) then
   create index parent_tplc_h on tplc_h(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplc_missing' 
  and   index_name   = 'parent_tplc_missing' ) then
   create index parent_tplc_missing on tplc_missing(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplc_t' 
  and   index_name   = 'parent_tplc_t' ) then
   create index parent_tplc_t on tplc_t(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpn_def' 
  and   index_name   = 'parent_tpn_def' ) then
   create index parent_tpn_def on tpn_def(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'iu_u_def' 
  and   index_name   = 'parent_iu_u_def' ) then
   create index parent_iu_u_def on iu_u_def(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'iu_u_def_temp' 
  and   index_name   = 'idx_session_iu_u_def_temp' ) then
            create index idx_session_iu_u_def_temp on iu_u_def_temp (sessionid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'genpackage' 
  and   index_name   = 'parent_genpackage' ) then
   create index parent_genpackage on genpackage(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'generator_target' 
  and   index_name   = 'parent_generator_target' ) then
create index parent_generator_target on generator_target(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'genreference' 
  and   index_name   = 'parent_genreference' ) then
create index parent_genreference on genreference(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'genmanualcode' 
  and   index_name   = 'parent_genmanualcode' ) then
create index parent_genmanualcode on genmanualcode(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'gencontrols' 
  and   index_name   = 'parent_gencontrols' ) then
create index parent_gencontrols on gencontrols(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'localizeinfo' 
  and   index_name   = 'parent_localizeinfo' ) then
   create index parent_localizeinfo on localizeinfo(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fieldtype' 
  and   index_name   = 'parent_fieldtype' ) then
   create index parent_fieldtype on fieldtype(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'enumitem' 
  and   index_name   = 'parent_enumitem' ) then
create index parent_enumitem on enumitem(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fieldtypemap' 
  and   index_name   = 'parent_fieldtypemap' ) then
create index parent_fieldtypemap on fieldtypemap(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'sharedmethod' 
  and   index_name   = 'parent_sharedmethod' ) then
   create index parent_sharedmethod on sharedmethod(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'script' 
  and   index_name   = 'parent_script' ) then
create index parent_script on script(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'parameters' 
  and   index_name   = 'parent_parameters' ) then
create index parent_parameters on parameters(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'objecttype' 
  and   index_name   = 'parent_objecttype' ) then
   create index parent_objecttype on objecttype(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'objstatus' 
  and   index_name   = 'parent_objstatus' ) then
create index parent_objstatus on objstatus(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'nextstate' 
  and   index_name   = 'parent_nextstate' ) then
create index parent_nextstate on nextstate(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'objectmode' 
  and   index_name   = 'parent_objectmode' ) then
create index parent_objectmode on objectmode(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'structrestriction' 
  and   index_name   = 'parent_structrestriction' ) then
create index parent_structrestriction on structrestriction(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'methodrestriction' 
  and   index_name   = 'parent_methodrestriction' ) then
create index parent_methodrestriction on methodrestriction(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fieldrestriction' 
  and   index_name   = 'parent_fieldrestriction' ) then
create index parent_fieldrestriction on fieldrestriction(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'typemenu' 
  and   index_name   = 'parent_typemenu' ) then
create index parent_typemenu on typemenu(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'instancevalidator' 
  and   index_name   = 'parent_instancevalidator' ) then
create index parent_instancevalidator on instancevalidator(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'part' 
  and   index_name   = 'parent_part' ) then
create index parent_part on part(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'partmenu' 
  and   index_name   = 'parent_partmenu' ) then
create index parent_partmenu on partmenu(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'partparammap' 
  and   index_name   = 'parent_partparammap' ) then
create index parent_partparammap on partparammap(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'partview' 
  and   index_name   = 'parent_partview' ) then
create index parent_partview on partview(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'viewcolumn' 
  and   index_name   = 'parent_viewcolumn' ) then
create index parent_viewcolumn on viewcolumn(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'partview_lnk' 
  and   index_name   = 'parent_partview_lnk' ) then
create index parent_partview_lnk on partview_lnk(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'validator' 
  and   index_name   = 'parent_validator' ) then
create index parent_validator on validator(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'uniqueconstraint' 
  and   index_name   = 'parent_uniqueconstraint' ) then
create index parent_uniqueconstraint on uniqueconstraint(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'constraintfield' 
  and   index_name   = 'parent_constraintfield' ) then
create index parent_constraintfield on constraintfield(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'extenderinterface' 
  and   index_name   = 'parent_extenderinterface' ) then
create index parent_extenderinterface on extenderinterface(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'field' 
  and   index_name   = 'parent_field' ) then
create index parent_field on field(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fldextenders' 
  and   index_name   = 'parent_fldextenders' ) then
create index parent_fldextenders on fldextenders(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fieldsrcdef' 
  and   index_name   = 'parent_fieldsrcdef' ) then
create index parent_fieldsrcdef on fieldsrcdef(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'dinamicfilterscript' 
  and   index_name   = 'parent_dinamicfilterscript' ) then
create index parent_dinamicfilterscript on dinamicfilterscript(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fieldexpression' 
  and   index_name   = 'parent_fieldexpression' ) then
create index parent_fieldexpression on fieldexpression(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fieldvalidator' 
  and   index_name   = 'parent_fieldvalidator' ) then
create index parent_fieldvalidator on fieldvalidator(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fieldmenu' 
  and   index_name   = 'parent_fieldmenu' ) then
create index parent_fieldmenu on fieldmenu(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fieldparammap' 
  and   index_name   = 'parent_fieldparammap' ) then
create index parent_fieldparammap on fieldparammap(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'mtzapp' 
  and   index_name   = 'parent_mtzapp' ) then
   create index parent_mtzapp on mtzapp(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'parentpackage' 
  and   index_name   = 'parent_parentpackage' ) then
create index parent_parentpackage on parentpackage(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'journalcolumn' 
  and   index_name   = 'parent_journalcolumn' ) then
   create index parent_journalcolumn on journalcolumn(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'jcolumnsource' 
  and   index_name   = 'parent_jcolumnsource' ) then
create index parent_jcolumnsource on jcolumnsource(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'journalsrc' 
  and   index_name   = 'parent_journalsrc' ) then
   create index parent_journalsrc on journalsrc(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'journal' 
  and   index_name   = 'parent_journal' ) then
   create index parent_journal on journal(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'bpc_info' 
  and   index_name   = 'parent_bpc_info' ) then
   create index parent_bpc_info on bpc_info(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'the_session' 
  and   index_name   = 'parent_the_session' ) then
   create index parent_the_session on the_session(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'sysrefcache' 
  and   index_name   = 'parent_sysrefcache' ) then
   create index parent_sysrefcache on sysrefcache(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'syslog' 
  and   index_name   = 'parent_syslog' ) then
   create index parent_syslog on syslog(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpls_info' 
  and   index_name   = 'parent_tpls_info' ) then
   create index parent_tpls_info on tpls_info(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpls_param' 
  and   index_name   = 'parent_tpls_param' ) then
   create index parent_tpls_param on tpls_param(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'armjournal' 
  and   index_name   = 'parent_armjournal' ) then
   create index parent_armjournal on armjournal(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'armjrnlrep' 
  and   index_name   = 'parent_armjrnlrep' ) then
create index parent_armjrnlrep on armjrnlrep(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'armjrnlrun' 
  and   index_name   = 'parent_armjrnlrun' ) then
create index parent_armjrnlrun on armjrnlrun(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'armjrnladd' 
  and   index_name   = 'parent_armjrnladd' ) then
create index parent_armjrnladd on armjrnladd(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'entrypoints' 
  and   index_name   = 'parent_entrypoints' ) then
   create index parent_entrypoints on entrypoints(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'epfilterlink' 
  and   index_name   = 'parent_epfilterlink' ) then
create index parent_epfilterlink on epfilterlink(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'workplace' 
  and   index_name   = 'parent_workplace' ) then
   create index parent_workplace on workplace(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'armtypes' 
  and   index_name   = 'parent_armtypes' ) then
   create index parent_armtypes on armtypes(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'iu_crole' 
  and   index_name   = 'parent_iu_crole' ) then
   create index parent_iu_crole on iu_crole(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_connecttype' 
  and   index_name   = 'parent_tpld_connecttype' ) then
   create index parent_tpld_connecttype on tpld_connecttype(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_devclass' 
  and   index_name   = 'parent_tpld_devclass' ) then
   create index parent_tpld_devclass on tpld_devclass(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_f' 
  and   index_name   = 'parent_tpld_f' ) then
   create index parent_tpld_f on tpld_f(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_snab' 
  and   index_name   = 'parent_tpld_snab' ) then
   create index parent_tpld_snab on tpld_snab(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_paramtype' 
  and   index_name   = 'parent_tpld_paramtype' ) then
   create index parent_tpld_paramtype on tpld_paramtype(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_grp' 
  and   index_name   = 'parent_tpld_grp' ) then
   create index parent_tpld_grp on tpld_grp(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_snabtop' 
  and   index_name   = 'parent_tpld_snabtop' ) then
   create index parent_tpld_snabtop on tpld_snabtop(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_param' 
  and   index_name   = 'parent_tpld_param' ) then
   create index parent_tpld_param on tpld_param(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpld_devtype' 
  and   index_name   = 'parent_tpld_devtype' ) then
   create index parent_tpld_devtype on tpld_devtype(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'users' 
  and   index_name   = 'parent_users' ) then
   create index parent_users on users(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'groups' 
  and   index_name   = 'parent_groups' ) then
   create index parent_groups on groups(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'groupuser' 
  and   index_name   = 'parent_groupuser' ) then
create index parent_groupuser on groupuser(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpsrv_modems' 
  and   index_name   = 'parent_tpsrv_modems' ) then
   create index parent_tpsrv_modems on tpsrv_modems(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpsrv_info' 
  and   index_name   = 'parent_tpsrv_info' ) then
   create index parent_tpsrv_info on tpsrv_info(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpsrv_ports' 
  and   index_name   = 'parent_tpsrv_ports' ) then
   create index parent_tpsrv_ports on tpsrv_ports(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'num_zones' 
  and   index_name   = 'parent_num_zones' ) then
   create index parent_num_zones on num_zones(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'num_values' 
  and   index_name   = 'parent_num_values' ) then
create index parent_num_values on num_values(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'num_head' 
  and   index_name   = 'parent_num_head' ) then
   create index parent_num_head on num_head(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplt_reports' 
  and   index_name   = 'parent_tplt_reports' ) then
   create index parent_tplt_reports on tplt_reports(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplt_connect' 
  and   index_name   = 'parent_tplt_connect' ) then
   create index parent_tplt_connect on tplt_connect(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplt_valuebounds' 
  and   index_name   = 'parent_tplt_valuebounds' ) then
   create index parent_tplt_valuebounds on tplt_valuebounds(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplt_plancall' 
  and   index_name   = 'parent_tplt_plancall' ) then
   create index parent_tplt_plancall on tplt_plancall(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplt_mask' 
  and   index_name   = 'parent_tplt_mask' ) then
   create index parent_tplt_mask on tplt_mask(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplt_bdevices' 
  and   index_name   = 'parent_tplt_bdevices' ) then
   create index parent_tplt_bdevices on tplt_bdevices(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tplt_contract' 
  and   index_name   = 'parent_tplt_contract' ) then
   create index parent_tplt_contract on tplt_contract(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'mtzext_def' 
  and   index_name   = 'parent_mtzext_def' ) then
   create index parent_mtzext_def on mtzext_def(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'mtzextrel' 
  and   index_name   = 'parent_mtzextrel' ) then
   create index parent_mtzextrel on mtzextrel(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'iu_rcfg_mod' 
  and   index_name   = 'parent_iu_rcfg_mod' ) then
   create index parent_iu_rcfg_mod on iu_rcfg_mod(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'iu_rcfg_docmode' 
  and   index_name   = 'parent_iu_rcfg_docmode' ) then
   create index parent_iu_rcfg_docmode on iu_rcfg_docmode(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'iu_rcfg_def' 
  and   index_name   = 'parent_iu_rcfg_def' ) then
   create index parent_iu_rcfg_def on iu_rcfg_def(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpq_def' 
  and   index_name   = 'parent_tpq_def' ) then
   create index parent_tpq_def on tpq_def(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'tpq_result' 
  and   index_name   = 'parent_tpq_result' ) then
   create index parent_tpq_result on tpq_result(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'filterfieldgroup' 
  and   index_name   = 'parent_filterfieldgroup' ) then
   create index parent_filterfieldgroup on filterfieldgroup(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'fileterfield' 
  and   index_name   = 'parent_fileterfield' ) then
create index parent_fileterfield on fileterfield(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'filters' 
  and   index_name   = 'parent_filters' ) then
   create index parent_filters on filters(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'iu_int_modules' 
  and   index_name   = 'parent_iu_int_modules' ) then
   create index parent_iu_int_modules on iu_int_modules(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'rptstruct' 
  and   index_name   = 'parent_rptstruct' ) then
   create index parent_rptstruct on rptstruct(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'rptfields' 
  and   index_name   = 'parent_rptfields' ) then
create index parent_rptfields on rptfields(parentstructrowid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'rptformula' 
  and   index_name   = 'parent_rptformula' ) then
   create index parent_rptformula on rptformula(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO


drop procedure if exists alter_idx
go
create procedure alter_idx() begin
if not exists (select 1 
  from(information_schema.statistics)
  where(table_schema = database()) 
  and   table_name   = 'reports' 
  and   index_name   = 'parent_reports' ) then
   create index parent_reports on reports(instanceid);
end if;
end 
go
call alter_idx(); 
go

drop procedure if exists alter_idx
go
GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--ForeignKey" BlockCode="SET @@foreign_key_checks = 0;
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplc_e' and 
           constraint_type   = 'foreign key') then
alter table tplc_e add constraint fk_8784d800209346ab942b278febd9bd21 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplc_m' and 
           constraint_type   = 'foreign key') then
alter table tplc_m add constraint fk_4aaee503b98647189a5676e9e0441e2f foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplc_header' and 
           constraint_type   = 'foreign key') then
alter table tplc_header add constraint fk_9f5bba30be284a09a8f513c4549abb7a foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplc_d' and 
           constraint_type   = 'foreign key') then
alter table tplc_d add constraint fk_2129c3531fff4cf58a5cece2a264e435 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplc_h' and 
           constraint_type   = 'foreign key') then
alter table tplc_h add constraint fk_13c30e79e4e74066bed094e920bceac7 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplc_missing' and 
           constraint_type   = 'foreign key') then
alter table tplc_missing add constraint fk_7a43cccbebc442d4adac01397360c4b0 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplc_t' and 
           constraint_type   = 'foreign key') then
alter table tplc_t add constraint fk_cad8c6f688014c0084932f3d0955374e foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpn_def' and 
           constraint_type   = 'foreign key') then
alter table tpn_def add constraint fk_74b01a8ac92b412bbc87e93716e8dbc0 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'iu_u_def' and 
           constraint_type   = 'foreign key') then
alter table iu_u_def add constraint fk_a63cbdcf3ddd4164949752fe925b2a13 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'iu_u_def_temp' and 
           constraint_type   = 'foreign key') then
        alter table iu_u_def_temp add constraint fk_a63cbdcf3ddd4164949752fe925b2a13_temp foreign key(sessionid) references the_session ( the_sessionid )   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'genpackage' and 
           constraint_type   = 'foreign key') then
alter table genpackage add constraint fk_4612c6057e7247d08a2852cc7bff4c7f foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'generator_target' and 
           constraint_type   = 'foreign key') then
        alter table generator_target add constraint fk_0670efb9512711d58822204c4f4f5020 foreign key(parentstructrowid) references genpackage (genpackageid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'genreference' and 
           constraint_type   = 'foreign key') then
        alter table genreference add constraint fk_673e809bcff64309a52bfe2118ae508e foreign key(parentstructrowid) references generator_target (generator_targetid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'genmanualcode' and 
           constraint_type   = 'foreign key') then
        alter table genmanualcode add constraint fk_766993ca7de64ada82168bddf2b0588e foreign key(parentstructrowid) references generator_target (generator_targetid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'gencontrols' and 
           constraint_type   = 'foreign key') then
        alter table gencontrols add constraint fk_04b31cfb6525474a9f16999870d8eaaf foreign key(parentstructrowid) references generator_target (generator_targetid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'localizeinfo' and 
           constraint_type   = 'foreign key') then
alter table localizeinfo add constraint fk_a57d435a73b34107b22bc18782085c84 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fieldtype' and 
           constraint_type   = 'foreign key') then
alter table fieldtype add constraint fk_0670efa5512711d58822204c4f4f5020 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'enumitem' and 
           constraint_type   = 'foreign key') then
        alter table enumitem add constraint fk_35f46d2361f8413b924f83792f76e698 foreign key(parentstructrowid) references fieldtype (fieldtypeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fieldtypemap' and 
           constraint_type   = 'foreign key') then
        alter table fieldtypemap add constraint fk_0670efa6512711d58822204c4f4f5020 foreign key(parentstructrowid) references fieldtype (fieldtypeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'sharedmethod' and 
           constraint_type   = 'foreign key') then
alter table sharedmethod add constraint fk_0670efad512711d58822204c4f4f5020 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'script' and 
           constraint_type   = 'foreign key') then
        alter table script add constraint fk_0670efa3512711d58822204c4f4f5020 foreign key(parentstructrowid) references sharedmethod (sharedmethodid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'parameters' and 
           constraint_type   = 'foreign key') then
        alter table parameters add constraint fk_e598e74ca9de404186fa972e95635600 foreign key(parentstructrowid) references script (scriptid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'objecttype' and 
           constraint_type   = 'foreign key') then
alter table objecttype add constraint fk_0670efaf512711d58822204c4f4f5020 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'objstatus' and 
           constraint_type   = 'foreign key') then
        alter table objstatus add constraint fk_df46c86638f84ef192e25f899d98bd16 foreign key(parentstructrowid) references objecttype (objecttypeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'nextstate' and 
           constraint_type   = 'foreign key') then
        alter table nextstate add constraint fk_11c1a17929b24ddcbdb71eb21d2ff878 foreign key(parentstructrowid) references objstatus (objstatusid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'objectmode' and 
           constraint_type   = 'foreign key') then
        alter table objectmode add constraint fk_1168296da01c45dbb67d76a07f3ff64c foreign key(parentstructrowid) references objecttype (objecttypeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'structrestriction' and 
           constraint_type   = 'foreign key') then
        alter table structrestriction add constraint fk_f448ac333b13489993ee47d3d62962ec foreign key(parentstructrowid) references objectmode (objectmodeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'methodrestriction' and 
           constraint_type   = 'foreign key') then
        alter table methodrestriction add constraint fk_0f7b3070f7094e7d868ccc337e3075d1 foreign key(parentstructrowid) references objectmode (objectmodeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fieldrestriction' and 
           constraint_type   = 'foreign key') then
        alter table fieldrestriction add constraint fk_24c5119c5dc94aacbb01b8cf8eba998e foreign key(parentstructrowid) references objectmode (objectmodeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'typemenu' and 
           constraint_type   = 'foreign key') then
        alter table typemenu add constraint fk_8776747a743d47b9af1cab00ff81154f foreign key(parentstructrowid) references objecttype (objecttypeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'instancevalidator' and 
           constraint_type   = 'foreign key') then
        alter table instancevalidator add constraint fk_42515bade23340db8f9045dcfce01be6 foreign key(parentstructrowid) references objecttype (objecttypeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'part' and 
           constraint_type   = 'foreign key') then
        alter table part add constraint fk_0670efb1512711d58822204c4f4f5020 foreign key(parentstructrowid) references objecttype (objecttypeid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'partmenu' and 
           constraint_type   = 'foreign key') then
        alter table partmenu add constraint fk_548e9e2e89f64822a312101ca4a9fe74 foreign key(parentstructrowid) references part (partid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'partparammap' and 
           constraint_type   = 'foreign key') then
        alter table partparammap add constraint fk_f8be6fca595d4f46acdbfb5838a246ca foreign key(parentstructrowid) references partmenu (partmenuid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'partview' and 
           constraint_type   = 'foreign key') then
        alter table partview add constraint fk_d713b64d4ce8466dbe2b448874dc0469 foreign key(parentstructrowid) references part (partid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'viewcolumn' and 
           constraint_type   = 'foreign key') then
        alter table viewcolumn add constraint fk_3bf43d5e0eb54ddb8efa62df3261a272 foreign key(parentstructrowid) references partview (partviewid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'partview_lnk' and 
           constraint_type   = 'foreign key') then
        alter table partview_lnk add constraint fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61 foreign key(parentstructrowid) references partview (partviewid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'validator' and 
           constraint_type   = 'foreign key') then
        alter table validator add constraint fk_7d323655bad74d12afc2e7ff3613b4a1 foreign key(parentstructrowid) references part (partid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'uniqueconstraint' and 
           constraint_type   = 'foreign key') then
        alter table uniqueconstraint add constraint fk_9caa5c89f1cb4b62b1d0ff2d29a40057 foreign key(parentstructrowid) references part (partid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'constraintfield' and 
           constraint_type   = 'foreign key') then
        alter table constraintfield add constraint fk_c70106b1aa9541738097614495d6ef28 foreign key(parentstructrowid) references uniqueconstraint (uniqueconstraintid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'extenderinterface' and 
           constraint_type   = 'foreign key') then
        alter table extenderinterface add constraint fk_0fefa9963bad4ebba9ad52ac582cd0a7 foreign key(parentstructrowid) references part (partid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'field' and 
           constraint_type   = 'foreign key') then
        alter table field add constraint fk_0670efa4512711d58822204c4f4f5020 foreign key(parentstructrowid) references part (partid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fldextenders' and 
           constraint_type   = 'foreign key') then
        alter table fldextenders add constraint fk_5d0b0e1a80364b12b08160139558b594 foreign key(parentstructrowid) references field (fieldid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fieldsrcdef' and 
           constraint_type   = 'foreign key') then
        alter table fieldsrcdef add constraint fk_d3f1af81912c4948a87ddf549ee796e2 foreign key(parentstructrowid) references field (fieldid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'dinamicfilterscript' and 
           constraint_type   = 'foreign key') then
        alter table dinamicfilterscript add constraint fk_23e26182cc8442d6b7a2d8da0026ebee foreign key(parentstructrowid) references field (fieldid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fieldexpression' and 
           constraint_type   = 'foreign key') then
        alter table fieldexpression add constraint fk_34b08ed0c4b54b9cba59870a4599f52a foreign key(parentstructrowid) references field (fieldid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fieldvalidator' and 
           constraint_type   = 'foreign key') then
        alter table fieldvalidator add constraint fk_b40bbed584c54b0b8679172aa1acdad9 foreign key(parentstructrowid) references field (fieldid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fieldmenu' and 
           constraint_type   = 'foreign key') then
        alter table fieldmenu add constraint fk_4189c3e471c2423da56f4e71cb91b52d foreign key(parentstructrowid) references field (fieldid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fieldparammap' and 
           constraint_type   = 'foreign key') then
        alter table fieldparammap add constraint fk_54752ae806b04ec68daa692e52a0d36c foreign key(parentstructrowid) references fieldmenu (fieldmenuid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'mtzapp' and 
           constraint_type   = 'foreign key') then
alter table mtzapp add constraint fk_8cdbe0c259894210bdfb33c2c45f2509 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'parentpackage' and 
           constraint_type   = 'foreign key') then
        alter table parentpackage add constraint fk_6ea00756b9804d23b209202389953a13 foreign key(parentstructrowid) references mtzapp (mtzappid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'journalcolumn' and 
           constraint_type   = 'foreign key') then
alter table journalcolumn add constraint fk_f8d77b31a757488cbb5822700737d4b8 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'jcolumnsource' and 
           constraint_type   = 'foreign key') then
        alter table jcolumnsource add constraint fk_8d8c85ebd15e45d7b13b0b4001eb9ac2 foreign key(parentstructrowid) references journalcolumn (journalcolumnid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'journalsrc' and 
           constraint_type   = 'foreign key') then
alter table journalsrc add constraint fk_dac3244d70d645a4885dd610f748ebfc foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'journal' and 
           constraint_type   = 'foreign key') then
alter table journal add constraint fk_34c46c6e921547468d9d4800b6549003 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'bpc_info' and 
           constraint_type   = 'foreign key') then
alter table bpc_info add constraint fk_f50248a1151e4d9c87d0906acfd35c9f foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'the_session' and 
           constraint_type   = 'foreign key') then
alter table the_session add constraint fk_78943ea279364f58b31676e4f968e3b4 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'sysrefcache' and 
           constraint_type   = 'foreign key') then
alter table sysrefcache add constraint fk_35d224df283041549e80ff578aab323c foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'syslog' and 
           constraint_type   = 'foreign key') then
alter table syslog add constraint fk_45eadae898374ee59a3107370302f20f foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpls_info' and 
           constraint_type   = 'foreign key') then
alter table tpls_info add constraint fk_54f16d64f8744cd38b4979163b10088d foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpls_param' and 
           constraint_type   = 'foreign key') then
alter table tpls_param add constraint fk_5f51acabda784428b03a1424902b9cb7 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'armjournal' and 
           constraint_type   = 'foreign key') then
alter table armjournal add constraint fk_c41c0e058cf34b439d6ec5fcd37beb47 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'armjrnlrep' and 
           constraint_type   = 'foreign key') then
        alter table armjrnlrep add constraint fk_c2763400be344033b4b5756cd5252cea foreign key(parentstructrowid) references armjournal (armjournalid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'armjrnlrun' and 
           constraint_type   = 'foreign key') then
        alter table armjrnlrun add constraint fk_4fe8318100a54b599413d06318a119d4 foreign key(parentstructrowid) references armjournal (armjournalid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'armjrnladd' and 
           constraint_type   = 'foreign key') then
        alter table armjrnladd add constraint fk_f837abedcae9430a9dee519dbb1b79d5 foreign key(parentstructrowid) references armjournal (armjournalid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'entrypoints' and 
           constraint_type   = 'foreign key') then
alter table entrypoints add constraint fk_ef4ede2c458b4eabafe366aa500081da foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'epfilterlink' and 
           constraint_type   = 'foreign key') then
        alter table epfilterlink add constraint fk_d407359f220449699789956215e456e6 foreign key(parentstructrowid) references entrypoints (entrypointsid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'workplace' and 
           constraint_type   = 'foreign key') then
alter table workplace add constraint fk_973921c449264c9da7816062cf81b5ad foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'armtypes' and 
           constraint_type   = 'foreign key') then
alter table armtypes add constraint fk_30f737ce1c814672b0f96e5bf4b15971 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'iu_crole' and 
           constraint_type   = 'foreign key') then
alter table iu_crole add constraint fk_2ea051107dd64b91b774af6ecbc42108 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_connecttype' and 
           constraint_type   = 'foreign key') then
alter table tpld_connecttype add constraint fk_bf471916c6ac4a2cbae6be5aff44c08f foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_devclass' and 
           constraint_type   = 'foreign key') then
alter table tpld_devclass add constraint fk_b65c0e27d69f4ed893321c093619b5a9 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_f' and 
           constraint_type   = 'foreign key') then
alter table tpld_f add constraint fk_2547b136e6cc499680e6f8af43c023e4 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_snab' and 
           constraint_type   = 'foreign key') then
alter table tpld_snab add constraint fk_5b752351db394133996243628a4864d5 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_paramtype' and 
           constraint_type   = 'foreign key') then
alter table tpld_paramtype add constraint fk_da05039a65464a8d8fa8ccf1b6b1fd48 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_grp' and 
           constraint_type   = 'foreign key') then
alter table tpld_grp add constraint fk_1be826a4c81f48d2b13fdad9e0c38d05 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_snabtop' and 
           constraint_type   = 'foreign key') then
alter table tpld_snabtop add constraint fk_995a42cbb38e4ab8a591036461f52506 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_param' and 
           constraint_type   = 'foreign key') then
alter table tpld_param add constraint fk_edaa0dcd08a24907896d301e5320febf foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpld_devtype' and 
           constraint_type   = 'foreign key') then
alter table tpld_devtype add constraint fk_af7e6cfd5ced4ca7b58bdca70003821e foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'users' and 
           constraint_type   = 'foreign key') then
alter table users add constraint fk_148bb85509654e9ea3d648dcc8ce528b foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'groups' and 
           constraint_type   = 'foreign key') then
alter table groups add constraint fk_a40e6aee7b41476d923caca251c08e87 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'groupuser' and 
           constraint_type   = 'foreign key') then
        alter table groupuser add constraint fk_fe2c9352e29a420b91343e3bdd832a6e foreign key(parentstructrowid) references groups (groupsid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpsrv_modems' and 
           constraint_type   = 'foreign key') then
alter table tpsrv_modems add constraint fk_14c8622ed9bb4d7ebddd9fed451c2e3b foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpsrv_info' and 
           constraint_type   = 'foreign key') then
alter table tpsrv_info add constraint fk_96e15a9214c24796a94d18fae814e33b foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpsrv_ports' and 
           constraint_type   = 'foreign key') then
alter table tpsrv_ports add constraint fk_253959aa96564466b984db27e6b63bbb foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'num_zones' and 
           constraint_type   = 'foreign key') then
alter table num_zones add constraint fk_59512432e6df41f9a4366bf7db1800bb foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'num_values' and 
           constraint_type   = 'foreign key') then
        alter table num_values add constraint fk_833dc00be8d74d9191032dd084befc1e foreign key(parentstructrowid) references num_zones (num_zonesid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'num_head' and 
           constraint_type   = 'foreign key') then
alter table num_head add constraint fk_c436bed9294e48a78c376d4cf32343be foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplt_reports' and 
           constraint_type   = 'foreign key') then
alter table tplt_reports add constraint fk_c104240253e649a88c98bba4c4d94293 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplt_connect' and 
           constraint_type   = 'foreign key') then
alter table tplt_connect add constraint fk_8840192788484743877c7b207e102a9f foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplt_valuebounds' and 
           constraint_type   = 'foreign key') then
alter table tplt_valuebounds add constraint fk_c233f34b05084ca0a8c1308fa0f68075 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplt_plancall' and 
           constraint_type   = 'foreign key') then
alter table tplt_plancall add constraint fk_7b74bbcae0f147958ba1461a28190f6c foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplt_mask' and 
           constraint_type   = 'foreign key') then
alter table tplt_mask add constraint fk_8e44b4cceb76440491d24c460f2835ac foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplt_bdevices' and 
           constraint_type   = 'foreign key') then
alter table tplt_bdevices add constraint fk_4e521dce5fb14285badfb4f3a74279c3 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tplt_contract' and 
           constraint_type   = 'foreign key') then
alter table tplt_contract add constraint fk_b03e0cf43a14448fbd197788ef9e75b3 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'mtzext_def' and 
           constraint_type   = 'foreign key') then
alter table mtzext_def add constraint fk_7f62144a857648bcacba1f9dc4874459 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'mtzextrel' and 
           constraint_type   = 'foreign key') then
alter table mtzextrel add constraint fk_e48fe6dd79f94d42bac3cb39f69171bc foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'iu_rcfg_mod' and 
           constraint_type   = 'foreign key') then
alter table iu_rcfg_mod add constraint fk_fa0e39846b7c45c8aecfe2fc7ecb622b foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'iu_rcfg_docmode' and 
           constraint_type   = 'foreign key') then
alter table iu_rcfg_docmode add constraint fk_cf7ed0a3642c4b10834721d86bfecbc4 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'iu_rcfg_def' and 
           constraint_type   = 'foreign key') then
alter table iu_rcfg_def add constraint fk_10f3c6e757424731b94c647263e4e304 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpq_def' and 
           constraint_type   = 'foreign key') then
alter table tpq_def add constraint fk_0ed262b2682a4f598832dde5531bdacb foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'tpq_result' and 
           constraint_type   = 'foreign key') then
alter table tpq_result add constraint fk_d6adafd47cf748e394a7f38489944e62 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'filterfieldgroup' and 
           constraint_type   = 'foreign key') then
alter table filterfieldgroup add constraint fk_98c6d923b807418c91e7c351511b5eb1 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'fileterfield' and 
           constraint_type   = 'foreign key') then
        alter table fileterfield add constraint fk_f4b3740ce6764b6ea833ede44cb9fa63 foreign key(parentstructrowid) references filterfieldgroup (filterfieldgroupid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'filters' and 
           constraint_type   = 'foreign key') then
alter table filters add constraint fk_b75ad7246b6f45bdb0bbc75d17309dc9 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'iu_int_modules' and 
           constraint_type   = 'foreign key') then
alter table iu_int_modules add constraint fk_dba8d884728647828b286af8916220b6 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'rptstruct' and 
           constraint_type   = 'foreign key') then
alter table rptstruct add constraint fk_f5e8492a2224452f85ffa14882c6554f foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'rptfields' and 
           constraint_type   = 'foreign key') then
        alter table rptfields add constraint fk_0c77d0de559e43fcb181156e126543f1 foreign key(parentstructrowid) references rptstruct (rptstructid)   on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'rptformula' and 
           constraint_type   = 'foreign key') then
alter table rptformula add constraint fk_e422132e07f44c0f8246b0f16cd9186a foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO


drop procedure if exists alter_fk
go
create procedure alter_fk() begin
if not exists (select 1 from information_schema.table_constraints where
           constraint_schema = database() and
           table_name   = 'reports' and 
           constraint_type   = 'foreign key') then
alter table reports add constraint fk_259b3dfab8ac417888fd4b715d372fc3 foreign key(instanceid) references instance (instanceid) on delete cascade;
end if;
end 
go
call alter_fk(); 
go

drop procedure if exists alter_fk
go
GO
SET @@foreign_key_checks = 1;
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--FunctionsHeader" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 


drop function IF EXISTS INSTANCE_MREF_F
GO

create function INSTANCE_MREF_F  (
 aINSTANCE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  
DETERMINISTIC
 begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function if exists instance_brief_f
go
  create function instance_brief_f  (
 ainstanceid varchar(38)
 ,alang varchar(25)
)returns varchar(255) deterministic begin
 declare abrief varchar(255);
  set abrief=' to do';
  return abrief;
end
go


drop function IF EXISTS INSTANCE_MREF_F
GO

create function INSTANCE_MREF_F  (
 aINSTANCE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  
DETERMINISTIC
 begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLC_E_BRIEF_F
GO

create function TPLC_E_BRIEF_F  (
 aTPLC_Eid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLC_E_MREF_F
GO
create function TPLC_E_MREF_F  (
 aTPLC_E_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLC_M_BRIEF_F
GO

create function TPLC_M_BRIEF_F  (
 aTPLC_Mid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLC_M_MREF_F
GO
create function TPLC_M_MREF_F  (
 aTPLC_M_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLC_HEADER_BRIEF_F
GO

create function TPLC_HEADER_BRIEF_F  (
 aTPLC_HEADERid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLC_HEADER_MREF_F
GO
create function TPLC_HEADER_MREF_F  (
 aTPLC_HEADER_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLC_D_BRIEF_F
GO

create function TPLC_D_BRIEF_F  (
 aTPLC_Did binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLC_D_MREF_F
GO
create function TPLC_D_MREF_F  (
 aTPLC_D_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLC_H_BRIEF_F
GO

create function TPLC_H_BRIEF_F  (
 aTPLC_Hid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLC_H_MREF_F
GO
create function TPLC_H_MREF_F  (
 aTPLC_H_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLC_MISSING_BRIEF_F
GO

create function TPLC_MISSING_BRIEF_F  (
 aTPLC_MISSINGid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLC_MISSING_MREF_F
GO
create function TPLC_MISSING_MREF_F  (
 aTPLC_MISSING_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLC_T_BRIEF_F
GO

create function TPLC_T_BRIEF_F  (
 aTPLC_Tid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLC_T_MREF_F
GO
create function TPLC_T_MREF_F  (
 aTPLC_T_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPN_DEF_BRIEF_F
GO

create function TPN_DEF_BRIEF_F  (
 aTPN_DEFid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPN_DEF_MREF_F
GO
create function TPN_DEF_MREF_F  (
 aTPN_DEF_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS iu_u_def_BRIEF_F
GO

create function iu_u_def_BRIEF_F  (
 aiu_u_defid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS iu_u_def_MREF_F
GO
create function iu_u_def_MREF_F  (
 aiu_u_def_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS GENPACKAGE_BRIEF_F
GO

create function GENPACKAGE_BRIEF_F  (
 aGENPACKAGEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS GENPACKAGE_MREF_F
GO
create function GENPACKAGE_MREF_F  (
 aGENPACKAGE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS GENERATOR_TARGET_BRIEF_F
GO

create function GENERATOR_TARGET_BRIEF_F  (
 aGENERATOR_TARGETid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS GENERATOR_TARGET_MREF_F
GO
create function GENERATOR_TARGET_MREF_F  (
 aGENERATOR_TARGET_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS GENREFERENCE_BRIEF_F
GO

create function GENREFERENCE_BRIEF_F  (
 aGENREFERENCEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS GENREFERENCE_MREF_F
GO
create function GENREFERENCE_MREF_F  (
 aGENREFERENCE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS GENMANUALCODE_BRIEF_F
GO

create function GENMANUALCODE_BRIEF_F  (
 aGENMANUALCODEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS GENMANUALCODE_MREF_F
GO
create function GENMANUALCODE_MREF_F  (
 aGENMANUALCODE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS GENCONTROLS_BRIEF_F
GO

create function GENCONTROLS_BRIEF_F  (
 aGENCONTROLSid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS GENCONTROLS_MREF_F
GO
create function GENCONTROLS_MREF_F  (
 aGENCONTROLS_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS LocalizeInfo_BRIEF_F
GO

create function LocalizeInfo_BRIEF_F  (
 aLocalizeInfoid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS LocalizeInfo_MREF_F
GO
create function LocalizeInfo_MREF_F  (
 aLocalizeInfo_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELDTYPE_BRIEF_F
GO

create function FIELDTYPE_BRIEF_F  (
 aFIELDTYPEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELDTYPE_MREF_F
GO
create function FIELDTYPE_MREF_F  (
 aFIELDTYPE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ENUMITEM_BRIEF_F
GO

create function ENUMITEM_BRIEF_F  (
 aENUMITEMid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ENUMITEM_MREF_F
GO
create function ENUMITEM_MREF_F  (
 aENUMITEM_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELDTYPEMAP_BRIEF_F
GO

create function FIELDTYPEMAP_BRIEF_F  (
 aFIELDTYPEMAPid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELDTYPEMAP_MREF_F
GO
create function FIELDTYPEMAP_MREF_F  (
 aFIELDTYPEMAP_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS SHAREDMETHOD_BRIEF_F
GO

create function SHAREDMETHOD_BRIEF_F  (
 aSHAREDMETHODid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS SHAREDMETHOD_MREF_F
GO
create function SHAREDMETHOD_MREF_F  (
 aSHAREDMETHOD_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS SCRIPT_BRIEF_F
GO

create function SCRIPT_BRIEF_F  (
 aSCRIPTid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS SCRIPT_MREF_F
GO
create function SCRIPT_MREF_F  (
 aSCRIPT_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS PARAMETERS_BRIEF_F
GO

create function PARAMETERS_BRIEF_F  (
 aPARAMETERSid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS PARAMETERS_MREF_F
GO
create function PARAMETERS_MREF_F  (
 aPARAMETERS_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS OBJECTTYPE_BRIEF_F
GO

create function OBJECTTYPE_BRIEF_F  (
 aOBJECTTYPEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS OBJECTTYPE_MREF_F
GO
create function OBJECTTYPE_MREF_F  (
 aOBJECTTYPE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS OBJSTATUS_BRIEF_F
GO

create function OBJSTATUS_BRIEF_F  (
 aOBJSTATUSid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS OBJSTATUS_MREF_F
GO
create function OBJSTATUS_MREF_F  (
 aOBJSTATUS_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS NEXTSTATE_BRIEF_F
GO

create function NEXTSTATE_BRIEF_F  (
 aNEXTSTATEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS NEXTSTATE_MREF_F
GO
create function NEXTSTATE_MREF_F  (
 aNEXTSTATE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS OBJECTMODE_BRIEF_F
GO

create function OBJECTMODE_BRIEF_F  (
 aOBJECTMODEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS OBJECTMODE_MREF_F
GO
create function OBJECTMODE_MREF_F  (
 aOBJECTMODE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS STRUCTRESTRICTION_BRIEF_F
GO

create function STRUCTRESTRICTION_BRIEF_F  (
 aSTRUCTRESTRICTIONid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS STRUCTRESTRICTION_MREF_F
GO
create function STRUCTRESTRICTION_MREF_F  (
 aSTRUCTRESTRICTION_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS METHODRESTRICTION_BRIEF_F
GO

create function METHODRESTRICTION_BRIEF_F  (
 aMETHODRESTRICTIONid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS METHODRESTRICTION_MREF_F
GO
create function METHODRESTRICTION_MREF_F  (
 aMETHODRESTRICTION_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELDRESTRICTION_BRIEF_F
GO

create function FIELDRESTRICTION_BRIEF_F  (
 aFIELDRESTRICTIONid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELDRESTRICTION_MREF_F
GO
create function FIELDRESTRICTION_MREF_F  (
 aFIELDRESTRICTION_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TYPEMENU_BRIEF_F
GO

create function TYPEMENU_BRIEF_F  (
 aTYPEMENUid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TYPEMENU_MREF_F
GO
create function TYPEMENU_MREF_F  (
 aTYPEMENU_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS INSTANCEVALIDATOR_BRIEF_F
GO

create function INSTANCEVALIDATOR_BRIEF_F  (
 aINSTANCEVALIDATORid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS INSTANCEVALIDATOR_MREF_F
GO
create function INSTANCEVALIDATOR_MREF_F  (
 aINSTANCEVALIDATOR_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS PART_BRIEF_F
GO

create function PART_BRIEF_F  (
 aPARTid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS PART_MREF_F
GO
create function PART_MREF_F  (
 aPART_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS PARTMENU_BRIEF_F
GO

create function PARTMENU_BRIEF_F  (
 aPARTMENUid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS PARTMENU_MREF_F
GO
create function PARTMENU_MREF_F  (
 aPARTMENU_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS PARTPARAMMAP_BRIEF_F
GO

create function PARTPARAMMAP_BRIEF_F  (
 aPARTPARAMMAPid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS PARTPARAMMAP_MREF_F
GO
create function PARTPARAMMAP_MREF_F  (
 aPARTPARAMMAP_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS PARTVIEW_BRIEF_F
GO

create function PARTVIEW_BRIEF_F  (
 aPARTVIEWid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS PARTVIEW_MREF_F
GO
create function PARTVIEW_MREF_F  (
 aPARTVIEW_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ViewColumn_BRIEF_F
GO

create function ViewColumn_BRIEF_F  (
 aViewColumnid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ViewColumn_MREF_F
GO
create function ViewColumn_MREF_F  (
 aViewColumn_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS PARTVIEW_LNK_BRIEF_F
GO

create function PARTVIEW_LNK_BRIEF_F  (
 aPARTVIEW_LNKid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS PARTVIEW_LNK_MREF_F
GO
create function PARTVIEW_LNK_MREF_F  (
 aPARTVIEW_LNK_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS VALIDATOR_BRIEF_F
GO

create function VALIDATOR_BRIEF_F  (
 aVALIDATORid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS VALIDATOR_MREF_F
GO
create function VALIDATOR_MREF_F  (
 aVALIDATOR_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS UNIQUECONSTRAINT_BRIEF_F
GO

create function UNIQUECONSTRAINT_BRIEF_F  (
 aUNIQUECONSTRAINTid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS UNIQUECONSTRAINT_MREF_F
GO
create function UNIQUECONSTRAINT_MREF_F  (
 aUNIQUECONSTRAINT_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS CONSTRAINTFIELD_BRIEF_F
GO

create function CONSTRAINTFIELD_BRIEF_F  (
 aCONSTRAINTFIELDid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS CONSTRAINTFIELD_MREF_F
GO
create function CONSTRAINTFIELD_MREF_F  (
 aCONSTRAINTFIELD_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ExtenderInterface_BRIEF_F
GO

create function ExtenderInterface_BRIEF_F  (
 aExtenderInterfaceid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ExtenderInterface_MREF_F
GO
create function ExtenderInterface_MREF_F  (
 aExtenderInterface_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELD_BRIEF_F
GO

create function FIELD_BRIEF_F  (
 aFIELDid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELD_MREF_F
GO
create function FIELD_MREF_F  (
 aFIELD_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FldExtenders_BRIEF_F
GO

create function FldExtenders_BRIEF_F  (
 aFldExtendersid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FldExtenders_MREF_F
GO
create function FldExtenders_MREF_F  (
 aFldExtenders_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELDSRCDEF_BRIEF_F
GO

create function FIELDSRCDEF_BRIEF_F  (
 aFIELDSRCDEFid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELDSRCDEF_MREF_F
GO
create function FIELDSRCDEF_MREF_F  (
 aFIELDSRCDEF_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS DINAMICFILTERSCRIPT_BRIEF_F
GO

create function DINAMICFILTERSCRIPT_BRIEF_F  (
 aDINAMICFILTERSCRIPTid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS DINAMICFILTERSCRIPT_MREF_F
GO
create function DINAMICFILTERSCRIPT_MREF_F  (
 aDINAMICFILTERSCRIPT_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELDEXPRESSION_BRIEF_F
GO

create function FIELDEXPRESSION_BRIEF_F  (
 aFIELDEXPRESSIONid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELDEXPRESSION_MREF_F
GO
create function FIELDEXPRESSION_MREF_F  (
 aFIELDEXPRESSION_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELDVALIDATOR_BRIEF_F
GO

create function FIELDVALIDATOR_BRIEF_F  (
 aFIELDVALIDATORid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELDVALIDATOR_MREF_F
GO
create function FIELDVALIDATOR_MREF_F  (
 aFIELDVALIDATOR_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELDMENU_BRIEF_F
GO

create function FIELDMENU_BRIEF_F  (
 aFIELDMENUid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELDMENU_MREF_F
GO
create function FIELDMENU_MREF_F  (
 aFIELDMENU_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FIELDPARAMMAP_BRIEF_F
GO

create function FIELDPARAMMAP_BRIEF_F  (
 aFIELDPARAMMAPid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FIELDPARAMMAP_MREF_F
GO
create function FIELDPARAMMAP_MREF_F  (
 aFIELDPARAMMAP_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS MTZAPP_BRIEF_F
GO

create function MTZAPP_BRIEF_F  (
 aMTZAPPid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS MTZAPP_MREF_F
GO
create function MTZAPP_MREF_F  (
 aMTZAPP_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ParentPackage_BRIEF_F
GO

create function ParentPackage_BRIEF_F  (
 aParentPackageid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ParentPackage_MREF_F
GO
create function ParentPackage_MREF_F  (
 aParentPackage_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS JournalColumn_BRIEF_F
GO

create function JournalColumn_BRIEF_F  (
 aJournalColumnid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS JournalColumn_MREF_F
GO
create function JournalColumn_MREF_F  (
 aJournalColumn_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS JColumnSource_BRIEF_F
GO

create function JColumnSource_BRIEF_F  (
 aJColumnSourceid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS JColumnSource_MREF_F
GO
create function JColumnSource_MREF_F  (
 aJColumnSource_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS JournalSrc_BRIEF_F
GO

create function JournalSrc_BRIEF_F  (
 aJournalSrcid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS JournalSrc_MREF_F
GO
create function JournalSrc_MREF_F  (
 aJournalSrc_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS Journal_BRIEF_F
GO

create function Journal_BRIEF_F  (
 aJournalid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS Journal_MREF_F
GO
create function Journal_MREF_F  (
 aJournal_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS bpc_info_BRIEF_F
GO

create function bpc_info_BRIEF_F  (
 abpc_infoid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS bpc_info_MREF_F
GO
create function bpc_info_MREF_F  (
 abpc_info_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS the_Session_BRIEF_F
GO

create function the_Session_BRIEF_F  (
 athe_Sessionid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS the_Session_MREF_F
GO
create function the_Session_MREF_F  (
 athe_Session_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS SysRefCache_BRIEF_F
GO

create function SysRefCache_BRIEF_F  (
 aSysRefCacheid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS SysRefCache_MREF_F
GO
create function SysRefCache_MREF_F  (
 aSysRefCache_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS SysLog_BRIEF_F
GO

create function SysLog_BRIEF_F  (
 aSysLogid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS SysLog_MREF_F
GO
create function SysLog_MREF_F  (
 aSysLog_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLS_INFO_BRIEF_F
GO

create function TPLS_INFO_BRIEF_F  (
 aTPLS_INFOid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLS_INFO_MREF_F
GO
create function TPLS_INFO_MREF_F  (
 aTPLS_INFO_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLS_PARAM_BRIEF_F
GO

create function TPLS_PARAM_BRIEF_F  (
 aTPLS_PARAMid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLS_PARAM_MREF_F
GO
create function TPLS_PARAM_MREF_F  (
 aTPLS_PARAM_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ARMJournal_BRIEF_F
GO

create function ARMJournal_BRIEF_F  (
 aARMJournalid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ARMJournal_MREF_F
GO
create function ARMJournal_MREF_F  (
 aARMJournal_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ARMJRNLREP_BRIEF_F
GO

create function ARMJRNLREP_BRIEF_F  (
 aARMJRNLREPid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ARMJRNLREP_MREF_F
GO
create function ARMJRNLREP_MREF_F  (
 aARMJRNLREP_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ARMJRNLRUN_BRIEF_F
GO

create function ARMJRNLRUN_BRIEF_F  (
 aARMJRNLRUNid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ARMJRNLRUN_MREF_F
GO
create function ARMJRNLRUN_MREF_F  (
 aARMJRNLRUN_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ARMJRNLADD_BRIEF_F
GO

create function ARMJRNLADD_BRIEF_F  (
 aARMJRNLADDid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ARMJRNLADD_MREF_F
GO
create function ARMJRNLADD_MREF_F  (
 aARMJRNLADD_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS EntryPoints_BRIEF_F
GO

create function EntryPoints_BRIEF_F  (
 aEntryPointsid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS EntryPoints_MREF_F
GO
create function EntryPoints_MREF_F  (
 aEntryPoints_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS EPFilterLink_BRIEF_F
GO

create function EPFilterLink_BRIEF_F  (
 aEPFilterLinkid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS EPFilterLink_MREF_F
GO
create function EPFilterLink_MREF_F  (
 aEPFilterLink_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS WorkPlace_BRIEF_F
GO

create function WorkPlace_BRIEF_F  (
 aWorkPlaceid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS WorkPlace_MREF_F
GO
create function WorkPlace_MREF_F  (
 aWorkPlace_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS ARMTypes_BRIEF_F
GO

create function ARMTypes_BRIEF_F  (
 aARMTypesid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS ARMTypes_MREF_F
GO
create function ARMTypes_MREF_F  (
 aARMTypes_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS iu_crole_BRIEF_F
GO

create function iu_crole_BRIEF_F  (
 aiu_croleid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS iu_crole_MREF_F
GO
create function iu_crole_MREF_F  (
 aiu_crole_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_CONNECTTYPE_BRIEF_F
GO

create function TPLD_CONNECTTYPE_BRIEF_F  (
 aTPLD_CONNECTTYPEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_CONNECTTYPE_MREF_F
GO
create function TPLD_CONNECTTYPE_MREF_F  (
 aTPLD_CONNECTTYPE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_DEVCLASS_BRIEF_F
GO

create function TPLD_DEVCLASS_BRIEF_F  (
 aTPLD_DEVCLASSid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_DEVCLASS_MREF_F
GO
create function TPLD_DEVCLASS_MREF_F  (
 aTPLD_DEVCLASS_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_F_BRIEF_F
GO

create function TPLD_F_BRIEF_F  (
 aTPLD_Fid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_F_MREF_F
GO
create function TPLD_F_MREF_F  (
 aTPLD_F_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_SNAB_BRIEF_F
GO

create function TPLD_SNAB_BRIEF_F  (
 aTPLD_SNABid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_SNAB_MREF_F
GO
create function TPLD_SNAB_MREF_F  (
 aTPLD_SNAB_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_PARAMTYPE_BRIEF_F
GO

create function TPLD_PARAMTYPE_BRIEF_F  (
 aTPLD_PARAMTYPEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_PARAMTYPE_MREF_F
GO
create function TPLD_PARAMTYPE_MREF_F  (
 aTPLD_PARAMTYPE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_GRP_BRIEF_F
GO

create function TPLD_GRP_BRIEF_F  (
 aTPLD_GRPid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_GRP_MREF_F
GO
create function TPLD_GRP_MREF_F  (
 aTPLD_GRP_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_SNABTOP_BRIEF_F
GO

create function TPLD_SNABTOP_BRIEF_F  (
 aTPLD_SNABTOPid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_SNABTOP_MREF_F
GO
create function TPLD_SNABTOP_MREF_F  (
 aTPLD_SNABTOP_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_PARAM_BRIEF_F
GO

create function TPLD_PARAM_BRIEF_F  (
 aTPLD_PARAMid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_PARAM_MREF_F
GO
create function TPLD_PARAM_MREF_F  (
 aTPLD_PARAM_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLD_DEVTYPE_BRIEF_F
GO

create function TPLD_DEVTYPE_BRIEF_F  (
 aTPLD_DEVTYPEid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLD_DEVTYPE_MREF_F
GO
create function TPLD_DEVTYPE_MREF_F  (
 aTPLD_DEVTYPE_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS Users_BRIEF_F
GO

create function Users_BRIEF_F  (
 aUsersid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS Users_MREF_F
GO
create function Users_MREF_F  (
 aUsers_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS Groups_BRIEF_F
GO

create function Groups_BRIEF_F  (
 aGroupsid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS Groups_MREF_F
GO
create function Groups_MREF_F  (
 aGroups_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS GroupUser_BRIEF_F
GO

create function GroupUser_BRIEF_F  (
 aGroupUserid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS GroupUser_MREF_F
GO
create function GroupUser_MREF_F  (
 aGroupUser_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPSRV_MODEMS_BRIEF_F
GO

create function TPSRV_MODEMS_BRIEF_F  (
 aTPSRV_MODEMSid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPSRV_MODEMS_MREF_F
GO
create function TPSRV_MODEMS_MREF_F  (
 aTPSRV_MODEMS_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPSRV_INFO_BRIEF_F
GO

create function TPSRV_INFO_BRIEF_F  (
 aTPSRV_INFOid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPSRV_INFO_MREF_F
GO
create function TPSRV_INFO_MREF_F  (
 aTPSRV_INFO_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPSRV_PORTS_BRIEF_F
GO

create function TPSRV_PORTS_BRIEF_F  (
 aTPSRV_PORTSid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPSRV_PORTS_MREF_F
GO
create function TPSRV_PORTS_MREF_F  (
 aTPSRV_PORTS_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS Num_zones_BRIEF_F
GO

create function Num_zones_BRIEF_F  (
 aNum_zonesid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS Num_zones_MREF_F
GO
create function Num_zones_MREF_F  (
 aNum_zones_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS Num_Values_BRIEF_F
GO

create function Num_Values_BRIEF_F  (
 aNum_Valuesid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS Num_Values_MREF_F
GO
create function Num_Values_MREF_F  (
 aNum_Values_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS Num_head_BRIEF_F
GO

create function Num_head_BRIEF_F  (
 aNum_headid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS Num_head_MREF_F
GO
create function Num_head_MREF_F  (
 aNum_head_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLT_REPORTS_BRIEF_F
GO

create function TPLT_REPORTS_BRIEF_F  (
 aTPLT_REPORTSid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLT_REPORTS_MREF_F
GO
create function TPLT_REPORTS_MREF_F  (
 aTPLT_REPORTS_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLT_CONNECT_BRIEF_F
GO

create function TPLT_CONNECT_BRIEF_F  (
 aTPLT_CONNECTid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLT_CONNECT_MREF_F
GO
create function TPLT_CONNECT_MREF_F  (
 aTPLT_CONNECT_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLT_VALUEBOUNDS_BRIEF_F
GO

create function TPLT_VALUEBOUNDS_BRIEF_F  (
 aTPLT_VALUEBOUNDSid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLT_VALUEBOUNDS_MREF_F
GO
create function TPLT_VALUEBOUNDS_MREF_F  (
 aTPLT_VALUEBOUNDS_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLT_PLANCALL_BRIEF_F
GO

create function TPLT_PLANCALL_BRIEF_F  (
 aTPLT_PLANCALLid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLT_PLANCALL_MREF_F
GO
create function TPLT_PLANCALL_MREF_F  (
 aTPLT_PLANCALL_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLT_MASK_BRIEF_F
GO

create function TPLT_MASK_BRIEF_F  (
 aTPLT_MASKid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLT_MASK_MREF_F
GO
create function TPLT_MASK_MREF_F  (
 aTPLT_MASK_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLT_BDEVICES_BRIEF_F
GO

create function TPLT_BDEVICES_BRIEF_F  (
 aTPLT_BDEVICESid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLT_BDEVICES_MREF_F
GO
create function TPLT_BDEVICES_MREF_F  (
 aTPLT_BDEVICES_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPLT_CONTRACT_BRIEF_F
GO

create function TPLT_CONTRACT_BRIEF_F  (
 aTPLT_CONTRACTid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPLT_CONTRACT_MREF_F
GO
create function TPLT_CONTRACT_MREF_F  (
 aTPLT_CONTRACT_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS MTZExt_def_BRIEF_F
GO

create function MTZExt_def_BRIEF_F  (
 aMTZExt_defid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS MTZExt_def_MREF_F
GO
create function MTZExt_def_MREF_F  (
 aMTZExt_def_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS MTZExtRel_BRIEF_F
GO

create function MTZExtRel_BRIEF_F  (
 aMTZExtRelid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS MTZExtRel_MREF_F
GO
create function MTZExtRel_MREF_F  (
 aMTZExtRel_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS iu_rcfg_mod_BRIEF_F
GO

create function iu_rcfg_mod_BRIEF_F  (
 aiu_rcfg_modid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS iu_rcfg_mod_MREF_F
GO
create function iu_rcfg_mod_MREF_F  (
 aiu_rcfg_mod_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS iu_rcfg_docmode_BRIEF_F
GO

create function iu_rcfg_docmode_BRIEF_F  (
 aiu_rcfg_docmodeid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS iu_rcfg_docmode_MREF_F
GO
create function iu_rcfg_docmode_MREF_F  (
 aiu_rcfg_docmode_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS iu_rcfg_def_BRIEF_F
GO

create function iu_rcfg_def_BRIEF_F  (
 aiu_rcfg_defid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS iu_rcfg_def_MREF_F
GO
create function iu_rcfg_def_MREF_F  (
 aiu_rcfg_def_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPQ_DEF_BRIEF_F
GO

create function TPQ_DEF_BRIEF_F  (
 aTPQ_DEFid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPQ_DEF_MREF_F
GO
create function TPQ_DEF_MREF_F  (
 aTPQ_DEF_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS TPQ_result_BRIEF_F
GO

create function TPQ_result_BRIEF_F  (
 aTPQ_resultid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS TPQ_result_MREF_F
GO
create function TPQ_result_MREF_F  (
 aTPQ_result_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FilterFieldGroup_BRIEF_F
GO

create function FilterFieldGroup_BRIEF_F  (
 aFilterFieldGroupid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FilterFieldGroup_MREF_F
GO
create function FilterFieldGroup_MREF_F  (
 aFilterFieldGroup_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS FileterField_BRIEF_F
GO

create function FileterField_BRIEF_F  (
 aFileterFieldid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS FileterField_MREF_F
GO
create function FileterField_MREF_F  (
 aFileterField_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS Filters_BRIEF_F
GO

create function Filters_BRIEF_F  (
 aFiltersid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS Filters_MREF_F
GO
create function Filters_MREF_F  (
 aFilters_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS iu_int_modules_BRIEF_F
GO

create function iu_int_modules_BRIEF_F  (
 aiu_int_modulesid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS iu_int_modules_MREF_F
GO
create function iu_int_modules_MREF_F  (
 aiu_int_modules_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS RPTStruct_BRIEF_F
GO

create function RPTStruct_BRIEF_F  (
 aRPTStructid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS RPTStruct_MREF_F
GO
create function RPTStruct_MREF_F  (
 aRPTStruct_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS RPTFields_BRIEF_F
GO

create function RPTFields_BRIEF_F  (
 aRPTFieldsid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS RPTFields_MREF_F
GO
create function RPTFields_MREF_F  (
 aRPTFields_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS RPTFormula_BRIEF_F
GO

create function RPTFormula_BRIEF_F  (
 aRPTFormulaid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS RPTFormula_MREF_F
GO
create function RPTFormula_MREF_F  (
 aRPTFormula_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO


drop function IF EXISTS Reports_BRIEF_F
GO

create function Reports_BRIEF_F  (
 aReportsid binary(16)
 ,aLang varchar(25)
) returns varchar(255)  
 DETERMINISTIC  
 begin  
 declare aBRIEF varchar(255);
  set aBRIEF='to do';
return aBRIEF;
end 
GO


drop function IF EXISTS Reports_MREF_F
GO
create function Reports_MREF_F  (
 aReports_ref varchar(255)
 ,aLang varchar(25)
) returns varchar(255)  DETERMINISTIC begin  
 declare aMREF varchar(255);
  set aMREF='to do';
return aMREF;
end 
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Functions" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 


drop function if exists instance_mref_f
go
create function instance_mref_f  (
 ainstance_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select instance_brief_f(instanceid, alang)  from instance
where ainstance_ref like concat('%',replace(replace(b2g(instanceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO


drop function if exists instance_brief_f
go
  create function instance_brief_f  (
 ainstanceid binary(16)
 ,alang varchar(25)
)returns varchar(255)
reads sql data
begin
 declare abrief varchar(255);
 declare aec int;
if ainstanceid is null then set abrief=''; return abrief; end if;
select count(*) into aec from instance where instanceid=ainstanceid;
if aec=0 then
  set abrief='';
  select concat(abrief
  ,  ifnull(name,''))
 into abrief from instance  where  instanceid = ainstanceid;
else
  set abrief= '';
end if;
set abrief=left(abrief,255);
  return abrief;
end
go
GO


drop function if exists instance_mref_f
go
create function instance_mref_f  (
 ainstance_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select instance_brief_f(instanceid, alang)  from instance
where ainstance_ref like concat('%',replace(replace(b2g(instanceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplc_e_brief_f
go

create function tplc_e_brief_f  (
 atplc_eid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplc_eid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplc_e where tplc_eid=atplc_eid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(dcall,'') ,' '  )
  into abrief   from tplc_e  where  tplc_eid = atplc_eid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplc_e_mref_f
go

create function tplc_e_mref_f  (
 atplc_e_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplc_e_brief_f(tplc_eid, alang)  from tplc_e
where atplc_e_ref like concat('%',replace(replace(b2g(tplc_eid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplc_m_brief_f
go

create function tplc_m_brief_f  (
 atplc_mid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplc_mid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplc_m where tplc_mid=atplc_mid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(dcall,'') ,' '  )
  into abrief   from tplc_m  where  tplc_mid = atplc_mid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplc_m_mref_f
go

create function tplc_m_mref_f  (
 atplc_m_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplc_m_brief_f(tplc_mid, alang)  from tplc_m
where atplc_m_ref like concat('%',replace(replace(b2g(tplc_mid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplc_header_brief_f
go

create function tplc_header_brief_f  (
 atplc_headerid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplc_headerid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplc_header where tplc_headerid=atplc_headerid;
if aec&lt;&gt;0 then
  set abrief='';
select id_bd
 into atmpid  from tplc_header  where  tplc_headerid = atplc_headerid; 
 select tplt_bdevices_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplc_header_mref_f
go

create function tplc_header_mref_f  (
 atplc_header_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplc_header_brief_f(tplc_headerid, alang)  from tplc_header
where atplc_header_ref like concat('%',replace(replace(b2g(tplc_headerid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplc_d_brief_f
go

create function tplc_d_brief_f  (
 atplc_did binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplc_did is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplc_d where tplc_did=atplc_did;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(dcall,'') ,' '  )
  into abrief   from tplc_d  where  tplc_did = atplc_did; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplc_d_mref_f
go

create function tplc_d_mref_f  (
 atplc_d_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplc_d_brief_f(tplc_did, alang)  from tplc_d
where atplc_d_ref like concat('%',replace(replace(b2g(tplc_did),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplc_h_brief_f
go

create function tplc_h_brief_f  (
 atplc_hid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplc_hid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplc_h where tplc_hid=atplc_hid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(dcall,'') ,' '  )
  into abrief   from tplc_h  where  tplc_hid = atplc_hid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplc_h_mref_f
go

create function tplc_h_mref_f  (
 atplc_h_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplc_h_brief_f(tplc_hid, alang)  from tplc_h
where atplc_h_ref like concat('%',replace(replace(b2g(tplc_hid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplc_missing_brief_f
go

create function tplc_missing_brief_f  (
 atplc_missingid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplc_missingid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplc_missing where tplc_missingid=atplc_missingid;
if aec&lt;&gt;0 then
  set abrief='';
select atype
 into atmpid  from tplc_missing  where  tplc_missingid = atplc_missingid; 
 select tpld_paramtype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(adate,'') ,' '  )
  into abrief   from tplc_missing  where  tplc_missingid = atplc_missingid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplc_missing_mref_f
go

create function tplc_missing_mref_f  (
 atplc_missing_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplc_missing_brief_f(tplc_missingid, alang)  from tplc_missing
where atplc_missing_ref like concat('%',replace(replace(b2g(tplc_missingid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplc_t_brief_f
go

create function tplc_t_brief_f  (
 atplc_tid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplc_tid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplc_t where tplc_tid=atplc_tid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(dcall,'') ,' '  )
  into abrief   from tplc_t  where  tplc_tid = atplc_tid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplc_t_mref_f
go

create function tplc_t_mref_f  (
 atplc_t_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplc_t_brief_f(tplc_tid, alang)  from tplc_t
where atplc_t_ref like concat('%',replace(replace(b2g(tplc_tid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpn_def_brief_f
go

create function tpn_def_brief_f  (
 atpn_defid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpn_defid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpn_def where tpn_defid=atpn_defid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(addr,'') ,' '  )
  into abrief   from tpn_def  where  tpn_defid = atpn_defid; 
select orgunit
 into atmpid  from tpn_def  where  tpn_defid = atpn_defid; 
 select tpld_f_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpn_def_mref_f
go

create function tpn_def_mref_f  (
 atpn_def_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpn_def_brief_f(tpn_defid, alang)  from tpn_def
where atpn_def_ref like concat('%',replace(replace(b2g(tpn_defid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists iu_u_def_brief_f
go

create function iu_u_def_brief_f  (
 aiu_u_defid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_u_defid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_u_def where iu_u_defid=aiu_u_defid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(lastname,'') ,' '  )
  into abrief   from iu_u_def  where  iu_u_defid = aiu_u_defid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from iu_u_def  where  iu_u_defid = aiu_u_defid; 
  select concat(abrief 
  , '' , ifnull(surname,'') ,' '  )
  into abrief   from iu_u_def  where  iu_u_defid = aiu_u_defid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists iu_u_def_mref_f
go

create function iu_u_def_mref_f  (
 aiu_u_def_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_u_def_brief_f(iu_u_defid, alang)  from iu_u_def
where aiu_u_def_ref like concat('%',replace(replace(b2g(iu_u_defid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists genpackage_brief_f
go

create function genpackage_brief_f  (
 agenpackageid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agenpackageid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from genpackage where genpackageid=agenpackageid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from genpackage  where  genpackageid = agenpackageid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists genpackage_mref_f
go

create function genpackage_mref_f  (
 agenpackage_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select genpackage_brief_f(genpackageid, alang)  from genpackage
where agenpackage_ref like concat('%',replace(replace(b2g(genpackageid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists generator_target_brief_f
go

create function generator_target_brief_f  (
 agenerator_targetid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agenerator_targetid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from generator_target where generator_targetid=agenerator_targetid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from generator_target  where  generator_targetid = agenerator_targetid; 
 select targettype
 into aec  from generator_target where generator_targetid=agenerator_targetid;
  case aec 
when 0 then 
  select concat(abrief ,
 'субд; ') into abrief ;
when 3 then 
  select concat(abrief ,
 'документация; ') into abrief ;
when 1 then 
  select concat(abrief ,
 'модель; ') into abrief ;
when 2 then 
  select concat(abrief ,
 'приложение; ') into abrief ;
when 4 then 
  select concat(abrief ,
 'арм; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists generator_target_mref_f
go

create function generator_target_mref_f  (
 agenerator_target_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select generator_target_brief_f(generator_targetid, alang)  from generator_target
where agenerator_target_ref like concat('%',replace(replace(b2g(generator_targetid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists genreference_brief_f
go

create function genreference_brief_f  (
 agenreferenceid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agenreferenceid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from genreference where genreferenceid=agenreferenceid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from genreference  where  genreferenceid = agenreferenceid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists genreference_mref_f
go

create function genreference_mref_f  (
 agenreference_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select genreference_brief_f(genreferenceid, alang)  from genreference
where agenreference_ref like concat('%',replace(replace(b2g(genreferenceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists genmanualcode_brief_f
go

create function genmanualcode_brief_f  (
 agenmanualcodeid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agenmanualcodeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from genmanualcode where genmanualcodeid=agenmanualcodeid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from genmanualcode  where  genmanualcodeid = agenmanualcodeid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists genmanualcode_mref_f
go

create function genmanualcode_mref_f  (
 agenmanualcode_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select genmanualcode_brief_f(genmanualcodeid, alang)  from genmanualcode
where agenmanualcode_ref like concat('%',replace(replace(b2g(genmanualcodeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists gencontrols_brief_f
go

create function gencontrols_brief_f  (
 agencontrolsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agencontrolsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from gencontrols where gencontrolsid=agencontrolsid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(controlprogid,'') ,' '  )
  into abrief   from gencontrols  where  gencontrolsid = agencontrolsid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists gencontrols_mref_f
go

create function gencontrols_mref_f  (
 agencontrols_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select gencontrols_brief_f(gencontrolsid, alang)  from gencontrols
where agencontrols_ref like concat('%',replace(replace(b2g(gencontrolsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists localizeinfo_brief_f
go

create function localizeinfo_brief_f  (
 alocalizeinfoid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if alocalizeinfoid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from localizeinfo where localizeinfoid=alocalizeinfoid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(langfull,'') ,' '  )
  into abrief   from localizeinfo  where  localizeinfoid = alocalizeinfoid; 
  select concat(abrief 
  , '' , ifnull(langshort,'') ,' '  )
  into abrief   from localizeinfo  where  localizeinfoid = alocalizeinfoid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists localizeinfo_mref_f
go

create function localizeinfo_mref_f  (
 alocalizeinfo_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select localizeinfo_brief_f(localizeinfoid, alang)  from localizeinfo
where alocalizeinfo_ref like concat('%',replace(replace(b2g(localizeinfoid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fieldtype_brief_f
go

create function fieldtype_brief_f  (
 afieldtypeid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldtypeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldtype where fieldtypeid=afieldtypeid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from fieldtype  where  fieldtypeid = afieldtypeid; 
 select typestyle
 into aec  from fieldtype where fieldtypeid=afieldtypeid;
  case aec 
when 4 then 
  select concat(abrief ,
 'ссылка; ') into abrief ;
when 1 then 
  select concat(abrief ,
 'выражение; ') into abrief ;
when 5 then 
  select concat(abrief ,
 'элемент оформления; ') into abrief ;
when 3 then 
  select concat(abrief ,
 'интервал; ') into abrief ;
when 2 then 
  select concat(abrief ,
 'перечисление; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'скалярный тип; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fieldtype_mref_f
go

create function fieldtype_mref_f  (
 afieldtype_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldtype_brief_f(fieldtypeid, alang)  from fieldtype
where afieldtype_ref like concat('%',replace(replace(b2g(fieldtypeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists enumitem_brief_f
go

create function enumitem_brief_f  (
 aenumitemid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aenumitemid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from enumitem where enumitemid=aenumitemid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from enumitem  where  enumitemid = aenumitemid; 
  select concat(abrief 
  , '' , ifnull(namevalue,'') ,' '  )
  into abrief   from enumitem  where  enumitemid = aenumitemid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists enumitem_mref_f
go

create function enumitem_mref_f  (
 aenumitem_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select enumitem_brief_f(enumitemid, alang)  from enumitem
where aenumitem_ref like concat('%',replace(replace(b2g(enumitemid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fieldtypemap_brief_f
go

create function fieldtypemap_brief_f  (
 afieldtypemapid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldtypemapid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldtypemap where fieldtypemapid=afieldtypemapid;
if aec&lt;&gt;0 then
  set abrief='';
select target
 into atmpid  from fieldtypemap  where  fieldtypemapid = afieldtypemapid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(stoagetype,'') ,' '  )
  into abrief   from fieldtypemap  where  fieldtypemapid = afieldtypemapid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fieldtypemap_mref_f
go

create function fieldtypemap_mref_f  (
 afieldtypemap_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldtypemap_brief_f(fieldtypemapid, alang)  from fieldtypemap
where afieldtypemap_ref like concat('%',replace(replace(b2g(fieldtypemapid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists sharedmethod_brief_f
go

create function sharedmethod_brief_f  (
 asharedmethodid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if asharedmethodid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from sharedmethod where sharedmethodid=asharedmethodid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from sharedmethod  where  sharedmethodid = asharedmethodid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists sharedmethod_mref_f
go

create function sharedmethod_mref_f  (
 asharedmethod_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select sharedmethod_brief_f(sharedmethodid, alang)  from sharedmethod
where asharedmethod_ref like concat('%',replace(replace(b2g(sharedmethodid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists script_brief_f
go

create function script_brief_f  (
 ascriptid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ascriptid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from script where scriptid=ascriptid;
if aec&lt;&gt;0 then
  set abrief='';
select target
 into atmpid  from script  where  scriptid = ascriptid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists script_mref_f
go

create function script_mref_f  (
 ascript_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select script_brief_f(scriptid, alang)  from script
where ascript_ref like concat('%',replace(replace(b2g(scriptid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists parameters_brief_f
go

create function parameters_brief_f  (
 aparametersid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aparametersid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from parameters where parametersid=aparametersid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from parameters  where  parametersid = aparametersid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from parameters  where  parametersid = aparametersid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists parameters_mref_f
go

create function parameters_mref_f  (
 aparameters_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select parameters_brief_f(parametersid, alang)  from parameters
where aparameters_ref like concat('%',replace(replace(b2g(parametersid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists objecttype_brief_f
go

create function objecttype_brief_f  (
 aobjecttypeid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aobjecttypeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from objecttype where objecttypeid=aobjecttypeid;
if aec&lt;&gt;0 then
  set abrief='';
select package
 into atmpid  from objecttype  where  objecttypeid = aobjecttypeid; 
 select mtzapp_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(the_comment,'') ,' '  )
  into abrief   from objecttype  where  objecttypeid = aobjecttypeid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists objecttype_mref_f
go

create function objecttype_mref_f  (
 aobjecttype_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select objecttype_brief_f(objecttypeid, alang)  from objecttype
where aobjecttype_ref like concat('%',replace(replace(b2g(objecttypeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists objstatus_brief_f
go

create function objstatus_brief_f  (
 aobjstatusid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aobjstatusid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from objstatus where objstatusid=aobjstatusid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from objstatus  where  objstatusid = aobjstatusid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists objstatus_mref_f
go

create function objstatus_mref_f  (
 aobjstatus_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select objstatus_brief_f(objstatusid, alang)  from objstatus
where aobjstatus_ref like concat('%',replace(replace(b2g(objstatusid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists nextstate_brief_f
go

create function nextstate_brief_f  (
 anextstateid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if anextstateid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from nextstate where nextstateid=anextstateid;
if aec&lt;&gt;0 then
  set abrief='';
select thestate
 into atmpid  from nextstate  where  nextstateid = anextstateid; 
 select objstatus_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists nextstate_mref_f
go

create function nextstate_mref_f  (
 anextstate_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select nextstate_brief_f(nextstateid, alang)  from nextstate
where anextstate_ref like concat('%',replace(replace(b2g(nextstateid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists objectmode_brief_f
go

create function objectmode_brief_f  (
 aobjectmodeid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aobjectmodeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from objectmode where objectmodeid=aobjectmodeid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from objectmode  where  objectmodeid = aobjectmodeid; 
 select defaultmode
 into aec  from objectmode where objectmodeid=aobjectmodeid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists objectmode_mref_f
go

create function objectmode_mref_f  (
 aobjectmode_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select objectmode_brief_f(objectmodeid, alang)  from objectmode
where aobjectmode_ref like concat('%',replace(replace(b2g(objectmodeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists structrestriction_brief_f
go

create function structrestriction_brief_f  (
 astructrestrictionid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if astructrestrictionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from structrestriction where structrestrictionid=astructrestrictionid;
if aec&lt;&gt;0 then
  set abrief='';
select struct
 into atmpid  from structrestriction  where  structrestrictionid = astructrestrictionid; 
 select part_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select allowread
 into aec  from structrestriction where structrestrictionid=astructrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
 select allowadd
 into aec  from structrestriction where structrestrictionid=astructrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
 select allowedit
 into aec  from structrestriction where structrestrictionid=astructrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
 select allowdelete
 into aec  from structrestriction where structrestrictionid=astructrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists structrestriction_mref_f
go

create function structrestriction_mref_f  (
 astructrestriction_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select structrestriction_brief_f(structrestrictionid, alang)  from structrestriction
where astructrestriction_ref like concat('%',replace(replace(b2g(structrestrictionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists methodrestriction_brief_f
go

create function methodrestriction_brief_f  (
 amethodrestrictionid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if amethodrestrictionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from methodrestriction where methodrestrictionid=amethodrestrictionid;
if aec&lt;&gt;0 then
  set abrief='';
select method
 into atmpid  from methodrestriction  where  methodrestrictionid = amethodrestrictionid; 
 select sharedmethod_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select isrestricted
 into aec  from methodrestriction where methodrestrictionid=amethodrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists methodrestriction_mref_f
go

create function methodrestriction_mref_f  (
 amethodrestriction_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select methodrestriction_brief_f(methodrestrictionid, alang)  from methodrestriction
where amethodrestriction_ref like concat('%',replace(replace(b2g(methodrestrictionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fieldrestriction_brief_f
go

create function fieldrestriction_brief_f  (
 afieldrestrictionid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldrestrictionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldrestriction where fieldrestrictionid=afieldrestrictionid;
if aec&lt;&gt;0 then
  set abrief='';
select thepart
 into atmpid  from fieldrestriction  where  fieldrestrictionid = afieldrestrictionid; 
 select part_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
select thefield
 into atmpid  from fieldrestriction  where  fieldrestrictionid = afieldrestrictionid; 
 select field_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select allowread
 into aec  from fieldrestriction where fieldrestrictionid=afieldrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
 select allowmodify
 into aec  from fieldrestriction where fieldrestrictionid=afieldrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fieldrestriction_mref_f
go

create function fieldrestriction_mref_f  (
 afieldrestriction_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldrestriction_brief_f(fieldrestrictionid, alang)  from fieldrestriction
where afieldrestriction_ref like concat('%',replace(replace(b2g(fieldrestrictionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists typemenu_brief_f
go

create function typemenu_brief_f  (
 atypemenuid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atypemenuid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from typemenu where typemenuid=atypemenuid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from typemenu  where  typemenuid = atypemenuid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists typemenu_mref_f
go

create function typemenu_mref_f  (
 atypemenu_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select typemenu_brief_f(typemenuid, alang)  from typemenu
where atypemenu_ref like concat('%',replace(replace(b2g(typemenuid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists instancevalidator_brief_f
go

create function instancevalidator_brief_f  (
 ainstancevalidatorid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ainstancevalidatorid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from instancevalidator where instancevalidatorid=ainstancevalidatorid;
if aec&lt;&gt;0 then
  set abrief='';
select target
 into atmpid  from instancevalidator  where  instancevalidatorid = ainstancevalidatorid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists instancevalidator_mref_f
go

create function instancevalidator_mref_f  (
 ainstancevalidator_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select instancevalidator_brief_f(instancevalidatorid, alang)  from instancevalidator
where ainstancevalidator_ref like concat('%',replace(replace(b2g(instancevalidatorid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists part_brief_f
go

create function part_brief_f  (
 apartid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from part where partid=apartid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from part  where  partid = apartid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from part  where  partid = apartid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists part_mref_f
go

create function part_mref_f  (
 apart_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select part_brief_f(partid, alang)  from part
where apart_ref like concat('%',replace(replace(b2g(partid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists partmenu_brief_f
go

create function partmenu_brief_f  (
 apartmenuid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartmenuid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from partmenu where partmenuid=apartmenuid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from partmenu  where  partmenuid = apartmenuid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists partmenu_mref_f
go

create function partmenu_mref_f  (
 apartmenu_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select partmenu_brief_f(partmenuid, alang)  from partmenu
where apartmenu_ref like concat('%',replace(replace(b2g(partmenuid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists partparammap_brief_f
go

create function partparammap_brief_f  (
 apartparammapid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartparammapid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from partparammap where partparammapid=apartparammapid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(fieldname,'') ,' '  )
  into abrief   from partparammap  where  partparammapid = apartparammapid; 
  select concat(abrief 
  , '' , ifnull(paramname,'') ,' '  )
  into abrief   from partparammap  where  partparammapid = apartparammapid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists partparammap_mref_f
go

create function partparammap_mref_f  (
 apartparammap_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select partparammap_brief_f(partparammapid, alang)  from partparammap
where apartparammap_ref like concat('%',replace(replace(b2g(partparammapid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists partview_brief_f
go

create function partview_brief_f  (
 apartviewid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartviewid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from partview where partviewid=apartviewid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from partview  where  partviewid = apartviewid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists partview_mref_f
go

create function partview_mref_f  (
 apartview_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select partview_brief_f(partviewid, alang)  from partview
where apartview_ref like concat('%',replace(replace(b2g(partviewid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists viewcolumn_brief_f
go

create function viewcolumn_brief_f  (
 aviewcolumnid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aviewcolumnid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from viewcolumn where viewcolumnid=aviewcolumnid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from viewcolumn  where  viewcolumnid = aviewcolumnid; 
select frompart
 into atmpid  from viewcolumn  where  viewcolumnid = aviewcolumnid; 
 select part_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select aggregation
 into aec  from viewcolumn where viewcolumnid=aviewcolumnid;
  case aec 
when 3 then 
  select concat(abrief ,
 'sum; ') into abrief ;
when 1 then 
  select concat(abrief ,
 'avg; ') into abrief ;
when 6 then 
  select concat(abrief ,
 'custom; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'none; ') into abrief ;
when 2 then 
  select concat(abrief ,
 'count; ') into abrief ;
when 5 then 
  select concat(abrief ,
 'max; ') into abrief ;
when 4 then 
  select concat(abrief ,
 'min; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists viewcolumn_mref_f
go

create function viewcolumn_mref_f  (
 aviewcolumn_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select viewcolumn_brief_f(viewcolumnid, alang)  from viewcolumn
where aviewcolumn_ref like concat('%',replace(replace(b2g(viewcolumnid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists partview_lnk_brief_f
go

create function partview_lnk_brief_f  (
 apartview_lnkid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartview_lnkid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from partview_lnk where partview_lnkid=apartview_lnkid;
if aec&lt;&gt;0 then
  set abrief='';
select theview
 into atmpid  from partview_lnk  where  partview_lnkid = apartview_lnkid; 
 select partview_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists partview_lnk_mref_f
go

create function partview_lnk_mref_f  (
 apartview_lnk_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select partview_lnk_brief_f(partview_lnkid, alang)  from partview_lnk
where apartview_lnk_ref like concat('%',replace(replace(b2g(partview_lnkid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists validator_brief_f
go

create function validator_brief_f  (
 avalidatorid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if avalidatorid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from validator where validatorid=avalidatorid;
if aec&lt;&gt;0 then
  set abrief='';
select target
 into atmpid  from validator  where  validatorid = avalidatorid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists validator_mref_f
go

create function validator_mref_f  (
 avalidator_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select validator_brief_f(validatorid, alang)  from validator
where avalidator_ref like concat('%',replace(replace(b2g(validatorid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists uniqueconstraint_brief_f
go

create function uniqueconstraint_brief_f  (
 auniqueconstraintid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if auniqueconstraintid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from uniqueconstraint where uniqueconstraintid=auniqueconstraintid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from uniqueconstraint  where  uniqueconstraintid = auniqueconstraintid; 
 select perparent
 into aec  from uniqueconstraint where uniqueconstraintid=auniqueconstraintid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists uniqueconstraint_mref_f
go

create function uniqueconstraint_mref_f  (
 auniqueconstraint_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select uniqueconstraint_brief_f(uniqueconstraintid, alang)  from uniqueconstraint
where auniqueconstraint_ref like concat('%',replace(replace(b2g(uniqueconstraintid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists constraintfield_brief_f
go

create function constraintfield_brief_f  (
 aconstraintfieldid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aconstraintfieldid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from constraintfield where constraintfieldid=aconstraintfieldid;
if aec&lt;&gt;0 then
  set abrief='';
select thefield
 into atmpid  from constraintfield  where  constraintfieldid = aconstraintfieldid; 
 select field_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists constraintfield_mref_f
go

create function constraintfield_mref_f  (
 aconstraintfield_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select constraintfield_brief_f(constraintfieldid, alang)  from constraintfield
where aconstraintfield_ref like concat('%',replace(replace(b2g(constraintfieldid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists extenderinterface_brief_f
go

create function extenderinterface_brief_f  (
 aextenderinterfaceid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aextenderinterfaceid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from extenderinterface where extenderinterfaceid=aextenderinterfaceid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(thename,'') ,' '  )
  into abrief   from extenderinterface  where  extenderinterfaceid = aextenderinterfaceid; 
select targetplatform
 into atmpid  from extenderinterface  where  extenderinterfaceid = aextenderinterfaceid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(theobject,'') ,' '  )
  into abrief   from extenderinterface  where  extenderinterfaceid = aextenderinterfaceid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists extenderinterface_mref_f
go

create function extenderinterface_mref_f  (
 aextenderinterface_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select extenderinterface_brief_f(extenderinterfaceid, alang)  from extenderinterface
where aextenderinterface_ref like concat('%',replace(replace(b2g(extenderinterfaceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists field_brief_f
go

create function field_brief_f  (
 afieldid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from field where fieldid=afieldid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from field  where  fieldid = afieldid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from field  where  fieldid = afieldid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists field_mref_f
go

create function field_mref_f  (
 afield_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select field_brief_f(fieldid, alang)  from field
where afield_ref like concat('%',replace(replace(b2g(fieldid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fldextenders_brief_f
go

create function fldextenders_brief_f  (
 afldextendersid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afldextendersid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fldextenders where fldextendersid=afldextendersid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(thename,'') ,' '  )
  into abrief   from fldextenders  where  fldextendersid = afldextendersid; 
select targetplatform
 into atmpid  from fldextenders  where  fldextendersid = afldextendersid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(theobject,'') ,' '  )
  into abrief   from fldextenders  where  fldextendersid = afldextendersid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fldextenders_mref_f
go

create function fldextenders_mref_f  (
 afldextenders_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fldextenders_brief_f(fldextendersid, alang)  from fldextenders
where afldextenders_ref like concat('%',replace(replace(b2g(fldextendersid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fieldsrcdef_brief_f
go

create function fieldsrcdef_brief_f  (
 afieldsrcdefid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldsrcdefid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldsrcdef where fieldsrcdefid=afieldsrcdefid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(datasource,'') ,' '  )
  into abrief   from fieldsrcdef  where  fieldsrcdefid = afieldsrcdefid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fieldsrcdef_mref_f
go

create function fieldsrcdef_mref_f  (
 afieldsrcdef_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldsrcdef_brief_f(fieldsrcdefid, alang)  from fieldsrcdef
where afieldsrcdef_ref like concat('%',replace(replace(b2g(fieldsrcdefid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists dinamicfilterscript_brief_f
go

create function dinamicfilterscript_brief_f  (
 adinamicfilterscriptid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if adinamicfilterscriptid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from dinamicfilterscript where dinamicfilterscriptid=adinamicfilterscriptid;
if aec&lt;&gt;0 then
  set abrief='';
select target
 into atmpid  from dinamicfilterscript  where  dinamicfilterscriptid = adinamicfilterscriptid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists dinamicfilterscript_mref_f
go

create function dinamicfilterscript_mref_f  (
 adinamicfilterscript_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select dinamicfilterscript_brief_f(dinamicfilterscriptid, alang)  from dinamicfilterscript
where adinamicfilterscript_ref like concat('%',replace(replace(b2g(dinamicfilterscriptid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fieldexpression_brief_f
go

create function fieldexpression_brief_f  (
 afieldexpressionid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldexpressionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldexpression where fieldexpressionid=afieldexpressionid;
if aec&lt;&gt;0 then
  set abrief='';
select target
 into atmpid  from fieldexpression  where  fieldexpressionid = afieldexpressionid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fieldexpression_mref_f
go

create function fieldexpression_mref_f  (
 afieldexpression_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldexpression_brief_f(fieldexpressionid, alang)  from fieldexpression
where afieldexpression_ref like concat('%',replace(replace(b2g(fieldexpressionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fieldvalidator_brief_f
go

create function fieldvalidator_brief_f  (
 afieldvalidatorid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldvalidatorid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldvalidator where fieldvalidatorid=afieldvalidatorid;
if aec&lt;&gt;0 then
  set abrief='';
select target
 into atmpid  from fieldvalidator  where  fieldvalidatorid = afieldvalidatorid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fieldvalidator_mref_f
go

create function fieldvalidator_mref_f  (
 afieldvalidator_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldvalidator_brief_f(fieldvalidatorid, alang)  from fieldvalidator
where afieldvalidator_ref like concat('%',replace(replace(b2g(fieldvalidatorid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fieldmenu_brief_f
go

create function fieldmenu_brief_f  (
 afieldmenuid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldmenuid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldmenu where fieldmenuid=afieldmenuid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from fieldmenu  where  fieldmenuid = afieldmenuid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fieldmenu_mref_f
go

create function fieldmenu_mref_f  (
 afieldmenu_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldmenu_brief_f(fieldmenuid, alang)  from fieldmenu
where afieldmenu_ref like concat('%',replace(replace(b2g(fieldmenuid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fieldparammap_brief_f
go

create function fieldparammap_brief_f  (
 afieldparammapid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldparammapid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldparammap where fieldparammapid=afieldparammapid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(fieldname,'') ,' '  )
  into abrief   from fieldparammap  where  fieldparammapid = afieldparammapid; 
  select concat(abrief 
  , '' , ifnull(paramname,'') ,' '  )
  into abrief   from fieldparammap  where  fieldparammapid = afieldparammapid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fieldparammap_mref_f
go

create function fieldparammap_mref_f  (
 afieldparammap_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldparammap_brief_f(fieldparammapid, alang)  from fieldparammap
where afieldparammap_ref like concat('%',replace(replace(b2g(fieldparammapid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists mtzapp_brief_f
go

create function mtzapp_brief_f  (
 amtzappid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if amtzappid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from mtzapp where mtzappid=amtzappid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from mtzapp  where  mtzappid = amtzappid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists mtzapp_mref_f
go

create function mtzapp_mref_f  (
 amtzapp_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select mtzapp_brief_f(mtzappid, alang)  from mtzapp
where amtzapp_ref like concat('%',replace(replace(b2g(mtzappid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists parentpackage_brief_f
go

create function parentpackage_brief_f  (
 aparentpackageid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aparentpackageid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from parentpackage where parentpackageid=aparentpackageid;
if aec&lt;&gt;0 then
  set abrief='';
select package
 into atmpid  from parentpackage  where  parentpackageid = aparentpackageid; 
 select mtzapp_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists parentpackage_mref_f
go

create function parentpackage_mref_f  (
 aparentpackage_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select parentpackage_brief_f(parentpackageid, alang)  from parentpackage
where aparentpackage_ref like concat('%',replace(replace(b2g(parentpackageid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists journalcolumn_brief_f
go

create function journalcolumn_brief_f  (
 ajournalcolumnid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ajournalcolumnid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from journalcolumn where journalcolumnid=ajournalcolumnid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from journalcolumn  where  journalcolumnid = ajournalcolumnid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists journalcolumn_mref_f
go

create function journalcolumn_mref_f  (
 ajournalcolumn_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select journalcolumn_brief_f(journalcolumnid, alang)  from journalcolumn
where ajournalcolumn_ref like concat('%',replace(replace(b2g(journalcolumnid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists jcolumnsource_brief_f
go

create function jcolumnsource_brief_f  (
 ajcolumnsourceid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ajcolumnsourceid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from jcolumnsource where jcolumnsourceid=ajcolumnsourceid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(viewfield,'') ,' '  )
  into abrief   from jcolumnsource  where  jcolumnsourceid = ajcolumnsourceid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists jcolumnsource_mref_f
go

create function jcolumnsource_mref_f  (
 ajcolumnsource_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select jcolumnsource_brief_f(jcolumnsourceid, alang)  from jcolumnsource
where ajcolumnsource_ref like concat('%',replace(replace(b2g(jcolumnsourceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists journalsrc_brief_f
go

create function journalsrc_brief_f  (
 ajournalsrcid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ajournalsrcid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from journalsrc where journalsrcid=ajournalsrcid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(partview,'') ,' '  )
  into abrief   from journalsrc  where  journalsrcid = ajournalsrcid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists journalsrc_mref_f
go

create function journalsrc_mref_f  (
 ajournalsrc_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select journalsrc_brief_f(journalsrcid, alang)  from journalsrc
where ajournalsrc_ref like concat('%',replace(replace(b2g(journalsrcid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists journal_brief_f
go

create function journal_brief_f  (
 ajournalid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ajournalid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from journal where journalid=ajournalid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from journal  where  journalid = ajournalid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists journal_mref_f
go

create function journal_mref_f  (
 ajournal_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select journal_brief_f(journalid, alang)  from journal
where ajournal_ref like concat('%',replace(replace(b2g(journalid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists bpc_info_brief_f
go

create function bpc_info_brief_f  (
 abpc_infoid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if abpc_infoid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from bpc_info where bpc_infoid=abpc_infoid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from bpc_info  where  bpc_infoid = abpc_infoid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists bpc_info_mref_f
go

create function bpc_info_mref_f  (
 abpc_info_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select bpc_info_brief_f(bpc_infoid, alang)  from bpc_info
where abpc_info_ref like concat('%',replace(replace(b2g(bpc_infoid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists the_session_brief_f
go

create function the_session_brief_f  (
 athe_sessionid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if athe_sessionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from the_session where the_sessionid=athe_sessionid;
if aec&lt;&gt;0 then
  set abrief='';
select userrole
 into atmpid  from the_session  where  the_sessionid = athe_sessionid; 
 select groups_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select closed
 into aec  from the_session where the_sessionid=athe_sessionid;
  case aec 
when 1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
select usersid
 into atmpid  from the_session  where  the_sessionid = athe_sessionid; 
 select users_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists the_session_mref_f
go

create function the_session_mref_f  (
 athe_session_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select the_session_brief_f(the_sessionid, alang)  from the_session
where athe_session_ref like concat('%',replace(replace(b2g(the_sessionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists sysrefcache_brief_f
go

create function sysrefcache_brief_f  (
 asysrefcacheid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if asysrefcacheid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from sysrefcache where sysrefcacheid=asysrefcacheid;
if aec&lt;&gt;0 then
  set abrief='';
select sessionid
 into atmpid  from sysrefcache  where  sysrefcacheid = asysrefcacheid; 
 select the_session_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists sysrefcache_mref_f
go

create function sysrefcache_mref_f  (
 asysrefcache_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select sysrefcache_brief_f(sysrefcacheid, alang)  from sysrefcache
where asysrefcache_ref like concat('%',replace(replace(b2g(sysrefcacheid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists syslog_brief_f
go

create function syslog_brief_f  (
 asyslogid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if asyslogid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from syslog where syslogid=asyslogid;
if aec&lt;&gt;0 then
  set abrief='';
select thesession
 into atmpid  from syslog  where  syslogid = asyslogid; 
 select the_session_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(logstructid,'') ,' '  )
  into abrief   from syslog  where  syslogid = asyslogid; 
  select concat(abrief 
  , '' , ifnull(verb,'') ,' '  )
  into abrief   from syslog  where  syslogid = asyslogid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists syslog_mref_f
go

create function syslog_mref_f  (
 asyslog_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select syslog_brief_f(syslogid, alang)  from syslog
where asyslog_ref like concat('%',replace(replace(b2g(syslogid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpls_info_brief_f
go

create function tpls_info_brief_f  (
 atpls_infoid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpls_infoid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpls_info where tpls_infoid=atpls_infoid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tpls_info  where  tpls_infoid = atpls_infoid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpls_info_mref_f
go

create function tpls_info_mref_f  (
 atpls_info_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpls_info_brief_f(tpls_infoid, alang)  from tpls_info
where atpls_info_ref like concat('%',replace(replace(b2g(tpls_infoid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpls_param_brief_f
go

create function tpls_param_brief_f  (
 atpls_paramid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpls_paramid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpls_param where tpls_paramid=atpls_paramid;
if aec&lt;&gt;0 then
  set abrief='';
select param
 into atmpid  from tpls_param  where  tpls_paramid = atpls_paramid; 
 select tpld_param_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpls_param_mref_f
go

create function tpls_param_mref_f  (
 atpls_param_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpls_param_brief_f(tpls_paramid, alang)  from tpls_param
where atpls_param_ref like concat('%',replace(replace(b2g(tpls_paramid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists armjournal_brief_f
go

create function armjournal_brief_f  (
 aarmjournalid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmjournalid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armjournal where armjournalid=aarmjournalid;
if aec&lt;&gt;0 then
  set abrief='';
select thejournal
 into atmpid  from armjournal  where  armjournalid = aarmjournalid; 
 select instance_brief_f( atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists armjournal_mref_f
go

create function armjournal_mref_f  (
 aarmjournal_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armjournal_brief_f(armjournalid, alang)  from armjournal
where aarmjournal_ref like concat('%',replace(replace(b2g(armjournalid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists armjrnlrep_brief_f
go

create function armjrnlrep_brief_f  (
 aarmjrnlrepid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmjrnlrepid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armjrnlrep where armjrnlrepid=aarmjrnlrepid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(repname,'') ,' '  )
  into abrief   from armjrnlrep  where  armjrnlrepid = aarmjrnlrepid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists armjrnlrep_mref_f
go

create function armjrnlrep_mref_f  (
 aarmjrnlrep_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armjrnlrep_brief_f(armjrnlrepid, alang)  from armjrnlrep
where aarmjrnlrep_ref like concat('%',replace(replace(b2g(armjrnlrepid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists armjrnlrun_brief_f
go

create function armjrnlrun_brief_f  (
 aarmjrnlrunid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmjrnlrunid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armjrnlrun where armjrnlrunid=aarmjrnlrunid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from armjrnlrun  where  armjrnlrunid = aarmjrnlrunid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists armjrnlrun_mref_f
go

create function armjrnlrun_mref_f  (
 aarmjrnlrun_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armjrnlrun_brief_f(armjrnlrunid, alang)  from armjrnlrun
where aarmjrnlrun_ref like concat('%',replace(replace(b2g(armjrnlrunid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists armjrnladd_brief_f
go

create function armjrnladd_brief_f  (
 aarmjrnladdid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmjrnladdid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armjrnladd where armjrnladdid=aarmjrnladdid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from armjrnladd  where  armjrnladdid = aarmjrnladdid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists armjrnladd_mref_f
go

create function armjrnladd_mref_f  (
 aarmjrnladd_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armjrnladd_brief_f(armjrnladdid, alang)  from armjrnladd
where aarmjrnladd_ref like concat('%',replace(replace(b2g(armjrnladdid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists entrypoints_brief_f
go

create function entrypoints_brief_f  (
 aentrypointsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aentrypointsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from entrypoints where entrypointsid=aentrypointsid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from entrypoints  where  entrypointsid = aentrypointsid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from entrypoints  where  entrypointsid = aentrypointsid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists entrypoints_mref_f
go

create function entrypoints_mref_f  (
 aentrypoints_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select entrypoints_brief_f(entrypointsid, alang)  from entrypoints
where aentrypoints_ref like concat('%',replace(replace(b2g(entrypointsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists epfilterlink_brief_f
go

create function epfilterlink_brief_f  (
 aepfilterlinkid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aepfilterlinkid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from epfilterlink where epfilterlinkid=aepfilterlinkid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(rowsource,'') ,' '  )
  into abrief   from epfilterlink  where  epfilterlinkid = aepfilterlinkid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists epfilterlink_mref_f
go

create function epfilterlink_mref_f  (
 aepfilterlink_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select epfilterlink_brief_f(epfilterlinkid, alang)  from epfilterlink
where aepfilterlink_ref like concat('%',replace(replace(b2g(epfilterlinkid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists workplace_brief_f
go

create function workplace_brief_f  (
 aworkplaceid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aworkplaceid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from workplace where workplaceid=aworkplaceid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from workplace  where  workplaceid = aworkplaceid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists workplace_mref_f
go

create function workplace_mref_f  (
 aworkplace_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select workplace_brief_f(workplaceid, alang)  from workplace
where aworkplace_ref like concat('%',replace(replace(b2g(workplaceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists armtypes_brief_f
go

create function armtypes_brief_f  (
 aarmtypesid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmtypesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armtypes where armtypesid=aarmtypesid;
if aec&lt;&gt;0 then
  set abrief='';
select thedocumenttype
 into atmpid  from armtypes  where  armtypesid = aarmtypesid; 
 select objecttype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists armtypes_mref_f
go

create function armtypes_mref_f  (
 aarmtypes_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armtypes_brief_f(armtypesid, alang)  from armtypes
where aarmtypes_ref like concat('%',replace(replace(b2g(armtypesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists iu_crole_brief_f
go

create function iu_crole_brief_f  (
 aiu_croleid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_croleid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_crole where iu_croleid=aiu_croleid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from iu_crole  where  iu_croleid = aiu_croleid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists iu_crole_mref_f
go

create function iu_crole_mref_f  (
 aiu_crole_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_crole_brief_f(iu_croleid, alang)  from iu_crole
where aiu_crole_ref like concat('%',replace(replace(b2g(iu_croleid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_connecttype_brief_f
go

create function tpld_connecttype_brief_f  (
 atpld_connecttypeid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_connecttypeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_connecttype where tpld_connecttypeid=atpld_connecttypeid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tpld_connecttype  where  tpld_connecttypeid = atpld_connecttypeid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_connecttype_mref_f
go

create function tpld_connecttype_mref_f  (
 atpld_connecttype_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_connecttype_brief_f(tpld_connecttypeid, alang)  from tpld_connecttype
where atpld_connecttype_ref like concat('%',replace(replace(b2g(tpld_connecttypeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_devclass_brief_f
go

create function tpld_devclass_brief_f  (
 atpld_devclassid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_devclassid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_devclass where tpld_devclassid=atpld_devclassid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tpld_devclass  where  tpld_devclassid = atpld_devclassid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_devclass_mref_f
go

create function tpld_devclass_mref_f  (
 atpld_devclass_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_devclass_brief_f(tpld_devclassid, alang)  from tpld_devclass
where atpld_devclass_ref like concat('%',replace(replace(b2g(tpld_devclassid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_f_brief_f
go

create function tpld_f_brief_f  (
 atpld_fid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_fid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_f where tpld_fid=atpld_fid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tpld_f  where  tpld_fid = atpld_fid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_f_mref_f
go

create function tpld_f_mref_f  (
 atpld_f_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_f_brief_f(tpld_fid, alang)  from tpld_f
where atpld_f_ref like concat('%',replace(replace(b2g(tpld_fid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_snab_brief_f
go

create function tpld_snab_brief_f  (
 atpld_snabid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_snabid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_snab where tpld_snabid=atpld_snabid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(cname,'') ,' '  )
  into abrief   from tpld_snab  where  tpld_snabid = atpld_snabid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_snab_mref_f
go

create function tpld_snab_mref_f  (
 atpld_snab_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_snab_brief_f(tpld_snabid, alang)  from tpld_snab
where atpld_snab_ref like concat('%',replace(replace(b2g(tpld_snabid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_paramtype_brief_f
go

create function tpld_paramtype_brief_f  (
 atpld_paramtypeid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_paramtypeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_paramtype where tpld_paramtypeid=atpld_paramtypeid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tpld_paramtype  where  tpld_paramtypeid = atpld_paramtypeid; 
  select concat(abrief 
  , '' , ifnull(thecode,'') ,' '  )
  into abrief   from tpld_paramtype  where  tpld_paramtypeid = atpld_paramtypeid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_paramtype_mref_f
go

create function tpld_paramtype_mref_f  (
 atpld_paramtype_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_paramtype_brief_f(tpld_paramtypeid, alang)  from tpld_paramtype
where atpld_paramtype_ref like concat('%',replace(replace(b2g(tpld_paramtypeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_grp_brief_f
go

create function tpld_grp_brief_f  (
 atpld_grpid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_grpid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_grp where tpld_grpid=atpld_grpid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(cgrpnm,'') ,' '  )
  into abrief   from tpld_grp  where  tpld_grpid = atpld_grpid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_grp_mref_f
go

create function tpld_grp_mref_f  (
 atpld_grp_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_grp_brief_f(tpld_grpid, alang)  from tpld_grp
where atpld_grp_ref like concat('%',replace(replace(b2g(tpld_grpid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_snabtop_brief_f
go

create function tpld_snabtop_brief_f  (
 atpld_snabtopid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_snabtopid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_snabtop where tpld_snabtopid=atpld_snabtopid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(cname,'') ,' '  )
  into abrief   from tpld_snabtop  where  tpld_snabtopid = atpld_snabtopid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_snabtop_mref_f
go

create function tpld_snabtop_mref_f  (
 atpld_snabtop_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_snabtop_brief_f(tpld_snabtopid, alang)  from tpld_snabtop
where atpld_snabtop_ref like concat('%',replace(replace(b2g(tpld_snabtopid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_param_brief_f
go

create function tpld_param_brief_f  (
 atpld_paramid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_paramid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_param where tpld_paramid=atpld_paramid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tpld_param  where  tpld_paramid = atpld_paramid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_param_mref_f
go

create function tpld_param_mref_f  (
 atpld_param_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_param_brief_f(tpld_paramid, alang)  from tpld_param
where atpld_param_ref like concat('%',replace(replace(b2g(tpld_paramid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpld_devtype_brief_f
go

create function tpld_devtype_brief_f  (
 atpld_devtypeid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpld_devtypeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpld_devtype where tpld_devtypeid=atpld_devtypeid;
if aec&lt;&gt;0 then
  set abrief='';
select devclass
 into atmpid  from tpld_devtype  where  tpld_devtypeid = atpld_devtypeid; 
 select tpld_devclass_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tpld_devtype  where  tpld_devtypeid = atpld_devtypeid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpld_devtype_mref_f
go

create function tpld_devtype_mref_f  (
 atpld_devtype_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpld_devtype_brief_f(tpld_devtypeid, alang)  from tpld_devtype
where atpld_devtype_ref like concat('%',replace(replace(b2g(tpld_devtypeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists users_brief_f
go

create function users_brief_f  (
 ausersid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ausersid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from users where usersid=ausersid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(family,'') ,' '  )
  into abrief   from users  where  usersid = ausersid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from users  where  usersid = ausersid; 
  select concat(abrief 
  , '' , ifnull(surname,'') ,' '  )
  into abrief   from users  where  usersid = ausersid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists users_mref_f
go

create function users_mref_f  (
 ausers_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select users_brief_f(usersid, alang)  from users
where ausers_ref like concat('%',replace(replace(b2g(usersid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists groups_brief_f
go

create function groups_brief_f  (
 agroupsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agroupsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from groups where groupsid=agroupsid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from groups  where  groupsid = agroupsid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists groups_mref_f
go

create function groups_mref_f  (
 agroups_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select groups_brief_f(groupsid, alang)  from groups
where agroups_ref like concat('%',replace(replace(b2g(groupsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists groupuser_brief_f
go

create function groupuser_brief_f  (
 agroupuserid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agroupuserid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from groupuser where groupuserid=agroupuserid;
if aec&lt;&gt;0 then
  set abrief='';
select theuser
 into atmpid  from groupuser  where  groupuserid = agroupuserid; 
 select users_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists groupuser_mref_f
go

create function groupuser_mref_f  (
 agroupuser_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select groupuser_brief_f(groupuserid, alang)  from groupuser
where agroupuser_ref like concat('%',replace(replace(b2g(groupuserid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpsrv_modems_brief_f
go

create function tpsrv_modems_brief_f  (
 atpsrv_modemsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpsrv_modemsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpsrv_modems where tpsrv_modemsid=atpsrv_modemsid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(portnum,'') ,' '  )
  into abrief   from tpsrv_modems  where  tpsrv_modemsid = atpsrv_modemsid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpsrv_modems_mref_f
go

create function tpsrv_modems_mref_f  (
 atpsrv_modems_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpsrv_modems_brief_f(tpsrv_modemsid, alang)  from tpsrv_modems
where atpsrv_modems_ref like concat('%',replace(replace(b2g(tpsrv_modemsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpsrv_info_brief_f
go

create function tpsrv_info_brief_f  (
 atpsrv_infoid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpsrv_infoid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpsrv_info where tpsrv_infoid=atpsrv_infoid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tpsrv_info  where  tpsrv_infoid = atpsrv_infoid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpsrv_info_mref_f
go

create function tpsrv_info_mref_f  (
 atpsrv_info_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpsrv_info_brief_f(tpsrv_infoid, alang)  from tpsrv_info
where atpsrv_info_ref like concat('%',replace(replace(b2g(tpsrv_infoid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpsrv_ports_brief_f
go

create function tpsrv_ports_brief_f  (
 atpsrv_portsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpsrv_portsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpsrv_ports where tpsrv_portsid=atpsrv_portsid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(portname,'') ,' '  )
  into abrief   from tpsrv_ports  where  tpsrv_portsid = atpsrv_portsid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpsrv_ports_mref_f
go

create function tpsrv_ports_mref_f  (
 atpsrv_ports_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpsrv_ports_brief_f(tpsrv_portsid, alang)  from tpsrv_ports
where atpsrv_ports_ref like concat('%',replace(replace(b2g(tpsrv_portsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists num_zones_brief_f
go

create function num_zones_brief_f  (
 anum_zonesid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if anum_zonesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from num_zones where num_zonesid=anum_zonesid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(zonemask,'') ,' '  )
  into abrief   from num_zones  where  num_zonesid = anum_zonesid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists num_zones_mref_f
go

create function num_zones_mref_f  (
 anum_zones_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select num_zones_brief_f(num_zonesid, alang)  from num_zones
where anum_zones_ref like concat('%',replace(replace(b2g(num_zonesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists num_values_brief_f
go

create function num_values_brief_f  (
 anum_valuesid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if anum_valuesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from num_values where num_valuesid=anum_valuesid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(the_value,'') ,' '  )
  into abrief   from num_values  where  num_valuesid = anum_valuesid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists num_values_mref_f
go

create function num_values_mref_f  (
 anum_values_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select num_values_brief_f(num_valuesid, alang)  from num_values
where anum_values_ref like concat('%',replace(replace(b2g(num_valuesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists num_head_brief_f
go

create function num_head_brief_f  (
 anum_headid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if anum_headid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from num_head where num_headid=anum_headid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from num_head  where  num_headid = anum_headid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists num_head_mref_f
go

create function num_head_mref_f  (
 anum_head_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select num_head_brief_f(num_headid, alang)  from num_head
where anum_head_ref like concat('%',replace(replace(b2g(num_headid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplt_reports_brief_f
go

create function tplt_reports_brief_f  (
 atplt_reportsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplt_reportsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplt_reports where tplt_reportsid=atplt_reportsid;
if aec&lt;&gt;0 then
  set abrief='';
select reptype
 into atmpid  from tplt_reports  where  tplt_reportsid = atplt_reportsid; 
 select tpld_paramtype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tplt_reports  where  tplt_reportsid = atplt_reportsid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplt_reports_mref_f
go

create function tplt_reports_mref_f  (
 atplt_reports_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplt_reports_brief_f(tplt_reportsid, alang)  from tplt_reports
where atplt_reports_ref like concat('%',replace(replace(b2g(tplt_reportsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplt_connect_brief_f
go

create function tplt_connect_brief_f  (
 atplt_connectid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplt_connectid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplt_connect where tplt_connectid=atplt_connectid;
if aec&lt;&gt;0 then
  set abrief='';
select connecttype
 into atmpid  from tplt_connect  where  tplt_connectid = atplt_connectid; 
 select tpld_connecttype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(cspeed,'') ,' '  )
  into abrief   from tplt_connect  where  tplt_connectid = atplt_connectid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplt_connect_mref_f
go

create function tplt_connect_mref_f  (
 atplt_connect_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplt_connect_brief_f(tplt_connectid, alang)  from tplt_connect
where atplt_connect_ref like concat('%',replace(replace(b2g(tplt_connectid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplt_valuebounds_brief_f
go

create function tplt_valuebounds_brief_f  (
 atplt_valueboundsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplt_valueboundsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplt_valuebounds where tplt_valueboundsid=atplt_valueboundsid;
if aec&lt;&gt;0 then
  set abrief='';
select pname
 into atmpid  from tplt_valuebounds  where  tplt_valueboundsid = atplt_valueboundsid; 
 select tpld_param_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
select ptype
 into atmpid  from tplt_valuebounds  where  tplt_valueboundsid = atplt_valueboundsid; 
 select tpld_paramtype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplt_valuebounds_mref_f
go

create function tplt_valuebounds_mref_f  (
 atplt_valuebounds_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplt_valuebounds_brief_f(tplt_valueboundsid, alang)  from tplt_valuebounds
where atplt_valuebounds_ref like concat('%',replace(replace(b2g(tplt_valueboundsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplt_plancall_brief_f
go

create function tplt_plancall_brief_f  (
 atplt_plancallid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplt_plancallid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplt_plancall where tplt_plancallid=atplt_plancallid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(icall,'') ,' '  )
  into abrief   from tplt_plancall  where  tplt_plancallid = atplt_plancallid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplt_plancall_mref_f
go

create function tplt_plancall_mref_f  (
 atplt_plancall_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplt_plancall_brief_f(tplt_plancallid, alang)  from tplt_plancall
where atplt_plancall_ref like concat('%',replace(replace(b2g(tplt_plancallid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplt_mask_brief_f
go

create function tplt_mask_brief_f  (
 atplt_maskid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplt_maskid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplt_mask where tplt_maskid=atplt_maskid;
if aec&lt;&gt;0 then
  set abrief='';
select ptype
 into atmpid  from tplt_mask  where  tplt_maskid = atplt_maskid; 
 select tpld_paramtype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
select pname
 into atmpid  from tplt_mask  where  tplt_maskid = atplt_maskid; 
 select tpld_param_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplt_mask_mref_f
go

create function tplt_mask_mref_f  (
 atplt_mask_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplt_mask_brief_f(tplt_maskid, alang)  from tplt_mask
where atplt_mask_ref like concat('%',replace(replace(b2g(tplt_maskid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplt_bdevices_brief_f
go

create function tplt_bdevices_brief_f  (
 atplt_bdevicesid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplt_bdevicesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplt_bdevices where tplt_bdevicesid=atplt_bdevicesid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from tplt_bdevices  where  tplt_bdevicesid = atplt_bdevicesid; 
  select concat(abrief 
  , '' , ifnull(addr,'') ,' '  )
  into abrief   from tplt_bdevices  where  tplt_bdevicesid = atplt_bdevicesid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplt_bdevices_mref_f
go

create function tplt_bdevices_mref_f  (
 atplt_bdevices_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplt_bdevices_brief_f(tplt_bdevicesid, alang)  from tplt_bdevices
where atplt_bdevices_ref like concat('%',replace(replace(b2g(tplt_bdevicesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tplt_contract_brief_f
go

create function tplt_contract_brief_f  (
 atplt_contractid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atplt_contractid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tplt_contract where tplt_contractid=atplt_contractid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(fld12,'') ,' '  )
  into abrief   from tplt_contract  where  tplt_contractid = atplt_contractid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tplt_contract_mref_f
go

create function tplt_contract_mref_f  (
 atplt_contract_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tplt_contract_brief_f(tplt_contractid, alang)  from tplt_contract
where atplt_contract_ref like concat('%',replace(replace(b2g(tplt_contractid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists mtzext_def_brief_f
go

create function mtzext_def_brief_f  (
 amtzext_defid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if amtzext_defid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from mtzext_def where mtzext_defid=amtzext_defid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from mtzext_def  where  mtzext_defid = amtzext_defid; 
 select exttype
 into aec  from mtzext_def where mtzext_defid=amtzext_defid;
  case aec 
when 6 then 
  select concat(abrief ,
 'verifyrowext; ') into abrief ;
when 7 then 
  select concat(abrief ,
 'codegenerator; ') into abrief ;
when 5 then 
  select concat(abrief ,
 'defaultext; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'statusext; ') into abrief ;
when 4 then 
  select concat(abrief ,
 'jrnlrunext; ') into abrief ;
when 2 then 
  select concat(abrief ,
 'customext; ') into abrief ;
when 8 then 
  select concat(abrief ,
 'armgenerator; ') into abrief ;
when 1 then 
  select concat(abrief ,
 'onformext; ') into abrief ;
when 3 then 
  select concat(abrief ,
 'jrnladdext; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists mtzext_def_mref_f
go

create function mtzext_def_mref_f  (
 amtzext_def_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select mtzext_def_brief_f(mtzext_defid, alang)  from mtzext_def
where amtzext_def_ref like concat('%',replace(replace(b2g(mtzext_defid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists mtzextrel_brief_f
go

create function mtzextrel_brief_f  (
 amtzextrelid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if amtzextrelid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from mtzextrel where mtzextrelid=amtzextrelid;
if aec&lt;&gt;0 then
  set abrief='';
 select theplatform
 into aec  from mtzextrel where mtzextrelid=amtzextrelid;
  case aec 
when 3 then 
  select concat(abrief ,
 'other; ') into abrief ;
when 1 then 
  select concat(abrief ,
 'dotnet; ') into abrief ;
when 2 then 
  select concat(abrief ,
 'java; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'vb6; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists mtzextrel_mref_f
go

create function mtzextrel_mref_f  (
 amtzextrel_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select mtzextrel_brief_f(mtzextrelid, alang)  from mtzextrel
where amtzextrel_ref like concat('%',replace(replace(b2g(mtzextrelid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists iu_rcfg_mod_brief_f
go

create function iu_rcfg_mod_brief_f  (
 aiu_rcfg_modid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_rcfg_modid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_rcfg_mod where iu_rcfg_modid=aiu_rcfg_modid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from iu_rcfg_mod  where  iu_rcfg_modid = aiu_rcfg_modid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from iu_rcfg_mod  where  iu_rcfg_modid = aiu_rcfg_modid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists iu_rcfg_mod_mref_f
go

create function iu_rcfg_mod_mref_f  (
 aiu_rcfg_mod_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_rcfg_mod_brief_f(iu_rcfg_modid, alang)  from iu_rcfg_mod
where aiu_rcfg_mod_ref like concat('%',replace(replace(b2g(iu_rcfg_modid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists iu_rcfg_docmode_brief_f
go

create function iu_rcfg_docmode_brief_f  (
 aiu_rcfg_docmodeid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_rcfg_docmodeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_rcfg_docmode where iu_rcfg_docmodeid=aiu_rcfg_docmodeid;
if aec&lt;&gt;0 then
  set abrief='';
select the_document
 into atmpid  from iu_rcfg_docmode  where  iu_rcfg_docmodeid = aiu_rcfg_docmodeid; 
 select objecttype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists iu_rcfg_docmode_mref_f
go

create function iu_rcfg_docmode_mref_f  (
 aiu_rcfg_docmode_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_rcfg_docmode_brief_f(iu_rcfg_docmodeid, alang)  from iu_rcfg_docmode
where aiu_rcfg_docmode_ref like concat('%',replace(replace(b2g(iu_rcfg_docmodeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists iu_rcfg_def_brief_f
go

create function iu_rcfg_def_brief_f  (
 aiu_rcfg_defid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_rcfg_defid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_rcfg_def where iu_rcfg_defid=aiu_rcfg_defid;
if aec&lt;&gt;0 then
  set abrief='';
select therole
 into atmpid  from iu_rcfg_def  where  iu_rcfg_defid = aiu_rcfg_defid; 
 select iu_crole_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists iu_rcfg_def_mref_f
go

create function iu_rcfg_def_mref_f  (
 aiu_rcfg_def_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_rcfg_def_brief_f(iu_rcfg_defid, alang)  from iu_rcfg_def
where aiu_rcfg_def_ref like concat('%',replace(replace(b2g(iu_rcfg_defid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpq_def_brief_f
go

create function tpq_def_brief_f  (
 atpq_defid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpq_defid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpq_def where tpq_defid=atpq_defid;
if aec&lt;&gt;0 then
  set abrief='';
select thedevice
 into atmpid  from tpq_def  where  tpq_defid = atpq_defid; 
 select tplt_bdevices_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
select archtype
 into atmpid  from tpq_def  where  tpq_defid = atpq_defid; 
 select tpld_paramtype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpq_def_mref_f
go

create function tpq_def_mref_f  (
 atpq_def_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpq_def_brief_f(tpq_defid, alang)  from tpq_def
where atpq_def_ref like concat('%',replace(replace(b2g(tpq_defid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists tpq_result_brief_f
go

create function tpq_result_brief_f  (
 atpq_resultid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atpq_resultid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from tpq_result where tpq_resultid=atpq_resultid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(textresult,'') ,' '  )
  into abrief   from tpq_result  where  tpq_resultid = atpq_resultid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists tpq_result_mref_f
go

create function tpq_result_mref_f  (
 atpq_result_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select tpq_result_brief_f(tpq_resultid, alang)  from tpq_result
where atpq_result_ref like concat('%',replace(replace(b2g(tpq_resultid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists filterfieldgroup_brief_f
go

create function filterfieldgroup_brief_f  (
 afilterfieldgroupid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afilterfieldgroupid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from filterfieldgroup where filterfieldgroupid=afilterfieldgroupid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from filterfieldgroup  where  filterfieldgroupid = afilterfieldgroupid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from filterfieldgroup  where  filterfieldgroupid = afilterfieldgroupid; 
 select allowignore
 into aec  from filterfieldgroup where filterfieldgroupid=afilterfieldgroupid;
  case aec 
when -1 then 
  select concat(abrief ,
 'да; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'нет; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists filterfieldgroup_mref_f
go

create function filterfieldgroup_mref_f  (
 afilterfieldgroup_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select filterfieldgroup_brief_f(filterfieldgroupid, alang)  from filterfieldgroup
where afilterfieldgroup_ref like concat('%',replace(replace(b2g(filterfieldgroupid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists fileterfield_brief_f
go

create function fileterfield_brief_f  (
 afileterfieldid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afileterfieldid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fileterfield where fileterfieldid=afileterfieldid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from fileterfield  where  fileterfieldid = afileterfieldid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from fileterfield  where  fileterfieldid = afileterfieldid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists fileterfield_mref_f
go

create function fileterfield_mref_f  (
 afileterfield_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fileterfield_brief_f(fileterfieldid, alang)  from fileterfield
where afileterfield_ref like concat('%',replace(replace(b2g(fileterfieldid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists filters_brief_f
go

create function filters_brief_f  (
 afiltersid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afiltersid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from filters where filtersid=afiltersid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from filters  where  filtersid = afiltersid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists filters_mref_f
go

create function filters_mref_f  (
 afilters_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select filters_brief_f(filtersid, alang)  from filters
where afilters_ref like concat('%',replace(replace(b2g(filtersid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists iu_int_modules_brief_f
go

create function iu_int_modules_brief_f  (
 aiu_int_modulesid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_int_modulesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_int_modules where iu_int_modulesid=aiu_int_modulesid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from iu_int_modules  where  iu_int_modulesid = aiu_int_modulesid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from iu_int_modules  where  iu_int_modulesid = aiu_int_modulesid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists iu_int_modules_mref_f
go

create function iu_int_modules_mref_f  (
 aiu_int_modules_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_int_modules_brief_f(iu_int_modulesid, alang)  from iu_int_modules
where aiu_int_modules_ref like concat('%',replace(replace(b2g(iu_int_modulesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists rptstruct_brief_f
go

create function rptstruct_brief_f  (
 arptstructid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if arptstructid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from rptstruct where rptstructid=arptstructid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from rptstruct  where  rptstructid = arptstructid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists rptstruct_mref_f
go

create function rptstruct_mref_f  (
 arptstruct_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select rptstruct_brief_f(rptstructid, alang)  from rptstruct
where arptstruct_ref like concat('%',replace(replace(b2g(rptstructid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists rptfields_brief_f
go

create function rptfields_brief_f  (
 arptfieldsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if arptfieldsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from rptfields where rptfieldsid=arptfieldsid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from rptfields  where  rptfieldsid = arptfieldsid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists rptfields_mref_f
go

create function rptfields_mref_f  (
 arptfields_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select rptfields_brief_f(rptfieldsid, alang)  from rptfields
where arptfields_ref like concat('%',replace(replace(b2g(rptfieldsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists rptformula_brief_f
go

create function rptformula_brief_f  (
 arptformulaid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if arptformulaid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from rptformula where rptformulaid=arptformulaid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from rptformula  where  rptformulaid = arptformulaid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists rptformula_mref_f
go

create function rptformula_mref_f  (
 arptformula_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select rptformula_brief_f(rptformulaid, alang)  from rptformula
where arptformula_ref like concat('%',replace(replace(b2g(rptformulaid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO



drop function if exists reports_brief_f
go

create function reports_brief_f  (
 areportsid binary(16)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if areportsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from reports where reportsid=areportsid;
if aec&lt;&gt;0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from reports  where  reportsid = areportsid; 
else
  set abrief= '';
end if;
return abrief;
end  
GO



drop function if exists reports_mref_f
go

create function reports_mref_f  (
 areports_ref varchar(255)
 ,alang varchar(25)
) returns varchar(255) reads sql data  begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select reports_brief_f(reportsid, alang)  from reports
where areports_ref like concat('%',replace(replace(b2g(reportsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref&lt;&gt;'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end 
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Kernel procs" File="">
    <BlockHolder BlockName="--body" BlockCode=" 


drop function if exists b2g
go
        create  function `b2g`(
    $data binary(16)
) returns char(38) 
    deterministic
begin
    declare $result char(38) default null;
    if $data is not null then
        set $result = concat('{',hex(substring($data,4,1)),hex(substring($data,3,1)),hex(substring($data,2,1)), hex(substring($data,1,1)) , '-', 
                hex(substring($data,6,1)),hex(substring($data,5,1)),'-',
                hex(substring($data,8,1)) , hex(substring($data,7,1)),'-',
                hex(substring($data,9,2)),'-',hex(substring($data,11,6)) ,'}');
        set $result = ucase($result);
    end if;
    return $result;
end
go

drop function if exists g2b
go
create  function `g2b`(
    $data varchar(38)
) returns binary(16)
    deterministic
begin
    declare $result binary(16) default null;
    if $data is not null then
        set $data = replace($data,'-','');
        set $data = replace($data,'{','');
        set $data = replace($data,'}','');
        set $result = concat(unhex(substring($data,7,2)),unhex(substring($data,5,2)),unhex(substring($data,3,2)), unhex(substring($data,1,2)),
                unhex(substring($data,11,2)),unhex(substring($data,9,2)),unhex(substring($data,15,2)) , unhex(substring($data,13,2)),
                unhex(substring($data,17,16)));
    end if;
    return $result;
end
go

drop function if exists checkoperation
go
create  function `checkoperation`(
    acursession varchar(38)
    ,aopname varchar(255)
) returns tinyint(1)
    reads sql data
begin
  declare isok int;
  select 0 into isok;
  select roles_operations.allowaction into isok from   roles_operations  
      join roles_def on roles_def.instanceid=roles_operations.instanceid
      join the_session on the_session.userrole=roles_def.roles_defid
      where the_session.the_sessionid=g2b(acursession) 
      and roles_operations.name=aopname;
  if isok&lt;&gt;0 then
      return 1;
  else
      return 0;
  end if;
end
go

drop function if exists getbrieffromxml
go
create function getbrieffromxml (axmlsource varchar(255))
returns varchar(255)
  deterministic 
body:begin
declare aoutstr  varchar(255);
declare afrom int;
declare ato int;
set afrom = charindex('&lt;brief&gt;', axmlsource);
set ato = charindex('&lt;/brief&gt;', axmlsource);
if (afrom &gt; 0 and ato &gt; 0) then
  set aoutstr = substring(axmlsource, afrom + 7, ato - afrom - 7);
else
  set aoutstr = '';
end if;
return aoutstr;
end
go

drop function if exists getidfromxml
go
create function getidfromxml (axmlsource varchar(255))
returns varchar(255)
 deterministic 
begin
declare aoutstr  varchar(255);
declare afrom  int;
declare ato  int;

set afrom = charindex('&lt;id&gt;', axmlsource);
set ato = charindex('&lt;/id&gt;', axmlsource);
if (afrom &gt; 0 and ato &gt; 0) then
  set aoutstr = substring(axmlsource, afrom + 4, ato - afrom - 4);
 else 
  set aoutstr = '';
end if;

return aoutstr;
end
go

drop procedure if exists instance_owner
go
create procedure instance_owner (  acursession varchar(38) ,ainstanceid varchar(38), aownerpartname varchar(255), aownerrowid varchar(38))
body:begin
declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
select count(*) into aec from instance where instanceid=g2b(ainstanceid);
if aec&gt;0 then
  if aownerpartname is null or aownerrowid is null then
     update instance set ownerpartname=null, ownerrowid = null where instanceid=g2b(ainstanceid);
  else
     update instance set ownerpartname=aownerpartname, ownerrowid = g2b(aownerrowid) where instanceid=g2b(ainstanceid);
  end if;
end if;
end
go


drop procedure if exists sysoptions_save
go
create procedure sysoptions_save ( asysoptionsid varchar(38), aname varchar(255),avalue varchar (255), aoptiontype varchar(255)) 
begin
declare aec  int;
select count(*) into aec from sysoptions where sysoptionsid=g2b(asysoptionsid);
if aec&gt;0 then
  update sysoptions set name=aname, value=avalue, optiontype=aoptiontype where sysoptionsid=g2b(asysoptionsid);
else
  insert into sysoptions (sysoptionsid, name, value, optiontype)values(g2b(asysoptionsid),aname,avalue,aoptiontype);
end if;
end
go


drop procedure if exists instance_save
go
create procedure instance_save (
acursession varchar(38),
ainstanceid varchar(38),
aobjtype varchar(255),
aname varchar(255)
) 
body:begin
 declare atmpstr varchar(255);
 declare assid binary(16);
 declare atmpid binary(16);
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare astatusid binary(16);
declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
select count(*) into aec from instance where instanceid=g2b(ainstanceid);
if aec&gt;0 then
   update instance set name = aname,changestamp=now() where  instanceid=g2b(ainstanceid);
else
    select count(*) into aec from typelist where name = aobjtype;
    if aec then
      start transaction;
      set astatusid=null;
      select objstatusid into astatusid from objstatus join objecttype on
      objecttype.objecttypeid=objstatus.parentstructrowid and objecttype.name=aobjtype and isstartup&lt;&gt;0;
      if not astatusid is null then
        insert into instance(instanceid,name,objtype,status,changestamp) values(g2b(ainstanceid),aname,aobjtype,g2b(astatusid),now());
      else 
        insert into instance(instanceid,name,objtype,changestamp) values(g2b(ainstanceid),aname,aobjtype,now());
      end if; 
      commit;
    end if;
end if;
select 'ok' result;
end
go

drop procedure if exists instance_delete
go
create procedure instance_delete (
acursession varchar(38),
ainstanceid varchar(38)
)
body:begin
   declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(ainstanceid);
    if aec&gt;0 then
         delete from instance where instanceid=g2b(ainstanceid);
        end if;
end
go

drop procedure if exists instance_archive
go
create procedure instance_archive (
acursession varchar(38),
ainstanceid varchar(38)
)
body:begin
   declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(ainstanceid);
    if aec&gt;0 then
         update instance set archived=1 where instanceid=g2b(ainstanceid);
    end if;
end
go

drop procedure if exists instance_rearchive
go
create procedure instance_rearchive (
acursession varchar(38),
ainstanceid varchar(38)
)
body:begin
   declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(ainstanceid);
    if aec&gt;0 then
         update instance set archived=0 where instanceid=g2b(ainstanceid);
    end if;
end
go

drop procedure if exists instance_hcl
go
create procedure instance_hcl (
acursession varchar(38),
arowid varchar(38),
out aislocked int
) 
body:begin
declare atmpstr varchar(255);
declare aobjtype varchar(255);
   declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(ainstanceid);
    if aec&gt;0 then
    set aislocked=0;
    end if;
end
go

drop procedure if exists instance_islocked
go
 create  procedure instance_islocked (
 acursession varchar(38),
 arowid varchar(38) ,
 out aislocked integer 
) body:begin
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
   declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(arowid);
   if aec&gt;0 then
        select auserid = usersid  from the_session where the_sessionid=g2b(acursession);
        select alockuserid = lockuserid,alocksessionid = locksessionid from instance where instanceid=g2b(arowid);
        /* verify this row */
   if not alockuserid is null then
    if  alockuserid &lt;&gt; auserid then
      set aislocked = 4; /* checkout by another user */
      leave body;
    else
     set aislocked = 2; /* checkout by caller */
     leave body;
    end if;
   end if;
   if not alocksessionid is null then
        if  alocksessionid &lt;&gt; acursession then
            set aislocked = 3; /* lockes by another user */
            leave body;
        else
            set aislocked = 1; /* locked by caller */
            leave body;
        end if;
   end if;
  end if;
 end
go

drop procedure if exists qr_or_qr
go
create procedure qr_or_qr( aid1 varchar(38), aid2 varchar(38),aidout varchar(38),out acnt integer )
body:begin
delete from queryresult where queryresultid=g2b(aidout);
insert into queryresult(queryresultid,result)
select distinct aidout, result from queryresult where queryresultid in (aid1,aid2);
select acnt=count(*) from queryresult where queryresultid=g2b(aidout);
end
go

drop procedure if exists instance_lock
go
create  procedure instance_lock  (
 acursession varchar(38),
 arowid varchar(38) ,
 alockmode integer
) body:begin

 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aec  int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0  then
    leave body;
 end if;
 select count(*) into aec from instance where instanceid=g2b(arowid);
 if aec&gt;0 then
  select auserid = usersid  from the_session where the_sessionid=g2b(acursession);
  call instance_islocked( acursession,arowid,aislocked);
  if aislocked &gt;=3 then
    leave body;
  end if;
   if  alockmode =2 then
    update instance  set lockuserid =g2b(auserid ),locksessionid=null  where instanceid=g2b(arowid);
     leave body;
   end if;
   if  alockmode =1 then
    update instance  set lockuserid=null ,locksessionid =g2b(acursession)  where instanceid=g2b(arowid);
     leave body;
   end if;
end if;
 end

go

drop procedure if exists instance_unlock
go
create  procedure instance_unlock /*пользователи системы*/ (
 acursession varchar(38),
 arowid varchar(38)
) body:begin
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked int;
 declare aparenttable varchar(255);
 declare aec  int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0  then
    leave body;
 end if;
 select count(*) into aec from instance where instanceid=g2b(arowid);
 if aec&gt;0 then
 call instance_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3 then
    leave body;
  end if;
   if  aislocked =2 then
    update instance set lockuserid=null   where instanceid=g2b(arowid);
     leave body;
   end if;
   if  aislocked =1 then
    update instance set locksessionid=null   where instanceid=g2b(arowid);
     leave body;
   end if;
end if;
 end

go

drop procedure if exists instance_brief
go
  create procedure instance_brief  (
 acursession varchar(38),
 ainstanceid varchar(38),
 out abrief varchar(255)
) body:begin
 declare atmpstr varchar(255);
 declare aaccess int;
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare aec  int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0  then
    leave body;
 end if;
 if ainstanceid is null then set abrief=''; leave body; end if;
 select count(*) into aec from instance where instanceid=g2b(ainstanceid);
 if aec&gt;0 then
   select concat(ifnull(name,''),'; ',ifnull(objtype,'')) into abrief 
   from instance  where  instanceid = g2b(ainstanceid);
 else 
   set abrief= 'неверный идентификатор';
end if;
end

go

drop procedure if exists rowparents
go
        create  procedure rowparents
        (aqueryid varchar(38)
        ,arowid varchar(38)
        ,atable varchar (255)
        ,acursession varchar(38)
        )
body:   begin
declare aplevel integer;
declare aparent varchar(255);
declare aprev varchar(255);
declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0  then
    leave body;
  end if;
set aparent =atable;
set @tmpid = g2b(arowid);
set aplevel =0;
delete from rpresult where rpresultid  =g2b(aqueryid);
insert into rpresult(rpresultid,parentlevel,partname,rowid)values(g2b(aqueryid),aplevel,atable,g2b(arowid));
again:loop
set aplevel =aplevel + 1;
set aprev = aparent;
set aparent = null;
select value into aparent from sysoptions where optiontype ='parent' and  name=aprev;
 if aparent is null then
    set @ss = concat('select instanceid into @tmprowid from ' , aprev , ' where ' ,aprev ,'id=?');
    prepare stmt from @ss;
    execute stmt using @tmpid;
    deallocate prepare stmt;
   insert into rpresult(rpresultid,parentlevel,partname,rowid)values(g2b(aqueryid),aplevel,'instance',@tmprowid);
   leave again;
 else
    set @ss = concat('select parentstructrowid  into @tmprowid from ' , aprev , ' where ' ,aprev ,'id=?');
    prepare stmt from @ss;
    execute stmt using @tmpid;
    deallocate prepare stmt;
    set @tmpid = @tmprowid;
   insert into rpresult(rpresultid,parentlevel,partname,rowid)
   values(g2b(aqueryid),aplevel,aparent,@tmprowid);
 end if;
end loop again;
end
go
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Procedures" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 


drop procedure if exists tplc_e_brief
go

create procedure tplc_e_brief  (
 acursession varchar(38),
 atplc_eid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplc_eid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplc_e where tplc_eid=g2b(atplc_eid);
 if  aec &gt;0 then
   set abrief=tplc_e_brief_f(g2b(atplc_eid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplc_e_delete
go

create procedure tplc_e_delete /*данные по электроэнергии*/ (
 acursession varchar(38),
 atplc_eid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_e where tplc_eid=g2b(atplc_eid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplc_e' result;
    leave body;
  end if;
 call tplc_e_logger(acursession,atplc_eid) ; 
  delete from  tplc_e 
  where  tplc_eid = g2b(atplc_eid) ;
  delete from num_values where ownerpartname='tplc_e' and ownerrowid=g2b(atplc_eid);
  end if;
    select 'ok' result;
 end 
go
GO

/*электроэнергия*/

drop procedure if exists tplc_e_save
go

create procedure tplc_e_save /*данные по электроэнергии*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplc_eid varchar(38)
,adcall
 datetime/* дата опроса *//* дата опроса */
,adcounter
 datetime/* дата счетчика *//* дата счетчика */
,ae0
 double/* энергия общ. *//* энергия общ. */
,ae1
 double/* энергия тариф 1 *//* энергия тариф 1 */
,ae2
 double/* энергия тариф 2 *//* энергия тариф 2 */
,ae3
 double/* энергия тариф 3 *//* энергия тариф 3 */
,ae4
 double/* энергия тариф 4 *//* энергия тариф 4 */
,ae0s
 double/* энергия общ. ни *//* энергия общ. ни */
,ae1s
 double/* энергия тариф 1 ни *//* энергия тариф 1 ни */
,ae2s
 double/* энергия тариф 2 ни *//* энергия тариф 2 ни */
,ae3s
 double/* энергия тариф 3 ни *//* энергия тариф 3 ни */
,ae4s
 double/* энергия тариф 4 ни *//* энергия тариф 4 ни */
,aap
 double/* активная + *//* активная + */
,aam
 double/* активная -  *//* активная -  */
,arp
 double/* реактивная + *//* реактивная + */
,arm
 double/* реактивная - *//* реактивная - */
,ai1
 double/* ток ф1 *//* ток ф1 */
,ai2
 double/* ток ф2 *//* ток ф2 */
,ai3
 double/* ток ф3 *//* ток ф3 */
,au1
 double/* напряжение ф1 *//* напряжение ф1 */
,au2
 double/* напряжение ф2 *//* напряжение ф2 */
,au3
 double/* напряжение ф3 *//* напряжение ф3 */
,aoktime
 double/* время безошиб.работы *//* время безошиб.работы */
,aworktime
 double/* время работы *//* время работы */
,aerrinfo
 varchar (255)/* ошибки *//* ошибки */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_e where tplc_eid=g2b(atplc_eid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplc_e' result;
    leave body;
  end if;
 start transaction ; 
 call tplc_e_logger(acursession,atplc_eid) ; 
 update  tplc_e set changestamp=now() 
,
  dcall=adcall
,
  dcounter=adcounter
,
  e0=ae0
,
  e1=ae1
,
  e2=ae2
,
  e3=ae3
,
  e4=ae4
,
  e0s=ae0s
,
  e1s=ae1s
,
  e2s=ae2s
,
  e3s=ae3s
,
  e4s=ae4s
,
  ap=aap
,
  am=aam
,
  rp=arp
,
  rm=arm
,
  i1=ai1
,
  i2=ai2
,
  i3=ai3
,
  u1=au1
,
  u2=au2
,
  u3=au3
,
  oktime=aoktime
,
  worktime=aworktime
,
  errinfo=aerrinfo
  where  tplc_eid = g2b(atplc_eid) ;


call tplc_e_client_trigger(acursession,atplc_eid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplc_e' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplc_e
 (  changestamp,tplc_eid 
,instanceid
,dcall

,dcounter

,e0

,e1

,e2

,e3

,e4

,e0s

,e1s

,e2s

,e3s

,e4s

,ap

,am

,rp

,rm

,i1

,i2

,i3

,u1

,u2

,u3

,oktime

,worktime

,errinfo

 ) values (now(), g2b(atplc_eid) 
,g2b(ainstanceid)
,adcall

,adcounter

,ae0

,ae1

,ae2

,ae3

,ae4

,ae0s

,ae1s

,ae2s

,ae3s

,ae4s

,aap

,aam

,arp

,arm

,ai1

,ai2

,ai3

,au1

,au2

,au3

,aoktime

,aworktime

,aerrinfo

 ) ;


call tplc_e_client_trigger(acursession,atplc_eid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplc_e_copy
go

create procedure tplc_e_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplc_e 
 ( tplc_eid 
,instanceid
,dcall

,dcounter

,e0

,e1

,e2

,e3

,e4

,e0s

,e1s

,e2s

,e3s

,e4s

,ap

,am

,rp

,rm

,i1

,i2

,i3

,u1

,u2

,u3

,oktime

,worktime

,errinfo

 ) select 
copymap(acopyaction,b2g(tplc_eid)) 
,copymap(acopyaction,b2g(instanceid))
,dcall

,dcounter

,e0

,e1

,e2

,e3

,e4

,e0s

,e1s

,e2s

,e3s

,e4s

,ap

,am

,rp

,rm

,i1

,i2

,i3

,u1

,u2

,u3

,oktime

,worktime

,errinfo

 from tplc_e
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplc_e_logger
go

create procedure tplc_e_logger /*данные по электроэнергии*/ (
 acursession varchar(38),
 atplc_eid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplc_e_parent
go
create procedure tplc_e_parent /* данные по электроэнергии*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplc_e where  tplc_eid=arowid;
 end 
go
GO


drop procedure if exists tplc_e_islocked
go
create procedure tplc_e_islocked /* данные по электроэнергии */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplc_e where tplc_eid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplc_e_lock
go
create procedure tplc_e_lock /* данные по электроэнергии */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplc_e_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplc_e set lockuserid =auserid ,locksessionid=null  where tplc_eid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplc_e set lockuserid=null ,locksessionid =acursession  where tplc_eid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplc_e_unlock
go
create procedure tplc_e_unlock /* данные по электроэнергии */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplc_e_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplc_e set lockuserid =null  where tplc_eid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplc_e set locksessionid =null  where tplc_eid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplc_e_client_trigger
GO

create procedure tplc_e_client_trigger  (
 acursession varchar(38),
 aTPLC_Eid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplc_m_brief
go

create procedure tplc_m_brief  (
 acursession varchar(38),
 atplc_mid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplc_mid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplc_m where tplc_mid=g2b(atplc_mid);
 if  aec &gt;0 then
   set abrief=tplc_m_brief_f(g2b(atplc_mid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplc_m_delete
go

create procedure tplc_m_delete /*текущие значения мгновенные*/ (
 acursession varchar(38),
 atplc_mid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_m where tplc_mid=g2b(atplc_mid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplc_m' result;
    leave body;
  end if;
 call tplc_m_logger(acursession,atplc_mid) ; 
  delete from  tplc_m 
  where  tplc_mid = g2b(atplc_mid) ;
  delete from num_values where ownerpartname='tplc_m' and ownerrowid=g2b(atplc_mid);
  end if;
    select 'ok' result;
 end 
go
GO

/*мгновенные значения*/

drop procedure if exists tplc_m_save
go

create procedure tplc_m_save /*текущие значения мгновенные*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplc_mid varchar(38)
,adcall
 datetime/* дата опроса *//* дата опроса */
,adcounter
 datetime/* дата счетчика *//* дата счетчика */
,aq1
 double/* тепловая энергия канал 1 *//* тепловая энергия канал 1 */
,aq2
 double/* тепловая энергия канал 2 *//* тепловая энергия канал 2 */
,at1
 double/* температура по каналу 1 *//* температура по каналу 1 */
,at2
 double/* температура по каналу 2 *//* температура по каналу 2 */
,adt12
 double/* разность температур по каналу 1 и 2 *//* разность температур по каналу 1 и 2 */
,at3
 double/* температура по каналу 3 *//* температура по каналу 3 */
,at4
 double/* температура по каналу 4 *//* температура по каналу 4 */
,at5
 double/* температура по каналу 5 *//* температура по каналу 5 */
,adt45
 double/* разность температур по каналу 4 и 5 *//* разность температур по каналу 4 и 5 */
,at6
 double/* температура по каналу 6 *//* температура по каналу 6 */
,av1
 double/* объемный расход воды по каналу 1 *//* объемный расход воды по каналу 1 */
,av2
 double/* объемный расход воды по каналу 2 *//* объемный расход воды по каналу 2 */
,adv12
 double/* разность объемов канал 1  (расход гвс) *//* разность объемов канал 1  (расход гвс) */
,av3
 double/* объемный расход воды по каналу 3 *//* объемный расход воды по каналу 3 */
,av4
 double/* объемный расход воды по каналу 4 *//* объемный расход воды по каналу 4 */
,av5
 double/* объемный расход воды по каналу 5 *//* объемный расход воды по каналу 5 */
,adv45
 double/* разность объемов канал 2 *//* разность объемов канал 2 */
,av6
 double/* объемный расход воды по каналу 6 *//* объемный расход воды по каналу 6 */
,am1
 double/* масса воды по каналу 1 *//* масса воды по каналу 1 */
,am2
 double/* масса воды по каналу 2 *//* масса воды по каналу 2 */
,adm12
 double/* разность масс канал 1  (расход гвс) *//* разность масс канал 1  (расход гвс) */
,am3
 double/* масса воды по каналу 3 *//* масса воды по каналу 3 */
,am4
 double/* масса воды по каналу 4 *//* масса воды по каналу 4 */
,am5
 double/* масса воды по каналу 5 *//* масса воды по каналу 5 */
,adm45
 double/* разность масс канал 2 *//* разность масс канал 2 */
,am6
 double/* масса воды по каналу 6 *//* масса воды по каналу 6 */
,ap1
 double/* давление в трубопроводе 1 *//* давление в трубопроводе 1 */
,ap2
 double/* давление в трубопроводе 2 *//* давление в трубопроводе 2 */
,ap3
 double/* давление в трубопроводе 3 *//* давление в трубопроводе 3 */
,ap4
 double/* давление в трубопроводе 4 *//* давление в трубопроводе 4 */
,ap5
 double/* давление в трубопроводе 5 *//* давление в трубопроводе 5 */
,ap6
 double/* давление в трубопроводе 6 *//* давление в трубопроводе 6 */
,ag1
 double/* текущее значение расхода в трубопроводе 1 *//* текущее значение расхода в трубопроводе 1 */
,ag2
 double/* текущее значение расхода в трубопроводе 2 *//* текущее значение расхода в трубопроводе 2 */
,ag3
 double/* текущее значение расхода в трубопроводе 3 *//* текущее значение расхода в трубопроводе 3 */
,ag4
 double/* текущее значение расхода в трубопроводе 4 *//* текущее значение расхода в трубопроводе 4 */
,ag5
 double/* текущее значение расхода в трубопроводе 5 *//* текущее значение расхода в трубопроводе 5 */
,ag6
 double/* текущее значение расхода в трубопроводе 6 *//* текущее значение расхода в трубопроводе 6 */
,atcool
 double/* температура холодной воды *//* температура холодной воды */
,atce1
 double/* температура холодного конца канал 1 *//* температура холодного конца канал 1 */
,atce2
 double/* температура холодного конца канал 2 *//* температура холодного конца канал 2 */
,atsum1
 double/* тотальное время счета tb1 *//* тотальное время счета tb1 */
,atsum2
 double/* тотальное время счета tb2 *//* тотальное время счета tb2 */
,aq1h
 double/* тепловая энергия канал 1 нарастающим итогом *//* тепловая энергия канал 1 нарастающим итогом */
,aq2h
 double/* тепловая энергия канал 2 нарастающим итогом *//* тепловая энергия канал 2 нарастающим итогом */
,av1h
 double/* объемный расход воды по каналу 1  нарастающим итогом *//* объемный расход воды по каналу 1  нарастающим итогом */
,av2h
 double/* объемный расход воды по каналу 2  нарастающим итогом *//* объемный расход воды по каналу 2  нарастающим итогом */
,av4h
 double/* объемный расход воды по каналу 4  нарастающим итогом *//* объемный расход воды по каналу 4  нарастающим итогом */
,av5h
 double/* объемный расход воды по каналу 5  нарастающим итогом *//* объемный расход воды по каналу 5  нарастающим итогом */
,aerrtime
 double/* время аварии *//* время аварии */
,aerrtimeh
 double/* время аварии нарастающим итогом *//* время аварии нарастающим итогом */
,ahc
 varchar (360)/* нештатные ситуации общ *//* нештатные ситуации общ */
,asp
 double/* схема потребления *//* схема потребления */
,asp_tb1
 double/* схема потребления tb1 *//* схема потребления tb1 */
,asp_tb2
 double/* схема потребления tb2 *//* схема потребления tb2 */
,adatetimecounter
 datetime/* datetimecounter *//* datetimecounter */
,adg12
 double/* g1-g2 *//* g1-g2 */
,adg45
 double/* g4-g5 *//* g4-g5 */
,adp12
 double/* p1-p2 *//* p1-p2 */
,adp45
 double/* p4-p5 *//* p4-p5 */
,aunitsr
 varchar (24)/* единицы измерения расхода *//* единицы измерения расхода */
,aq3
 double/* тепловая энергия канал 3 *//* тепловая энергия канал 3 */
,aq4
 double/* тепловая энергия канал 4 *//* тепловая энергия канал 4 */
,apatm
 double/* атмосферное давление *//* атмосферное давление */
,aq5
 double/* тепловая энергия канал 5 *//* тепловая энергия канал 5 */
,adq12
 double/* тепловая энергия потребитель 1 *//* тепловая энергия потребитель 1 */
,adq45
 double/* тепловая энергия потребитель 2 *//* тепловая энергия потребитель 2 */
,apxb
 double/* давление холодной воды *//* давление холодной воды */
,adq
 double/* расход энергии потребитель 1 *//* расход энергии потребитель 1 */
,ahc_1
 varchar (360)/* нештатная ситуация 1 (тв1 или внешняя) *//* нештатная ситуация 1 (тв1 или внешняя) */
,ahc_2
 varchar (360)/* нештатная ситуация 2 (тв2 или внутренняя) *//* нештатная ситуация 2 (тв2 или внутренняя) */
,athot
 double/* температура горячей воды *//* температура горячей воды */
,adans1
 double/* dans1 *//* dans1 */
,adans2
 double/* dans2 *//* dans2 */
,adans3
 double/* dans3 *//* dans3 */
,adans4
 double/* dans4 *//* dans4 */
,adans5
 double/* dans5 *//* dans5 */
,adans6
 double/* dans6 *//* dans6 */
,acheck_a
 double/* проверка архивных данных на нс (0 - не производилась, 1 - произведена) *//* проверка архивных данных на нс (0 - не производилась, 1 - произведена) */
,aoktime
 double/* время безошиб.работы *//* время безошиб.работы */
,aworktime
 double/* время работы *//* время работы */
,atair1
 double/* температура воздуха канал 1 *//* температура воздуха канал 1 */
,atair2
 double/* температура воздуха канал 2 *//* температура воздуха канал 2 */
,ahc_code
 varchar (360)/* код нештатной ситуации тепловычислителя *//* код нештатной ситуации тепловычислителя */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_m where tplc_mid=g2b(atplc_mid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplc_m' result;
    leave body;
  end if;
 start transaction ; 
 call tplc_m_logger(acursession,atplc_mid) ; 
 update  tplc_m set changestamp=now() 
,
  dcall=adcall
,
  dcounter=adcounter
,
  q1=aq1
,
  q2=aq2
,
  t1=at1
,
  t2=at2
,
  dt12=adt12
,
  t3=at3
,
  t4=at4
,
  t5=at5
,
  dt45=adt45
,
  t6=at6
,
  v1=av1
,
  v2=av2
,
  dv12=adv12
,
  v3=av3
,
  v4=av4
,
  v5=av5
,
  dv45=adv45
,
  v6=av6
,
  m1=am1
,
  m2=am2
,
  dm12=adm12
,
  m3=am3
,
  m4=am4
,
  m5=am5
,
  dm45=adm45
,
  m6=am6
,
  p1=ap1
,
  p2=ap2
,
  p3=ap3
,
  p4=ap4
,
  p5=ap5
,
  p6=ap6
,
  g1=ag1
,
  g2=ag2
,
  g3=ag3
,
  g4=ag4
,
  g5=ag5
,
  g6=ag6
,
  tcool=atcool
,
  tce1=atce1
,
  tce2=atce2
,
  tsum1=atsum1
,
  tsum2=atsum2
,
  q1h=aq1h
,
  q2h=aq2h
,
  v1h=av1h
,
  v2h=av2h
,
  v4h=av4h
,
  v5h=av5h
,
  errtime=aerrtime
,
  errtimeh=aerrtimeh
,
  hc=ahc
,
  sp=asp
,
  sp_tb1=asp_tb1
,
  sp_tb2=asp_tb2
,
  datetimecounter=adatetimecounter
,
  dg12=adg12
,
  dg45=adg45
,
  dp12=adp12
,
  dp45=adp45
,
  unitsr=aunitsr
,
  q3=aq3
,
  q4=aq4
,
  patm=apatm
,
  q5=aq5
,
  dq12=adq12
,
  dq45=adq45
,
  pxb=apxb
,
  dq=adq
,
  hc_1=ahc_1
,
  hc_2=ahc_2
,
  thot=athot
,
  dans1=adans1
,
  dans2=adans2
,
  dans3=adans3
,
  dans4=adans4
,
  dans5=adans5
,
  dans6=adans6
,
  check_a=acheck_a
,
  oktime=aoktime
,
  worktime=aworktime
,
  tair1=atair1
,
  tair2=atair2
,
  hc_code=ahc_code
  where  tplc_mid = g2b(atplc_mid) ;


call tplc_m_client_trigger(acursession,atplc_mid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplc_m' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplc_m
 (  changestamp,tplc_mid 
,instanceid
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 ) values (now(), g2b(atplc_mid) 
,g2b(ainstanceid)
,adcall

,adcounter

,aq1

,aq2

,at1

,at2

,adt12

,at3

,at4

,at5

,adt45

,at6

,av1

,av2

,adv12

,av3

,av4

,av5

,adv45

,av6

,am1

,am2

,adm12

,am3

,am4

,am5

,adm45

,am6

,ap1

,ap2

,ap3

,ap4

,ap5

,ap6

,ag1

,ag2

,ag3

,ag4

,ag5

,ag6

,atcool

,atce1

,atce2

,atsum1

,atsum2

,aq1h

,aq2h

,av1h

,av2h

,av4h

,av5h

,aerrtime

,aerrtimeh

,ahc

,asp

,asp_tb1

,asp_tb2

,adatetimecounter

,adg12

,adg45

,adp12

,adp45

,aunitsr

,aq3

,aq4

,apatm

,aq5

,adq12

,adq45

,apxb

,adq

,ahc_1

,ahc_2

,athot

,adans1

,adans2

,adans3

,adans4

,adans5

,adans6

,acheck_a

,aoktime

,aworktime

,atair1

,atair2

,ahc_code

 ) ;


call tplc_m_client_trigger(acursession,atplc_mid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplc_m_copy
go

create procedure tplc_m_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplc_m 
 ( tplc_mid 
,instanceid
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 ) select 
copymap(acopyaction,b2g(tplc_mid)) 
,copymap(acopyaction,b2g(instanceid))
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 from tplc_m
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplc_m_logger
go

create procedure tplc_m_logger /*текущие значения мгновенные*/ (
 acursession varchar(38),
 atplc_mid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplc_m_parent
go
create procedure tplc_m_parent /* текущие значения мгновенные*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplc_m where  tplc_mid=arowid;
 end 
go
GO


drop procedure if exists tplc_m_islocked
go
create procedure tplc_m_islocked /* текущие значения мгновенные */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplc_m where tplc_mid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplc_m_lock
go
create procedure tplc_m_lock /* текущие значения мгновенные */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplc_m_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplc_m set lockuserid =auserid ,locksessionid=null  where tplc_mid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplc_m set lockuserid=null ,locksessionid =acursession  where tplc_mid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplc_m_unlock
go
create procedure tplc_m_unlock /* текущие значения мгновенные */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplc_m_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplc_m set lockuserid =null  where tplc_mid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplc_m set locksessionid =null  where tplc_mid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplc_m_client_trigger
GO

create procedure tplc_m_client_trigger  (
 acursession varchar(38),
 aTPLC_Mid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplc_header_brief
go

create procedure tplc_header_brief  (
 acursession varchar(38),
 atplc_headerid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplc_headerid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplc_header where tplc_headerid=g2b(atplc_headerid);
 if  aec &gt;0 then
   set abrief=tplc_header_brief_f(g2b(atplc_headerid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplc_header_delete
go

create procedure tplc_header_delete /**/ (
 acursession varchar(38),
 atplc_headerid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_header where tplc_headerid=g2b(atplc_headerid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplc_header' result;
    leave body;
  end if;
 call tplc_header_logger(acursession,atplc_headerid) ; 
  delete from  tplc_header 
  where  tplc_headerid = g2b(atplc_headerid) ;
  delete from num_values where ownerpartname='tplc_header' and ownerrowid=g2b(atplc_headerid);
  end if;
    select 'ok' result;
 end 
go
GO

/*заголовок*/

drop procedure if exists tplc_header_save
go

create procedure tplc_header_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplc_headerid varchar(38)
,aid_bd varchar(38)/* устройство *//* устройство */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_header where tplc_headerid=g2b(atplc_headerid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplc_header' result;
    leave body;
  end if;
 start transaction ; 
 call tplc_header_logger(acursession,atplc_headerid) ; 
 update  tplc_header set changestamp=now() 
,
  id_bd=g2b(aid_bd)
  where  tplc_headerid = g2b(atplc_headerid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tplc_header where  instanceid=g2b(ainstanceid) 
 and id_bd=g2b(aid_bd);
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=заголовок правило=(устройство уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tplc_header_client_trigger(acursession,atplc_headerid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplc_header' result;
    leave body;
  end if;
select count(*) into aec from tplc_header where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tplc_header&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tplc_header
 (  changestamp,tplc_headerid 
,instanceid
,id_bd

 ) values (now(), g2b(atplc_headerid) 
,g2b(ainstanceid)
,g2b(aid_bd)

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tplc_header where  instanceid=g2b(ainstanceid) 
 and id_bd=g2b(aid_bd);
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=заголовок правило=(устройство уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tplc_header_client_trigger(acursession,atplc_headerid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplc_header_copy
go

create procedure tplc_header_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplc_header 
 ( tplc_headerid 
,instanceid
,id_bd

 ) select 
copymap(acopyaction,b2g(tplc_headerid)) 
,copymap(acopyaction,b2g(instanceid))
,id_bd

 from tplc_header
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplc_header_logger
go

create procedure tplc_header_logger /**/ (
 acursession varchar(38),
 atplc_headerid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplc_header_parent
go
create procedure tplc_header_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplc_header where  tplc_headerid=arowid;
 end 
go
GO


drop procedure if exists tplc_header_islocked
go
create procedure tplc_header_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplc_header where tplc_headerid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplc_header_lock
go
create procedure tplc_header_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplc_header_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplc_header set lockuserid =auserid ,locksessionid=null  where tplc_headerid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplc_header set lockuserid=null ,locksessionid =acursession  where tplc_headerid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplc_header_unlock
go
create procedure tplc_header_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplc_header_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplc_header set lockuserid =null  where tplc_headerid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplc_header set locksessionid =null  where tplc_headerid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplc_header_client_trigger
GO

create procedure tplc_header_client_trigger  (
 acursession varchar(38),
 aTPLC_HEADERid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplc_d_brief
go

create procedure tplc_d_brief  (
 acursession varchar(38),
 atplc_did varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplc_did is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplc_d where tplc_did=g2b(atplc_did);
 if  aec &gt;0 then
   set abrief=tplc_d_brief_f(g2b(atplc_did), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplc_d_delete
go

create procedure tplc_d_delete /*суточный архив*/ (
 acursession varchar(38),
 atplc_did varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_d where tplc_did=g2b(atplc_did);
if aec&gt;0 then
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplc_d' result;
    leave body;
  end if;
 call tplc_d_logger(acursession,atplc_did) ; 
  delete from  tplc_d 
  where  tplc_did = g2b(atplc_did) ;
  delete from num_values where ownerpartname='tplc_d' and ownerrowid=g2b(atplc_did);
  end if;
    select 'ok' result;
 end 
go
GO

/*суточный архив*/

drop procedure if exists tplc_d_save
go

create procedure tplc_d_save /*суточный архив*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplc_did varchar(38)
,adcall
 datetime/* дата опроса *//* дата опроса */
,adcounter
 datetime/* дата счетчика *//* дата счетчика */
,aq1
 double/* тепловая энергия канал 1 *//* тепловая энергия канал 1 */
,aq2
 double/* тепловая энергия канал 2 *//* тепловая энергия канал 2 */
,at1
 double/* температура по каналу 1 *//* температура по каналу 1 */
,at2
 double/* температура по каналу 2 *//* температура по каналу 2 */
,adt12
 double/* разность температур по каналу 1 и 2 *//* разность температур по каналу 1 и 2 */
,at3
 double/* температура по каналу 3 *//* температура по каналу 3 */
,at4
 double/* температура по каналу 4 *//* температура по каналу 4 */
,at5
 double/* температура по каналу 5 *//* температура по каналу 5 */
,adt45
 double/* разность температур по каналу 4 и 5 *//* разность температур по каналу 4 и 5 */
,at6
 double/* температура по каналу 6 *//* температура по каналу 6 */
,av1
 double/* объемный расход воды по каналу 1 *//* объемный расход воды по каналу 1 */
,av2
 double/* объемный расход воды по каналу 2 *//* объемный расход воды по каналу 2 */
,adv12
 double/* разность объемов канал 1  (расход гвс) *//* разность объемов канал 1  (расход гвс) */
,av3
 double/* объемный расход воды по каналу 3 *//* объемный расход воды по каналу 3 */
,av4
 double/* объемный расход воды по каналу 4 *//* объемный расход воды по каналу 4 */
,av5
 double/* объемный расход воды по каналу 5 *//* объемный расход воды по каналу 5 */
,adv45
 double/* разность объемов канал 2 *//* разность объемов канал 2 */
,av6
 double/* объемный расход воды по каналу 6 *//* объемный расход воды по каналу 6 */
,am1
 double/* масса воды по каналу 1 *//* масса воды по каналу 1 */
,am2
 double/* масса воды по каналу 2 *//* масса воды по каналу 2 */
,adm12
 double/* разность масс канал 1  (расход гвс) *//* разность масс канал 1  (расход гвс) */
,am3
 double/* масса воды по каналу 3 *//* масса воды по каналу 3 */
,am4
 double/* масса воды по каналу 4 *//* масса воды по каналу 4 */
,am5
 double/* масса воды по каналу 5 *//* масса воды по каналу 5 */
,adm45
 double/* разность масс канал 2 *//* разность масс канал 2 */
,am6
 double/* масса воды по каналу 6 *//* масса воды по каналу 6 */
,ap1
 double/* давление в трубопроводе 1 *//* давление в трубопроводе 1 */
,ap2
 double/* давление в трубопроводе 2 *//* давление в трубопроводе 2 */
,ap3
 double/* давление в трубопроводе 3 *//* давление в трубопроводе 3 */
,ap4
 double/* давление в трубопроводе 4 *//* давление в трубопроводе 4 */
,ap5
 double/* давление в трубопроводе 5 *//* давление в трубопроводе 5 */
,ap6
 double/* давление в трубопроводе 6 *//* давление в трубопроводе 6 */
,ag1
 double/* текущее значение расхода в трубопроводе 1 *//* текущее значение расхода в трубопроводе 1 */
,ag2
 double/* текущее значение расхода в трубопроводе 2 *//* текущее значение расхода в трубопроводе 2 */
,ag3
 double/* текущее значение расхода в трубопроводе 3 *//* текущее значение расхода в трубопроводе 3 */
,ag4
 double/* текущее значение расхода в трубопроводе 4 *//* текущее значение расхода в трубопроводе 4 */
,ag5
 double/* текущее значение расхода в трубопроводе 5 *//* текущее значение расхода в трубопроводе 5 */
,ag6
 double/* текущее значение расхода в трубопроводе 6 *//* текущее значение расхода в трубопроводе 6 */
,atcool
 double/* температура холодной воды *//* температура холодной воды */
,atce1
 double/* температура холодного конца канал 1 *//* температура холодного конца канал 1 */
,atce2
 double/* температура холодного конца канал 2 *//* температура холодного конца канал 2 */
,atsum1
 double/* тотальное время счета tb1 *//* тотальное время счета tb1 */
,atsum2
 double/* тотальное время счета tb2 *//* тотальное время счета tb2 */
,aq1h
 double/* тепловая энергия канал 1 нарастающим итогом *//* тепловая энергия канал 1 нарастающим итогом */
,aq2h
 double/* тепловая энергия канал 2 нарастающим итогом *//* тепловая энергия канал 2 нарастающим итогом */
,av1h
 double/* объемный расход воды по каналу 1  нарастающим итогом *//* объемный расход воды по каналу 1  нарастающим итогом */
,av2h
 double/* объемный расход воды по каналу 2  нарастающим итогом *//* объемный расход воды по каналу 2  нарастающим итогом */
,av4h
 double/* объемный расход воды по каналу 4  нарастающим итогом *//* объемный расход воды по каналу 4  нарастающим итогом */
,av5h
 double/* объемный расход воды по каналу 5  нарастающим итогом *//* объемный расход воды по каналу 5  нарастающим итогом */
,aerrtime
 double/* время аварии *//* время аварии */
,aerrtimeh
 double/* время аварии нарастающим итогом *//* время аварии нарастающим итогом */
,ahc
 varchar (360)/* нештатные ситуации общ *//* нештатные ситуации общ */
,asp
 double/* схема потребления *//* схема потребления */
,asp_tb1
 double/* схема потребления tb1 *//* схема потребления tb1 */
,asp_tb2
 double/* схема потребления tb2 *//* схема потребления tb2 */
,adatetimecounter
 datetime/* datetimecounter *//* datetimecounter */
,adg12
 double/* g1-g2 *//* g1-g2 */
,adg45
 double/* g4-g5 *//* g4-g5 */
,adp12
 double/* p1-p2 *//* p1-p2 */
,adp45
 double/* p4-p5 *//* p4-p5 */
,aunitsr
 varchar (24)/* единицы измерения расхода *//* единицы измерения расхода */
,aq3
 double/* тепловая энергия канал 3 *//* тепловая энергия канал 3 */
,aq4
 double/* тепловая энергия канал 4 *//* тепловая энергия канал 4 */
,apatm
 double/* атмосферное давление *//* атмосферное давление */
,aq5
 double/* тепловая энергия канал 5 *//* тепловая энергия канал 5 */
,adq12
 double/* тепловая энергия потребитель 1 *//* тепловая энергия потребитель 1 */
,adq45
 double/* тепловая энергия потребитель 2 *//* тепловая энергия потребитель 2 */
,apxb
 double/* давление холодной воды *//* давление холодной воды */
,adq
 double/* расход энергии потребитель 1 *//* расход энергии потребитель 1 */
,ahc_1
 varchar (360)/* нештатная ситуация 1 (тв1 или внешняя) *//* нештатная ситуация 1 (тв1 или внешняя) */
,ahc_2
 varchar (360)/* нештатная ситуация 2 (тв2 или внутренняя) *//* нештатная ситуация 2 (тв2 или внутренняя) */
,athot
 double/* температура горячей воды *//* температура горячей воды */
,adans1
 double/* dans1 *//* dans1 */
,adans2
 double/* dans2 *//* dans2 */
,adans3
 double/* dans3 *//* dans3 */
,adans4
 double/* dans4 *//* dans4 */
,adans5
 double/* dans5 *//* dans5 */
,adans6
 double/* dans6 *//* dans6 */
,acheck_a
 double/* проверка архивных данных на нс (0 - не производилась, 1 - произведена) *//* проверка архивных данных на нс (0 - не производилась, 1 - произведена) */
,aoktime
 double/* время безошиб.работы *//* время безошиб.работы */
,aworktime
 double/* время работы *//* время работы */
,atair1
 double/* температура воздуха канал 1 *//* температура воздуха канал 1 */
,atair2
 double/* температура воздуха канал 2 *//* температура воздуха канал 2 */
,ahc_code
 varchar (360)/* код нештатной ситуации тепловычислителя *//* код нештатной ситуации тепловычислителя */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_d where tplc_did=g2b(atplc_did);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplc_d' result;
    leave body;
  end if;
 start transaction ; 
 call tplc_d_logger(acursession,atplc_did) ; 
 update  tplc_d set changestamp=now() 
,
  dcall=adcall
,
  dcounter=adcounter
,
  q1=aq1
,
  q2=aq2
,
  t1=at1
,
  t2=at2
,
  dt12=adt12
,
  t3=at3
,
  t4=at4
,
  t5=at5
,
  dt45=adt45
,
  t6=at6
,
  v1=av1
,
  v2=av2
,
  dv12=adv12
,
  v3=av3
,
  v4=av4
,
  v5=av5
,
  dv45=adv45
,
  v6=av6
,
  m1=am1
,
  m2=am2
,
  dm12=adm12
,
  m3=am3
,
  m4=am4
,
  m5=am5
,
  dm45=adm45
,
  m6=am6
,
  p1=ap1
,
  p2=ap2
,
  p3=ap3
,
  p4=ap4
,
  p5=ap5
,
  p6=ap6
,
  g1=ag1
,
  g2=ag2
,
  g3=ag3
,
  g4=ag4
,
  g5=ag5
,
  g6=ag6
,
  tcool=atcool
,
  tce1=atce1
,
  tce2=atce2
,
  tsum1=atsum1
,
  tsum2=atsum2
,
  q1h=aq1h
,
  q2h=aq2h
,
  v1h=av1h
,
  v2h=av2h
,
  v4h=av4h
,
  v5h=av5h
,
  errtime=aerrtime
,
  errtimeh=aerrtimeh
,
  hc=ahc
,
  sp=asp
,
  sp_tb1=asp_tb1
,
  sp_tb2=asp_tb2
,
  datetimecounter=adatetimecounter
,
  dg12=adg12
,
  dg45=adg45
,
  dp12=adp12
,
  dp45=adp45
,
  unitsr=aunitsr
,
  q3=aq3
,
  q4=aq4
,
  patm=apatm
,
  q5=aq5
,
  dq12=adq12
,
  dq45=adq45
,
  pxb=apxb
,
  dq=adq
,
  hc_1=ahc_1
,
  hc_2=ahc_2
,
  thot=athot
,
  dans1=adans1
,
  dans2=adans2
,
  dans3=adans3
,
  dans4=adans4
,
  dans5=adans5
,
  dans6=adans6
,
  check_a=acheck_a
,
  oktime=aoktime
,
  worktime=aworktime
,
  tair1=atair1
,
  tair2=atair2
,
  hc_code=ahc_code
  where  tplc_did = g2b(atplc_did) ;


call tplc_d_client_trigger(acursession,atplc_did);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplc_d' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplc_d
 (  changestamp,tplc_did 
,instanceid
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 ) values (now(), g2b(atplc_did) 
,g2b(ainstanceid)
,adcall

,adcounter

,aq1

,aq2

,at1

,at2

,adt12

,at3

,at4

,at5

,adt45

,at6

,av1

,av2

,adv12

,av3

,av4

,av5

,adv45

,av6

,am1

,am2

,adm12

,am3

,am4

,am5

,adm45

,am6

,ap1

,ap2

,ap3

,ap4

,ap5

,ap6

,ag1

,ag2

,ag3

,ag4

,ag5

,ag6

,atcool

,atce1

,atce2

,atsum1

,atsum2

,aq1h

,aq2h

,av1h

,av2h

,av4h

,av5h

,aerrtime

,aerrtimeh

,ahc

,asp

,asp_tb1

,asp_tb2

,adatetimecounter

,adg12

,adg45

,adp12

,adp45

,aunitsr

,aq3

,aq4

,apatm

,aq5

,adq12

,adq45

,apxb

,adq

,ahc_1

,ahc_2

,athot

,adans1

,adans2

,adans3

,adans4

,adans5

,adans6

,acheck_a

,aoktime

,aworktime

,atair1

,atair2

,ahc_code

 ) ;


call tplc_d_client_trigger(acursession,atplc_did);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplc_d_copy
go

create procedure tplc_d_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplc_d 
 ( tplc_did 
,instanceid
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 ) select 
copymap(acopyaction,b2g(tplc_did)) 
,copymap(acopyaction,b2g(instanceid))
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 from tplc_d
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplc_d_logger
go

create procedure tplc_d_logger /*суточный архив*/ (
 acursession varchar(38),
 atplc_did varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplc_d_parent
go
create procedure tplc_d_parent /* суточный архив*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplc_d where  tplc_did=arowid;
 end 
go
GO


drop procedure if exists tplc_d_islocked
go
create procedure tplc_d_islocked /* суточный архив */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplc_d where tplc_did=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplc_d_lock
go
create procedure tplc_d_lock /* суточный архив */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplc_d_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplc_d set lockuserid =auserid ,locksessionid=null  where tplc_did=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplc_d set lockuserid=null ,locksessionid =acursession  where tplc_did=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplc_d_unlock
go
create procedure tplc_d_unlock /* суточный архив */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplc_d_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplc_d set lockuserid =null  where tplc_did=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplc_d set locksessionid =null  where tplc_did=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplc_d_client_trigger
GO

create procedure tplc_d_client_trigger  (
 acursession varchar(38),
 aTPLC_Did varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplc_h_brief
go

create procedure tplc_h_brief  (
 acursession varchar(38),
 atplc_hid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplc_hid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplc_h where tplc_hid=g2b(atplc_hid);
 if  aec &gt;0 then
   set abrief=tplc_h_brief_f(g2b(atplc_hid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplc_h_delete
go

create procedure tplc_h_delete /*часовые архивы*/ (
 acursession varchar(38),
 atplc_hid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_h where tplc_hid=g2b(atplc_hid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplc_h' result;
    leave body;
  end if;
 call tplc_h_logger(acursession,atplc_hid) ; 
  delete from  tplc_h 
  where  tplc_hid = g2b(atplc_hid) ;
  delete from num_values where ownerpartname='tplc_h' and ownerrowid=g2b(atplc_hid);
  end if;
    select 'ok' result;
 end 
go
GO

/*часовые архивы*/

drop procedure if exists tplc_h_save
go

create procedure tplc_h_save /*часовые архивы*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplc_hid varchar(38)
,adcall
 datetime/* дата опроса *//* дата опроса */
,adcounter
 datetime/* дата счетчика *//* дата счетчика */
,aq1
 double/* тепловая энергия канал 1 *//* тепловая энергия канал 1 */
,aq2
 double/* тепловая энергия канал 2 *//* тепловая энергия канал 2 */
,at1
 double/* температура по каналу 1 *//* температура по каналу 1 */
,at2
 double/* температура по каналу 2 *//* температура по каналу 2 */
,adt12
 double/* разность температур по каналу 1 и 2 *//* разность температур по каналу 1 и 2 */
,at3
 double/* температура по каналу 3 *//* температура по каналу 3 */
,at4
 double/* температура по каналу 4 *//* температура по каналу 4 */
,at5
 double/* температура по каналу 5 *//* температура по каналу 5 */
,adt45
 double/* разность температур по каналу 4 и 5 *//* разность температур по каналу 4 и 5 */
,at6
 double/* температура по каналу 6 *//* температура по каналу 6 */
,av1
 double/* объемный расход воды по каналу 1 *//* объемный расход воды по каналу 1 */
,av2
 double/* объемный расход воды по каналу 2 *//* объемный расход воды по каналу 2 */
,adv12
 double/* разность объемов канал 1  (расход гвс) *//* разность объемов канал 1  (расход гвс) */
,av3
 double/* объемный расход воды по каналу 3 *//* объемный расход воды по каналу 3 */
,av4
 double/* объемный расход воды по каналу 4 *//* объемный расход воды по каналу 4 */
,av5
 double/* объемный расход воды по каналу 5 *//* объемный расход воды по каналу 5 */
,adv45
 double/* разность объемов канал 2 *//* разность объемов канал 2 */
,av6
 double/* объемный расход воды по каналу 6 *//* объемный расход воды по каналу 6 */
,am1
 double/* масса воды по каналу 1 *//* масса воды по каналу 1 */
,am2
 double/* масса воды по каналу 2 *//* масса воды по каналу 2 */
,adm12
 double/* разность масс канал 1  (расход гвс) *//* разность масс канал 1  (расход гвс) */
,am3
 double/* масса воды по каналу 3 *//* масса воды по каналу 3 */
,am4
 double/* масса воды по каналу 4 *//* масса воды по каналу 4 */
,am5
 double/* масса воды по каналу 5 *//* масса воды по каналу 5 */
,adm45
 double/* разность масс канал 2 *//* разность масс канал 2 */
,am6
 double/* масса воды по каналу 6 *//* масса воды по каналу 6 */
,ap1
 double/* давление в трубопроводе 1 *//* давление в трубопроводе 1 */
,ap2
 double/* давление в трубопроводе 2 *//* давление в трубопроводе 2 */
,ap3
 double/* давление в трубопроводе 3 *//* давление в трубопроводе 3 */
,ap4
 double/* давление в трубопроводе 4 *//* давление в трубопроводе 4 */
,ap5
 double/* давление в трубопроводе 5 *//* давление в трубопроводе 5 */
,ap6
 double/* давление в трубопроводе 6 *//* давление в трубопроводе 6 */
,ag1
 double/* текущее значение расхода в трубопроводе 1 *//* текущее значение расхода в трубопроводе 1 */
,ag2
 double/* текущее значение расхода в трубопроводе 2 *//* текущее значение расхода в трубопроводе 2 */
,ag3
 double/* текущее значение расхода в трубопроводе 3 *//* текущее значение расхода в трубопроводе 3 */
,ag4
 double/* текущее значение расхода в трубопроводе 4 *//* текущее значение расхода в трубопроводе 4 */
,ag5
 double/* текущее значение расхода в трубопроводе 5 *//* текущее значение расхода в трубопроводе 5 */
,ag6
 double/* текущее значение расхода в трубопроводе 6 *//* текущее значение расхода в трубопроводе 6 */
,atcool
 double/* температура холодной воды *//* температура холодной воды */
,atce1
 double/* температура холодного конца канал 1 *//* температура холодного конца канал 1 */
,atce2
 double/* температура холодного конца канал 2 *//* температура холодного конца канал 2 */
,atsum1
 double/* тотальное время счета tb1 *//* тотальное время счета tb1 */
,atsum2
 double/* тотальное время счета tb2 *//* тотальное время счета tb2 */
,aq1h
 double/* тепловая энергия канал 1 нарастающим итогом *//* тепловая энергия канал 1 нарастающим итогом */
,aq2h
 double/* тепловая энергия канал 2 нарастающим итогом *//* тепловая энергия канал 2 нарастающим итогом */
,av1h
 double/* объемный расход воды по каналу 1  нарастающим итогом *//* объемный расход воды по каналу 1  нарастающим итогом */
,av2h
 double/* объемный расход воды по каналу 2  нарастающим итогом *//* объемный расход воды по каналу 2  нарастающим итогом */
,av4h
 double/* объемный расход воды по каналу 4  нарастающим итогом *//* объемный расход воды по каналу 4  нарастающим итогом */
,av5h
 double/* объемный расход воды по каналу 5  нарастающим итогом *//* объемный расход воды по каналу 5  нарастающим итогом */
,aerrtime
 double/* время аварии *//* время аварии */
,aerrtimeh
 double/* время аварии нарастающим итогом *//* время аварии нарастающим итогом */
,ahc
 varchar (360)/* нештатные ситуации общ *//* нештатные ситуации общ */
,asp
 double/* схема потребления *//* схема потребления */
,asp_tb1
 double/* схема потребления tb1 *//* схема потребления tb1 */
,asp_tb2
 double/* схема потребления tb2 *//* схема потребления tb2 */
,adatetimecounter
 datetime/* datetimecounter *//* datetimecounter */
,adg12
 double/* g1-g2 *//* g1-g2 */
,adg45
 double/* g4-g5 *//* g4-g5 */
,adp12
 double/* p1-p2 *//* p1-p2 */
,adp45
 double/* p4-p5 *//* p4-p5 */
,aunitsr
 varchar (24)/* единицы измерения расхода *//* единицы измерения расхода */
,aq3
 double/* тепловая энергия канал 3 *//* тепловая энергия канал 3 */
,aq4
 double/* тепловая энергия канал 4 *//* тепловая энергия канал 4 */
,apatm
 double/* атмосферное давление *//* атмосферное давление */
,aq5
 double/* тепловая энергия канал 5 *//* тепловая энергия канал 5 */
,adq12
 double/* тепловая энергия потребитель 1 *//* тепловая энергия потребитель 1 */
,adq45
 double/* тепловая энергия потребитель 2 *//* тепловая энергия потребитель 2 */
,apxb
 double/* давление холодной воды *//* давление холодной воды */
,adq
 double/* расход энергии потребитель 1 *//* расход энергии потребитель 1 */
,ahc_1
 varchar (360)/* нештатная ситуация 1 (тв1 или внешняя) *//* нештатная ситуация 1 (тв1 или внешняя) */
,ahc_2
 varchar (360)/* нештатная ситуация 2 (тв2 или внутренняя) *//* нештатная ситуация 2 (тв2 или внутренняя) */
,athot
 double/* температура горячей воды *//* температура горячей воды */
,adans1
 double/* dans1 *//* dans1 */
,adans2
 double/* dans2 *//* dans2 */
,adans3
 double/* dans3 *//* dans3 */
,adans4
 double/* dans4 *//* dans4 */
,adans5
 double/* dans5 *//* dans5 */
,adans6
 double/* dans6 *//* dans6 */
,acheck_a
 double/* проверка архивных данных на нс (0 - не производилась, 1 - произведена) *//* проверка архивных данных на нс (0 - не производилась, 1 - произведена) */
,aoktime
 double/* время безошиб.работы *//* время безошиб.работы */
,aworktime
 double/* время работы *//* время работы */
,atair1
 double/* температура воздуха канал 1 *//* температура воздуха канал 1 */
,atair2
 double/* температура воздуха канал 2 *//* температура воздуха канал 2 */
,ahc_code
 varchar (360)/* код нештатной ситуации тепловычислителя *//* код нештатной ситуации тепловычислителя */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_h where tplc_hid=g2b(atplc_hid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplc_h' result;
    leave body;
  end if;
 start transaction ; 
 call tplc_h_logger(acursession,atplc_hid) ; 
 update  tplc_h set changestamp=now() 
,
  dcall=adcall
,
  dcounter=adcounter
,
  q1=aq1
,
  q2=aq2
,
  t1=at1
,
  t2=at2
,
  dt12=adt12
,
  t3=at3
,
  t4=at4
,
  t5=at5
,
  dt45=adt45
,
  t6=at6
,
  v1=av1
,
  v2=av2
,
  dv12=adv12
,
  v3=av3
,
  v4=av4
,
  v5=av5
,
  dv45=adv45
,
  v6=av6
,
  m1=am1
,
  m2=am2
,
  dm12=adm12
,
  m3=am3
,
  m4=am4
,
  m5=am5
,
  dm45=adm45
,
  m6=am6
,
  p1=ap1
,
  p2=ap2
,
  p3=ap3
,
  p4=ap4
,
  p5=ap5
,
  p6=ap6
,
  g1=ag1
,
  g2=ag2
,
  g3=ag3
,
  g4=ag4
,
  g5=ag5
,
  g6=ag6
,
  tcool=atcool
,
  tce1=atce1
,
  tce2=atce2
,
  tsum1=atsum1
,
  tsum2=atsum2
,
  q1h=aq1h
,
  q2h=aq2h
,
  v1h=av1h
,
  v2h=av2h
,
  v4h=av4h
,
  v5h=av5h
,
  errtime=aerrtime
,
  errtimeh=aerrtimeh
,
  hc=ahc
,
  sp=asp
,
  sp_tb1=asp_tb1
,
  sp_tb2=asp_tb2
,
  datetimecounter=adatetimecounter
,
  dg12=adg12
,
  dg45=adg45
,
  dp12=adp12
,
  dp45=adp45
,
  unitsr=aunitsr
,
  q3=aq3
,
  q4=aq4
,
  patm=apatm
,
  q5=aq5
,
  dq12=adq12
,
  dq45=adq45
,
  pxb=apxb
,
  dq=adq
,
  hc_1=ahc_1
,
  hc_2=ahc_2
,
  thot=athot
,
  dans1=adans1
,
  dans2=adans2
,
  dans3=adans3
,
  dans4=adans4
,
  dans5=adans5
,
  dans6=adans6
,
  check_a=acheck_a
,
  oktime=aoktime
,
  worktime=aworktime
,
  tair1=atair1
,
  tair2=atair2
,
  hc_code=ahc_code
  where  tplc_hid = g2b(atplc_hid) ;


call tplc_h_client_trigger(acursession,atplc_hid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplc_h' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplc_h
 (  changestamp,tplc_hid 
,instanceid
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 ) values (now(), g2b(atplc_hid) 
,g2b(ainstanceid)
,adcall

,adcounter

,aq1

,aq2

,at1

,at2

,adt12

,at3

,at4

,at5

,adt45

,at6

,av1

,av2

,adv12

,av3

,av4

,av5

,adv45

,av6

,am1

,am2

,adm12

,am3

,am4

,am5

,adm45

,am6

,ap1

,ap2

,ap3

,ap4

,ap5

,ap6

,ag1

,ag2

,ag3

,ag4

,ag5

,ag6

,atcool

,atce1

,atce2

,atsum1

,atsum2

,aq1h

,aq2h

,av1h

,av2h

,av4h

,av5h

,aerrtime

,aerrtimeh

,ahc

,asp

,asp_tb1

,asp_tb2

,adatetimecounter

,adg12

,adg45

,adp12

,adp45

,aunitsr

,aq3

,aq4

,apatm

,aq5

,adq12

,adq45

,apxb

,adq

,ahc_1

,ahc_2

,athot

,adans1

,adans2

,adans3

,adans4

,adans5

,adans6

,acheck_a

,aoktime

,aworktime

,atair1

,atair2

,ahc_code

 ) ;


call tplc_h_client_trigger(acursession,atplc_hid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplc_h_copy
go

create procedure tplc_h_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplc_h 
 ( tplc_hid 
,instanceid
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 ) select 
copymap(acopyaction,b2g(tplc_hid)) 
,copymap(acopyaction,b2g(instanceid))
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 from tplc_h
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplc_h_logger
go

create procedure tplc_h_logger /*часовые архивы*/ (
 acursession varchar(38),
 atplc_hid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplc_h_parent
go
create procedure tplc_h_parent /* часовые архивы*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplc_h where  tplc_hid=arowid;
 end 
go
GO


drop procedure if exists tplc_h_islocked
go
create procedure tplc_h_islocked /* часовые архивы */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplc_h where tplc_hid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplc_h_lock
go
create procedure tplc_h_lock /* часовые архивы */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplc_h_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplc_h set lockuserid =auserid ,locksessionid=null  where tplc_hid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplc_h set lockuserid=null ,locksessionid =acursession  where tplc_hid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplc_h_unlock
go
create procedure tplc_h_unlock /* часовые архивы */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplc_h_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplc_h set lockuserid =null  where tplc_hid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplc_h set locksessionid =null  where tplc_hid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplc_h_client_trigger
GO

create procedure tplc_h_client_trigger  (
 acursession varchar(38),
 aTPLC_Hid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplc_missing_brief
go

create procedure tplc_missing_brief  (
 acursession varchar(38),
 atplc_missingid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplc_missingid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplc_missing where tplc_missingid=g2b(atplc_missingid);
 if  aec &gt;0 then
   set abrief=tplc_missing_brief_f(g2b(atplc_missingid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplc_missing_delete
go

create procedure tplc_missing_delete /*пропущенные архивы*/ (
 acursession varchar(38),
 atplc_missingid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_missing where tplc_missingid=g2b(atplc_missingid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplc_missing' result;
    leave body;
  end if;
 call tplc_missing_logger(acursession,atplc_missingid) ; 
  delete from  tplc_missing 
  where  tplc_missingid = g2b(atplc_missingid) ;
  delete from num_values where ownerpartname='tplc_missing' and ownerrowid=g2b(atplc_missingid);
  end if;
    select 'ok' result;
 end 
go
GO

/*пропущенные архивы*/

drop procedure if exists tplc_missing_save
go

create procedure tplc_missing_save /*пропущенные архивы*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplc_missingid varchar(38)
,aatype varchar(38)/* тип архива *//* тип архива */
,aadate
 datetime/* дата архива *//* дата архива */
,aquerycount
 integer/* количество попыток  опроса *//* количество попыток  опроса */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_missing where tplc_missingid=g2b(atplc_missingid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplc_missing' result;
    leave body;
  end if;
 start transaction ; 
 call tplc_missing_logger(acursession,atplc_missingid) ; 
 update  tplc_missing set changestamp=now() 
,
  atype=g2b(aatype)
,
  adate=aadate
,
  querycount=aquerycount
  where  tplc_missingid = g2b(atplc_missingid) ;


call tplc_missing_client_trigger(acursession,atplc_missingid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplc_missing' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplc_missing
 (  changestamp,tplc_missingid 
,instanceid
,atype

,adate

,querycount

 ) values (now(), g2b(atplc_missingid) 
,g2b(ainstanceid)
,g2b(aatype)

,aadate

,aquerycount

 ) ;


call tplc_missing_client_trigger(acursession,atplc_missingid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplc_missing_copy
go

create procedure tplc_missing_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplc_missing 
 ( tplc_missingid 
,instanceid
,atype

,adate

,querycount

 ) select 
copymap(acopyaction,b2g(tplc_missingid)) 
,copymap(acopyaction,b2g(instanceid))
,atype

,adate

,querycount

 from tplc_missing
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplc_missing_logger
go

create procedure tplc_missing_logger /*пропущенные архивы*/ (
 acursession varchar(38),
 atplc_missingid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplc_missing_parent
go
create procedure tplc_missing_parent /* пропущенные архивы*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplc_missing where  tplc_missingid=arowid;
 end 
go
GO


drop procedure if exists tplc_missing_islocked
go
create procedure tplc_missing_islocked /* пропущенные архивы */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplc_missing where tplc_missingid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplc_missing_lock
go
create procedure tplc_missing_lock /* пропущенные архивы */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplc_missing_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplc_missing set lockuserid =auserid ,locksessionid=null  where tplc_missingid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplc_missing set lockuserid=null ,locksessionid =acursession  where tplc_missingid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplc_missing_unlock
go
create procedure tplc_missing_unlock /* пропущенные архивы */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplc_missing_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplc_missing set lockuserid =null  where tplc_missingid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplc_missing set locksessionid =null  where tplc_missingid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplc_missing_client_trigger
GO

create procedure tplc_missing_client_trigger  (
 acursession varchar(38),
 aTPLC_MISSINGid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplc_t_brief
go

create procedure tplc_t_brief  (
 acursession varchar(38),
 atplc_tid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplc_tid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplc_t where tplc_tid=g2b(atplc_tid);
 if  aec &gt;0 then
   set abrief=tplc_t_brief_f(g2b(atplc_tid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplc_t_delete
go

create procedure tplc_t_delete /*суммарные показатели*/ (
 acursession varchar(38),
 atplc_tid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_t where tplc_tid=g2b(atplc_tid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplc_t' result;
    leave body;
  end if;
 call tplc_t_logger(acursession,atplc_tid) ; 
  delete from  tplc_t 
  where  tplc_tid = g2b(atplc_tid) ;
  delete from num_values where ownerpartname='tplc_t' and ownerrowid=g2b(atplc_tid);
  end if;
    select 'ok' result;
 end 
go
GO

/*суммарные показатели*/

drop procedure if exists tplc_t_save
go

create procedure tplc_t_save /*суммарные показатели*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplc_tid varchar(38)
,adcall
 datetime/* дата опроса *//* дата опроса */
,adcounter
 datetime/* дата счетчика *//* дата счетчика */
,aq1
 double/* тепловая энергия канал 1 *//* тепловая энергия канал 1 */
,aq2
 double/* тепловая энергия канал 2 *//* тепловая энергия канал 2 */
,at1
 double/* температура по каналу 1 *//* температура по каналу 1 */
,at2
 double/* температура по каналу 2 *//* температура по каналу 2 */
,adt12
 double/* разность температур по каналу 1 и 2 *//* разность температур по каналу 1 и 2 */
,at3
 double/* температура по каналу 3 *//* температура по каналу 3 */
,at4
 double/* температура по каналу 4 *//* температура по каналу 4 */
,at5
 double/* температура по каналу 5 *//* температура по каналу 5 */
,adt45
 double/* разность температур по каналу 4 и 5 *//* разность температур по каналу 4 и 5 */
,at6
 double/* температура по каналу 6 *//* температура по каналу 6 */
,av1
 double/* объемный расход воды по каналу 1 *//* объемный расход воды по каналу 1 */
,av2
 double/* объемный расход воды по каналу 2 *//* объемный расход воды по каналу 2 */
,adv12
 double/* разность объемов канал 1  (расход гвс) *//* разность объемов канал 1  (расход гвс) */
,av3
 double/* объемный расход воды по каналу 3 *//* объемный расход воды по каналу 3 */
,av4
 double/* объемный расход воды по каналу 4 *//* объемный расход воды по каналу 4 */
,av5
 double/* объемный расход воды по каналу 5 *//* объемный расход воды по каналу 5 */
,adv45
 double/* разность объемов канал 2 *//* разность объемов канал 2 */
,av6
 double/* объемный расход воды по каналу 6 *//* объемный расход воды по каналу 6 */
,am1
 double/* масса воды по каналу 1 *//* масса воды по каналу 1 */
,am2
 double/* масса воды по каналу 2 *//* масса воды по каналу 2 */
,adm12
 double/* разность масс канал 1  (расход гвс) *//* разность масс канал 1  (расход гвс) */
,am3
 double/* масса воды по каналу 3 *//* масса воды по каналу 3 */
,am4
 double/* масса воды по каналу 4 *//* масса воды по каналу 4 */
,am5
 double/* масса воды по каналу 5 *//* масса воды по каналу 5 */
,adm45
 double/* разность масс канал 2 *//* разность масс канал 2 */
,am6
 double/* масса воды по каналу 6 *//* масса воды по каналу 6 */
,ap1
 double/* давление в трубопроводе 1 *//* давление в трубопроводе 1 */
,ap2
 double/* давление в трубопроводе 2 *//* давление в трубопроводе 2 */
,ap3
 double/* давление в трубопроводе 3 *//* давление в трубопроводе 3 */
,ap4
 double/* давление в трубопроводе 4 *//* давление в трубопроводе 4 */
,ap5
 double/* давление в трубопроводе 5 *//* давление в трубопроводе 5 */
,ap6
 double/* давление в трубопроводе 6 *//* давление в трубопроводе 6 */
,ag1
 double/* текущее значение расхода в трубопроводе 1 *//* текущее значение расхода в трубопроводе 1 */
,ag2
 double/* текущее значение расхода в трубопроводе 2 *//* текущее значение расхода в трубопроводе 2 */
,ag3
 double/* текущее значение расхода в трубопроводе 3 *//* текущее значение расхода в трубопроводе 3 */
,ag4
 double/* текущее значение расхода в трубопроводе 4 *//* текущее значение расхода в трубопроводе 4 */
,ag5
 double/* текущее значение расхода в трубопроводе 5 *//* текущее значение расхода в трубопроводе 5 */
,ag6
 double/* текущее значение расхода в трубопроводе 6 *//* текущее значение расхода в трубопроводе 6 */
,atcool
 double/* температура холодной воды *//* температура холодной воды */
,atce1
 double/* температура холодного конца канал 1 *//* температура холодного конца канал 1 */
,atce2
 double/* температура холодного конца канал 2 *//* температура холодного конца канал 2 */
,atsum1
 double/* тотальное время счета tb1 *//* тотальное время счета tb1 */
,atsum2
 double/* тотальное время счета tb2 *//* тотальное время счета tb2 */
,aq1h
 double/* тепловая энергия канал 1 нарастающим итогом *//* тепловая энергия канал 1 нарастающим итогом */
,aq2h
 double/* тепловая энергия канал 2 нарастающим итогом *//* тепловая энергия канал 2 нарастающим итогом */
,av1h
 double/* объемный расход воды по каналу 1  нарастающим итогом *//* объемный расход воды по каналу 1  нарастающим итогом */
,av2h
 double/* объемный расход воды по каналу 2  нарастающим итогом *//* объемный расход воды по каналу 2  нарастающим итогом */
,av4h
 double/* объемный расход воды по каналу 4  нарастающим итогом *//* объемный расход воды по каналу 4  нарастающим итогом */
,av5h
 double/* объемный расход воды по каналу 5  нарастающим итогом *//* объемный расход воды по каналу 5  нарастающим итогом */
,aerrtime
 double/* время аварии *//* время аварии */
,aerrtimeh
 double/* время аварии нарастающим итогом *//* время аварии нарастающим итогом */
,ahc
 varchar (360)/* нештатные ситуации общ *//* нештатные ситуации общ */
,asp
 double/* схема потребления *//* схема потребления */
,asp_tb1
 double/* схема потребления tb1 *//* схема потребления tb1 */
,asp_tb2
 double/* схема потребления tb2 *//* схема потребления tb2 */
,adatetimecounter
 datetime/* datetimecounter *//* datetimecounter */
,adg12
 double/* g1-g2 *//* g1-g2 */
,adg45
 double/* g4-g5 *//* g4-g5 */
,adp12
 double/* p1-p2 *//* p1-p2 */
,adp45
 double/* p4-p5 *//* p4-p5 */
,aunitsr
 varchar (24)/* единицы измерения расхода *//* единицы измерения расхода */
,aq3
 double/* тепловая энергия канал 3 *//* тепловая энергия канал 3 */
,aq4
 double/* тепловая энергия канал 4 *//* тепловая энергия канал 4 */
,apatm
 double/* атмосферное давление *//* атмосферное давление */
,aq5
 double/* тепловая энергия канал 5 *//* тепловая энергия канал 5 */
,adq12
 double/* тепловая энергия потребитель 1 *//* тепловая энергия потребитель 1 */
,adq45
 double/* тепловая энергия потребитель 2 *//* тепловая энергия потребитель 2 */
,apxb
 double/* давление холодной воды *//* давление холодной воды */
,adq
 double/* расход энергии потребитель 1 *//* расход энергии потребитель 1 */
,ahc_1
 varchar (360)/* нештатная ситуация 1 (тв1 или внешняя) *//* нештатная ситуация 1 (тв1 или внешняя) */
,ahc_2
 varchar (360)/* нештатная ситуация 2 (тв2 или внутренняя) *//* нештатная ситуация 2 (тв2 или внутренняя) */
,athot
 double/* температура горячей воды *//* температура горячей воды */
,adans1
 double/* dans1 *//* dans1 */
,adans2
 double/* dans2 *//* dans2 */
,adans3
 double/* dans3 *//* dans3 */
,adans4
 double/* dans4 *//* dans4 */
,adans5
 double/* dans5 *//* dans5 */
,adans6
 double/* dans6 *//* dans6 */
,acheck_a
 double/* проверка архивных данных на нс (0 - не производилась, 1 - произведена) *//* проверка архивных данных на нс (0 - не производилась, 1 - произведена) */
,aoktime
 double/* время безошиб.работы *//* время безошиб.работы */
,aworktime
 double/* время работы *//* время работы */
,atair1
 double/* температура воздуха канал 1 *//* температура воздуха канал 1 */
,atair2
 double/* температура воздуха канал 2 *//* температура воздуха канал 2 */
,ahc_code
 varchar (360)/* код нештатной ситуации тепловычислителя *//* код нештатной ситуации тепловычислителя */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplc_t where tplc_tid=g2b(atplc_tid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplc_t' result;
    leave body;
  end if;
 start transaction ; 
 call tplc_t_logger(acursession,atplc_tid) ; 
 update  tplc_t set changestamp=now() 
,
  dcall=adcall
,
  dcounter=adcounter
,
  q1=aq1
,
  q2=aq2
,
  t1=at1
,
  t2=at2
,
  dt12=adt12
,
  t3=at3
,
  t4=at4
,
  t5=at5
,
  dt45=adt45
,
  t6=at6
,
  v1=av1
,
  v2=av2
,
  dv12=adv12
,
  v3=av3
,
  v4=av4
,
  v5=av5
,
  dv45=adv45
,
  v6=av6
,
  m1=am1
,
  m2=am2
,
  dm12=adm12
,
  m3=am3
,
  m4=am4
,
  m5=am5
,
  dm45=adm45
,
  m6=am6
,
  p1=ap1
,
  p2=ap2
,
  p3=ap3
,
  p4=ap4
,
  p5=ap5
,
  p6=ap6
,
  g1=ag1
,
  g2=ag2
,
  g3=ag3
,
  g4=ag4
,
  g5=ag5
,
  g6=ag6
,
  tcool=atcool
,
  tce1=atce1
,
  tce2=atce2
,
  tsum1=atsum1
,
  tsum2=atsum2
,
  q1h=aq1h
,
  q2h=aq2h
,
  v1h=av1h
,
  v2h=av2h
,
  v4h=av4h
,
  v5h=av5h
,
  errtime=aerrtime
,
  errtimeh=aerrtimeh
,
  hc=ahc
,
  sp=asp
,
  sp_tb1=asp_tb1
,
  sp_tb2=asp_tb2
,
  datetimecounter=adatetimecounter
,
  dg12=adg12
,
  dg45=adg45
,
  dp12=adp12
,
  dp45=adp45
,
  unitsr=aunitsr
,
  q3=aq3
,
  q4=aq4
,
  patm=apatm
,
  q5=aq5
,
  dq12=adq12
,
  dq45=adq45
,
  pxb=apxb
,
  dq=adq
,
  hc_1=ahc_1
,
  hc_2=ahc_2
,
  thot=athot
,
  dans1=adans1
,
  dans2=adans2
,
  dans3=adans3
,
  dans4=adans4
,
  dans5=adans5
,
  dans6=adans6
,
  check_a=acheck_a
,
  oktime=aoktime
,
  worktime=aworktime
,
  tair1=atair1
,
  tair2=atair2
,
  hc_code=ahc_code
  where  tplc_tid = g2b(atplc_tid) ;


call tplc_t_client_trigger(acursession,atplc_tid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplc.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplc_t' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplc_t
 (  changestamp,tplc_tid 
,instanceid
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 ) values (now(), g2b(atplc_tid) 
,g2b(ainstanceid)
,adcall

,adcounter

,aq1

,aq2

,at1

,at2

,adt12

,at3

,at4

,at5

,adt45

,at6

,av1

,av2

,adv12

,av3

,av4

,av5

,adv45

,av6

,am1

,am2

,adm12

,am3

,am4

,am5

,adm45

,am6

,ap1

,ap2

,ap3

,ap4

,ap5

,ap6

,ag1

,ag2

,ag3

,ag4

,ag5

,ag6

,atcool

,atce1

,atce2

,atsum1

,atsum2

,aq1h

,aq2h

,av1h

,av2h

,av4h

,av5h

,aerrtime

,aerrtimeh

,ahc

,asp

,asp_tb1

,asp_tb2

,adatetimecounter

,adg12

,adg45

,adp12

,adp45

,aunitsr

,aq3

,aq4

,apatm

,aq5

,adq12

,adq45

,apxb

,adq

,ahc_1

,ahc_2

,athot

,adans1

,adans2

,adans3

,adans4

,adans5

,adans6

,acheck_a

,aoktime

,aworktime

,atair1

,atair2

,ahc_code

 ) ;


call tplc_t_client_trigger(acursession,atplc_tid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplc_t_copy
go

create procedure tplc_t_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplc_t 
 ( tplc_tid 
,instanceid
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 ) select 
copymap(acopyaction,b2g(tplc_tid)) 
,copymap(acopyaction,b2g(instanceid))
,dcall

,dcounter

,q1

,q2

,t1

,t2

,dt12

,t3

,t4

,t5

,dt45

,t6

,v1

,v2

,dv12

,v3

,v4

,v5

,dv45

,v6

,m1

,m2

,dm12

,m3

,m4

,m5

,dm45

,m6

,p1

,p2

,p3

,p4

,p5

,p6

,g1

,g2

,g3

,g4

,g5

,g6

,tcool

,tce1

,tce2

,tsum1

,tsum2

,q1h

,q2h

,v1h

,v2h

,v4h

,v5h

,errtime

,errtimeh

,hc

,sp

,sp_tb1

,sp_tb2

,datetimecounter

,dg12

,dg45

,dp12

,dp45

,unitsr

,q3

,q4

,patm

,q5

,dq12

,dq45

,pxb

,dq

,hc_1

,hc_2

,thot

,dans1

,dans2

,dans3

,dans4

,dans5

,dans6

,check_a

,oktime

,worktime

,tair1

,tair2

,hc_code

 from tplc_t
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplc_t_logger
go

create procedure tplc_t_logger /*суммарные показатели*/ (
 acursession varchar(38),
 atplc_tid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplc_t_parent
go
create procedure tplc_t_parent /* суммарные показатели*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplc_t where  tplc_tid=arowid;
 end 
go
GO


drop procedure if exists tplc_t_islocked
go
create procedure tplc_t_islocked /* суммарные показатели */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplc_t where tplc_tid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplc_t_lock
go
create procedure tplc_t_lock /* суммарные показатели */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplc_t_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplc_t set lockuserid =auserid ,locksessionid=null  where tplc_tid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplc_t set lockuserid=null ,locksessionid =acursession  where tplc_tid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplc_t_unlock
go
create procedure tplc_t_unlock /* суммарные показатели */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplc_t_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplc_t set lockuserid =null  where tplc_tid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplc_t set locksessionid =null  where tplc_tid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplc_t_client_trigger
GO

create procedure tplc_t_client_trigger  (
 acursession varchar(38),
 aTPLC_Tid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpn_def_brief
go

create procedure tpn_def_brief  (
 acursession varchar(38),
 atpn_defid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpn_defid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpn_def where tpn_defid=g2b(atpn_defid);
 if  aec &gt;0 then
   set abrief=tpn_def_brief_f(g2b(atpn_defid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpn_def_delete
go

create procedure tpn_def_delete /*описание здания*/ (
 acursession varchar(38),
 atpn_defid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpn_def where tpn_defid=g2b(atpn_defid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpn.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpn_def' result;
    leave body;
  end if;
 call tpn_def_logger(acursession,atpn_defid) ; 
  delete from  tpn_def 
  where  tpn_defid = g2b(atpn_defid) ;
  delete from num_values where ownerpartname='tpn_def' and ownerrowid=g2b(atpn_defid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание*/

drop procedure if exists tpn_def_save
go

create procedure tpn_def_save /*описание здания*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpn_defid varchar(38)
,aaddr
 varchar (2000)/* адрес *//* адрес */
,athephone
 varchar (40)/* телефон *//* телефон */
,aorgunit varchar(38)/* филиал *//* филиал */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpn_def where tpn_defid=g2b(atpn_defid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpn.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpn_def' result;
    leave body;
  end if;
 start transaction ; 
 call tpn_def_logger(acursession,atpn_defid) ; 
 update  tpn_def set changestamp=now() 
,
  addr=aaddr
,
  thephone=athephone
,
  orgunit=g2b(aorgunit)
  where  tpn_defid = g2b(atpn_defid) ;


call tpn_def_client_trigger(acursession,atpn_defid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpn.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpn_def' result;
    leave body;
  end if;
select count(*) into aec from tpn_def where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tpn_def&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tpn_def
 (  changestamp,tpn_defid 
,instanceid
,addr

,thephone

,orgunit

 ) values (now(), g2b(atpn_defid) 
,g2b(ainstanceid)
,aaddr

,athephone

,g2b(aorgunit)

 ) ;


call tpn_def_client_trigger(acursession,atpn_defid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpn_def_copy
go

create procedure tpn_def_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpn_def 
 ( tpn_defid 
,instanceid
,addr

,thephone

,orgunit

 ) select 
copymap(acopyaction,b2g(tpn_defid)) 
,copymap(acopyaction,b2g(instanceid))
,addr

,thephone

,orgunit

 from tpn_def
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpn_def_logger
go

create procedure tpn_def_logger /*описание здания*/ (
 acursession varchar(38),
 atpn_defid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpn_def_parent
go
create procedure tpn_def_parent /* описание здания*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpn_def where  tpn_defid=arowid;
 end 
go
GO


drop procedure if exists tpn_def_islocked
go
create procedure tpn_def_islocked /* описание здания */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpn_def where tpn_defid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpn_def_lock
go
create procedure tpn_def_lock /* описание здания */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpn_def_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpn_def set lockuserid =auserid ,locksessionid=null  where tpn_defid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpn_def set lockuserid=null ,locksessionid =acursession  where tpn_defid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpn_def_unlock
go
create procedure tpn_def_unlock /* описание здания */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpn_def_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpn_def set lockuserid =null  where tpn_defid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpn_def set locksessionid =null  where tpn_defid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpn_def_client_trigger
GO

create procedure tpn_def_client_trigger  (
 acursession varchar(38),
 aTPN_DEFid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists iu_u_def_gettotemp
go

create procedure iu_u_def_gettotemp (
 acursession varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
delete from iu_u_def_temp
 where  sessionid=g2b(acursession) and instanceid =g2b(ainstanceid); 
 insert into iu_u_def_temp 
 (timestamp,changestamp,sessionid, iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 ) select 
timestamp,changestamp,g2b(acursession),iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 from iu_u_def
 where instanceid =g2b(ainstanceid); 
 end 
go
GO


drop procedure if exists iu_u_def_commitfromtemp
go

create procedure iu_u_def_commitfromtemp (
 acursession varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
delete from iu_u_def
 where   instanceid =g2b(ainstanceid); 
 insert into iu_u_def 
 (timestamp, changestamp,iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 ) select 
timestamp, changestamp,iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 from iu_u_def_temp
 where  sessionid=g2b(acursession) and instanceid =g2b(ainstanceid); 
 end 
go
GO


drop procedure if exists iu_u_def_droptempdata
go

create procedure iu_u_def_droptempdata (
 acursession varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
delete from iu_u_def_temp
 where  sessionid=g2b(acursession) and instanceid =g2b(ainstanceid); 
 end 
go
GO


drop procedure if exists iu_u_def_brief
go

create procedure iu_u_def_brief  (
 acursession varchar(38),
 aiu_u_defid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_u_defid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_u_def where iu_u_defid=g2b(aiu_u_defid);
 if  aec &gt;0 then
   set abrief=iu_u_def_brief_f(g2b(aiu_u_defid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists iu_u_def_delete
go

create procedure iu_u_def_delete /*данные сотрудника*/ (
 acursession varchar(38),
 aiu_u_defid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_u_def_temp  where sessionid=g2b(acursession) and iu_u_defid = g2b(aiu_u_defid) ;
if aec&gt;0 then
 select checkoperation( acursession ,'bpu.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=iu_u_def' result;
    leave body;
  end if;
 call iu_u_def_logger(acursession,aiu_u_defid) ; 
  delete from  iu_u_def_temp 
  where sessionid=g2b(acursession) and iu_u_defid = g2b(aiu_u_defid) ;
  delete from num_values where ownerpartname='iu_u_def' and ownerrowid=g2b(aiu_u_defid);
  end if;
    select 'ok' result;
 end 
go
GO

/*данные сотрудника*/

drop procedure if exists iu_u_def_save
go

create procedure iu_u_def_save /*данные сотрудника*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_u_defid varchar(38)
,atheclient varchar(38)/* клиент *//* клиент */
,alastname
 varchar (120)/* фамилия *//* фамилия */
,aname
 varchar (120)/* имя *//* имя */
,asurname
 varchar (120)/* отчество *//* отчество */
,acurrole varchar(38)/* роль в производстве *//* роль в производстве */
,asendtomail
 integer/* оповещать по почте *//* оповещать по почте */
,afreelancer
 integer/* удаленная работа *//* удаленная работа */
,aemail
 varchar (60)/* e-mail *//* e-mail */
,athephone
 varchar (40)/* телефон *//* телефон */
,alogin
 varchar (64)/* имя для входа *//* имя для входа */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_u_def_temp where sessionid=g2b(acursession) and iu_u_defid=g2b(aiu_u_defid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bpu.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=iu_u_def' result;
    leave body;
  end if;
 start transaction ; 
 call iu_u_def_logger(acursession,aiu_u_defid) ; 
 update  iu_u_def_temp set changestamp=now() 
,
  theclient=g2b(atheclient)
,
  lastname=alastname
,
  name=aname
,
  surname=asurname
,
  currole=g2b(acurrole)
,
  sendtomail=asendtomail
,
  freelancer=afreelancer
,
  email=aemail
,
  thephone=athephone
,
  login=alogin
  where  sessionid=g2b(acursession) and iu_u_defid = g2b(aiu_u_defid) ;


call iu_u_def_client_trigger(acursession,aiu_u_defid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bpu.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=iu_u_def' result;
    leave body;
  end if;
select count(*) into aec from iu_u_def_temp where  sessionid=g2b(acursession) and 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;iu_u_def&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   iu_u_def_temp
 ( changestamp,sessionid, iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 ) values (now(), g2b(acursession), g2b(aiu_u_defid) 
,g2b(ainstanceid)
,g2b(atheclient)

,alastname

,aname

,asurname

,g2b(acurrole)

,asendtomail

,afreelancer

,aemail

,athephone

,alogin

 ) ;


call iu_u_def_client_trigger(acursession,aiu_u_defid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists iu_u_def_copy
go

create procedure iu_u_def_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_u_def 
 ( iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 ) select 
copymap(acopyaction,b2g(iu_u_defid)) 
,copymap(acopyaction,b2g(instanceid))
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 from iu_u_def
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists iu_u_def_logger
go

create procedure iu_u_def_logger /*данные сотрудника*/ (
 acursession varchar(38),
 aiu_u_defid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists iu_u_def_parent
go
create procedure iu_u_def_parent /* данные сотрудника*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_u_def where  iu_u_defid=arowid;
 end 
go
GO


drop procedure if exists iu_u_def_islocked
go
create procedure iu_u_def_islocked /* данные сотрудника */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_u_def where iu_u_defid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists iu_u_def_lock
go
create procedure iu_u_def_lock /* данные сотрудника */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_u_def_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_u_def set lockuserid =auserid ,locksessionid=null  where iu_u_defid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_u_def set lockuserid=null ,locksessionid =acursession  where iu_u_defid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists iu_u_def_unlock
go
create procedure iu_u_def_unlock /* данные сотрудника */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_u_def_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_u_def set lockuserid =null  where iu_u_defid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_u_def set locksessionid =null  where iu_u_defid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS iu_u_def_client_trigger
GO

create procedure iu_u_def_client_trigger  (
 acursession varchar(38),
 aiu_u_defid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists genpackage_brief
go

create procedure genpackage_brief  (
 acursession varchar(38),
 agenpackageid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agenpackageid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from genpackage where genpackageid=g2b(agenpackageid);
 if  aec &gt;0 then
   set abrief=genpackage_brief_f(g2b(agenpackageid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists genpackage_delete
go

create procedure genpackage_delete /*пакет генерации*/ (
 acursession varchar(38),
 agenpackageid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genpackage where genpackageid=g2b(agenpackageid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=genpackage' result;
    leave body;
  end if;
 call genpackage_logger(acursession,agenpackageid) ; 
  delete from  genpackage 
  where  genpackageid = g2b(agenpackageid) ;
  delete from num_values where ownerpartname='genpackage' and ownerrowid=g2b(agenpackageid);
  end if;
    select 'ok' result;
 end 
go
GO

/*пакет генерации*/

drop procedure if exists genpackage_save
go

create procedure genpackage_save /*пакет генерации*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 agenpackageid varchar(38)
,aname
 varchar (255)/* название *//* название */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genpackage where genpackageid=g2b(agenpackageid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=genpackage' result;
    leave body;
  end if;
 start transaction ; 
 call genpackage_logger(acursession,agenpackageid) ; 
 update  genpackage set changestamp=now() 
,
  name=aname
  where  genpackageid = g2b(agenpackageid) ;


call genpackage_client_trigger(acursession,agenpackageid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=genpackage' result;
    leave body;
  end if;
 start transaction;  
 insert into   genpackage
 (  changestamp,genpackageid 
,instanceid
,name

 ) values (now(), g2b(agenpackageid) 
,g2b(ainstanceid)
,aname

 ) ;


call genpackage_client_trigger(acursession,agenpackageid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists generator_target_brief
go

create procedure generator_target_brief  (
 acursession varchar(38),
 agenerator_targetid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agenerator_targetid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from generator_target where generator_targetid=g2b(agenerator_targetid);
 if  aec &gt;0 then
   set abrief=generator_target_brief_f(g2b(agenerator_targetid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists generator_target_delete
go

create procedure generator_target_delete /*генераторы*/ (
 acursession varchar(38),
 agenerator_targetid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from generator_target where generator_targetid=g2b(agenerator_targetid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=generator_target' result;
    leave body;
  end if;
 call generator_target_logger(acursession,agenerator_targetid) ; 
  delete from  generator_target 
  where  generator_targetid = g2b(agenerator_targetid) ;
  delete from num_values where ownerpartname='generator_target' and ownerrowid=g2b(agenerator_targetid);
  end if;
    select 'ok' result;
 end 
go
GO

/*генераторы*/

drop procedure if exists generator_target_save
go

create procedure generator_target_save /*генераторы*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agenerator_targetid varchar(38)
,aname
 varchar (255)/* название *//* название */
,atargettype
 integer/* тип платформы *//* тип платформы */
,aqueuename
 varchar (255)/* очередь *//* очередь */
,ageneratorprogid
 varchar (255)/* com класс *//* com класс */
,ageneratorstyle
 integer/* вариант *//* вариант */
,athedevelopmentenv
 integer/* среда разработки *//* среда разработки */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from generator_target where generator_targetid=g2b(agenerator_targetid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=generator_target' result;
    leave body;
  end if;
 start transaction ; 
 call generator_target_logger(acursession,agenerator_targetid) ; 
 update  generator_target set changestamp=now() 
,
  name=aname
,
  targettype=atargettype
,
  queuename=aqueuename
,
  generatorprogid=ageneratorprogid
,
  generatorstyle=ageneratorstyle
,
  thedevelopmentenv=athedevelopmentenv
  where  generator_targetid = g2b(agenerator_targetid) ;


call generator_target_client_trigger(acursession,agenerator_targetid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=generator_target' result;
    leave body;
  end if;
 start transaction;  
 insert into   generator_target
 (  changestamp,generator_targetid 
,parentstructrowid
,name

,targettype

,queuename

,generatorprogid

,generatorstyle

,thedevelopmentenv

 ) values (now(), g2b(agenerator_targetid) 
,g2b(aparentstructrowid)
,aname

,atargettype

,aqueuename

,ageneratorprogid

,ageneratorstyle

,athedevelopmentenv

 ) ;


call generator_target_client_trigger(acursession,agenerator_targetid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists genreference_brief
go

create procedure genreference_brief  (
 acursession varchar(38),
 agenreferenceid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agenreferenceid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from genreference where genreferenceid=g2b(agenreferenceid);
 if  aec &gt;0 then
   set abrief=genreference_brief_f(g2b(agenreferenceid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists genreference_delete
go

create procedure genreference_delete /*библиотеки, которые используются при генерации*/ (
 acursession varchar(38),
 agenreferenceid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genreference where genreferenceid=g2b(agenreferenceid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=genreference' result;
    leave body;
  end if;
 call genreference_logger(acursession,agenreferenceid) ; 
  delete from  genreference 
  where  genreferenceid = g2b(agenreferenceid) ;
  delete from num_values where ownerpartname='genreference' and ownerrowid=g2b(agenreferenceid);
  end if;
    select 'ok' result;
 end 
go
GO

/*библиотеки*/

drop procedure if exists genreference_save
go

create procedure genreference_save /*библиотеки, которые используются при генерации*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agenreferenceid varchar(38)
,aname
 varchar (255)/* название *//* название */
,arefclassid
 varchar (40)/* класс ссылки *//* класс ссылки */
,aversionmajor
 integer/* номер версии *//* номер версии */
,aversionminor
 integer/* подверсия *//* подверсия */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genreference where genreferenceid=g2b(agenreferenceid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=genreference' result;
    leave body;
  end if;
 start transaction ; 
 call genreference_logger(acursession,agenreferenceid) ; 
 update  genreference set changestamp=now() 
,
  name=aname
,
  refclassid=arefclassid
,
  versionmajor=aversionmajor
,
  versionminor=aversionminor
  where  genreferenceid = g2b(agenreferenceid) ;


call genreference_client_trigger(acursession,agenreferenceid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=genreference' result;
    leave body;
  end if;
 start transaction;  
 insert into   genreference
 (  changestamp,genreferenceid 
,parentstructrowid
,name

,refclassid

,versionmajor

,versionminor

 ) values (now(), g2b(agenreferenceid) 
,g2b(aparentstructrowid)
,aname

,arefclassid

,aversionmajor

,aversionminor

 ) ;


call genreference_client_trigger(acursession,agenreferenceid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists genmanualcode_brief
go

create procedure genmanualcode_brief  (
 acursession varchar(38),
 agenmanualcodeid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agenmanualcodeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from genmanualcode where genmanualcodeid=g2b(agenmanualcodeid);
 if  aec &gt;0 then
   set abrief=genmanualcode_brief_f(g2b(agenmanualcodeid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists genmanualcode_delete
go

create procedure genmanualcode_delete /*код, который не укладывается в описание модели*/ (
 acursession varchar(38),
 agenmanualcodeid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genmanualcode where genmanualcodeid=g2b(agenmanualcodeid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=genmanualcode' result;
    leave body;
  end if;
 call genmanualcode_logger(acursession,agenmanualcodeid) ; 
  delete from  genmanualcode 
  where  genmanualcodeid = g2b(agenmanualcodeid) ;
  delete from num_values where ownerpartname='genmanualcode' and ownerrowid=g2b(agenmanualcodeid);
  end if;
    select 'ok' result;
 end 
go
GO

/*ручной код*/

drop procedure if exists genmanualcode_save
go

create procedure genmanualcode_save /*код, который не укладывается в описание модели*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agenmanualcodeid varchar(38)
,aname
 varchar (255)/* название *//* название */
,athe_alias
 varchar (80)/* псевдоним *//* псевдоним */
,acode
 text/* код *//* код */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genmanualcode where genmanualcodeid=g2b(agenmanualcodeid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=genmanualcode' result;
    leave body;
  end if;
 start transaction ; 
 call genmanualcode_logger(acursession,agenmanualcodeid) ; 
 update  genmanualcode set changestamp=now() 
,
  name=aname
,
  the_alias=athe_alias
,
  code=acode
  where  genmanualcodeid = g2b(agenmanualcodeid) ;


call genmanualcode_client_trigger(acursession,agenmanualcodeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=genmanualcode' result;
    leave body;
  end if;
 start transaction;  
 insert into   genmanualcode
 (  changestamp,genmanualcodeid 
,parentstructrowid
,name

,the_alias

,code

 ) values (now(), g2b(agenmanualcodeid) 
,g2b(aparentstructrowid)
,aname

,athe_alias

,acode

 ) ;


call genmanualcode_client_trigger(acursession,agenmanualcodeid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists gencontrols_brief
go

create procedure gencontrols_brief  (
 acursession varchar(38),
 agencontrolsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agencontrolsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from gencontrols where gencontrolsid=g2b(agencontrolsid);
 if  aec &gt;0 then
   set abrief=gencontrols_brief_f(g2b(agencontrolsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists gencontrols_delete
go

create procedure gencontrols_delete /*контрольные элементы, которые используются при генерации*/ (
 acursession varchar(38),
 agencontrolsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from gencontrols where gencontrolsid=g2b(agencontrolsid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=gencontrols' result;
    leave body;
  end if;
 call gencontrols_logger(acursession,agencontrolsid) ; 
  delete from  gencontrols 
  where  gencontrolsid = g2b(agencontrolsid) ;
  delete from num_values where ownerpartname='gencontrols' and ownerrowid=g2b(agencontrolsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*контрольные элементы*/

drop procedure if exists gencontrols_save
go

create procedure gencontrols_save /*контрольные элементы, которые используются при генерации*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agencontrolsid varchar(38)
,acontrolprogid
 varchar (255)/* progid контрольконо элемента *//* progid контрольконо элемента */
,acontrolclassid
 varchar (40)/* класс контрольногоэлемента *//* класс контрольногоэлемента */
,aversionmajor
 integer/* версия *//* версия */
,aversionminor
 integer/* подверсия *//* подверсия */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from gencontrols where gencontrolsid=g2b(agencontrolsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=gencontrols' result;
    leave body;
  end if;
 start transaction ; 
 call gencontrols_logger(acursession,agencontrolsid) ; 
 update  gencontrols set changestamp=now() 
,
  controlprogid=acontrolprogid
,
  controlclassid=acontrolclassid
,
  versionmajor=aversionmajor
,
  versionminor=aversionminor
  where  gencontrolsid = g2b(agencontrolsid) ;


call gencontrols_client_trigger(acursession,agencontrolsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=gencontrols' result;
    leave body;
  end if;
 start transaction;  
 insert into   gencontrols
 (  changestamp,gencontrolsid 
,parentstructrowid
,controlprogid

,controlclassid

,versionmajor

,versionminor

 ) values (now(), g2b(agencontrolsid) 
,g2b(aparentstructrowid)
,acontrolprogid

,acontrolclassid

,aversionmajor

,aversionminor

 ) ;


call gencontrols_client_trigger(acursession,agencontrolsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists genreference_copy
go

create procedure genreference_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into genreference 
 ( genreferenceid 
,parentstructrowid
,name

,refclassid

,versionmajor

,versionminor

 ) select 
copymap(acopyaction,b2g(genreferenceid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,refclassid

,versionmajor

,versionminor

 from genreference
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists genmanualcode_copy
go

create procedure genmanualcode_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into genmanualcode 
 ( genmanualcodeid 
,parentstructrowid
,name

,the_alias

,code

 ) select 
copymap(acopyaction,b2g(genmanualcodeid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,the_alias

,code

 from genmanualcode
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists gencontrols_copy
go

create procedure gencontrols_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into gencontrols 
 ( gencontrolsid 
,parentstructrowid
,controlprogid

,controlclassid

,versionmajor

,versionminor

 ) select 
copymap(acopyaction,b2g(gencontrolsid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,controlprogid

,controlclassid

,versionmajor

,versionminor

 from gencontrols
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists generator_target_copy
go

create procedure generator_target_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_generator_target cursor for
select generator_targetid from generator_target where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into generator_target 
 ( generator_targetid 
,parentstructrowid
,name

,targettype

,queuename

,generatorprogid

,generatorstyle

,thedevelopmentenv

 ) select 
copymap(acopyaction,b2g(generator_targetid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,targettype

,queuename

,generatorprogid

,generatorstyle

,thedevelopmentenv

 from generator_target
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_generator_target;
  set  fetch_done=false;
fetch copy_cursor_generator_target into aid;
while not fetch_done do 
    call genreference_copy(acursession,acopyaction,ainstanceid,aid);
    call genmanualcode_copy(acursession,acopyaction,ainstanceid,aid);
    call gencontrols_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_generator_target into aid;
end while;

close copy_cursor_generator_target;
 end 
go
GO


drop procedure if exists genpackage_copy
go

create procedure genpackage_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_genpackage cursor for
select genpackageid from genpackage where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into genpackage 
 ( genpackageid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(genpackageid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from genpackage
 where instanceid =g2b( ainstanceid); 
open copy_cursor_genpackage;
  set  fetch_done=false;
fetch copy_cursor_genpackage into aid;
while not fetch_done do 
    call generator_target_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_genpackage into aid;
end while;

close copy_cursor_genpackage;
 end 
go
GO


drop procedure if exists genpackage_logger
go

create procedure genpackage_logger /*пакет генерации*/ (
 acursession varchar(38),
 agenpackageid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists generator_target_logger
go

create procedure generator_target_logger /*генераторы*/ (
 acursession varchar(38),
 agenerator_targetid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists genreference_logger
go

create procedure genreference_logger /*библиотеки, которые используются при генерации*/ (
 acursession varchar(38),
 agenreferenceid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists genmanualcode_logger
go

create procedure genmanualcode_logger /*код, который не укладывается в описание модели*/ (
 acursession varchar(38),
 agenmanualcodeid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists gencontrols_logger
go

create procedure gencontrols_logger /*контрольные элементы, которые используются при генерации*/ (
 acursession varchar(38),
 agencontrolsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists genpackage_parent
go
create procedure genpackage_parent /* пакет генерации*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from genpackage where  genpackageid=arowid;
 end 
go
GO


drop procedure if exists genpackage_islocked
go
create procedure genpackage_islocked /* пакет генерации */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from genpackage where genpackageid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists genpackage_lock
go
create procedure genpackage_lock /* пакет генерации */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call genpackage_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update genpackage set lockuserid =auserid ,locksessionid=null  where genpackageid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update genpackage set lockuserid=null ,locksessionid =acursession  where genpackageid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists genpackage_unlock
go
create procedure genpackage_unlock /* пакет генерации */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call genpackage_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update genpackage set lockuserid =null  where genpackageid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update genpackage set locksessionid =null  where genpackageid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS genpackage_client_trigger
GO

create procedure genpackage_client_trigger  (
 acursession varchar(38),
 aGENPACKAGEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists generator_target_parent
go
create procedure generator_target_parent /* генераторы*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from generator_target where  generator_targetid=arowid;
  set aparenttable = 'genpackage';
 end 
go
GO


drop procedure if exists generator_target_islocked
go
create procedure generator_target_islocked /* генераторы */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from generator_target where generator_targetid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists generator_target_lock
go
create procedure generator_target_lock /* генераторы */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call generator_target_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update generator_target set lockuserid =auserid ,locksessionid=null  where generator_targetid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update generator_target set lockuserid=null ,locksessionid =acursession  where generator_targetid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists generator_target_unlock
go
create procedure generator_target_unlock /* генераторы */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call generator_target_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update generator_target set lockuserid =null  where generator_targetid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update generator_target set locksessionid =null  where generator_targetid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS generator_target_client_trigger
GO

create procedure generator_target_client_trigger  (
 acursession varchar(38),
 aGENERATOR_TARGETid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists genreference_parent
go
create procedure genreference_parent /* библиотеки, которые используются при генерации*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from genreference where  genreferenceid=arowid;
  set aparenttable = 'generator_target';
 end 
go
GO


drop procedure if exists genreference_islocked
go
create procedure genreference_islocked /* библиотеки, которые используются при генерации */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from genreference where genreferenceid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists genreference_lock
go
create procedure genreference_lock /* библиотеки, которые используются при генерации */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call genreference_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update genreference set lockuserid =auserid ,locksessionid=null  where genreferenceid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update genreference set lockuserid=null ,locksessionid =acursession  where genreferenceid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists genreference_unlock
go
create procedure genreference_unlock /* библиотеки, которые используются при генерации */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call genreference_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update genreference set lockuserid =null  where genreferenceid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update genreference set locksessionid =null  where genreferenceid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS genreference_client_trigger
GO

create procedure genreference_client_trigger  (
 acursession varchar(38),
 aGENREFERENCEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists genmanualcode_parent
go
create procedure genmanualcode_parent /* код, который не укладывается в описание модели*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from genmanualcode where  genmanualcodeid=arowid;
  set aparenttable = 'generator_target';
 end 
go
GO


drop procedure if exists genmanualcode_islocked
go
create procedure genmanualcode_islocked /* код, который не укладывается в описание модели */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from genmanualcode where genmanualcodeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists genmanualcode_lock
go
create procedure genmanualcode_lock /* код, который не укладывается в описание модели */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call genmanualcode_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update genmanualcode set lockuserid =auserid ,locksessionid=null  where genmanualcodeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update genmanualcode set lockuserid=null ,locksessionid =acursession  where genmanualcodeid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists genmanualcode_unlock
go
create procedure genmanualcode_unlock /* код, который не укладывается в описание модели */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call genmanualcode_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update genmanualcode set lockuserid =null  where genmanualcodeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update genmanualcode set locksessionid =null  where genmanualcodeid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS genmanualcode_client_trigger
GO

create procedure genmanualcode_client_trigger  (
 acursession varchar(38),
 aGENMANUALCODEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists gencontrols_parent
go
create procedure gencontrols_parent /* контрольные элементы, которые используются при генерации*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from gencontrols where  gencontrolsid=arowid;
  set aparenttable = 'generator_target';
 end 
go
GO


drop procedure if exists gencontrols_islocked
go
create procedure gencontrols_islocked /* контрольные элементы, которые используются при генерации */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from gencontrols where gencontrolsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists gencontrols_lock
go
create procedure gencontrols_lock /* контрольные элементы, которые используются при генерации */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call gencontrols_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update gencontrols set lockuserid =auserid ,locksessionid=null  where gencontrolsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update gencontrols set lockuserid=null ,locksessionid =acursession  where gencontrolsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists gencontrols_unlock
go
create procedure gencontrols_unlock /* контрольные элементы, которые используются при генерации */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call gencontrols_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update gencontrols set lockuserid =null  where gencontrolsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update gencontrols set locksessionid =null  where gencontrolsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS gencontrols_client_trigger
GO

create procedure gencontrols_client_trigger  (
 acursession varchar(38),
 aGENCONTROLSid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists localizeinfo_brief
go

create procedure localizeinfo_brief  (
 acursession varchar(38),
 alocalizeinfoid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if alocalizeinfoid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from localizeinfo where localizeinfoid=g2b(alocalizeinfoid);
 if  aec &gt;0 then
   set abrief=localizeinfo_brief_f(g2b(alocalizeinfoid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists localizeinfo_delete
go

create procedure localizeinfo_delete /**/ (
 acursession varchar(38),
 alocalizeinfoid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from localizeinfo where localizeinfoid=g2b(alocalizeinfoid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=localizeinfo' result;
    leave body;
  end if;
 call localizeinfo_logger(acursession,alocalizeinfoid) ; 
  delete from  localizeinfo 
  where  localizeinfoid = g2b(alocalizeinfoid) ;
  delete from num_values where ownerpartname='localizeinfo' and ownerrowid=g2b(alocalizeinfoid);
  end if;
    select 'ok' result;
 end 
go
GO

/*локализация*/

drop procedure if exists localizeinfo_save
go

create procedure localizeinfo_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 alocalizeinfoid varchar(38)
,alangfull
 varchar (255)/* язык - название *//* язык - название */
,alangshort
 varchar (255)/* код языка *//* код языка */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from localizeinfo where localizeinfoid=g2b(alocalizeinfoid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=localizeinfo' result;
    leave body;
  end if;
 start transaction ; 
 call localizeinfo_logger(acursession,alocalizeinfoid) ; 
 update  localizeinfo set changestamp=now() 
,
  langfull=alangfull
,
  langshort=alangshort
  where  localizeinfoid = g2b(alocalizeinfoid) ;


call localizeinfo_client_trigger(acursession,alocalizeinfoid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=localizeinfo' result;
    leave body;
  end if;
 start transaction;  
 insert into   localizeinfo
 (  changestamp,localizeinfoid 
,instanceid
,langfull

,langshort

 ) values (now(), g2b(alocalizeinfoid) 
,g2b(ainstanceid)
,alangfull

,alangshort

 ) ;


call localizeinfo_client_trigger(acursession,alocalizeinfoid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists localizeinfo_copy
go

create procedure localizeinfo_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into localizeinfo 
 ( localizeinfoid 
,instanceid
,langfull

,langshort

 ) select 
copymap(acopyaction,b2g(localizeinfoid)) 
,copymap(acopyaction,b2g(instanceid))
,langfull

,langshort

 from localizeinfo
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists localizeinfo_logger
go

create procedure localizeinfo_logger /**/ (
 acursession varchar(38),
 alocalizeinfoid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists localizeinfo_parent
go
create procedure localizeinfo_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from localizeinfo where  localizeinfoid=arowid;
 end 
go
GO


drop procedure if exists localizeinfo_islocked
go
create procedure localizeinfo_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from localizeinfo where localizeinfoid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists localizeinfo_lock
go
create procedure localizeinfo_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call localizeinfo_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update localizeinfo set lockuserid =auserid ,locksessionid=null  where localizeinfoid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update localizeinfo set lockuserid=null ,locksessionid =acursession  where localizeinfoid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists localizeinfo_unlock
go
create procedure localizeinfo_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call localizeinfo_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update localizeinfo set lockuserid =null  where localizeinfoid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update localizeinfo set locksessionid =null  where localizeinfoid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS localizeinfo_client_trigger
GO

create procedure localizeinfo_client_trigger  (
 acursession varchar(38),
 aLocalizeInfoid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fieldtype_brief
go

create procedure fieldtype_brief  (
 acursession varchar(38),
 afieldtypeid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldtypeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldtype where fieldtypeid=g2b(afieldtypeid);
 if  aec &gt;0 then
   set abrief=fieldtype_brief_f(g2b(afieldtypeid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fieldtype_delete
go

create procedure fieldtype_delete /*типы полей, перечисления, интервалы*/ (
 acursession varchar(38),
 afieldtypeid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldtype where fieldtypeid=g2b(afieldtypeid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fieldtype' result;
    leave body;
  end if;
 call fieldtype_logger(acursession,afieldtypeid) ; 
  delete from  fieldtype 
  where  fieldtypeid = g2b(afieldtypeid) ;
  delete from num_values where ownerpartname='fieldtype' and ownerrowid=g2b(afieldtypeid);
  end if;
    select 'ok' result;
 end 
go
GO

/*тип поля*/

drop procedure if exists fieldtype_save
go

create procedure fieldtype_save /*типы полей, перечисления, интервалы*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 afieldtypeid varchar(38)
,aname
 varchar (255)/* название *//* название */
,atypestyle
 integer/* трактовка *//* трактовка */
,athe_comment
 text/* описание *//* описание */
,aallowsize
 integer/* нужен размер *//* нужен размер */
,aminimum
 varchar (64)/* минимум *//* минимум */
,amaximum
 varchar (64)/* максимум *//* максимум */
,aallowlikesearch
 integer/* поиск текста *//* поиск текста */
,agridsorttype
 integer/* вариант сортировки в табличном представлении *//* вариант сортировки в табличном представлении */
,adelayedsave
 integer/* отложенное сохранение *//* отложенное сохранение */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldtype where fieldtypeid=g2b(afieldtypeid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fieldtype' result;
    leave body;
  end if;
 start transaction ; 
 call fieldtype_logger(acursession,afieldtypeid) ; 
 update  fieldtype set changestamp=now() 
,
  name=aname
,
  typestyle=atypestyle
,
  the_comment=athe_comment
,
  allowsize=aallowsize
,
  minimum=aminimum
,
  maximum=amaximum
,
  allowlikesearch=aallowlikesearch
,
  gridsorttype=agridsorttype
,
  delayedsave=adelayedsave
  where  fieldtypeid = g2b(afieldtypeid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from fieldtype where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=тип поля' result;
  rollback;
  leave body;
end if;
 -- end if;

call fieldtype_client_trigger(acursession,afieldtypeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fieldtype' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldtype
 (  changestamp,fieldtypeid 
,instanceid
,name

,typestyle

,the_comment

,allowsize

,minimum

,maximum

,allowlikesearch

,gridsorttype

,delayedsave

 ) values (now(), g2b(afieldtypeid) 
,g2b(ainstanceid)
,aname

,atypestyle

,athe_comment

,aallowsize

,aminimum

,amaximum

,aallowlikesearch

,agridsorttype

,adelayedsave

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from fieldtype where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=тип поля' result;
  rollback;
  leave body;
end if;
 -- end if;

call fieldtype_client_trigger(acursession,afieldtypeid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists enumitem_brief
go

create procedure enumitem_brief  (
 acursession varchar(38),
 aenumitemid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aenumitemid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from enumitem where enumitemid=g2b(aenumitemid);
 if  aec &gt;0 then
   set abrief=enumitem_brief_f(g2b(aenumitemid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists enumitem_delete
go

create procedure enumitem_delete /*для описания enum типов*/ (
 acursession varchar(38),
 aenumitemid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from enumitem where enumitemid=g2b(aenumitemid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=enumitem' result;
    leave body;
  end if;
 call enumitem_logger(acursession,aenumitemid) ; 
  delete from  enumitem 
  where  enumitemid = g2b(aenumitemid) ;
  delete from num_values where ownerpartname='enumitem' and ownerrowid=g2b(aenumitemid);
  end if;
    select 'ok' result;
 end 
go
GO

/*зачения*/

drop procedure if exists enumitem_save
go

create procedure enumitem_save /*для описания enum типов*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aenumitemid varchar(38)
,aname
 varchar (255)/* название *//* название */
,anamevalue
 integer/* значение *//* значение */
,anameincode
 varchar (100)/* название в коде *//* название в коде */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from enumitem where enumitemid=g2b(aenumitemid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=enumitem' result;
    leave body;
  end if;
 start transaction ; 
 call enumitem_logger(acursession,aenumitemid) ; 
 update  enumitem set changestamp=now() 
,
  name=aname
,
  namevalue=anamevalue
,
  nameincode=anameincode
  where  enumitemid = g2b(aenumitemid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from enumitem where  parentstructrowid=g2b(aparentstructrowid) 
 and namevalue=anamevalue;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=зачения' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from enumitem where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=зачения' result;
  rollback;
  leave body;
end if;
 -- end if;

call enumitem_client_trigger(acursession,aenumitemid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=enumitem' result;
    leave body;
  end if;
 start transaction;  
 insert into   enumitem
 (  changestamp,enumitemid 
,parentstructrowid
,name

,namevalue

,nameincode

 ) values (now(), g2b(aenumitemid) 
,g2b(aparentstructrowid)
,aname

,anamevalue

,anameincode

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from enumitem where  parentstructrowid=g2b(aparentstructrowid) 
 and namevalue=anamevalue;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=зачения' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from enumitem where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=зачения' result;
  rollback;
  leave body;
end if;
 -- end if;

call enumitem_client_trigger(acursession,aenumitemid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fieldtypemap_brief
go

create procedure fieldtypemap_brief  (
 acursession varchar(38),
 afieldtypemapid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldtypemapid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldtypemap where fieldtypemapid=g2b(afieldtypemapid);
 if  aec &gt;0 then
   set abrief=fieldtypemap_brief_f(g2b(afieldtypemapid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fieldtypemap_delete
go

create procedure fieldtypemap_delete /*отображение типа поля на физический тип хранения*/ (
 acursession varchar(38),
 afieldtypemapid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldtypemap where fieldtypemapid=g2b(afieldtypemapid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fieldtypemap' result;
    leave body;
  end if;
 call fieldtypemap_logger(acursession,afieldtypemapid) ; 
  delete from  fieldtypemap 
  where  fieldtypemapid = g2b(afieldtypemapid) ;
  delete from num_values where ownerpartname='fieldtypemap' and ownerrowid=g2b(afieldtypemapid);
  end if;
    select 'ok' result;
 end 
go
GO

/*отображение*/

drop procedure if exists fieldtypemap_save
go

create procedure fieldtypemap_save /*отображение типа поля на физический тип хранения*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldtypemapid varchar(38)
,atarget varchar(38)/* платформа *//* платформа */
,astoagetype
 varchar (255)/* тип хранения *//* тип хранения */
,afixedsize
 integer/* размер *//* размер */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldtypemap where fieldtypemapid=g2b(afieldtypemapid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fieldtypemap' result;
    leave body;
  end if;
 start transaction ; 
 call fieldtypemap_logger(acursession,afieldtypemapid) ; 
 update  fieldtypemap set changestamp=now() 
,
  target=g2b(atarget)
,
  stoagetype=astoagetype
,
  fixedsize=afixedsize
  where  fieldtypemapid = g2b(afieldtypemapid) ;


call fieldtypemap_client_trigger(acursession,afieldtypemapid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fieldtypemap' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldtypemap
 (  changestamp,fieldtypemapid 
,parentstructrowid
,target

,stoagetype

,fixedsize

 ) values (now(), g2b(afieldtypemapid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,astoagetype

,afixedsize

 ) ;


call fieldtypemap_client_trigger(acursession,afieldtypemapid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists enumitem_copy
go

create procedure enumitem_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into enumitem 
 ( enumitemid 
,parentstructrowid
,name

,namevalue

,nameincode

 ) select 
copymap(acopyaction,b2g(enumitemid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,namevalue

,nameincode

 from enumitem
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fieldtypemap_copy
go

create procedure fieldtypemap_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldtypemap 
 ( fieldtypemapid 
,parentstructrowid
,target

,stoagetype

,fixedsize

 ) select 
copymap(acopyaction,b2g(fieldtypemapid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,stoagetype

,fixedsize

 from fieldtypemap
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fieldtype_copy
go

create procedure fieldtype_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_fieldtype cursor for
select fieldtypeid from fieldtype where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldtype 
 ( fieldtypeid 
,instanceid
,name

,typestyle

,the_comment

,allowsize

,minimum

,maximum

,allowlikesearch

,gridsorttype

,delayedsave

 ) select 
copymap(acopyaction,b2g(fieldtypeid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,typestyle

,the_comment

,allowsize

,minimum

,maximum

,allowlikesearch

,gridsorttype

,delayedsave

 from fieldtype
 where instanceid =g2b( ainstanceid); 
open copy_cursor_fieldtype;
  set  fetch_done=false;
fetch copy_cursor_fieldtype into aid;
while not fetch_done do 
    call enumitem_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldtypemap_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_fieldtype into aid;
end while;

close copy_cursor_fieldtype;
 end 
go
GO


drop procedure if exists fieldtype_logger
go

create procedure fieldtype_logger /*типы полей, перечисления, интервалы*/ (
 acursession varchar(38),
 afieldtypeid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists enumitem_logger
go

create procedure enumitem_logger /*для описания enum типов*/ (
 acursession varchar(38),
 aenumitemid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fieldtypemap_logger
go

create procedure fieldtypemap_logger /*отображение типа поля на физический тип хранения*/ (
 acursession varchar(38),
 afieldtypemapid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fieldtype_parent
go
create procedure fieldtype_parent /* типы полей, перечисления, интервалы*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from fieldtype where  fieldtypeid=arowid;
 end 
go
GO


drop procedure if exists fieldtype_islocked
go
create procedure fieldtype_islocked /* типы полей, перечисления, интервалы */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldtype where fieldtypeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fieldtype_lock
go
create procedure fieldtype_lock /* типы полей, перечисления, интервалы */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldtype_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldtype set lockuserid =auserid ,locksessionid=null  where fieldtypeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldtype set lockuserid=null ,locksessionid =acursession  where fieldtypeid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fieldtype_unlock
go
create procedure fieldtype_unlock /* типы полей, перечисления, интервалы */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldtype_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldtype set lockuserid =null  where fieldtypeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldtype set locksessionid =null  where fieldtypeid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fieldtype_client_trigger
GO

create procedure fieldtype_client_trigger  (
 acursession varchar(38),
 aFIELDTYPEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists enumitem_parent
go
create procedure enumitem_parent /* для описания enum типов*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from enumitem where  enumitemid=arowid;
  set aparenttable = 'fieldtype';
 end 
go
GO


drop procedure if exists enumitem_islocked
go
create procedure enumitem_islocked /* для описания enum типов */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from enumitem where enumitemid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists enumitem_lock
go
create procedure enumitem_lock /* для описания enum типов */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call enumitem_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update enumitem set lockuserid =auserid ,locksessionid=null  where enumitemid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update enumitem set lockuserid=null ,locksessionid =acursession  where enumitemid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists enumitem_unlock
go
create procedure enumitem_unlock /* для описания enum типов */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call enumitem_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update enumitem set lockuserid =null  where enumitemid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update enumitem set locksessionid =null  where enumitemid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS enumitem_client_trigger
GO

create procedure enumitem_client_trigger  (
 acursession varchar(38),
 aENUMITEMid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fieldtypemap_parent
go
create procedure fieldtypemap_parent /* отображение типа поля на физический тип хранения*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldtypemap where  fieldtypemapid=arowid;
  set aparenttable = 'fieldtype';
 end 
go
GO


drop procedure if exists fieldtypemap_islocked
go
create procedure fieldtypemap_islocked /* отображение типа поля на физический тип хранения */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldtypemap where fieldtypemapid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fieldtypemap_lock
go
create procedure fieldtypemap_lock /* отображение типа поля на физический тип хранения */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldtypemap_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldtypemap set lockuserid =auserid ,locksessionid=null  where fieldtypemapid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldtypemap set lockuserid=null ,locksessionid =acursession  where fieldtypemapid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fieldtypemap_unlock
go
create procedure fieldtypemap_unlock /* отображение типа поля на физический тип хранения */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldtypemap_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldtypemap set lockuserid =null  where fieldtypemapid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldtypemap set locksessionid =null  where fieldtypemapid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fieldtypemap_client_trigger
GO

create procedure fieldtypemap_client_trigger  (
 acursession varchar(38),
 aFIELDTYPEMAPid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists sharedmethod_brief
go

create procedure sharedmethod_brief  (
 acursession varchar(38),
 asharedmethodid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if asharedmethodid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from sharedmethod where sharedmethodid=g2b(asharedmethodid);
 if  aec &gt;0 then
   set abrief=sharedmethod_brief_f(g2b(asharedmethodid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists sharedmethod_delete
go

create procedure sharedmethod_delete /*методы и процедуры*/ (
 acursession varchar(38),
 asharedmethodid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from sharedmethod where sharedmethodid=g2b(asharedmethodid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=sharedmethod' result;
    leave body;
  end if;
 call sharedmethod_logger(acursession,asharedmethodid) ; 
  delete from  sharedmethod 
  where  sharedmethodid = g2b(asharedmethodid) ;
  delete from num_values where ownerpartname='sharedmethod' and ownerrowid=g2b(asharedmethodid);
  end if;
    select 'ok' result;
 end 
go
GO

/*методы и процедуры*/

drop procedure if exists sharedmethod_save
go

create procedure sharedmethod_save /*методы и процедуры*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 asharedmethodid varchar(38)
,aname
 varchar (255)/* название *//* название */
,athe_comment
 text/* описание метода *//* описание метода */
,areturntype varchar(38)/* возвращаемый тип *//* возвращаемый тип */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from sharedmethod where sharedmethodid=g2b(asharedmethodid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=sharedmethod' result;
    leave body;
  end if;
 start transaction ; 
 call sharedmethod_logger(acursession,asharedmethodid) ; 
 update  sharedmethod set changestamp=now() 
,
  name=aname
,
  the_comment=athe_comment
,
  returntype=g2b(areturntype)
  where  sharedmethodid = g2b(asharedmethodid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from sharedmethod where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=методы и процедуры' result;
  rollback;
  leave body;
end if;
 -- end if;

call sharedmethod_client_trigger(acursession,asharedmethodid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=sharedmethod' result;
    leave body;
  end if;
 start transaction;  
 insert into   sharedmethod
 (  changestamp,sharedmethodid 
,instanceid
,name

,the_comment

,returntype

 ) values (now(), g2b(asharedmethodid) 
,g2b(ainstanceid)
,aname

,athe_comment

,g2b(areturntype)

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from sharedmethod where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=методы и процедуры' result;
  rollback;
  leave body;
end if;
 -- end if;

call sharedmethod_client_trigger(acursession,asharedmethodid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists script_brief
go

create procedure script_brief  (
 acursession varchar(38),
 ascriptid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ascriptid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from script where scriptid=g2b(ascriptid);
 if  aec &gt;0 then
   set abrief=script_brief_f(g2b(ascriptid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists script_delete
go

create procedure script_delete /*код метода на понятном конкретному генератору языке*/ (
 acursession varchar(38),
 ascriptid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from script where scriptid=g2b(ascriptid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=script' result;
    leave body;
  end if;
 call script_logger(acursession,ascriptid) ; 
  delete from  script 
  where  scriptid = g2b(ascriptid) ;
  delete from num_values where ownerpartname='script' and ownerrowid=g2b(ascriptid);
  end if;
    select 'ok' result;
 end 
go
GO

/*реализация*/

drop procedure if exists script_save
go

create procedure script_save /*код метода на понятном конкретному генератору языке*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 ascriptid varchar(38)
,atarget varchar(38)/* целевая платформа *//* целевая платформа */
,acode
 text/* скрипт *//* скрипт */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from script where scriptid=g2b(ascriptid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=script' result;
    leave body;
  end if;
 start transaction ; 
 call script_logger(acursession,ascriptid) ; 
 update  script set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  scriptid = g2b(ascriptid) ;


call script_client_trigger(acursession,ascriptid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=script' result;
    leave body;
  end if;
 start transaction;  
 insert into   script
 (  changestamp,scriptid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(ascriptid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call script_client_trigger(acursession,ascriptid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists parameters_brief
go

create procedure parameters_brief  (
 acursession varchar(38),
 aparametersid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aparametersid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from parameters where parametersid=g2b(aparametersid);
 if  aec &gt;0 then
   set abrief=parameters_brief_f(g2b(aparametersid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists parameters_delete
go

create procedure parameters_delete /*параметры метода*/ (
 acursession varchar(38),
 aparametersid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from parameters where parametersid=g2b(aparametersid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=parameters' result;
    leave body;
  end if;
 call parameters_logger(acursession,aparametersid) ; 
  delete from  parameters 
  where  parametersid = g2b(aparametersid) ;
  delete from num_values where ownerpartname='parameters' and ownerrowid=g2b(aparametersid);
  end if;
    select 'ok' result;
 end 
go
GO

/*параметры*/

drop procedure if exists parameters_save
go

create procedure parameters_save /*параметры метода*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aparametersid varchar(38)
,asequence
 integer/* последовательность *//* последовательность */
,aname
 varchar (80)/* имя *//* имя */
,acaption
 varchar (80)/* заголовок *//* заголовок */
,atypeofparm varchar(38)/* тип данных *//* тип данных */
,adatasize
 integer/* размер *//* размер */
,aallownull
 integer/* можно не задавать *//* можно не задавать */
,aoutparam
 integer/* возвращает значение *//* возвращает значение */
,areferencetype
 integer/* тип ссылки *//* тип ссылки */
,areftotype varchar(38)/* ссылка на тип *//* ссылка на тип */
,areftopart varchar(38)/* ссылка на раздел *//* ссылка на раздел */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from parameters where parametersid=g2b(aparametersid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=parameters' result;
    leave body;
  end if;
 start transaction ; 
 call parameters_logger(acursession,aparametersid) ; 
 update  parameters set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  caption=acaption
,
  typeofparm=g2b(atypeofparm)
,
  datasize=adatasize
,
  allownull=aallownull
,
  outparam=aoutparam
,
  referencetype=areferencetype
,
  reftotype=g2b(areftotype)
,
  reftopart=g2b(areftopart)
  where  parametersid = g2b(aparametersid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from parameters where  parentstructrowid=g2b(aparentstructrowid) 
 and sequence=asequence;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=параметры' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from parameters where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=параметры' result;
  rollback;
  leave body;
end if;
 -- end if;

call parameters_client_trigger(acursession,aparametersid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=parameters' result;
    leave body;
  end if;
 start transaction;  
 insert into   parameters
 (  changestamp,parametersid 
,parentstructrowid
,sequence

,name

,caption

,typeofparm

,datasize

,allownull

,outparam

,referencetype

,reftotype

,reftopart

 ) values (now(), g2b(aparametersid) 
,g2b(aparentstructrowid)
,asequence

,aname

,acaption

,g2b(atypeofparm)

,adatasize

,aallownull

,aoutparam

,areferencetype

,g2b(areftotype)

,g2b(areftopart)

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from parameters where  parentstructrowid=g2b(aparentstructrowid) 
 and sequence=asequence;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=параметры' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from parameters where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=параметры' result;
  rollback;
  leave body;
end if;
 -- end if;

call parameters_client_trigger(acursession,aparametersid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists parameters_copy
go

create procedure parameters_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into parameters 
 ( parametersid 
,parentstructrowid
,sequence

,name

,caption

,typeofparm

,datasize

,allownull

,outparam

,referencetype

,reftotype

,reftopart

 ) select 
copymap(acopyaction,b2g(parametersid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,sequence

,name

,caption

,typeofparm

,datasize

,allownull

,outparam

,referencetype

,reftotype

,reftopart

 from parameters
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists script_copy
go

create procedure script_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_script cursor for
select scriptid from script where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into script 
 ( scriptid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(scriptid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from script
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_script;
  set  fetch_done=false;
fetch copy_cursor_script into aid;
while not fetch_done do 
    call parameters_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_script into aid;
end while;

close copy_cursor_script;
 end 
go
GO


drop procedure if exists sharedmethod_copy
go

create procedure sharedmethod_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_sharedmethod cursor for
select sharedmethodid from sharedmethod where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into sharedmethod 
 ( sharedmethodid 
,instanceid
,name

,the_comment

,returntype

 ) select 
copymap(acopyaction,b2g(sharedmethodid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,the_comment

,returntype

 from sharedmethod
 where instanceid =g2b( ainstanceid); 
open copy_cursor_sharedmethod;
  set  fetch_done=false;
fetch copy_cursor_sharedmethod into aid;
while not fetch_done do 
    call script_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_sharedmethod into aid;
end while;

close copy_cursor_sharedmethod;
 end 
go
GO


drop procedure if exists sharedmethod_logger
go

create procedure sharedmethod_logger /*методы и процедуры*/ (
 acursession varchar(38),
 asharedmethodid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists script_logger
go

create procedure script_logger /*код метода на понятном конкретному генератору языке*/ (
 acursession varchar(38),
 ascriptid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists parameters_logger
go

create procedure parameters_logger /*параметры метода*/ (
 acursession varchar(38),
 aparametersid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists sharedmethod_parent
go
create procedure sharedmethod_parent /* методы и процедуры*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from sharedmethod where  sharedmethodid=arowid;
 end 
go
GO


drop procedure if exists sharedmethod_islocked
go
create procedure sharedmethod_islocked /* методы и процедуры */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from sharedmethod where sharedmethodid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists sharedmethod_lock
go
create procedure sharedmethod_lock /* методы и процедуры */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call sharedmethod_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update sharedmethod set lockuserid =auserid ,locksessionid=null  where sharedmethodid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update sharedmethod set lockuserid=null ,locksessionid =acursession  where sharedmethodid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists sharedmethod_unlock
go
create procedure sharedmethod_unlock /* методы и процедуры */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call sharedmethod_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update sharedmethod set lockuserid =null  where sharedmethodid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update sharedmethod set locksessionid =null  where sharedmethodid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS sharedmethod_client_trigger
GO

create procedure sharedmethod_client_trigger  (
 acursession varchar(38),
 aSHAREDMETHODid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists script_parent
go
create procedure script_parent /* код метода на понятном конкретному генератору языке*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from script where  scriptid=arowid;
  set aparenttable = 'sharedmethod';
 end 
go
GO


drop procedure if exists script_islocked
go
create procedure script_islocked /* код метода на понятном конкретному генератору языке */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from script where scriptid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists script_lock
go
create procedure script_lock /* код метода на понятном конкретному генератору языке */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call script_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update script set lockuserid =auserid ,locksessionid=null  where scriptid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update script set lockuserid=null ,locksessionid =acursession  where scriptid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists script_unlock
go
create procedure script_unlock /* код метода на понятном конкретному генератору языке */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call script_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update script set lockuserid =null  where scriptid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update script set locksessionid =null  where scriptid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS script_client_trigger
GO

create procedure script_client_trigger  (
 acursession varchar(38),
 aSCRIPTid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists parameters_parent
go
create procedure parameters_parent /* параметры метода*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from parameters where  parametersid=arowid;
  set aparenttable = 'script';
 end 
go
GO


drop procedure if exists parameters_islocked
go
create procedure parameters_islocked /* параметры метода */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from parameters where parametersid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists parameters_lock
go
create procedure parameters_lock /* параметры метода */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call parameters_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update parameters set lockuserid =auserid ,locksessionid=null  where parametersid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update parameters set lockuserid=null ,locksessionid =acursession  where parametersid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists parameters_unlock
go
create procedure parameters_unlock /* параметры метода */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call parameters_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update parameters set lockuserid =null  where parametersid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update parameters set locksessionid =null  where parametersid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS parameters_client_trigger
GO

create procedure parameters_client_trigger  (
 acursession varchar(38),
 aPARAMETERSid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists objecttype_brief
go

create procedure objecttype_brief  (
 acursession varchar(38),
 aobjecttypeid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aobjecttypeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from objecttype where objecttypeid=g2b(aobjecttypeid);
 if  aec &gt;0 then
   set abrief=objecttype_brief_f(g2b(aobjecttypeid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists objecttype_delete
go

create procedure objecttype_delete /*тип объекта (карточки)*/ (
 acursession varchar(38),
 aobjecttypeid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objecttype where objecttypeid=g2b(aobjecttypeid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=objecttype' result;
    leave body;
  end if;
 call objecttype_logger(acursession,aobjecttypeid) ; 
  delete from  objecttype 
  where  objecttypeid = g2b(aobjecttypeid) ;
  delete from num_values where ownerpartname='objecttype' and ownerrowid=g2b(aobjecttypeid);
  end if;
    select 'ok' result;
 end 
go
GO

/*тип объекта*/

drop procedure if exists objecttype_save
go

create procedure objecttype_save /*тип объекта (карточки)*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aobjecttypeid varchar(38)
,apackage varchar(38)/* приложение *//* приложение */
,athe_comment
 varchar (255)/* название *//* название */
,aname
 varchar (14)/* код *//* код */
,aissingleinstance
 integer/* допускается только один объект *//* допускается только один объект */
,achooseview varchar(38)/* представление для выбора *//* представление для выбора */
,aonrun varchar(38)/* при запуске *//* при запуске */
,aoncreate varchar(38)/* при создании *//* при создании */
,aondelete varchar(38)/* при удалении *//* при удалении */
,aallowreftoobject
 integer/* отображать при выборе ссылки *//* отображать при выборе ссылки */
,aallowsearch
 integer/* отображать при поиске *//* отображать при поиске */
,areplicatype
 integer/* тип репликации *//* тип репликации */
,athecomment
 text/* описание *//* описание */
,auseownership
 integer/* видмость зависит от пользователя *//* видмость зависит от пользователя */
,ausearchiving
 integer/* архивировать вместо удаления *//* архивировать вместо удаления */
,acommitfullobject
 integer/* сохранять объект целиком *//* сохранять объект целиком */
,aobjiconcls
 varchar (80)/* иконка объекта *//* иконка объекта */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objecttype where objecttypeid=g2b(aobjecttypeid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=objecttype' result;
    leave body;
  end if;
 start transaction ; 
 call objecttype_logger(acursession,aobjecttypeid) ; 
 update  objecttype set changestamp=now() 
,
  package=g2b(apackage)
,
  the_comment=athe_comment
,
  name=aname
,
  issingleinstance=aissingleinstance
,
  chooseview=g2b(achooseview)
,
  onrun=g2b(aonrun)
,
  oncreate=g2b(aoncreate)
,
  ondelete=g2b(aondelete)
,
  allowreftoobject=aallowreftoobject
,
  allowsearch=aallowsearch
,
  replicatype=areplicatype
,
  thecomment=athecomment
,
  useownership=auseownership
,
  usearchiving=ausearchiving
,
  commitfullobject=acommitfullobject
,
  objiconcls=aobjiconcls
  where  objecttypeid = g2b(aobjecttypeid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from objecttype where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=тип объекта' result;
  rollback;
  leave body;
end if;
 -- end if;

call objecttype_client_trigger(acursession,aobjecttypeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=objecttype' result;
    leave body;
  end if;
 start transaction;  
 insert into   objecttype
 (  changestamp,objecttypeid 
,instanceid
,package

,the_comment

,name

,issingleinstance

,chooseview

,onrun

,oncreate

,ondelete

,allowreftoobject

,allowsearch

,replicatype

,thecomment

,useownership

,usearchiving

,commitfullobject

,objiconcls

 ) values (now(), g2b(aobjecttypeid) 
,g2b(ainstanceid)
,g2b(apackage)

,athe_comment

,aname

,aissingleinstance

,g2b(achooseview)

,g2b(aonrun)

,g2b(aoncreate)

,g2b(aondelete)

,aallowreftoobject

,aallowsearch

,areplicatype

,athecomment

,auseownership

,ausearchiving

,acommitfullobject

,aobjiconcls

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from objecttype where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=тип объекта' result;
  rollback;
  leave body;
end if;
 -- end if;

call objecttype_client_trigger(acursession,aobjecttypeid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists objstatus_brief
go

create procedure objstatus_brief  (
 acursession varchar(38),
 aobjstatusid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aobjstatusid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from objstatus where objstatusid=g2b(aobjstatusid);
 if  aec &gt;0 then
   set abrief=objstatus_brief_f(g2b(aobjstatusid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists objstatus_delete
go

create procedure objstatus_delete /*возможные логические состояния документа*/ (
 acursession varchar(38),
 aobjstatusid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objstatus where objstatusid=g2b(aobjstatusid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=objstatus' result;
    leave body;
  end if;
 call objstatus_logger(acursession,aobjstatusid) ; 
  delete from  objstatus 
  where  objstatusid = g2b(aobjstatusid) ;
  delete from num_values where ownerpartname='objstatus' and ownerrowid=g2b(aobjstatusid);
  end if;
    select 'ok' result;
 end 
go
GO

/*состояния*/

drop procedure if exists objstatus_save
go

create procedure objstatus_save /*возможные логические состояния документа*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aobjstatusid varchar(38)
,aname
 varchar (80)/* название *//* название */
,aisstartup
 integer/* начальное *//* начальное */
,aisarchive
 integer/* архивное *//* архивное */
,athe_comment
 text/* описание *//* описание */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objstatus where objstatusid=g2b(aobjstatusid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=objstatus' result;
    leave body;
  end if;
 start transaction ; 
 call objstatus_logger(acursession,aobjstatusid) ; 
 update  objstatus set changestamp=now() 
,
  name=aname
,
  isstartup=aisstartup
,
  isarchive=aisarchive
,
  the_comment=athe_comment
  where  objstatusid = g2b(aobjstatusid) ;


call objstatus_client_trigger(acursession,aobjstatusid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=objstatus' result;
    leave body;
  end if;
 start transaction;  
 insert into   objstatus
 (  changestamp,objstatusid 
,parentstructrowid
,name

,isstartup

,isarchive

,the_comment

 ) values (now(), g2b(aobjstatusid) 
,g2b(aparentstructrowid)
,aname

,aisstartup

,aisarchive

,athe_comment

 ) ;


call objstatus_client_trigger(acursession,aobjstatusid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists nextstate_brief
go

create procedure nextstate_brief  (
 acursession varchar(38),
 anextstateid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if anextstateid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from nextstate where nextstateid=g2b(anextstateid);
 if  aec &gt;0 then
   set abrief=nextstate_brief_f(g2b(anextstateid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists nextstate_delete
go

create procedure nextstate_delete /*матрица переходов */ (
 acursession varchar(38),
 anextstateid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from nextstate where nextstateid=g2b(anextstateid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=nextstate' result;
    leave body;
  end if;
 call nextstate_logger(acursession,anextstateid) ; 
  delete from  nextstate 
  where  nextstateid = g2b(anextstateid) ;
  delete from num_values where ownerpartname='nextstate' and ownerrowid=g2b(anextstateid);
  end if;
    select 'ok' result;
 end 
go
GO

/*разрешенные переходы*/

drop procedure if exists nextstate_save
go

create procedure nextstate_save /*матрица переходов */ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 anextstateid varchar(38)
,athestate varchar(38)/* разрешенное состояние *//* разрешенное состояние */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from nextstate where nextstateid=g2b(anextstateid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=nextstate' result;
    leave body;
  end if;
 start transaction ; 
 call nextstate_logger(acursession,anextstateid) ; 
 update  nextstate set changestamp=now() 
,
  thestate=g2b(athestate)
  where  nextstateid = g2b(anextstateid) ;


call nextstate_client_trigger(acursession,anextstateid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=nextstate' result;
    leave body;
  end if;
 start transaction;  
 insert into   nextstate
 (  changestamp,nextstateid 
,parentstructrowid
,thestate

 ) values (now(), g2b(anextstateid) 
,g2b(aparentstructrowid)
,g2b(athestate)

 ) ;


call nextstate_client_trigger(acursession,anextstateid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists objectmode_brief
go

create procedure objectmode_brief  (
 acursession varchar(38),
 aobjectmodeid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aobjectmodeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from objectmode where objectmodeid=g2b(aobjectmodeid);
 if  aec &gt;0 then
   set abrief=objectmode_brief_f(g2b(aobjectmodeid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists objectmode_delete
go

create procedure objectmode_delete /*режим работы*/ (
 acursession varchar(38),
 aobjectmodeid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objectmode where objectmodeid=g2b(aobjectmodeid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=objectmode' result;
    leave body;
  end if;
 call objectmode_logger(acursession,aobjectmodeid) ; 
  delete from  objectmode 
  where  objectmodeid = g2b(aobjectmodeid) ;
  delete from num_values where ownerpartname='objectmode' and ownerrowid=g2b(aobjectmodeid);
  end if;
    select 'ok' result;
 end 
go
GO

/*режим работы*/

drop procedure if exists objectmode_save
go

create procedure objectmode_save /*режим работы*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aobjectmodeid varchar(38)
,aname
 varchar (5)/* название режима *//* название режима */
,adefaultmode
 integer/* этот режим является основным режимом работы объекта *//* этот режим является основным режимом работы объекта */
,athecomment
 text/* описание *//* описание */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objectmode where objectmodeid=g2b(aobjectmodeid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=objectmode' result;
    leave body;
  end if;
 start transaction ; 
 call objectmode_logger(acursession,aobjectmodeid) ; 
 update  objectmode set changestamp=now() 
,
  name=aname
,
  defaultmode=adefaultmode
,
  thecomment=athecomment
  where  objectmodeid = g2b(aobjectmodeid) ;


call objectmode_client_trigger(acursession,aobjectmodeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=objectmode' result;
    leave body;
  end if;
 start transaction;  
 insert into   objectmode
 (  changestamp,objectmodeid 
,parentstructrowid
,name

,defaultmode

,thecomment

 ) values (now(), g2b(aobjectmodeid) 
,g2b(aparentstructrowid)
,aname

,adefaultmode

,athecomment

 ) ;


call objectmode_client_trigger(acursession,aobjectmodeid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists structrestriction_brief
go

create procedure structrestriction_brief  (
 acursession varchar(38),
 astructrestrictionid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if astructrestrictionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from structrestriction where structrestrictionid=g2b(astructrestrictionid);
 if  aec &gt;0 then
   set abrief=structrestriction_brief_f(g2b(astructrestrictionid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists structrestriction_delete
go

create procedure structrestriction_delete /*ораничения на доступ к разделу документа*/ (
 acursession varchar(38),
 astructrestrictionid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from structrestriction where structrestrictionid=g2b(astructrestrictionid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=structrestriction' result;
    leave body;
  end if;
 call structrestriction_logger(acursession,astructrestrictionid) ; 
  delete from  structrestriction 
  where  structrestrictionid = g2b(astructrestrictionid) ;
  delete from num_values where ownerpartname='structrestriction' and ownerrowid=g2b(astructrestrictionid);
  end if;
    select 'ok' result;
 end 
go
GO

/*органичения разделов*/

drop procedure if exists structrestriction_save
go

create procedure structrestriction_save /*ораничения на доступ к разделу документа*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 astructrestrictionid varchar(38)
,astruct varchar(38)/* структура, доступ к которой ограничен *//* структура, доступ к которой ограничен */
,aallowread
 integer/* разрешен просмотр *//* разрешен просмотр */
,aallowadd
 integer/* разрешено добавлять *//* разрешено добавлять */
,aallowedit
 integer/* разрешено изменять *//* разрешено изменять */
,aallowdelete
 integer/* разрешено удалять *//* разрешено удалять */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from structrestriction where structrestrictionid=g2b(astructrestrictionid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=structrestriction' result;
    leave body;
  end if;
 start transaction ; 
 call structrestriction_logger(acursession,astructrestrictionid) ; 
 update  structrestriction set changestamp=now() 
,
  struct=g2b(astruct)
,
  allowread=aallowread
,
  allowadd=aallowadd
,
  allowedit=aallowedit
,
  allowdelete=aallowdelete
  where  structrestrictionid = g2b(astructrestrictionid) ;


call structrestriction_client_trigger(acursession,astructrestrictionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=structrestriction' result;
    leave body;
  end if;
 start transaction;  
 insert into   structrestriction
 (  changestamp,structrestrictionid 
,parentstructrowid
,struct

,allowread

,allowadd

,allowedit

,allowdelete

 ) values (now(), g2b(astructrestrictionid) 
,g2b(aparentstructrowid)
,g2b(astruct)

,aallowread

,aallowadd

,aallowedit

,aallowdelete

 ) ;


call structrestriction_client_trigger(acursession,astructrestrictionid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists methodrestriction_brief
go

create procedure methodrestriction_brief  (
 acursession varchar(38),
 amethodrestrictionid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if amethodrestrictionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from methodrestriction where methodrestrictionid=g2b(amethodrestrictionid);
 if  aec &gt;0 then
   set abrief=methodrestriction_brief_f(g2b(amethodrestrictionid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists methodrestriction_delete
go

create procedure methodrestriction_delete /*ограничение на использование методов раздела*/ (
 acursession varchar(38),
 amethodrestrictionid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from methodrestriction where methodrestrictionid=g2b(amethodrestrictionid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=methodrestriction' result;
    leave body;
  end if;
 call methodrestriction_logger(acursession,amethodrestrictionid) ; 
  delete from  methodrestriction 
  where  methodrestrictionid = g2b(amethodrestrictionid) ;
  delete from num_values where ownerpartname='methodrestriction' and ownerrowid=g2b(amethodrestrictionid);
  end if;
    select 'ok' result;
 end 
go
GO

/*ограничения методов*/

drop procedure if exists methodrestriction_save
go

create procedure methodrestriction_save /*ограничение на использование методов раздела*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 amethodrestrictionid varchar(38)
,apart varchar(38)/* структура, которой принадлежит метод *//* структура, которой принадлежит метод */
,amethod varchar(38)/* метод *//* метод */
,aisrestricted
 integer/* запрещено использовать *//* запрещено использовать */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from methodrestriction where methodrestrictionid=g2b(amethodrestrictionid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=methodrestriction' result;
    leave body;
  end if;
 start transaction ; 
 call methodrestriction_logger(acursession,amethodrestrictionid) ; 
 update  methodrestriction set changestamp=now() 
,
  part=g2b(apart)
,
  method=g2b(amethod)
,
  isrestricted=aisrestricted
  where  methodrestrictionid = g2b(amethodrestrictionid) ;


call methodrestriction_client_trigger(acursession,amethodrestrictionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=methodrestriction' result;
    leave body;
  end if;
 start transaction;  
 insert into   methodrestriction
 (  changestamp,methodrestrictionid 
,parentstructrowid
,part

,method

,isrestricted

 ) values (now(), g2b(amethodrestrictionid) 
,g2b(aparentstructrowid)
,g2b(apart)

,g2b(amethod)

,aisrestricted

 ) ;


call methodrestriction_client_trigger(acursession,amethodrestrictionid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fieldrestriction_brief
go

create procedure fieldrestriction_brief  (
 acursession varchar(38),
 afieldrestrictionid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldrestrictionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldrestriction where fieldrestrictionid=g2b(afieldrestrictionid);
 if  aec &gt;0 then
   set abrief=fieldrestriction_brief_f(g2b(afieldrestrictionid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fieldrestriction_delete
go

create procedure fieldrestriction_delete /*ограничения на доступ к полям раздела*/ (
 acursession varchar(38),
 afieldrestrictionid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldrestriction where fieldrestrictionid=g2b(afieldrestrictionid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fieldrestriction' result;
    leave body;
  end if;
 call fieldrestriction_logger(acursession,afieldrestrictionid) ; 
  delete from  fieldrestriction 
  where  fieldrestrictionid = g2b(afieldrestrictionid) ;
  delete from num_values where ownerpartname='fieldrestriction' and ownerrowid=g2b(afieldrestrictionid);
  end if;
    select 'ok' result;
 end 
go
GO

/*ограничения полей*/

drop procedure if exists fieldrestriction_save
go

create procedure fieldrestriction_save /*ограничения на доступ к полям раздела*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldrestrictionid varchar(38)
,athepart varchar(38)/* структура, которой принадлежит поле *//* структура, которой принадлежит поле */
,athefield varchar(38)/* поле, на которое накладывается ограничение *//* поле, на которое накладывается ограничение */
,aallowread
 integer/* разрешен просмотр *//* разрешен просмотр */
,aallowmodify
 integer/* разрешена модификация *//* разрешена модификация */
,amandatoryfield
 integer/* обязательное поле *//* обязательное поле */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldrestriction where fieldrestrictionid=g2b(afieldrestrictionid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fieldrestriction' result;
    leave body;
  end if;
 start transaction ; 
 call fieldrestriction_logger(acursession,afieldrestrictionid) ; 
 update  fieldrestriction set changestamp=now() 
,
  thepart=g2b(athepart)
,
  thefield=g2b(athefield)
,
  allowread=aallowread
,
  allowmodify=aallowmodify
,
  mandatoryfield=amandatoryfield
  where  fieldrestrictionid = g2b(afieldrestrictionid) ;


call fieldrestriction_client_trigger(acursession,afieldrestrictionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fieldrestriction' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldrestriction
 (  changestamp,fieldrestrictionid 
,parentstructrowid
,thepart

,thefield

,allowread

,allowmodify

,mandatoryfield

 ) values (now(), g2b(afieldrestrictionid) 
,g2b(aparentstructrowid)
,g2b(athepart)

,g2b(athefield)

,aallowread

,aallowmodify

,amandatoryfield

 ) ;


call fieldrestriction_client_trigger(acursession,afieldrestrictionid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists typemenu_brief
go

create procedure typemenu_brief  (
 acursession varchar(38),
 atypemenuid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atypemenuid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from typemenu where typemenuid=g2b(atypemenuid);
 if  aec &gt;0 then
   set abrief=typemenu_brief_f(g2b(atypemenuid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists typemenu_delete
go

create procedure typemenu_delete /*методы уровня типа*/ (
 acursession varchar(38),
 atypemenuid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from typemenu where typemenuid=g2b(atypemenuid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=typemenu' result;
    leave body;
  end if;
 call typemenu_logger(acursession,atypemenuid) ; 
  delete from  typemenu 
  where  typemenuid = g2b(atypemenuid) ;
  delete from num_values where ownerpartname='typemenu' and ownerrowid=g2b(atypemenuid);
  end if;
    select 'ok' result;
 end 
go
GO

/*методы типа*/

drop procedure if exists typemenu_save
go

create procedure typemenu_save /*методы уровня типа*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 atypemenuid varchar(38)
,aname
 varchar (64)/* название *//* название */
,acaption
 varchar (80)/* заголовок *//* заголовок */
,atooltip
 varchar (80)/* подсказка *//* подсказка */
,athe_action varchar(38)/* метод *//* метод */
,aismenuitem
 integer/* включать в меню *//* включать в меню */
,aistoolbarbutton
 integer/* включать в тулбар *//* включать в тулбар */
,ahotkey
 varchar (20)/* горячая клавиша *//* горячая клавиша */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from typemenu where typemenuid=g2b(atypemenuid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=typemenu' result;
    leave body;
  end if;
 start transaction ; 
 call typemenu_logger(acursession,atypemenuid) ; 
 update  typemenu set changestamp=now() 
,
  name=aname
,
  caption=acaption
,
  tooltip=atooltip
,
  the_action=g2b(athe_action)
,
  ismenuitem=aismenuitem
,
  istoolbarbutton=aistoolbarbutton
,
  hotkey=ahotkey
  where  typemenuid = g2b(atypemenuid) ;


call typemenu_client_trigger(acursession,atypemenuid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=typemenu' result;
    leave body;
  end if;
 start transaction;  
 insert into   typemenu
 (  changestamp,typemenuid 
,parentstructrowid
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 ) values (now(), g2b(atypemenuid) 
,g2b(aparentstructrowid)
,aname

,acaption

,atooltip

,g2b(athe_action)

,aismenuitem

,aistoolbarbutton

,ahotkey

 ) ;


call typemenu_client_trigger(acursession,atypemenuid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists instancevalidator_brief
go

create procedure instancevalidator_brief  (
 acursession varchar(38),
 ainstancevalidatorid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ainstancevalidatorid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from instancevalidator where instancevalidatorid=g2b(ainstancevalidatorid);
 if  aec &gt;0 then
   set abrief=instancevalidator_brief_f(g2b(ainstancevalidatorid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists instancevalidator_delete
go

create procedure instancevalidator_delete /*проверка правильности для объекта в целом*/ (
 acursession varchar(38),
 ainstancevalidatorid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from instancevalidator where instancevalidatorid=g2b(ainstancevalidatorid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=instancevalidator' result;
    leave body;
  end if;
 call instancevalidator_logger(acursession,ainstancevalidatorid) ; 
  delete from  instancevalidator 
  where  instancevalidatorid = g2b(ainstancevalidatorid) ;
  delete from num_values where ownerpartname='instancevalidator' and ownerrowid=g2b(ainstancevalidatorid);
  end if;
    select 'ok' result;
 end 
go
GO

/*проверка правильности*/

drop procedure if exists instancevalidator_save
go

create procedure instancevalidator_save /*проверка правильности для объекта в целом*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 ainstancevalidatorid varchar(38)
,atarget varchar(38)/* платформа *//* платформа */
,acode
 text/* скрипт *//* скрипт */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from instancevalidator where instancevalidatorid=g2b(ainstancevalidatorid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=instancevalidator' result;
    leave body;
  end if;
 start transaction ; 
 call instancevalidator_logger(acursession,ainstancevalidatorid) ; 
 update  instancevalidator set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  instancevalidatorid = g2b(ainstancevalidatorid) ;


call instancevalidator_client_trigger(acursession,ainstancevalidatorid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=instancevalidator' result;
    leave body;
  end if;
 start transaction;  
 insert into   instancevalidator
 (  changestamp,instancevalidatorid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(ainstancevalidatorid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call instancevalidator_client_trigger(acursession,ainstancevalidatorid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists part_brief
go

create procedure part_brief  (
 acursession varchar(38),
 apartid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from part where partid=g2b(apartid);
 if  aec &gt;0 then
   set abrief=part_brief_f(g2b(apartid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists part_delete
go

create procedure part_delete /*раздел объекта*/ (
 acursession varchar(38),
 apartid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from part where partid=g2b(apartid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=part' result;
    leave body;
  end if;
 call part_logger(acursession,apartid) ; 
  delete from  part 
  where  partid = g2b(apartid) ;
  delete from num_values where ownerpartname='part' and ownerrowid=g2b(apartid);
  end if;
    select 'ok' result;
 end 
go
GO

/*раздел*/

drop procedure if exists part_save
go

create procedure part_save /*раздел объекта*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartid varchar(38)
,aparentrowid varchar(38) 
,asequence
 integer/* № п/п *//* № п/п */
,aparttype
 integer/* тип структры *//* тип структры */
,acaption
 varchar (255)/* заголовок *//* заголовок */
,aname
 varchar (20)/* название *//* название */
,athe_comment
 text/* описание *//* описание */
,anolog
 integer/* не записывать в журнал *//* не записывать в журнал */
,amanualregister
 integer/* исключить из индексирования *//* исключить из индексирования */
,aoncreate varchar(38)/* при создании *//* при создании */
,aonsave varchar(38)/* при сохранении *//* при сохранении */
,aonrun varchar(38)/* при открытии *//* при открытии */
,aondelete varchar(38)/* при удалении *//* при удалении */
,aaddbehaivor
 integer/* поведение при добавлении *//* поведение при добавлении */
,aextenderobject varchar(38)/* объект расширения *//* объект расширения */
,ashablonbrief
 varchar (100)/* шаблон для краткого отображения *//* шаблон для краткого отображения */
,arulebrief
 varchar (500)/* правило составления brief поля *//* правило составления brief поля */
,aisjormalchange
 integer/* вести журнал изменений *//* вести журнал изменений */
,ausearchiving
 integer/* архивировать вместо удаления *//* архивировать вместо удаления */
,aintegerpkey
 integer/* целочисленный ключ *//* целочисленный ключ */
,aparticoncls
 varchar (80)/* иконка раздела *//* иконка раздела */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from part where partid=g2b(apartid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=part' result;
    leave body;
  end if;
 start transaction ; 
 call part_logger(acursession,apartid) ; 
 update  part set changestamp=now() 
,parentrowid= g2b(aparentrowid)
,
  sequence=asequence
,
  parttype=aparttype
,
  caption=acaption
,
  name=aname
,
  the_comment=athe_comment
,
  nolog=anolog
,
  manualregister=amanualregister
,
  oncreate=g2b(aoncreate)
,
  onsave=g2b(aonsave)
,
  onrun=g2b(aonrun)
,
  ondelete=g2b(aondelete)
,
  addbehaivor=aaddbehaivor
,
  extenderobject=g2b(aextenderobject)
,
  shablonbrief=ashablonbrief
,
  rulebrief=arulebrief
,
  isjormalchange=aisjormalchange
,
  usearchiving=ausearchiving
,
  integerpkey=aintegerpkey
,
  particoncls=aparticoncls
  where  partid = g2b(apartid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 if aparentrowid is null then
   select count(*) into  auniquerowcount from part where  parentstructrowid=g2b(aparentstructrowid) and parentrowid is null 
 and sequence=asequence;
 else 
   select count(*) into  auniquerowcount from part where  parentstructrowid=g2b(aparentstructrowid) and parentrowid =g2b(aparentrowid) 
 and sequence=asequence;
 end if;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=раздел' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from part where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=раздел' result;
  rollback;
  leave body;
end if;
 -- end if;

call part_client_trigger(acursession,apartid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=part' result;
    leave body;
  end if;
 start transaction;  
 insert into   part
 (  changestamp,partid 
,parentrowid
,parentstructrowid
,sequence

,parttype

,caption

,name

,the_comment

,nolog

,manualregister

,oncreate

,onsave

,onrun

,ondelete

,addbehaivor

,extenderobject

,shablonbrief

,rulebrief

,isjormalchange

,usearchiving

,integerpkey

,particoncls

 ) values (now(), g2b(apartid) 
,g2b(aparentrowid)
,g2b(aparentstructrowid)
,asequence

,aparttype

,acaption

,aname

,athe_comment

,anolog

,amanualregister

,g2b(aoncreate)

,g2b(aonsave)

,g2b(aonrun)

,g2b(aondelete)

,aaddbehaivor

,g2b(aextenderobject)

,ashablonbrief

,arulebrief

,aisjormalchange

,ausearchiving

,aintegerpkey

,aparticoncls

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 if aparentrowid is null then
   select count(*) into  auniquerowcount from part where  parentstructrowid=g2b(aparentstructrowid) and parentrowid is null 
 and sequence=asequence;
 else 
   select count(*) into  auniquerowcount from part where  parentstructrowid=g2b(aparentstructrowid) and parentrowid =g2b(aparentrowid) 
 and sequence=asequence;
 end if;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=раздел' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from part where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=раздел' result;
  rollback;
  leave body;
end if;
 -- end if;

call part_client_trigger(acursession,apartid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists partmenu_brief
go

create procedure partmenu_brief  (
 acursession varchar(38),
 apartmenuid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartmenuid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from partmenu where partmenuid=g2b(apartmenuid);
 if  aec &gt;0 then
   set abrief=partmenu_brief_f(g2b(apartmenuid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists partmenu_delete
go

create procedure partmenu_delete /*методы уровня раздела*/ (
 acursession varchar(38),
 apartmenuid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partmenu where partmenuid=g2b(apartmenuid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=partmenu' result;
    leave body;
  end if;
 call partmenu_logger(acursession,apartmenuid) ; 
  delete from  partmenu 
  where  partmenuid = g2b(apartmenuid) ;
  delete from num_values where ownerpartname='partmenu' and ownerrowid=g2b(apartmenuid);
  end if;
    select 'ok' result;
 end 
go
GO

/*методы раздела*/

drop procedure if exists partmenu_save
go

create procedure partmenu_save /*методы уровня раздела*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartmenuid varchar(38)
,aname
 varchar (64)/* название *//* название */
,acaption
 varchar (80)/* заголовок *//* заголовок */
,atooltip
 varchar (80)/* подсказка *//* подсказка */
,athe_action varchar(38)/* метод *//* метод */
,aismenuitem
 integer/* включать в меню *//* включать в меню */
,aistoolbarbutton
 integer/* в тулбар *//* в тулбар */
,ahotkey
 varchar (20)/* горячая клавиша *//* горячая клавиша */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partmenu where partmenuid=g2b(apartmenuid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=partmenu' result;
    leave body;
  end if;
 start transaction ; 
 call partmenu_logger(acursession,apartmenuid) ; 
 update  partmenu set changestamp=now() 
,
  name=aname
,
  caption=acaption
,
  tooltip=atooltip
,
  the_action=g2b(athe_action)
,
  ismenuitem=aismenuitem
,
  istoolbarbutton=aistoolbarbutton
,
  hotkey=ahotkey
  where  partmenuid = g2b(apartmenuid) ;


call partmenu_client_trigger(acursession,apartmenuid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=partmenu' result;
    leave body;
  end if;
 start transaction;  
 insert into   partmenu
 (  changestamp,partmenuid 
,parentstructrowid
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 ) values (now(), g2b(apartmenuid) 
,g2b(aparentstructrowid)
,aname

,acaption

,atooltip

,g2b(athe_action)

,aismenuitem

,aistoolbarbutton

,ahotkey

 ) ;


call partmenu_client_trigger(acursession,apartmenuid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists partparammap_brief
go

create procedure partparammap_brief  (
 acursession varchar(38),
 apartparammapid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartparammapid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from partparammap where partparammapid=g2b(apartparammapid);
 if  aec &gt;0 then
   set abrief=partparammap_brief_f(g2b(apartparammapid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists partparammap_delete
go

create procedure partparammap_delete /*отображение значений полей раздела на параметры метода*/ (
 acursession varchar(38),
 apartparammapid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partparammap where partparammapid=g2b(apartparammapid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=partparammap' result;
    leave body;
  end if;
 call partparammap_logger(acursession,apartparammapid) ; 
  delete from  partparammap 
  where  partparammapid = g2b(apartparammapid) ;
  delete from num_values where ownerpartname='partparammap' and ownerrowid=g2b(apartparammapid);
  end if;
    select 'ok' result;
 end 
go
GO

/*отображение параметров*/

drop procedure if exists partparammap_save
go

create procedure partparammap_save /*отображение значений полей раздела на параметры метода*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartparammapid varchar(38)
,afieldname
 varchar (255)/* поле (значение) *//* поле (значение) */
,aparamname
 varchar (80)/* параметр *//* параметр */
,anoedit
 integer/* редактировать параметр нельзя *//* редактировать параметр нельзя */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partparammap where partparammapid=g2b(apartparammapid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=partparammap' result;
    leave body;
  end if;
 start transaction ; 
 call partparammap_logger(acursession,apartparammapid) ; 
 update  partparammap set changestamp=now() 
,
  fieldname=afieldname
,
  paramname=aparamname
,
  noedit=anoedit
  where  partparammapid = g2b(apartparammapid) ;


call partparammap_client_trigger(acursession,apartparammapid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=partparammap' result;
    leave body;
  end if;
 start transaction;  
 insert into   partparammap
 (  changestamp,partparammapid 
,parentstructrowid
,fieldname

,paramname

,noedit

 ) values (now(), g2b(apartparammapid) 
,g2b(aparentstructrowid)
,afieldname

,aparamname

,anoedit

 ) ;


call partparammap_client_trigger(acursession,apartparammapid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists partview_brief
go

create procedure partview_brief  (
 acursession varchar(38),
 apartviewid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartviewid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from partview where partviewid=g2b(apartviewid);
 if  aec &gt;0 then
   set abrief=partview_brief_f(g2b(apartviewid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists partview_delete
go

create procedure partview_delete /*вариант представления, который может использоваться для создания журнала*/ (
 acursession varchar(38),
 apartviewid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partview where partviewid=g2b(apartviewid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=partview' result;
    leave body;
  end if;
 call partview_logger(acursession,apartviewid) ; 
  delete from  partview 
  where  partviewid = g2b(apartviewid) ;
  delete from num_values where ownerpartname='partview' and ownerrowid=g2b(apartviewid);
  end if;
    select 'ok' result;
 end 
go
GO

/*представление*/

drop procedure if exists partview_save
go

create procedure partview_save /*вариант представления, который может использоваться для создания журнала*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartviewid varchar(38)
,aname
 varchar (255)/* название *//* название */
,athe_alias
 varchar (64)/* псевдоним *//* псевдоним */
,aforchoose
 integer/* для поиска *//* для поиска */
,afilterfield0
 varchar (255)/* поле - фильтр 0 *//* поле - фильтр 0 */
,afilterfield1
 varchar (255)/* поле - фильтр 1 *//* поле - фильтр 1 */
,afilterfield2
 varchar (255)/* поле - фильтр 2 *//* поле - фильтр 2 */
,afilterfield3
 varchar (255)/* поле - фильтр 3 *//* поле - фильтр 3 */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partview where partviewid=g2b(apartviewid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=partview' result;
    leave body;
  end if;
 start transaction ; 
 call partview_logger(acursession,apartviewid) ; 
 update  partview set changestamp=now() 
,
  name=aname
,
  the_alias=athe_alias
,
  forchoose=aforchoose
,
  filterfield0=afilterfield0
,
  filterfield1=afilterfield1
,
  filterfield2=afilterfield2
,
  filterfield3=afilterfield3
  where  partviewid = g2b(apartviewid) ;


call partview_client_trigger(acursession,apartviewid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=partview' result;
    leave body;
  end if;
 start transaction;  
 insert into   partview
 (  changestamp,partviewid 
,parentstructrowid
,name

,the_alias

,forchoose

,filterfield0

,filterfield1

,filterfield2

,filterfield3

 ) values (now(), g2b(apartviewid) 
,g2b(aparentstructrowid)
,aname

,athe_alias

,aforchoose

,afilterfield0

,afilterfield1

,afilterfield2

,afilterfield3

 ) ;


call partview_client_trigger(acursession,apartviewid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists viewcolumn_brief
go

create procedure viewcolumn_brief  (
 acursession varchar(38),
 aviewcolumnid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aviewcolumnid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from viewcolumn where viewcolumnid=g2b(aviewcolumnid);
 if  aec &gt;0 then
   set abrief=viewcolumn_brief_f(g2b(aviewcolumnid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists viewcolumn_delete
go

create procedure viewcolumn_delete /*колонка пердставления*/ (
 acursession varchar(38),
 aviewcolumnid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from viewcolumn where viewcolumnid=g2b(aviewcolumnid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=viewcolumn' result;
    leave body;
  end if;
 call viewcolumn_logger(acursession,aviewcolumnid) ; 
  delete from  viewcolumn 
  where  viewcolumnid = g2b(aviewcolumnid) ;
  delete from num_values where ownerpartname='viewcolumn' and ownerrowid=g2b(aviewcolumnid);
  end if;
    select 'ok' result;
 end 
go
GO

/*колонка*/

drop procedure if exists viewcolumn_save
go

create procedure viewcolumn_save /*колонка пердставления*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aviewcolumnid varchar(38)
,asequence
 integer/* № *//* № */
,aname
 varchar (255)/* название *//* название */
,athe_alias
 varchar (64)/* псвдоним *//* псвдоним */
,afrompart varchar(38)/* раздел *//* раздел */
,afield varchar(38)/* поле *//* поле */
,aaggregation
 integer/* агрегация *//* агрегация */
,aexpression
 text/* формула *//* формула */
,aforcombo
 integer/* для комбо *//* для комбо */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from viewcolumn where viewcolumnid=g2b(aviewcolumnid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=viewcolumn' result;
    leave body;
  end if;
 start transaction ; 
 call viewcolumn_logger(acursession,aviewcolumnid) ; 
 update  viewcolumn set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  the_alias=athe_alias
,
  frompart=g2b(afrompart)
,
  field=g2b(afield)
,
  aggregation=aaggregation
,
  expression=aexpression
,
  forcombo=aforcombo
  where  viewcolumnid = g2b(aviewcolumnid) ;


call viewcolumn_client_trigger(acursession,aviewcolumnid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=viewcolumn' result;
    leave body;
  end if;
 start transaction;  
 insert into   viewcolumn
 (  changestamp,viewcolumnid 
,parentstructrowid
,sequence

,name

,the_alias

,frompart

,field

,aggregation

,expression

,forcombo

 ) values (now(), g2b(aviewcolumnid) 
,g2b(aparentstructrowid)
,asequence

,aname

,athe_alias

,g2b(afrompart)

,g2b(afield)

,aaggregation

,aexpression

,aforcombo

 ) ;


call viewcolumn_client_trigger(acursession,aviewcolumnid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists partview_lnk_brief
go

create procedure partview_lnk_brief  (
 acursession varchar(38),
 apartview_lnkid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartview_lnkid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from partview_lnk where partview_lnkid=g2b(apartview_lnkid);
 if  aec &gt;0 then
   set abrief=partview_lnk_brief_f(g2b(apartview_lnkid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists partview_lnk_delete
go

create procedure partview_lnk_delete /**/ (
 acursession varchar(38),
 apartview_lnkid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partview_lnk where partview_lnkid=g2b(apartview_lnkid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=partview_lnk' result;
    leave body;
  end if;
 call partview_lnk_logger(acursession,apartview_lnkid) ; 
  delete from  partview_lnk 
  where  partview_lnkid = g2b(apartview_lnkid) ;
  delete from num_values where ownerpartname='partview_lnk' and ownerrowid=g2b(apartview_lnkid);
  end if;
    select 'ok' result;
 end 
go
GO

/*связанные представления*/

drop procedure if exists partview_lnk_save
go

create procedure partview_lnk_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartview_lnkid varchar(38)
,atheview varchar(38)/* представление *//* представление */
,athejoinsource varchar(38)/* связь: поле для join источник *//* связь: поле для join источник */
,areftype
 integer/* связывать как *//* связывать как */
,athejoindestination varchar(38)/* свзяь: поле для join приемник *//* свзяь: поле для join приемник */
,ahandjoin
 varchar (255)/* ручной join *//* ручной join */
,aseq
 integer/* порядок *//* порядок */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partview_lnk where partview_lnkid=g2b(apartview_lnkid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=partview_lnk' result;
    leave body;
  end if;
 start transaction ; 
 call partview_lnk_logger(acursession,apartview_lnkid) ; 
 update  partview_lnk set changestamp=now() 
,
  theview=g2b(atheview)
,
  thejoinsource=g2b(athejoinsource)
,
  reftype=areftype
,
  thejoindestination=g2b(athejoindestination)
,
  handjoin=ahandjoin
,
  seq=aseq
  where  partview_lnkid = g2b(apartview_lnkid) ;


call partview_lnk_client_trigger(acursession,apartview_lnkid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=partview_lnk' result;
    leave body;
  end if;
 start transaction;  
 insert into   partview_lnk
 (  changestamp,partview_lnkid 
,parentstructrowid
,theview

,thejoinsource

,reftype

,thejoindestination

,handjoin

,seq

 ) values (now(), g2b(apartview_lnkid) 
,g2b(aparentstructrowid)
,g2b(atheview)

,g2b(athejoinsource)

,areftype

,g2b(athejoindestination)

,ahandjoin

,aseq

 ) ;


call partview_lnk_client_trigger(acursession,apartview_lnkid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists validator_brief
go

create procedure validator_brief  (
 acursession varchar(38),
 avalidatorid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if avalidatorid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from validator where validatorid=g2b(avalidatorid);
 if  aec &gt;0 then
   set abrief=validator_brief_f(g2b(avalidatorid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists validator_delete
go

create procedure validator_delete /*действия в впроцессе редактирования*/ (
 acursession varchar(38),
 avalidatorid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from validator where validatorid=g2b(avalidatorid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=validator' result;
    leave body;
  end if;
 call validator_logger(acursession,avalidatorid) ; 
  delete from  validator 
  where  validatorid = g2b(avalidatorid) ;
  delete from num_values where ownerpartname='validator' and ownerrowid=g2b(avalidatorid);
  end if;
    select 'ok' result;
 end 
go
GO

/*логика на форме*/

drop procedure if exists validator_save
go

create procedure validator_save /*действия в впроцессе редактирования*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 avalidatorid varchar(38)
,atarget varchar(38)/* целевая платформа *//* целевая платформа */
,acode
 text/* скрипт *//* скрипт */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from validator where validatorid=g2b(avalidatorid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=validator' result;
    leave body;
  end if;
 start transaction ; 
 call validator_logger(acursession,avalidatorid) ; 
 update  validator set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  validatorid = g2b(avalidatorid) ;


call validator_client_trigger(acursession,avalidatorid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=validator' result;
    leave body;
  end if;
 start transaction;  
 insert into   validator
 (  changestamp,validatorid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(avalidatorid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call validator_client_trigger(acursession,avalidatorid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists uniqueconstraint_brief
go

create procedure uniqueconstraint_brief  (
 acursession varchar(38),
 auniqueconstraintid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if auniqueconstraintid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from uniqueconstraint where uniqueconstraintid=g2b(auniqueconstraintid);
 if  aec &gt;0 then
   set abrief=uniqueconstraint_brief_f(g2b(auniqueconstraintid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists uniqueconstraint_delete
go

create procedure uniqueconstraint_delete /*ограничение уникальности*/ (
 acursession varchar(38),
 auniqueconstraintid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from uniqueconstraint where uniqueconstraintid=g2b(auniqueconstraintid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=uniqueconstraint' result;
    leave body;
  end if;
 call uniqueconstraint_logger(acursession,auniqueconstraintid) ; 
  delete from  uniqueconstraint 
  where  uniqueconstraintid = g2b(auniqueconstraintid) ;
  delete from num_values where ownerpartname='uniqueconstraint' and ownerrowid=g2b(auniqueconstraintid);
  end if;
    select 'ok' result;
 end 
go
GO

/*ограничение уникальности*/

drop procedure if exists uniqueconstraint_save
go

create procedure uniqueconstraint_save /*ограничение уникальности*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 auniqueconstraintid varchar(38)
,aname
 varchar (80)/* название *//* название */
,aperparent
 integer/* по родителю *//* по родителю */
,athecomment
 text/* описание *//* описание */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from uniqueconstraint where uniqueconstraintid=g2b(auniqueconstraintid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=uniqueconstraint' result;
    leave body;
  end if;
 start transaction ; 
 call uniqueconstraint_logger(acursession,auniqueconstraintid) ; 
 update  uniqueconstraint set changestamp=now() 
,
  name=aname
,
  perparent=aperparent
,
  thecomment=athecomment
  where  uniqueconstraintid = g2b(auniqueconstraintid) ;


call uniqueconstraint_client_trigger(acursession,auniqueconstraintid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=uniqueconstraint' result;
    leave body;
  end if;
 start transaction;  
 insert into   uniqueconstraint
 (  changestamp,uniqueconstraintid 
,parentstructrowid
,name

,perparent

,thecomment

 ) values (now(), g2b(auniqueconstraintid) 
,g2b(aparentstructrowid)
,aname

,aperparent

,athecomment

 ) ;


call uniqueconstraint_client_trigger(acursession,auniqueconstraintid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists constraintfield_brief
go

create procedure constraintfield_brief  (
 acursession varchar(38),
 aconstraintfieldid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aconstraintfieldid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from constraintfield where constraintfieldid=g2b(aconstraintfieldid);
 if  aec &gt;0 then
   set abrief=constraintfield_brief_f(g2b(aconstraintfieldid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists constraintfield_delete
go

create procedure constraintfield_delete /*поля ограничения*/ (
 acursession varchar(38),
 aconstraintfieldid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from constraintfield where constraintfieldid=g2b(aconstraintfieldid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=constraintfield' result;
    leave body;
  end if;
 call constraintfield_logger(acursession,aconstraintfieldid) ; 
  delete from  constraintfield 
  where  constraintfieldid = g2b(aconstraintfieldid) ;
  delete from num_values where ownerpartname='constraintfield' and ownerrowid=g2b(aconstraintfieldid);
  end if;
    select 'ok' result;
 end 
go
GO

/*поля ограничения*/

drop procedure if exists constraintfield_save
go

create procedure constraintfield_save /*поля ограничения*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aconstraintfieldid varchar(38)
,athefield varchar(38)/* поле *//* поле */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from constraintfield where constraintfieldid=g2b(aconstraintfieldid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=constraintfield' result;
    leave body;
  end if;
 start transaction ; 
 call constraintfield_logger(acursession,aconstraintfieldid) ; 
 update  constraintfield set changestamp=now() 
,
  thefield=g2b(athefield)
  where  constraintfieldid = g2b(aconstraintfieldid) ;


call constraintfield_client_trigger(acursession,aconstraintfieldid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=constraintfield' result;
    leave body;
  end if;
 start transaction;  
 insert into   constraintfield
 (  changestamp,constraintfieldid 
,parentstructrowid
,thefield

 ) values (now(), g2b(aconstraintfieldid) 
,g2b(aparentstructrowid)
,g2b(athefield)

 ) ;


call constraintfield_client_trigger(acursession,aconstraintfieldid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists extenderinterface_brief
go

create procedure extenderinterface_brief  (
 acursession varchar(38),
 aextenderinterfaceid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aextenderinterfaceid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from extenderinterface where extenderinterfaceid=g2b(aextenderinterfaceid);
 if  aec &gt;0 then
   set abrief=extenderinterface_brief_f(g2b(aextenderinterfaceid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists extenderinterface_delete
go

create procedure extenderinterface_delete /**/ (
 acursession varchar(38),
 aextenderinterfaceid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from extenderinterface where extenderinterfaceid=g2b(aextenderinterfaceid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=extenderinterface' result;
    leave body;
  end if;
 call extenderinterface_logger(acursession,aextenderinterfaceid) ; 
  delete from  extenderinterface 
  where  extenderinterfaceid = g2b(aextenderinterfaceid) ;
  delete from num_values where ownerpartname='extenderinterface' and ownerrowid=g2b(aextenderinterfaceid);
  end if;
    select 'ok' result;
 end 
go
GO

/*интерфейсы расширения*/

drop procedure if exists extenderinterface_save
go

create procedure extenderinterface_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aextenderinterfaceid varchar(38)
,athename
 varchar (255)/* название *//* название */
,atargetplatform varchar(38)/* целевая платформа *//* целевая платформа */
,atheobject
 varchar (255)/* объект *//* объект */
,atheconfig
 varchar (512)/* конфиг *//* конфиг */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from extenderinterface where extenderinterfaceid=g2b(aextenderinterfaceid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=extenderinterface' result;
    leave body;
  end if;
 start transaction ; 
 call extenderinterface_logger(acursession,aextenderinterfaceid) ; 
 update  extenderinterface set changestamp=now() 
,
  thename=athename
,
  targetplatform=g2b(atargetplatform)
,
  theobject=atheobject
,
  theconfig=atheconfig
  where  extenderinterfaceid = g2b(aextenderinterfaceid) ;


call extenderinterface_client_trigger(acursession,aextenderinterfaceid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=extenderinterface' result;
    leave body;
  end if;
 start transaction;  
 insert into   extenderinterface
 (  changestamp,extenderinterfaceid 
,parentstructrowid
,thename

,targetplatform

,theobject

,theconfig

 ) values (now(), g2b(aextenderinterfaceid) 
,g2b(aparentstructrowid)
,athename

,g2b(atargetplatform)

,atheobject

,atheconfig

 ) ;


call extenderinterface_client_trigger(acursession,aextenderinterfaceid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists field_brief
go

create procedure field_brief  (
 acursession varchar(38),
 afieldid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from field where fieldid=g2b(afieldid);
 if  aec &gt;0 then
   set abrief=field_brief_f(g2b(afieldid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists field_delete
go

create procedure field_delete /*поле*/ (
 acursession varchar(38),
 afieldid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from field where fieldid=g2b(afieldid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=field' result;
    leave body;
  end if;
 call field_logger(acursession,afieldid) ; 
  delete from  field 
  where  fieldid = g2b(afieldid) ;
  delete from num_values where ownerpartname='field' and ownerrowid=g2b(afieldid);
  end if;
    select 'ok' result;
 end 
go
GO

/*поле*/

drop procedure if exists field_save
go

create procedure field_save /*поле*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldid varchar(38)
,atabname
 varchar (60)/* имя вкладки *//* имя вкладки */
,afieldgroupbox
 varchar (60)/* имя группы *//* имя группы */
,asequence
 integer/* № п/п *//* № п/п */
,acaption
 varchar (80)/* надпись *//* надпись */
,aname
 varchar (64)/* имя поля *//* имя поля */
,afieldtype varchar(38)/* тип поля *//* тип поля */
,aisbrief
 integer/* краткая информация *//* краткая информация */
,aistabbrief
 integer/* для отображения в таблице *//* для отображения в таблице */
,aallownull
 integer/* может быть пустым *//* может быть пустым */
,adatasize
 integer/* размер поля *//* размер поля */
,areferencetype
 integer/* тип ссылки *//* тип ссылки */
,areftotype varchar(38)/* ссылка на тип *//* ссылка на тип */
,areftopart varchar(38)/* ссылка на раздел *//* ссылка на раздел */
,athestyle
 varchar (50)/* стиль *//* стиль */
,ainternalreference
 integer/* ссылка в пределах объекта *//* ссылка в пределах объекта */
,acreaterefonly
 integer/* только создание объекта *//* только создание объекта */
,aisautonumber
 integer/* автонумерация *//* автонумерация */
,athenumerator varchar(38)/* нумератор *//* нумератор */
,azonetemplate
 varchar (255)/* шаблон зоны нумерации *//* шаблон зоны нумерации */
,anumberdatefield varchar(38)/* поле для расчета даты *//* поле для расчета даты */
,athecomment
 text/* описание *//* описание */
,ashablonbrief
 varchar (100)/* шаблон для краткого отображения *//* шаблон для краткого отображения */
,athenameclass
 varchar (100)/* имя класса для мастера строк *//* имя класса для мастера строк */
,athemask
 varchar (64)/* маска *//* маска */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from field where fieldid=g2b(afieldid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=field' result;
    leave body;
  end if;
 start transaction ; 
 call field_logger(acursession,afieldid) ; 
 update  field set changestamp=now() 
,
  tabname=atabname
,
  fieldgroupbox=afieldgroupbox
,
  sequence=asequence
,
  caption=acaption
,
  name=aname
,
  fieldtype=g2b(afieldtype)
,
  isbrief=aisbrief
,
  istabbrief=aistabbrief
,
  allownull=aallownull
,
  datasize=adatasize
,
  referencetype=areferencetype
,
  reftotype=g2b(areftotype)
,
  reftopart=g2b(areftopart)
,
  thestyle=athestyle
,
  internalreference=ainternalreference
,
  createrefonly=acreaterefonly
,
  isautonumber=aisautonumber
,
  thenumerator=g2b(athenumerator)
,
  zonetemplate=azonetemplate
,
  numberdatefield=g2b(anumberdatefield)
,
  thecomment=athecomment
,
  shablonbrief=ashablonbrief
,
  thenameclass=athenameclass
,
  themask=athemask
  where  fieldid = g2b(afieldid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from field where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=поле' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from field where  parentstructrowid=g2b(aparentstructrowid) 
 and sequence=asequence;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=поле' result;
  rollback;
  leave body;
end if;
 -- end if;

call field_client_trigger(acursession,afieldid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=field' result;
    leave body;
  end if;
 start transaction;  
 insert into   field
 (  changestamp,fieldid 
,parentstructrowid
,tabname

,fieldgroupbox

,sequence

,caption

,name

,fieldtype

,isbrief

,istabbrief

,allownull

,datasize

,referencetype

,reftotype

,reftopart

,thestyle

,internalreference

,createrefonly

,isautonumber

,thenumerator

,zonetemplate

,numberdatefield

,thecomment

,shablonbrief

,thenameclass

,themask

 ) values (now(), g2b(afieldid) 
,g2b(aparentstructrowid)
,atabname

,afieldgroupbox

,asequence

,acaption

,aname

,g2b(afieldtype)

,aisbrief

,aistabbrief

,aallownull

,adatasize

,areferencetype

,g2b(areftotype)

,g2b(areftopart)

,athestyle

,ainternalreference

,acreaterefonly

,aisautonumber

,g2b(athenumerator)

,azonetemplate

,g2b(anumberdatefield)

,athecomment

,ashablonbrief

,athenameclass

,athemask

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from field where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=поле' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from field where  parentstructrowid=g2b(aparentstructrowid) 
 and sequence=asequence;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=поле' result;
  rollback;
  leave body;
end if;
 -- end if;

call field_client_trigger(acursession,afieldid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fldextenders_brief
go

create procedure fldextenders_brief  (
 acursession varchar(38),
 afldextendersid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afldextendersid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fldextenders where fldextendersid=g2b(afldextendersid);
 if  aec &gt;0 then
   set abrief=fldextenders_brief_f(g2b(afldextendersid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fldextenders_delete
go

create procedure fldextenders_delete /**/ (
 acursession varchar(38),
 afldextendersid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fldextenders where fldextendersid=g2b(afldextendersid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fldextenders' result;
    leave body;
  end if;
 call fldextenders_logger(acursession,afldextendersid) ; 
  delete from  fldextenders 
  where  fldextendersid = g2b(afldextendersid) ;
  delete from num_values where ownerpartname='fldextenders' and ownerrowid=g2b(afldextendersid);
  end if;
    select 'ok' result;
 end 
go
GO

/*интерфейсы расширения*/

drop procedure if exists fldextenders_save
go

create procedure fldextenders_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afldextendersid varchar(38)
,athename
 varchar (255)/* название *//* название */
,atargetplatform varchar(38)/* целевая платформа *//* целевая платформа */
,atheobject
 varchar (255)/* объект *//* объект */
,atheconfig
 varchar (512)/* конфиг *//* конфиг */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fldextenders where fldextendersid=g2b(afldextendersid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fldextenders' result;
    leave body;
  end if;
 start transaction ; 
 call fldextenders_logger(acursession,afldextendersid) ; 
 update  fldextenders set changestamp=now() 
,
  thename=athename
,
  targetplatform=g2b(atargetplatform)
,
  theobject=atheobject
,
  theconfig=atheconfig
  where  fldextendersid = g2b(afldextendersid) ;


call fldextenders_client_trigger(acursession,afldextendersid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fldextenders' result;
    leave body;
  end if;
 start transaction;  
 insert into   fldextenders
 (  changestamp,fldextendersid 
,parentstructrowid
,thename

,targetplatform

,theobject

,theconfig

 ) values (now(), g2b(afldextendersid) 
,g2b(aparentstructrowid)
,athename

,g2b(atargetplatform)

,atheobject

,atheconfig

 ) ;


call fldextenders_client_trigger(acursession,afldextendersid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fieldsrcdef_brief
go

create procedure fieldsrcdef_brief  (
 acursession varchar(38),
 afieldsrcdefid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldsrcdefid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldsrcdef where fieldsrcdefid=g2b(afieldsrcdefid);
 if  aec &gt;0 then
   set abrief=fieldsrcdef_brief_f(g2b(afieldsrcdefid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fieldsrcdef_delete
go

create procedure fieldsrcdef_delete /*описание источника данных для полей типа referencesql */ (
 acursession varchar(38),
 afieldsrcdefid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldsrcdef where fieldsrcdefid=g2b(afieldsrcdefid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fieldsrcdef' result;
    leave body;
  end if;
 call fieldsrcdef_logger(acursession,afieldsrcdefid) ; 
  delete from  fieldsrcdef 
  where  fieldsrcdefid = g2b(afieldsrcdefid) ;
  delete from num_values where ownerpartname='fieldsrcdef' and ownerrowid=g2b(afieldsrcdefid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание источника данных*/

drop procedure if exists fieldsrcdef_save
go

create procedure fieldsrcdef_save /*описание источника данных для полей типа referencesql */ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldsrcdefid varchar(38)
,aprovider
 varchar (128)/* провайдер *//* провайдер */
,aconnectionstring
 varchar (512)/* строка соединения с источником *//* строка соединения с источником */
,adatasource
 varchar (512)/* источник данных *//* источник данных */
,aidfield
 varchar (128)/* id *//* id */
,abriefstring
 varchar (512)/* источник краткой информации *//* источник краткой информации */
,afilterstring
 varchar (512)/* фильтр источника данных *//* фильтр источника данных */
,asortfield
 varchar (512)/* сортировка источника данных *//* сортировка источника данных */
,adescriptionstring
 text/* примечания *//* примечания */
,adontshowdialog
 integer/* не показывать форму выбора *//* не показывать форму выбора */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldsrcdef where fieldsrcdefid=g2b(afieldsrcdefid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fieldsrcdef' result;
    leave body;
  end if;
 start transaction ; 
 call fieldsrcdef_logger(acursession,afieldsrcdefid) ; 
 update  fieldsrcdef set changestamp=now() 
,
  provider=aprovider
,
  connectionstring=aconnectionstring
,
  datasource=adatasource
,
  idfield=aidfield
,
  briefstring=abriefstring
,
  filterstring=afilterstring
,
  sortfield=asortfield
,
  descriptionstring=adescriptionstring
,
  dontshowdialog=adontshowdialog
  where  fieldsrcdefid = g2b(afieldsrcdefid) ;


call fieldsrcdef_client_trigger(acursession,afieldsrcdefid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fieldsrcdef' result;
    leave body;
  end if;
select count(*) into aec from fieldsrcdef where 
parentstructrowid=g2b(aparentstructrowid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;fieldsrcdef&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   fieldsrcdef
 (  changestamp,fieldsrcdefid 
,parentstructrowid
,provider

,connectionstring

,datasource

,idfield

,briefstring

,filterstring

,sortfield

,descriptionstring

,dontshowdialog

 ) values (now(), g2b(afieldsrcdefid) 
,g2b(aparentstructrowid)
,aprovider

,aconnectionstring

,adatasource

,aidfield

,abriefstring

,afilterstring

,asortfield

,adescriptionstring

,adontshowdialog

 ) ;


call fieldsrcdef_client_trigger(acursession,afieldsrcdefid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists dinamicfilterscript_brief
go

create procedure dinamicfilterscript_brief  (
 acursession varchar(38),
 adinamicfilterscriptid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if adinamicfilterscriptid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from dinamicfilterscript where dinamicfilterscriptid=g2b(adinamicfilterscriptid);
 if  aec &gt;0 then
   set abrief=dinamicfilterscript_brief_f(g2b(adinamicfilterscriptid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists dinamicfilterscript_delete
go

create procedure dinamicfilterscript_delete /*выражение для построения дополнительного фильтра для ссылочных полей*/ (
 acursession varchar(38),
 adinamicfilterscriptid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from dinamicfilterscript where dinamicfilterscriptid=g2b(adinamicfilterscriptid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=dinamicfilterscript' result;
    leave body;
  end if;
 call dinamicfilterscript_logger(acursession,adinamicfilterscriptid) ; 
  delete from  dinamicfilterscript 
  where  dinamicfilterscriptid = g2b(adinamicfilterscriptid) ;
  delete from num_values where ownerpartname='dinamicfilterscript' and ownerrowid=g2b(adinamicfilterscriptid);
  end if;
    select 'ok' result;
 end 
go
GO

/*динамический фильтр*/

drop procedure if exists dinamicfilterscript_save
go

create procedure dinamicfilterscript_save /*выражение для построения дополнительного фильтра для ссылочных полей*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 adinamicfilterscriptid varchar(38)
,atarget varchar(38)/* целевая платформа *//* целевая платформа */
,acode
 text/* скрипт *//* скрипт */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from dinamicfilterscript where dinamicfilterscriptid=g2b(adinamicfilterscriptid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=dinamicfilterscript' result;
    leave body;
  end if;
 start transaction ; 
 call dinamicfilterscript_logger(acursession,adinamicfilterscriptid) ; 
 update  dinamicfilterscript set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  dinamicfilterscriptid = g2b(adinamicfilterscriptid) ;


call dinamicfilterscript_client_trigger(acursession,adinamicfilterscriptid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=dinamicfilterscript' result;
    leave body;
  end if;
 start transaction;  
 insert into   dinamicfilterscript
 (  changestamp,dinamicfilterscriptid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(adinamicfilterscriptid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call dinamicfilterscript_client_trigger(acursession,adinamicfilterscriptid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fieldexpression_brief
go

create procedure fieldexpression_brief  (
 acursession varchar(38),
 afieldexpressionid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldexpressionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldexpression where fieldexpressionid=g2b(afieldexpressionid);
 if  aec &gt;0 then
   set abrief=fieldexpression_brief_f(g2b(afieldexpressionid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fieldexpression_delete
go

create procedure fieldexpression_delete /*выражение для вычисления поля
или значение по умолчанию*/ (
 acursession varchar(38),
 afieldexpressionid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldexpression where fieldexpressionid=g2b(afieldexpressionid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fieldexpression' result;
    leave body;
  end if;
 call fieldexpression_logger(acursession,afieldexpressionid) ; 
  delete from  fieldexpression 
  where  fieldexpressionid = g2b(afieldexpressionid) ;
  delete from num_values where ownerpartname='fieldexpression' and ownerrowid=g2b(afieldexpressionid);
  end if;
    select 'ok' result;
 end 
go
GO

/*значение по умолчанию*/

drop procedure if exists fieldexpression_save
go

create procedure fieldexpression_save /*выражение для вычисления поля
или значение по умолчанию*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldexpressionid varchar(38)
,atarget varchar(38)/* платформа *//* платформа */
,acode
 text/* скрипт *//* скрипт */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldexpression where fieldexpressionid=g2b(afieldexpressionid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fieldexpression' result;
    leave body;
  end if;
 start transaction ; 
 call fieldexpression_logger(acursession,afieldexpressionid) ; 
 update  fieldexpression set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  fieldexpressionid = g2b(afieldexpressionid) ;


call fieldexpression_client_trigger(acursession,afieldexpressionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fieldexpression' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldexpression
 (  changestamp,fieldexpressionid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(afieldexpressionid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call fieldexpression_client_trigger(acursession,afieldexpressionid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fieldvalidator_brief
go

create procedure fieldvalidator_brief  (
 acursession varchar(38),
 afieldvalidatorid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldvalidatorid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldvalidator where fieldvalidatorid=g2b(afieldvalidatorid);
 if  aec &gt;0 then
   set abrief=fieldvalidator_brief_f(g2b(afieldvalidatorid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fieldvalidator_delete
go

create procedure fieldvalidator_delete /*логика взаимосвязей на форме при изменении поля*/ (
 acursession varchar(38),
 afieldvalidatorid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldvalidator where fieldvalidatorid=g2b(afieldvalidatorid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fieldvalidator' result;
    leave body;
  end if;
 call fieldvalidator_logger(acursession,afieldvalidatorid) ; 
  delete from  fieldvalidator 
  where  fieldvalidatorid = g2b(afieldvalidatorid) ;
  delete from num_values where ownerpartname='fieldvalidator' and ownerrowid=g2b(afieldvalidatorid);
  end if;
    select 'ok' result;
 end 
go
GO

/*логика поля на форме*/

drop procedure if exists fieldvalidator_save
go

create procedure fieldvalidator_save /*логика взаимосвязей на форме при изменении поля*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldvalidatorid varchar(38)
,atarget varchar(38)/* платформа *//* платформа */
,acode
 text/* скрипт *//* скрипт */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldvalidator where fieldvalidatorid=g2b(afieldvalidatorid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fieldvalidator' result;
    leave body;
  end if;
 start transaction ; 
 call fieldvalidator_logger(acursession,afieldvalidatorid) ; 
 update  fieldvalidator set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  fieldvalidatorid = g2b(afieldvalidatorid) ;


call fieldvalidator_client_trigger(acursession,afieldvalidatorid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fieldvalidator' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldvalidator
 (  changestamp,fieldvalidatorid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(afieldvalidatorid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call fieldvalidator_client_trigger(acursession,afieldvalidatorid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fieldmenu_brief
go

create procedure fieldmenu_brief  (
 acursession varchar(38),
 afieldmenuid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldmenuid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldmenu where fieldmenuid=g2b(afieldmenuid);
 if  aec &gt;0 then
   set abrief=fieldmenu_brief_f(g2b(afieldmenuid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fieldmenu_delete
go

create procedure fieldmenu_delete /*методы, ассоциированные с полем*/ (
 acursession varchar(38),
 afieldmenuid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldmenu where fieldmenuid=g2b(afieldmenuid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fieldmenu' result;
    leave body;
  end if;
 call fieldmenu_logger(acursession,afieldmenuid) ; 
  delete from  fieldmenu 
  where  fieldmenuid = g2b(afieldmenuid) ;
  delete from num_values where ownerpartname='fieldmenu' and ownerrowid=g2b(afieldmenuid);
  end if;
    select 'ok' result;
 end 
go
GO

/*методы поля*/

drop procedure if exists fieldmenu_save
go

create procedure fieldmenu_save /*методы, ассоциированные с полем*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldmenuid varchar(38)
,aname
 varchar (64)/* название *//* название */
,acaption
 varchar (80)/* заголовок *//* заголовок */
,atooltip
 varchar (80)/* подсказка *//* подсказка */
,aactionid varchar(38)/* идентификатор вызываемого метода *//* идентификатор вызываемого метода */
,aismenuitem
 integer/* в меню *//* в меню */
,aistoolbarbutton
 integer/* в тулбар *//* в тулбар */
,ahotkey
 varchar (20)/* горячая клавиша *//* горячая клавиша */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldmenu where fieldmenuid=g2b(afieldmenuid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fieldmenu' result;
    leave body;
  end if;
 start transaction ; 
 call fieldmenu_logger(acursession,afieldmenuid) ; 
 update  fieldmenu set changestamp=now() 
,
  name=aname
,
  caption=acaption
,
  tooltip=atooltip
,
  actionid=g2b(aactionid)
,
  ismenuitem=aismenuitem
,
  istoolbarbutton=aistoolbarbutton
,
  hotkey=ahotkey
  where  fieldmenuid = g2b(afieldmenuid) ;


call fieldmenu_client_trigger(acursession,afieldmenuid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fieldmenu' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldmenu
 (  changestamp,fieldmenuid 
,parentstructrowid
,name

,caption

,tooltip

,actionid

,ismenuitem

,istoolbarbutton

,hotkey

 ) values (now(), g2b(afieldmenuid) 
,g2b(aparentstructrowid)
,aname

,acaption

,atooltip

,g2b(aactionid)

,aismenuitem

,aistoolbarbutton

,ahotkey

 ) ;


call fieldmenu_client_trigger(acursession,afieldmenuid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fieldparammap_brief
go

create procedure fieldparammap_brief  (
 acursession varchar(38),
 afieldparammapid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldparammapid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldparammap where fieldparammapid=g2b(afieldparammapid);
 if  aec &gt;0 then
   set abrief=fieldparammap_brief_f(g2b(afieldparammapid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fieldparammap_delete
go

create procedure fieldparammap_delete /*отображение значений на параметры метода*/ (
 acursession varchar(38),
 afieldparammapid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldparammap where fieldparammapid=g2b(afieldparammapid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fieldparammap' result;
    leave body;
  end if;
 call fieldparammap_logger(acursession,afieldparammapid) ; 
  delete from  fieldparammap 
  where  fieldparammapid = g2b(afieldparammapid) ;
  delete from num_values where ownerpartname='fieldparammap' and ownerrowid=g2b(afieldparammapid);
  end if;
    select 'ok' result;
 end 
go
GO

/*отображение параметров*/

drop procedure if exists fieldparammap_save
go

create procedure fieldparammap_save /*отображение значений на параметры метода*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldparammapid varchar(38)
,afieldname
 varchar (255)/* поле (значение) *//* поле (значение) */
,aparamname
 varchar (80)/* параметр *//* параметр */
,anoedit
 integer/* редактировать параметр нельзя *//* редактировать параметр нельзя */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldparammap where fieldparammapid=g2b(afieldparammapid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fieldparammap' result;
    leave body;
  end if;
 start transaction ; 
 call fieldparammap_logger(acursession,afieldparammapid) ; 
 update  fieldparammap set changestamp=now() 
,
  fieldname=afieldname
,
  paramname=aparamname
,
  noedit=anoedit
  where  fieldparammapid = g2b(afieldparammapid) ;


call fieldparammap_client_trigger(acursession,afieldparammapid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fieldparammap' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldparammap
 (  changestamp,fieldparammapid 
,parentstructrowid
,fieldname

,paramname

,noedit

 ) values (now(), g2b(afieldparammapid) 
,g2b(aparentstructrowid)
,afieldname

,aparamname

,anoedit

 ) ;


call fieldparammap_client_trigger(acursession,afieldparammapid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists nextstate_copy
go

create procedure nextstate_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into nextstate 
 ( nextstateid 
,parentstructrowid
,thestate

 ) select 
copymap(acopyaction,b2g(nextstateid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thestate

 from nextstate
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists objstatus_copy
go

create procedure objstatus_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_objstatus cursor for
select objstatusid from objstatus where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into objstatus 
 ( objstatusid 
,parentstructrowid
,name

,isstartup

,isarchive

,the_comment

 ) select 
copymap(acopyaction,b2g(objstatusid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,isstartup

,isarchive

,the_comment

 from objstatus
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_objstatus;
  set  fetch_done=false;
fetch copy_cursor_objstatus into aid;
while not fetch_done do 
    call nextstate_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_objstatus into aid;
end while;

close copy_cursor_objstatus;
 end 
go
GO


drop procedure if exists structrestriction_copy
go

create procedure structrestriction_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into structrestriction 
 ( structrestrictionid 
,parentstructrowid
,struct

,allowread

,allowadd

,allowedit

,allowdelete

 ) select 
copymap(acopyaction,b2g(structrestrictionid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,struct

,allowread

,allowadd

,allowedit

,allowdelete

 from structrestriction
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists methodrestriction_copy
go

create procedure methodrestriction_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into methodrestriction 
 ( methodrestrictionid 
,parentstructrowid
,part

,method

,isrestricted

 ) select 
copymap(acopyaction,b2g(methodrestrictionid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,part

,method

,isrestricted

 from methodrestriction
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fieldrestriction_copy
go

create procedure fieldrestriction_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldrestriction 
 ( fieldrestrictionid 
,parentstructrowid
,thepart

,thefield

,allowread

,allowmodify

,mandatoryfield

 ) select 
copymap(acopyaction,b2g(fieldrestrictionid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thepart

,thefield

,allowread

,allowmodify

,mandatoryfield

 from fieldrestriction
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists objectmode_copy
go

create procedure objectmode_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_objectmode cursor for
select objectmodeid from objectmode where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into objectmode 
 ( objectmodeid 
,parentstructrowid
,name

,defaultmode

,thecomment

 ) select 
copymap(acopyaction,b2g(objectmodeid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,defaultmode

,thecomment

 from objectmode
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_objectmode;
  set  fetch_done=false;
fetch copy_cursor_objectmode into aid;
while not fetch_done do 
    call structrestriction_copy(acursession,acopyaction,ainstanceid,aid);
    call methodrestriction_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldrestriction_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_objectmode into aid;
end while;

close copy_cursor_objectmode;
 end 
go
GO


drop procedure if exists typemenu_copy
go

create procedure typemenu_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into typemenu 
 ( typemenuid 
,parentstructrowid
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 ) select 
copymap(acopyaction,b2g(typemenuid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 from typemenu
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists instancevalidator_copy
go

create procedure instancevalidator_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into instancevalidator 
 ( instancevalidatorid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(instancevalidatorid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from instancevalidator
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists partparammap_copy
go

create procedure partparammap_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into partparammap 
 ( partparammapid 
,parentstructrowid
,fieldname

,paramname

,noedit

 ) select 
copymap(acopyaction,b2g(partparammapid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,fieldname

,paramname

,noedit

 from partparammap
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists partmenu_copy
go

create procedure partmenu_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_partmenu cursor for
select partmenuid from partmenu where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into partmenu 
 ( partmenuid 
,parentstructrowid
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 ) select 
copymap(acopyaction,b2g(partmenuid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 from partmenu
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_partmenu;
  set  fetch_done=false;
fetch copy_cursor_partmenu into aid;
while not fetch_done do 
    call partparammap_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_partmenu into aid;
end while;

close copy_cursor_partmenu;
 end 
go
GO


drop procedure if exists viewcolumn_copy
go

create procedure viewcolumn_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into viewcolumn 
 ( viewcolumnid 
,parentstructrowid
,sequence

,name

,the_alias

,frompart

,field

,aggregation

,expression

,forcombo

 ) select 
copymap(acopyaction,b2g(viewcolumnid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,sequence

,name

,the_alias

,frompart

,field

,aggregation

,expression

,forcombo

 from viewcolumn
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists partview_lnk_copy
go

create procedure partview_lnk_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into partview_lnk 
 ( partview_lnkid 
,parentstructrowid
,theview

,thejoinsource

,reftype

,thejoindestination

,handjoin

,seq

 ) select 
copymap(acopyaction,b2g(partview_lnkid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,theview

,thejoinsource

,reftype

,thejoindestination

,handjoin

,seq

 from partview_lnk
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists partview_copy
go

create procedure partview_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_partview cursor for
select partviewid from partview where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into partview 
 ( partviewid 
,parentstructrowid
,name

,the_alias

,forchoose

,filterfield0

,filterfield1

,filterfield2

,filterfield3

 ) select 
copymap(acopyaction,b2g(partviewid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,the_alias

,forchoose

,filterfield0

,filterfield1

,filterfield2

,filterfield3

 from partview
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_partview;
  set  fetch_done=false;
fetch copy_cursor_partview into aid;
while not fetch_done do 
    call viewcolumn_copy(acursession,acopyaction,ainstanceid,aid);
    call partview_lnk_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_partview into aid;
end while;

close copy_cursor_partview;
 end 
go
GO


drop procedure if exists validator_copy
go

create procedure validator_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into validator 
 ( validatorid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(validatorid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from validator
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists constraintfield_copy
go

create procedure constraintfield_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into constraintfield 
 ( constraintfieldid 
,parentstructrowid
,thefield

 ) select 
copymap(acopyaction,b2g(constraintfieldid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thefield

 from constraintfield
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists uniqueconstraint_copy
go

create procedure uniqueconstraint_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_uniqueconstraint cursor for
select uniqueconstraintid from uniqueconstraint where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into uniqueconstraint 
 ( uniqueconstraintid 
,parentstructrowid
,name

,perparent

,thecomment

 ) select 
copymap(acopyaction,b2g(uniqueconstraintid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,perparent

,thecomment

 from uniqueconstraint
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_uniqueconstraint;
  set  fetch_done=false;
fetch copy_cursor_uniqueconstraint into aid;
while not fetch_done do 
    call constraintfield_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_uniqueconstraint into aid;
end while;

close copy_cursor_uniqueconstraint;
 end 
go
GO


drop procedure if exists extenderinterface_copy
go

create procedure extenderinterface_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into extenderinterface 
 ( extenderinterfaceid 
,parentstructrowid
,thename

,targetplatform

,theobject

,theconfig

 ) select 
copymap(acopyaction,b2g(extenderinterfaceid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thename

,targetplatform

,theobject

,theconfig

 from extenderinterface
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fldextenders_copy
go

create procedure fldextenders_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fldextenders 
 ( fldextendersid 
,parentstructrowid
,thename

,targetplatform

,theobject

,theconfig

 ) select 
copymap(acopyaction,b2g(fldextendersid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thename

,targetplatform

,theobject

,theconfig

 from fldextenders
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fieldsrcdef_copy
go

create procedure fieldsrcdef_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldsrcdef 
 ( fieldsrcdefid 
,parentstructrowid
,provider

,connectionstring

,datasource

,idfield

,briefstring

,filterstring

,sortfield

,descriptionstring

,dontshowdialog

 ) select 
copymap(acopyaction,b2g(fieldsrcdefid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,provider

,connectionstring

,datasource

,idfield

,briefstring

,filterstring

,sortfield

,descriptionstring

,dontshowdialog

 from fieldsrcdef
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists dinamicfilterscript_copy
go

create procedure dinamicfilterscript_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into dinamicfilterscript 
 ( dinamicfilterscriptid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(dinamicfilterscriptid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from dinamicfilterscript
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fieldexpression_copy
go

create procedure fieldexpression_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldexpression 
 ( fieldexpressionid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(fieldexpressionid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from fieldexpression
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fieldvalidator_copy
go

create procedure fieldvalidator_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldvalidator 
 ( fieldvalidatorid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(fieldvalidatorid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from fieldvalidator
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fieldparammap_copy
go

create procedure fieldparammap_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldparammap 
 ( fieldparammapid 
,parentstructrowid
,fieldname

,paramname

,noedit

 ) select 
copymap(acopyaction,b2g(fieldparammapid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,fieldname

,paramname

,noedit

 from fieldparammap
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists fieldmenu_copy
go

create procedure fieldmenu_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_fieldmenu cursor for
select fieldmenuid from fieldmenu where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldmenu 
 ( fieldmenuid 
,parentstructrowid
,name

,caption

,tooltip

,actionid

,ismenuitem

,istoolbarbutton

,hotkey

 ) select 
copymap(acopyaction,b2g(fieldmenuid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,caption

,tooltip

,actionid

,ismenuitem

,istoolbarbutton

,hotkey

 from fieldmenu
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_fieldmenu;
  set  fetch_done=false;
fetch copy_cursor_fieldmenu into aid;
while not fetch_done do 
    call fieldparammap_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_fieldmenu into aid;
end while;

close copy_cursor_fieldmenu;
 end 
go
GO


drop procedure if exists field_copy
go

create procedure field_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_field cursor for
select fieldid from field where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into field 
 ( fieldid 
,parentstructrowid
,tabname

,fieldgroupbox

,sequence

,caption

,name

,fieldtype

,isbrief

,istabbrief

,allownull

,datasize

,referencetype

,reftotype

,reftopart

,thestyle

,internalreference

,createrefonly

,isautonumber

,thenumerator

,zonetemplate

,numberdatefield

,thecomment

,shablonbrief

,thenameclass

,themask

 ) select 
copymap(acopyaction,b2g(fieldid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,tabname

,fieldgroupbox

,sequence

,caption

,name

,fieldtype

,isbrief

,istabbrief

,allownull

,datasize

,referencetype

,reftotype

,reftopart

,thestyle

,internalreference

,createrefonly

,isautonumber

,thenumerator

,zonetemplate

,numberdatefield

,thecomment

,shablonbrief

,thenameclass

,themask

 from field
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_field;
  set  fetch_done=false;
fetch copy_cursor_field into aid;
while not fetch_done do 
    call fldextenders_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldsrcdef_copy(acursession,acopyaction,ainstanceid,aid);
    call dinamicfilterscript_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldexpression_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldvalidator_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldmenu_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_field into aid;
end while;

close copy_cursor_field;
 end 
go
GO


drop procedure if exists part_copy
go

create procedure part_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_part cursor for
select partid from part where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into part 
 ( partid 
,parentstructrowid
,parentrowid
,sequence

,parttype

,caption

,name

,the_comment

,nolog

,manualregister

,oncreate

,onsave

,onrun

,ondelete

,addbehaivor

,extenderobject

,shablonbrief

,rulebrief

,isjormalchange

,usearchiving

,integerpkey

,particoncls

 ) select 
copymap(acopyaction,b2g(partid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,copymap(acopyaction,b2g(parentrowid))
,sequence

,parttype

,caption

,name

,the_comment

,nolog

,manualregister

,oncreate

,onsave

,onrun

,ondelete

,addbehaivor

,extenderobject

,shablonbrief

,rulebrief

,isjormalchange

,usearchiving

,integerpkey

,particoncls

 from part
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_part;
  set  fetch_done=false;
fetch copy_cursor_part into aid;
while not fetch_done do 
    call partmenu_copy(acursession,acopyaction,ainstanceid,aid);
    call partview_copy(acursession,acopyaction,ainstanceid,aid);
    call validator_copy(acursession,acopyaction,ainstanceid,aid);
    call uniqueconstraint_copy(acursession,acopyaction,ainstanceid,aid);
    call extenderinterface_copy(acursession,acopyaction,ainstanceid,aid);
    call field_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_part into aid;
end while;

close copy_cursor_part;
 end 
go
GO


drop procedure if exists objecttype_copy
go

create procedure objecttype_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_objecttype cursor for
select objecttypeid from objecttype where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into objecttype 
 ( objecttypeid 
,instanceid
,package

,the_comment

,name

,issingleinstance

,chooseview

,onrun

,oncreate

,ondelete

,allowreftoobject

,allowsearch

,replicatype

,thecomment

,useownership

,usearchiving

,commitfullobject

,objiconcls

 ) select 
copymap(acopyaction,b2g(objecttypeid)) 
,copymap(acopyaction,b2g(instanceid))
,package

,the_comment

,name

,issingleinstance

,chooseview

,onrun

,oncreate

,ondelete

,allowreftoobject

,allowsearch

,replicatype

,thecomment

,useownership

,usearchiving

,commitfullobject

,objiconcls

 from objecttype
 where instanceid =g2b( ainstanceid); 
open copy_cursor_objecttype;
  set  fetch_done=false;
fetch copy_cursor_objecttype into aid;
while not fetch_done do 
    call objstatus_copy(acursession,acopyaction,ainstanceid,aid);
    call objectmode_copy(acursession,acopyaction,ainstanceid,aid);
    call typemenu_copy(acursession,acopyaction,ainstanceid,aid);
    call instancevalidator_copy(acursession,acopyaction,ainstanceid,aid);
    call part_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_objecttype into aid;
end while;

close copy_cursor_objecttype;
 end 
go
GO


drop procedure if exists objecttype_logger
go

create procedure objecttype_logger /*тип объекта (карточки)*/ (
 acursession varchar(38),
 aobjecttypeid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists objstatus_logger
go

create procedure objstatus_logger /*возможные логические состояния документа*/ (
 acursession varchar(38),
 aobjstatusid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists nextstate_logger
go

create procedure nextstate_logger /*матрица переходов */ (
 acursession varchar(38),
 anextstateid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists objectmode_logger
go

create procedure objectmode_logger /*режим работы*/ (
 acursession varchar(38),
 aobjectmodeid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists structrestriction_logger
go

create procedure structrestriction_logger /*ораничения на доступ к разделу документа*/ (
 acursession varchar(38),
 astructrestrictionid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists methodrestriction_logger
go

create procedure methodrestriction_logger /*ограничение на использование методов раздела*/ (
 acursession varchar(38),
 amethodrestrictionid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fieldrestriction_logger
go

create procedure fieldrestriction_logger /*ограничения на доступ к полям раздела*/ (
 acursession varchar(38),
 afieldrestrictionid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists typemenu_logger
go

create procedure typemenu_logger /*методы уровня типа*/ (
 acursession varchar(38),
 atypemenuid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists instancevalidator_logger
go

create procedure instancevalidator_logger /*проверка правильности для объекта в целом*/ (
 acursession varchar(38),
 ainstancevalidatorid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists part_logger
go

create procedure part_logger /*раздел объекта*/ (
 acursession varchar(38),
 apartid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists partmenu_logger
go

create procedure partmenu_logger /*методы уровня раздела*/ (
 acursession varchar(38),
 apartmenuid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists partparammap_logger
go

create procedure partparammap_logger /*отображение значений полей раздела на параметры метода*/ (
 acursession varchar(38),
 apartparammapid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists partview_logger
go

create procedure partview_logger /*вариант представления, который может использоваться для создания журнала*/ (
 acursession varchar(38),
 apartviewid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists viewcolumn_logger
go

create procedure viewcolumn_logger /*колонка пердставления*/ (
 acursession varchar(38),
 aviewcolumnid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists partview_lnk_logger
go

create procedure partview_lnk_logger /**/ (
 acursession varchar(38),
 apartview_lnkid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists validator_logger
go

create procedure validator_logger /*действия в впроцессе редактирования*/ (
 acursession varchar(38),
 avalidatorid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists uniqueconstraint_logger
go

create procedure uniqueconstraint_logger /*ограничение уникальности*/ (
 acursession varchar(38),
 auniqueconstraintid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists constraintfield_logger
go

create procedure constraintfield_logger /*поля ограничения*/ (
 acursession varchar(38),
 aconstraintfieldid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists extenderinterface_logger
go

create procedure extenderinterface_logger /**/ (
 acursession varchar(38),
 aextenderinterfaceid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists field_logger
go

create procedure field_logger /*поле*/ (
 acursession varchar(38),
 afieldid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fldextenders_logger
go

create procedure fldextenders_logger /**/ (
 acursession varchar(38),
 afldextendersid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fieldsrcdef_logger
go

create procedure fieldsrcdef_logger /*описание источника данных для полей типа referencesql */ (
 acursession varchar(38),
 afieldsrcdefid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists dinamicfilterscript_logger
go

create procedure dinamicfilterscript_logger /*выражение для построения дополнительного фильтра для ссылочных полей*/ (
 acursession varchar(38),
 adinamicfilterscriptid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fieldexpression_logger
go

create procedure fieldexpression_logger /*выражение для вычисления поля
или значение по умолчанию*/ (
 acursession varchar(38),
 afieldexpressionid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fieldvalidator_logger
go

create procedure fieldvalidator_logger /*логика взаимосвязей на форме при изменении поля*/ (
 acursession varchar(38),
 afieldvalidatorid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fieldmenu_logger
go

create procedure fieldmenu_logger /*методы, ассоциированные с полем*/ (
 acursession varchar(38),
 afieldmenuid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fieldparammap_logger
go

create procedure fieldparammap_logger /*отображение значений на параметры метода*/ (
 acursession varchar(38),
 afieldparammapid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists objecttype_parent
go
create procedure objecttype_parent /* тип объекта (карточки)*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from objecttype where  objecttypeid=arowid;
 end 
go
GO


drop procedure if exists objecttype_islocked
go
create procedure objecttype_islocked /* тип объекта (карточки) */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from objecttype where objecttypeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists objecttype_lock
go
create procedure objecttype_lock /* тип объекта (карточки) */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call objecttype_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update objecttype set lockuserid =auserid ,locksessionid=null  where objecttypeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update objecttype set lockuserid=null ,locksessionid =acursession  where objecttypeid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists objecttype_unlock
go
create procedure objecttype_unlock /* тип объекта (карточки) */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call objecttype_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update objecttype set lockuserid =null  where objecttypeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update objecttype set locksessionid =null  where objecttypeid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS objecttype_client_trigger
GO

create procedure objecttype_client_trigger  (
 acursession varchar(38),
 aOBJECTTYPEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists objstatus_parent
go
create procedure objstatus_parent /* возможные логические состояния документа*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from objstatus where  objstatusid=arowid;
  set aparenttable = 'objecttype';
 end 
go
GO


drop procedure if exists objstatus_islocked
go
create procedure objstatus_islocked /* возможные логические состояния документа */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from objstatus where objstatusid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists objstatus_lock
go
create procedure objstatus_lock /* возможные логические состояния документа */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call objstatus_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update objstatus set lockuserid =auserid ,locksessionid=null  where objstatusid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update objstatus set lockuserid=null ,locksessionid =acursession  where objstatusid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists objstatus_unlock
go
create procedure objstatus_unlock /* возможные логические состояния документа */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call objstatus_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update objstatus set lockuserid =null  where objstatusid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update objstatus set locksessionid =null  where objstatusid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS objstatus_client_trigger
GO

create procedure objstatus_client_trigger  (
 acursession varchar(38),
 aOBJSTATUSid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists nextstate_parent
go
create procedure nextstate_parent /* матрица переходов */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from nextstate where  nextstateid=arowid;
  set aparenttable = 'objstatus';
 end 
go
GO


drop procedure if exists nextstate_islocked
go
create procedure nextstate_islocked /* матрица переходов  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from nextstate where nextstateid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists nextstate_lock
go
create procedure nextstate_lock /* матрица переходов  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call nextstate_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update nextstate set lockuserid =auserid ,locksessionid=null  where nextstateid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update nextstate set lockuserid=null ,locksessionid =acursession  where nextstateid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists nextstate_unlock
go
create procedure nextstate_unlock /* матрица переходов  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call nextstate_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update nextstate set lockuserid =null  where nextstateid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update nextstate set locksessionid =null  where nextstateid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS nextstate_client_trigger
GO

create procedure nextstate_client_trigger  (
 acursession varchar(38),
 aNEXTSTATEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists objectmode_parent
go
create procedure objectmode_parent /* режим работы*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from objectmode where  objectmodeid=arowid;
  set aparenttable = 'objecttype';
 end 
go
GO


drop procedure if exists objectmode_islocked
go
create procedure objectmode_islocked /* режим работы */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from objectmode where objectmodeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists objectmode_lock
go
create procedure objectmode_lock /* режим работы */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call objectmode_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update objectmode set lockuserid =auserid ,locksessionid=null  where objectmodeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update objectmode set lockuserid=null ,locksessionid =acursession  where objectmodeid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists objectmode_unlock
go
create procedure objectmode_unlock /* режим работы */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call objectmode_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update objectmode set lockuserid =null  where objectmodeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update objectmode set locksessionid =null  where objectmodeid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS objectmode_client_trigger
GO

create procedure objectmode_client_trigger  (
 acursession varchar(38),
 aOBJECTMODEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists structrestriction_parent
go
create procedure structrestriction_parent /* ораничения на доступ к разделу документа*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from structrestriction where  structrestrictionid=arowid;
  set aparenttable = 'objectmode';
 end 
go
GO


drop procedure if exists structrestriction_islocked
go
create procedure structrestriction_islocked /* ораничения на доступ к разделу документа */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from structrestriction where structrestrictionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists structrestriction_lock
go
create procedure structrestriction_lock /* ораничения на доступ к разделу документа */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call structrestriction_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update structrestriction set lockuserid =auserid ,locksessionid=null  where structrestrictionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update structrestriction set lockuserid=null ,locksessionid =acursession  where structrestrictionid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists structrestriction_unlock
go
create procedure structrestriction_unlock /* ораничения на доступ к разделу документа */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call structrestriction_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update structrestriction set lockuserid =null  where structrestrictionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update structrestriction set locksessionid =null  where structrestrictionid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS structrestriction_client_trigger
GO

create procedure structrestriction_client_trigger  (
 acursession varchar(38),
 aSTRUCTRESTRICTIONid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists methodrestriction_parent
go
create procedure methodrestriction_parent /* ограничение на использование методов раздела*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from methodrestriction where  methodrestrictionid=arowid;
  set aparenttable = 'objectmode';
 end 
go
GO


drop procedure if exists methodrestriction_islocked
go
create procedure methodrestriction_islocked /* ограничение на использование методов раздела */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from methodrestriction where methodrestrictionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists methodrestriction_lock
go
create procedure methodrestriction_lock /* ограничение на использование методов раздела */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call methodrestriction_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update methodrestriction set lockuserid =auserid ,locksessionid=null  where methodrestrictionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update methodrestriction set lockuserid=null ,locksessionid =acursession  where methodrestrictionid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists methodrestriction_unlock
go
create procedure methodrestriction_unlock /* ограничение на использование методов раздела */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call methodrestriction_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update methodrestriction set lockuserid =null  where methodrestrictionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update methodrestriction set locksessionid =null  where methodrestrictionid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS methodrestriction_client_trigger
GO

create procedure methodrestriction_client_trigger  (
 acursession varchar(38),
 aMETHODRESTRICTIONid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fieldrestriction_parent
go
create procedure fieldrestriction_parent /* ограничения на доступ к полям раздела*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldrestriction where  fieldrestrictionid=arowid;
  set aparenttable = 'objectmode';
 end 
go
GO


drop procedure if exists fieldrestriction_islocked
go
create procedure fieldrestriction_islocked /* ограничения на доступ к полям раздела */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldrestriction where fieldrestrictionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fieldrestriction_lock
go
create procedure fieldrestriction_lock /* ограничения на доступ к полям раздела */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldrestriction_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldrestriction set lockuserid =auserid ,locksessionid=null  where fieldrestrictionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldrestriction set lockuserid=null ,locksessionid =acursession  where fieldrestrictionid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fieldrestriction_unlock
go
create procedure fieldrestriction_unlock /* ограничения на доступ к полям раздела */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldrestriction_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldrestriction set lockuserid =null  where fieldrestrictionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldrestriction set locksessionid =null  where fieldrestrictionid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fieldrestriction_client_trigger
GO

create procedure fieldrestriction_client_trigger  (
 acursession varchar(38),
 aFIELDRESTRICTIONid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists typemenu_parent
go
create procedure typemenu_parent /* методы уровня типа*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from typemenu where  typemenuid=arowid;
  set aparenttable = 'objecttype';
 end 
go
GO


drop procedure if exists typemenu_islocked
go
create procedure typemenu_islocked /* методы уровня типа */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from typemenu where typemenuid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists typemenu_lock
go
create procedure typemenu_lock /* методы уровня типа */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call typemenu_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update typemenu set lockuserid =auserid ,locksessionid=null  where typemenuid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update typemenu set lockuserid=null ,locksessionid =acursession  where typemenuid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists typemenu_unlock
go
create procedure typemenu_unlock /* методы уровня типа */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call typemenu_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update typemenu set lockuserid =null  where typemenuid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update typemenu set locksessionid =null  where typemenuid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS typemenu_client_trigger
GO

create procedure typemenu_client_trigger  (
 acursession varchar(38),
 aTYPEMENUid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists instancevalidator_parent
go
create procedure instancevalidator_parent /* проверка правильности для объекта в целом*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from instancevalidator where  instancevalidatorid=arowid;
  set aparenttable = 'objecttype';
 end 
go
GO


drop procedure if exists instancevalidator_islocked
go
create procedure instancevalidator_islocked /* проверка правильности для объекта в целом */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from instancevalidator where instancevalidatorid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists instancevalidator_lock
go
create procedure instancevalidator_lock /* проверка правильности для объекта в целом */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call instancevalidator_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update instancevalidator set lockuserid =auserid ,locksessionid=null  where instancevalidatorid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update instancevalidator set lockuserid=null ,locksessionid =acursession  where instancevalidatorid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists instancevalidator_unlock
go
create procedure instancevalidator_unlock /* проверка правильности для объекта в целом */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call instancevalidator_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update instancevalidator set lockuserid =null  where instancevalidatorid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update instancevalidator set locksessionid =null  where instancevalidatorid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS instancevalidator_client_trigger
GO

create procedure instancevalidator_client_trigger  (
 acursession varchar(38),
 aINSTANCEVALIDATORid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists part_parent
go
create procedure part_parent /* раздел объекта*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from part where  partid=arowid;
  set aparenttable = 'objecttype';
 end 
go
GO


drop procedure if exists part_islocked
go
create procedure part_islocked /* раздел объекта */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from part where partid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists part_lock
go
create procedure part_lock /* раздел объекта */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call part_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update part set lockuserid =auserid ,locksessionid=null  where partid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update part set lockuserid=null ,locksessionid =acursession  where partid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists part_unlock
go
create procedure part_unlock /* раздел объекта */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call part_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update part set lockuserid =null  where partid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update part set locksessionid =null  where partid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS part_client_trigger
GO

create procedure part_client_trigger  (
 acursession varchar(38),
 aPARTid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists partmenu_parent
go
create procedure partmenu_parent /* методы уровня раздела*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from partmenu where  partmenuid=arowid;
  set aparenttable = 'part';
 end 
go
GO


drop procedure if exists partmenu_islocked
go
create procedure partmenu_islocked /* методы уровня раздела */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from partmenu where partmenuid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists partmenu_lock
go
create procedure partmenu_lock /* методы уровня раздела */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call partmenu_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update partmenu set lockuserid =auserid ,locksessionid=null  where partmenuid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update partmenu set lockuserid=null ,locksessionid =acursession  where partmenuid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists partmenu_unlock
go
create procedure partmenu_unlock /* методы уровня раздела */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call partmenu_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update partmenu set lockuserid =null  where partmenuid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update partmenu set locksessionid =null  where partmenuid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS partmenu_client_trigger
GO

create procedure partmenu_client_trigger  (
 acursession varchar(38),
 aPARTMENUid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists partparammap_parent
go
create procedure partparammap_parent /* отображение значений полей раздела на параметры метода*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from partparammap where  partparammapid=arowid;
  set aparenttable = 'partmenu';
 end 
go
GO


drop procedure if exists partparammap_islocked
go
create procedure partparammap_islocked /* отображение значений полей раздела на параметры метода */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from partparammap where partparammapid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists partparammap_lock
go
create procedure partparammap_lock /* отображение значений полей раздела на параметры метода */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call partparammap_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update partparammap set lockuserid =auserid ,locksessionid=null  where partparammapid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update partparammap set lockuserid=null ,locksessionid =acursession  where partparammapid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists partparammap_unlock
go
create procedure partparammap_unlock /* отображение значений полей раздела на параметры метода */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call partparammap_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update partparammap set lockuserid =null  where partparammapid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update partparammap set locksessionid =null  where partparammapid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS partparammap_client_trigger
GO

create procedure partparammap_client_trigger  (
 acursession varchar(38),
 aPARTPARAMMAPid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists partview_parent
go
create procedure partview_parent /* вариант представления, который может использоваться для создания журнала*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from partview where  partviewid=arowid;
  set aparenttable = 'part';
 end 
go
GO


drop procedure if exists partview_islocked
go
create procedure partview_islocked /* вариант представления, который может использоваться для создания журнала */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from partview where partviewid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists partview_lock
go
create procedure partview_lock /* вариант представления, который может использоваться для создания журнала */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call partview_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update partview set lockuserid =auserid ,locksessionid=null  where partviewid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update partview set lockuserid=null ,locksessionid =acursession  where partviewid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists partview_unlock
go
create procedure partview_unlock /* вариант представления, который может использоваться для создания журнала */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call partview_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update partview set lockuserid =null  where partviewid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update partview set locksessionid =null  where partviewid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS partview_client_trigger
GO

create procedure partview_client_trigger  (
 acursession varchar(38),
 aPARTVIEWid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists viewcolumn_parent
go
create procedure viewcolumn_parent /* колонка пердставления*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from viewcolumn where  viewcolumnid=arowid;
  set aparenttable = 'partview';
 end 
go
GO


drop procedure if exists viewcolumn_islocked
go
create procedure viewcolumn_islocked /* колонка пердставления */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from viewcolumn where viewcolumnid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists viewcolumn_lock
go
create procedure viewcolumn_lock /* колонка пердставления */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call viewcolumn_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update viewcolumn set lockuserid =auserid ,locksessionid=null  where viewcolumnid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update viewcolumn set lockuserid=null ,locksessionid =acursession  where viewcolumnid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists viewcolumn_unlock
go
create procedure viewcolumn_unlock /* колонка пердставления */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call viewcolumn_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update viewcolumn set lockuserid =null  where viewcolumnid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update viewcolumn set locksessionid =null  where viewcolumnid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS viewcolumn_client_trigger
GO

create procedure viewcolumn_client_trigger  (
 acursession varchar(38),
 aViewColumnid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists partview_lnk_parent
go
create procedure partview_lnk_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from partview_lnk where  partview_lnkid=arowid;
  set aparenttable = 'partview';
 end 
go
GO


drop procedure if exists partview_lnk_islocked
go
create procedure partview_lnk_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from partview_lnk where partview_lnkid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists partview_lnk_lock
go
create procedure partview_lnk_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call partview_lnk_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update partview_lnk set lockuserid =auserid ,locksessionid=null  where partview_lnkid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update partview_lnk set lockuserid=null ,locksessionid =acursession  where partview_lnkid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists partview_lnk_unlock
go
create procedure partview_lnk_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call partview_lnk_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update partview_lnk set lockuserid =null  where partview_lnkid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update partview_lnk set locksessionid =null  where partview_lnkid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS partview_lnk_client_trigger
GO

create procedure partview_lnk_client_trigger  (
 acursession varchar(38),
 aPARTVIEW_LNKid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists validator_parent
go
create procedure validator_parent /* действия в впроцессе редактирования*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from validator where  validatorid=arowid;
  set aparenttable = 'part';
 end 
go
GO


drop procedure if exists validator_islocked
go
create procedure validator_islocked /* действия в впроцессе редактирования */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from validator where validatorid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists validator_lock
go
create procedure validator_lock /* действия в впроцессе редактирования */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call validator_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update validator set lockuserid =auserid ,locksessionid=null  where validatorid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update validator set lockuserid=null ,locksessionid =acursession  where validatorid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists validator_unlock
go
create procedure validator_unlock /* действия в впроцессе редактирования */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call validator_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update validator set lockuserid =null  where validatorid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update validator set locksessionid =null  where validatorid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS validator_client_trigger
GO

create procedure validator_client_trigger  (
 acursession varchar(38),
 aVALIDATORid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists uniqueconstraint_parent
go
create procedure uniqueconstraint_parent /* ограничение уникальности*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from uniqueconstraint where  uniqueconstraintid=arowid;
  set aparenttable = 'part';
 end 
go
GO


drop procedure if exists uniqueconstraint_islocked
go
create procedure uniqueconstraint_islocked /* ограничение уникальности */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from uniqueconstraint where uniqueconstraintid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists uniqueconstraint_lock
go
create procedure uniqueconstraint_lock /* ограничение уникальности */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call uniqueconstraint_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update uniqueconstraint set lockuserid =auserid ,locksessionid=null  where uniqueconstraintid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update uniqueconstraint set lockuserid=null ,locksessionid =acursession  where uniqueconstraintid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists uniqueconstraint_unlock
go
create procedure uniqueconstraint_unlock /* ограничение уникальности */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call uniqueconstraint_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update uniqueconstraint set lockuserid =null  where uniqueconstraintid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update uniqueconstraint set locksessionid =null  where uniqueconstraintid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS uniqueconstraint_client_trigger
GO

create procedure uniqueconstraint_client_trigger  (
 acursession varchar(38),
 aUNIQUECONSTRAINTid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists constraintfield_parent
go
create procedure constraintfield_parent /* поля ограничения*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from constraintfield where  constraintfieldid=arowid;
  set aparenttable = 'uniqueconstraint';
 end 
go
GO


drop procedure if exists constraintfield_islocked
go
create procedure constraintfield_islocked /* поля ограничения */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from constraintfield where constraintfieldid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists constraintfield_lock
go
create procedure constraintfield_lock /* поля ограничения */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call constraintfield_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update constraintfield set lockuserid =auserid ,locksessionid=null  where constraintfieldid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update constraintfield set lockuserid=null ,locksessionid =acursession  where constraintfieldid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists constraintfield_unlock
go
create procedure constraintfield_unlock /* поля ограничения */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call constraintfield_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update constraintfield set lockuserid =null  where constraintfieldid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update constraintfield set locksessionid =null  where constraintfieldid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS constraintfield_client_trigger
GO

create procedure constraintfield_client_trigger  (
 acursession varchar(38),
 aCONSTRAINTFIELDid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists extenderinterface_parent
go
create procedure extenderinterface_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from extenderinterface where  extenderinterfaceid=arowid;
  set aparenttable = 'part';
 end 
go
GO


drop procedure if exists extenderinterface_islocked
go
create procedure extenderinterface_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from extenderinterface where extenderinterfaceid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists extenderinterface_lock
go
create procedure extenderinterface_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call extenderinterface_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update extenderinterface set lockuserid =auserid ,locksessionid=null  where extenderinterfaceid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update extenderinterface set lockuserid=null ,locksessionid =acursession  where extenderinterfaceid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists extenderinterface_unlock
go
create procedure extenderinterface_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call extenderinterface_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update extenderinterface set lockuserid =null  where extenderinterfaceid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update extenderinterface set locksessionid =null  where extenderinterfaceid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS extenderinterface_client_trigger
GO

create procedure extenderinterface_client_trigger  (
 acursession varchar(38),
 aExtenderInterfaceid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists field_parent
go
create procedure field_parent /* поле*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from field where  fieldid=arowid;
  set aparenttable = 'part';
 end 
go
GO


drop procedure if exists field_islocked
go
create procedure field_islocked /* поле */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from field where fieldid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists field_lock
go
create procedure field_lock /* поле */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call field_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update field set lockuserid =auserid ,locksessionid=null  where fieldid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update field set lockuserid=null ,locksessionid =acursession  where fieldid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists field_unlock
go
create procedure field_unlock /* поле */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call field_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update field set lockuserid =null  where fieldid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update field set locksessionid =null  where fieldid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS field_client_trigger
GO

create procedure field_client_trigger  (
 acursession varchar(38),
 aFIELDid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fldextenders_parent
go
create procedure fldextenders_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fldextenders where  fldextendersid=arowid;
  set aparenttable = 'field';
 end 
go
GO


drop procedure if exists fldextenders_islocked
go
create procedure fldextenders_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fldextenders where fldextendersid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fldextenders_lock
go
create procedure fldextenders_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fldextenders_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fldextenders set lockuserid =auserid ,locksessionid=null  where fldextendersid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fldextenders set lockuserid=null ,locksessionid =acursession  where fldextendersid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fldextenders_unlock
go
create procedure fldextenders_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fldextenders_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fldextenders set lockuserid =null  where fldextendersid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fldextenders set locksessionid =null  where fldextendersid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fldextenders_client_trigger
GO

create procedure fldextenders_client_trigger  (
 acursession varchar(38),
 aFldExtendersid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fieldsrcdef_parent
go
create procedure fieldsrcdef_parent /* описание источника данных для полей типа referencesql */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldsrcdef where  fieldsrcdefid=arowid;
  set aparenttable = 'field';
 end 
go
GO


drop procedure if exists fieldsrcdef_islocked
go
create procedure fieldsrcdef_islocked /* описание источника данных для полей типа referencesql  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldsrcdef where fieldsrcdefid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fieldsrcdef_lock
go
create procedure fieldsrcdef_lock /* описание источника данных для полей типа referencesql  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldsrcdef_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldsrcdef set lockuserid =auserid ,locksessionid=null  where fieldsrcdefid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldsrcdef set lockuserid=null ,locksessionid =acursession  where fieldsrcdefid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fieldsrcdef_unlock
go
create procedure fieldsrcdef_unlock /* описание источника данных для полей типа referencesql  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldsrcdef_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldsrcdef set lockuserid =null  where fieldsrcdefid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldsrcdef set locksessionid =null  where fieldsrcdefid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fieldsrcdef_client_trigger
GO

create procedure fieldsrcdef_client_trigger  (
 acursession varchar(38),
 aFIELDSRCDEFid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists dinamicfilterscript_parent
go
create procedure dinamicfilterscript_parent /* выражение для построения дополнительного фильтра для ссылочных полей*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from dinamicfilterscript where  dinamicfilterscriptid=arowid;
  set aparenttable = 'field';
 end 
go
GO


drop procedure if exists dinamicfilterscript_islocked
go
create procedure dinamicfilterscript_islocked /* выражение для построения дополнительного фильтра для ссылочных полей */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from dinamicfilterscript where dinamicfilterscriptid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists dinamicfilterscript_lock
go
create procedure dinamicfilterscript_lock /* выражение для построения дополнительного фильтра для ссылочных полей */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call dinamicfilterscript_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update dinamicfilterscript set lockuserid =auserid ,locksessionid=null  where dinamicfilterscriptid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update dinamicfilterscript set lockuserid=null ,locksessionid =acursession  where dinamicfilterscriptid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists dinamicfilterscript_unlock
go
create procedure dinamicfilterscript_unlock /* выражение для построения дополнительного фильтра для ссылочных полей */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call dinamicfilterscript_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update dinamicfilterscript set lockuserid =null  where dinamicfilterscriptid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update dinamicfilterscript set locksessionid =null  where dinamicfilterscriptid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS dinamicfilterscript_client_trigger
GO

create procedure dinamicfilterscript_client_trigger  (
 acursession varchar(38),
 aDINAMICFILTERSCRIPTid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fieldexpression_parent
go
create procedure fieldexpression_parent /* выражение для вычисления поля
или значение по умолчанию*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldexpression where  fieldexpressionid=arowid;
  set aparenttable = 'field';
 end 
go
GO


drop procedure if exists fieldexpression_islocked
go
create procedure fieldexpression_islocked /* выражение для вычисления поля
или значение по умолчанию */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldexpression where fieldexpressionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fieldexpression_lock
go
create procedure fieldexpression_lock /* выражение для вычисления поля
или значение по умолчанию */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldexpression_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldexpression set lockuserid =auserid ,locksessionid=null  where fieldexpressionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldexpression set lockuserid=null ,locksessionid =acursession  where fieldexpressionid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fieldexpression_unlock
go
create procedure fieldexpression_unlock /* выражение для вычисления поля
или значение по умолчанию */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldexpression_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldexpression set lockuserid =null  where fieldexpressionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldexpression set locksessionid =null  where fieldexpressionid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fieldexpression_client_trigger
GO

create procedure fieldexpression_client_trigger  (
 acursession varchar(38),
 aFIELDEXPRESSIONid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fieldvalidator_parent
go
create procedure fieldvalidator_parent /* логика взаимосвязей на форме при изменении поля*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldvalidator where  fieldvalidatorid=arowid;
  set aparenttable = 'field';
 end 
go
GO


drop procedure if exists fieldvalidator_islocked
go
create procedure fieldvalidator_islocked /* логика взаимосвязей на форме при изменении поля */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldvalidator where fieldvalidatorid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fieldvalidator_lock
go
create procedure fieldvalidator_lock /* логика взаимосвязей на форме при изменении поля */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldvalidator_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldvalidator set lockuserid =auserid ,locksessionid=null  where fieldvalidatorid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldvalidator set lockuserid=null ,locksessionid =acursession  where fieldvalidatorid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fieldvalidator_unlock
go
create procedure fieldvalidator_unlock /* логика взаимосвязей на форме при изменении поля */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldvalidator_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldvalidator set lockuserid =null  where fieldvalidatorid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldvalidator set locksessionid =null  where fieldvalidatorid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fieldvalidator_client_trigger
GO

create procedure fieldvalidator_client_trigger  (
 acursession varchar(38),
 aFIELDVALIDATORid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fieldmenu_parent
go
create procedure fieldmenu_parent /* методы, ассоциированные с полем*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldmenu where  fieldmenuid=arowid;
  set aparenttable = 'field';
 end 
go
GO


drop procedure if exists fieldmenu_islocked
go
create procedure fieldmenu_islocked /* методы, ассоциированные с полем */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldmenu where fieldmenuid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fieldmenu_lock
go
create procedure fieldmenu_lock /* методы, ассоциированные с полем */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldmenu_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldmenu set lockuserid =auserid ,locksessionid=null  where fieldmenuid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldmenu set lockuserid=null ,locksessionid =acursession  where fieldmenuid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fieldmenu_unlock
go
create procedure fieldmenu_unlock /* методы, ассоциированные с полем */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldmenu_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldmenu set lockuserid =null  where fieldmenuid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldmenu set locksessionid =null  where fieldmenuid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fieldmenu_client_trigger
GO

create procedure fieldmenu_client_trigger  (
 acursession varchar(38),
 aFIELDMENUid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fieldparammap_parent
go
create procedure fieldparammap_parent /* отображение значений на параметры метода*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldparammap where  fieldparammapid=arowid;
  set aparenttable = 'fieldmenu';
 end 
go
GO


drop procedure if exists fieldparammap_islocked
go
create procedure fieldparammap_islocked /* отображение значений на параметры метода */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldparammap where fieldparammapid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fieldparammap_lock
go
create procedure fieldparammap_lock /* отображение значений на параметры метода */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldparammap_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldparammap set lockuserid =auserid ,locksessionid=null  where fieldparammapid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldparammap set lockuserid=null ,locksessionid =acursession  where fieldparammapid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fieldparammap_unlock
go
create procedure fieldparammap_unlock /* отображение значений на параметры метода */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldparammap_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldparammap set lockuserid =null  where fieldparammapid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldparammap set locksessionid =null  where fieldparammapid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fieldparammap_client_trigger
GO

create procedure fieldparammap_client_trigger  (
 acursession varchar(38),
 aFIELDPARAMMAPid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists mtzapp_brief
go

create procedure mtzapp_brief  (
 acursession varchar(38),
 amtzappid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if amtzappid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from mtzapp where mtzappid=g2b(amtzappid);
 if  aec &gt;0 then
   set abrief=mtzapp_brief_f(g2b(amtzappid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists mtzapp_delete
go

create procedure mtzapp_delete /*группа взаимосвязных документов*/ (
 acursession varchar(38),
 amtzappid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzapp where mtzappid=g2b(amtzappid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=mtzapp' result;
    leave body;
  end if;
 call mtzapp_logger(acursession,amtzappid) ; 
  delete from  mtzapp 
  where  mtzappid = g2b(amtzappid) ;
  delete from num_values where ownerpartname='mtzapp' and ownerrowid=g2b(amtzappid);
  end if;
    select 'ok' result;
 end 
go
GO

/*приложение*/

drop procedure if exists mtzapp_save
go

create procedure mtzapp_save /*группа взаимосвязных документов*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 amtzappid varchar(38)
,aname
 varchar (255)/* название *//* название */
,adbname
 varchar (64)/* база данных *//* база данных */
,athecomment
 text/* описание *//* описание */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzapp where mtzappid=g2b(amtzappid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=mtzapp' result;
    leave body;
  end if;
 start transaction ; 
 call mtzapp_logger(acursession,amtzappid) ; 
 update  mtzapp set changestamp=now() 
,
  name=aname
,
  dbname=adbname
,
  thecomment=athecomment
  where  mtzappid = g2b(amtzappid) ;


call mtzapp_client_trigger(acursession,amtzappid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=mtzapp' result;
    leave body;
  end if;
 start transaction;  
 insert into   mtzapp
 (  changestamp,mtzappid 
,instanceid
,name

,dbname

,thecomment

 ) values (now(), g2b(amtzappid) 
,g2b(ainstanceid)
,aname

,adbname

,athecomment

 ) ;


call mtzapp_client_trigger(acursession,amtzappid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists parentpackage_brief
go

create procedure parentpackage_brief  (
 acursession varchar(38),
 aparentpackageid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aparentpackageid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from parentpackage where parentpackageid=g2b(aparentpackageid);
 if  aec &gt;0 then
   set abrief=parentpackage_brief_f(g2b(aparentpackageid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists parentpackage_delete
go

create procedure parentpackage_delete /*приложения от которых зависит данное приложение*/ (
 acursession varchar(38),
 aparentpackageid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from parentpackage where parentpackageid=g2b(aparentpackageid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=parentpackage' result;
    leave body;
  end if;
 call parentpackage_logger(acursession,aparentpackageid) ; 
  delete from  parentpackage 
  where  parentpackageid = g2b(aparentpackageid) ;
  delete from num_values where ownerpartname='parentpackage' and ownerrowid=g2b(aparentpackageid);
  end if;
    select 'ok' result;
 end 
go
GO

/*обязательные приложения*/

drop procedure if exists parentpackage_save
go

create procedure parentpackage_save /*приложения от которых зависит данное приложение*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aparentpackageid varchar(38)
,apackage varchar(38)/* приложение *//* приложение */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from parentpackage where parentpackageid=g2b(aparentpackageid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=parentpackage' result;
    leave body;
  end if;
 start transaction ; 
 call parentpackage_logger(acursession,aparentpackageid) ; 
 update  parentpackage set changestamp=now() 
,
  package=g2b(apackage)
  where  parentpackageid = g2b(aparentpackageid) ;


call parentpackage_client_trigger(acursession,aparentpackageid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=parentpackage' result;
    leave body;
  end if;
 start transaction;  
 insert into   parentpackage
 (  changestamp,parentpackageid 
,parentstructrowid
,package

 ) values (now(), g2b(aparentpackageid) 
,g2b(aparentstructrowid)
,g2b(apackage)

 ) ;


call parentpackage_client_trigger(acursession,aparentpackageid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists parentpackage_copy
go

create procedure parentpackage_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into parentpackage 
 ( parentpackageid 
,parentstructrowid
,package

 ) select 
copymap(acopyaction,b2g(parentpackageid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,package

 from parentpackage
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists mtzapp_copy
go

create procedure mtzapp_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_mtzapp cursor for
select mtzappid from mtzapp where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into mtzapp 
 ( mtzappid 
,instanceid
,name

,dbname

,thecomment

 ) select 
copymap(acopyaction,b2g(mtzappid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,dbname

,thecomment

 from mtzapp
 where instanceid =g2b( ainstanceid); 
open copy_cursor_mtzapp;
  set  fetch_done=false;
fetch copy_cursor_mtzapp into aid;
while not fetch_done do 
    call parentpackage_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_mtzapp into aid;
end while;

close copy_cursor_mtzapp;
 end 
go
GO


drop procedure if exists mtzapp_logger
go

create procedure mtzapp_logger /*группа взаимосвязных документов*/ (
 acursession varchar(38),
 amtzappid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists parentpackage_logger
go

create procedure parentpackage_logger /*приложения от которых зависит данное приложение*/ (
 acursession varchar(38),
 aparentpackageid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists mtzapp_parent
go
create procedure mtzapp_parent /* группа взаимосвязных документов*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from mtzapp where  mtzappid=arowid;
 end 
go
GO


drop procedure if exists mtzapp_islocked
go
create procedure mtzapp_islocked /* группа взаимосвязных документов */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from mtzapp where mtzappid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists mtzapp_lock
go
create procedure mtzapp_lock /* группа взаимосвязных документов */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call mtzapp_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update mtzapp set lockuserid =auserid ,locksessionid=null  where mtzappid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update mtzapp set lockuserid=null ,locksessionid =acursession  where mtzappid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists mtzapp_unlock
go
create procedure mtzapp_unlock /* группа взаимосвязных документов */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call mtzapp_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update mtzapp set lockuserid =null  where mtzappid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update mtzapp set locksessionid =null  where mtzappid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS mtzapp_client_trigger
GO

create procedure mtzapp_client_trigger  (
 acursession varchar(38),
 aMTZAPPid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists parentpackage_parent
go
create procedure parentpackage_parent /* приложения от которых зависит данное приложение*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from parentpackage where  parentpackageid=arowid;
  set aparenttable = 'mtzapp';
 end 
go
GO


drop procedure if exists parentpackage_islocked
go
create procedure parentpackage_islocked /* приложения от которых зависит данное приложение */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from parentpackage where parentpackageid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists parentpackage_lock
go
create procedure parentpackage_lock /* приложения от которых зависит данное приложение */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call parentpackage_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update parentpackage set lockuserid =auserid ,locksessionid=null  where parentpackageid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update parentpackage set lockuserid=null ,locksessionid =acursession  where parentpackageid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists parentpackage_unlock
go
create procedure parentpackage_unlock /* приложения от которых зависит данное приложение */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call parentpackage_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update parentpackage set lockuserid =null  where parentpackageid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update parentpackage set locksessionid =null  where parentpackageid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS parentpackage_client_trigger
GO

create procedure parentpackage_client_trigger  (
 acursession varchar(38),
 aParentPackageid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists journalcolumn_brief
go

create procedure journalcolumn_brief  (
 acursession varchar(38),
 ajournalcolumnid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ajournalcolumnid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from journalcolumn where journalcolumnid=g2b(ajournalcolumnid);
 if  aec &gt;0 then
   set abrief=journalcolumn_brief_f(g2b(ajournalcolumnid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists journalcolumn_delete
go

create procedure journalcolumn_delete /*колонки журнала*/ (
 acursession varchar(38),
 ajournalcolumnid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journalcolumn where journalcolumnid=g2b(ajournalcolumnid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=journalcolumn' result;
    leave body;
  end if;
 call journalcolumn_logger(acursession,ajournalcolumnid) ; 
  delete from  journalcolumn 
  where  journalcolumnid = g2b(ajournalcolumnid) ;
  delete from num_values where ownerpartname='journalcolumn' and ownerrowid=g2b(ajournalcolumnid);
  end if;
    select 'ok' result;
 end 
go
GO

/*колонки журнала*/

drop procedure if exists journalcolumn_save
go

create procedure journalcolumn_save /*колонки журнала*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 ajournalcolumnid varchar(38)
,asequence
 integer/* последовательность *//* последовательность */
,aname
 varchar (255)/* название *//* название */
,acolumnalignment
 integer/* выравнивание *//* выравнивание */
,acolsort
 integer/* сортировка колонки *//* сортировка колонки */
,agroupaggregation
 integer/* аггрегация при группировке *//* аггрегация при группировке */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journalcolumn where journalcolumnid=g2b(ajournalcolumnid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=journalcolumn' result;
    leave body;
  end if;
 start transaction ; 
 call journalcolumn_logger(acursession,ajournalcolumnid) ; 
 update  journalcolumn set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  columnalignment=acolumnalignment
,
  colsort=acolsort
,
  groupaggregation=agroupaggregation
  where  journalcolumnid = g2b(ajournalcolumnid) ;


call journalcolumn_client_trigger(acursession,ajournalcolumnid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=journalcolumn' result;
    leave body;
  end if;
 start transaction;  
 insert into   journalcolumn
 (  changestamp,journalcolumnid 
,instanceid
,sequence

,name

,columnalignment

,colsort

,groupaggregation

 ) values (now(), g2b(ajournalcolumnid) 
,g2b(ainstanceid)
,asequence

,aname

,acolumnalignment

,acolsort

,agroupaggregation

 ) ;


call journalcolumn_client_trigger(acursession,ajournalcolumnid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists jcolumnsource_brief
go

create procedure jcolumnsource_brief  (
 acursession varchar(38),
 ajcolumnsourceid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ajcolumnsourceid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from jcolumnsource where jcolumnsourceid=g2b(ajcolumnsourceid);
 if  aec &gt;0 then
   set abrief=jcolumnsource_brief_f(g2b(ajcolumnsourceid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists jcolumnsource_delete
go

create procedure jcolumnsource_delete /*состав колонки*/ (
 acursession varchar(38),
 ajcolumnsourceid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from jcolumnsource where jcolumnsourceid=g2b(ajcolumnsourceid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=jcolumnsource' result;
    leave body;
  end if;
 call jcolumnsource_logger(acursession,ajcolumnsourceid) ; 
  delete from  jcolumnsource 
  where  jcolumnsourceid = g2b(ajcolumnsourceid) ;
  delete from num_values where ownerpartname='jcolumnsource' and ownerrowid=g2b(ajcolumnsourceid);
  end if;
    select 'ok' result;
 end 
go
GO

/*состав колонки*/

drop procedure if exists jcolumnsource_save
go

create procedure jcolumnsource_save /*состав колонки*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 ajcolumnsourceid varchar(38)
,asrcpartview varchar(38)/* представление *//* представление */
,aviewfield
 varchar (255)/* поле представления *//* поле представления */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from jcolumnsource where jcolumnsourceid=g2b(ajcolumnsourceid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=jcolumnsource' result;
    leave body;
  end if;
 start transaction ; 
 call jcolumnsource_logger(acursession,ajcolumnsourceid) ; 
 update  jcolumnsource set changestamp=now() 
,
  srcpartview=g2b(asrcpartview)
,
  viewfield=aviewfield
  where  jcolumnsourceid = g2b(ajcolumnsourceid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from jcolumnsource where  parentstructrowid=g2b(aparentstructrowid) 
 and srcpartview=g2b(asrcpartview);
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=состав колонки' result;
  rollback;
  leave body;
end if;
 -- end if;

call jcolumnsource_client_trigger(acursession,ajcolumnsourceid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=jcolumnsource' result;
    leave body;
  end if;
 start transaction;  
 insert into   jcolumnsource
 (  changestamp,jcolumnsourceid 
,parentstructrowid
,srcpartview

,viewfield

 ) values (now(), g2b(ajcolumnsourceid) 
,g2b(aparentstructrowid)
,g2b(asrcpartview)

,aviewfield

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from jcolumnsource where  parentstructrowid=g2b(aparentstructrowid) 
 and srcpartview=g2b(asrcpartview);
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=состав колонки' result;
  rollback;
  leave body;
end if;
 -- end if;

call jcolumnsource_client_trigger(acursession,ajcolumnsourceid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists jcolumnsource_copy
go

create procedure jcolumnsource_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into jcolumnsource 
 ( jcolumnsourceid 
,parentstructrowid
,srcpartview

,viewfield

 ) select 
copymap(acopyaction,b2g(jcolumnsourceid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,srcpartview

,viewfield

 from jcolumnsource
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists journalcolumn_copy
go

create procedure journalcolumn_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_journalcolumn cursor for
select journalcolumnid from journalcolumn where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into journalcolumn 
 ( journalcolumnid 
,instanceid
,sequence

,name

,columnalignment

,colsort

,groupaggregation

 ) select 
copymap(acopyaction,b2g(journalcolumnid)) 
,copymap(acopyaction,b2g(instanceid))
,sequence

,name

,columnalignment

,colsort

,groupaggregation

 from journalcolumn
 where instanceid =g2b( ainstanceid); 
open copy_cursor_journalcolumn;
  set  fetch_done=false;
fetch copy_cursor_journalcolumn into aid;
while not fetch_done do 
    call jcolumnsource_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_journalcolumn into aid;
end while;

close copy_cursor_journalcolumn;
 end 
go
GO


drop procedure if exists journalcolumn_logger
go

create procedure journalcolumn_logger /*колонки журнала*/ (
 acursession varchar(38),
 ajournalcolumnid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists jcolumnsource_logger
go

create procedure jcolumnsource_logger /*состав колонки*/ (
 acursession varchar(38),
 ajcolumnsourceid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists journalcolumn_parent
go
create procedure journalcolumn_parent /* колонки журнала*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from journalcolumn where  journalcolumnid=arowid;
 end 
go
GO


drop procedure if exists journalcolumn_islocked
go
create procedure journalcolumn_islocked /* колонки журнала */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from journalcolumn where journalcolumnid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists journalcolumn_lock
go
create procedure journalcolumn_lock /* колонки журнала */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call journalcolumn_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update journalcolumn set lockuserid =auserid ,locksessionid=null  where journalcolumnid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update journalcolumn set lockuserid=null ,locksessionid =acursession  where journalcolumnid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists journalcolumn_unlock
go
create procedure journalcolumn_unlock /* колонки журнала */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call journalcolumn_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update journalcolumn set lockuserid =null  where journalcolumnid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update journalcolumn set locksessionid =null  where journalcolumnid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS journalcolumn_client_trigger
GO

create procedure journalcolumn_client_trigger  (
 acursession varchar(38),
 aJournalColumnid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists jcolumnsource_parent
go
create procedure jcolumnsource_parent /* состав колонки*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from jcolumnsource where  jcolumnsourceid=arowid;
  set aparenttable = 'journalcolumn';
 end 
go
GO


drop procedure if exists jcolumnsource_islocked
go
create procedure jcolumnsource_islocked /* состав колонки */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from jcolumnsource where jcolumnsourceid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists jcolumnsource_lock
go
create procedure jcolumnsource_lock /* состав колонки */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call jcolumnsource_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update jcolumnsource set lockuserid =auserid ,locksessionid=null  where jcolumnsourceid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update jcolumnsource set lockuserid=null ,locksessionid =acursession  where jcolumnsourceid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists jcolumnsource_unlock
go
create procedure jcolumnsource_unlock /* состав колонки */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call jcolumnsource_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update jcolumnsource set lockuserid =null  where jcolumnsourceid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update jcolumnsource set locksessionid =null  where jcolumnsourceid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS jcolumnsource_client_trigger
GO

create procedure jcolumnsource_client_trigger  (
 acursession varchar(38),
 aJColumnSourceid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists journalsrc_brief
go

create procedure journalsrc_brief  (
 acursession varchar(38),
 ajournalsrcid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ajournalsrcid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from journalsrc where journalsrcid=g2b(ajournalsrcid);
 if  aec &gt;0 then
   set abrief=journalsrc_brief_f(g2b(ajournalsrcid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists journalsrc_delete
go

create procedure journalsrc_delete /*источники журнала*/ (
 acursession varchar(38),
 ajournalsrcid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journalsrc where journalsrcid=g2b(ajournalsrcid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=journalsrc' result;
    leave body;
  end if;
 call journalsrc_logger(acursession,ajournalsrcid) ; 
  delete from  journalsrc 
  where  journalsrcid = g2b(ajournalsrcid) ;
  delete from num_values where ownerpartname='journalsrc' and ownerrowid=g2b(ajournalsrcid);
  end if;
    select 'ok' result;
 end 
go
GO

/*источники журнала*/

drop procedure if exists journalsrc_save
go

create procedure journalsrc_save /*источники журнала*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 ajournalsrcid varchar(38)
,apartview binary(16)/* представление *//* представление */
,aonrun
 integer/* при открытии *//* при открытии */
,aopenmode
 varchar (64)/* режим открытия *//* режим открытия */
,aviewalias
 varchar (255)/* псевдоним представления *//* псевдоним представления */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journalsrc where journalsrcid=g2b(ajournalsrcid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=journalsrc' result;
    leave body;
  end if;
 start transaction ; 
 call journalsrc_logger(acursession,ajournalsrcid) ; 
 update  journalsrc set changestamp=now() 
,
  partview=apartview
,
  onrun=aonrun
,
  openmode=aopenmode
,
  viewalias=aviewalias
  where  journalsrcid = g2b(ajournalsrcid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from journalsrc where  instanceid=g2b(ainstanceid) 
 and partview=g2b(apartview);
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=источники журнала' result;
  rollback;
  leave body;
end if;
 -- end if;

call journalsrc_client_trigger(acursession,ajournalsrcid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=journalsrc' result;
    leave body;
  end if;
 start transaction;  
 insert into   journalsrc
 (  changestamp,journalsrcid 
,instanceid
,partview

,onrun

,openmode

,viewalias

 ) values (now(), g2b(ajournalsrcid) 
,g2b(ainstanceid)
,apartview

,aonrun

,aopenmode

,aviewalias

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from journalsrc where  instanceid=g2b(ainstanceid) 
 and partview=g2b(apartview);
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=источники журнала' result;
  rollback;
  leave body;
end if;
 -- end if;

call journalsrc_client_trigger(acursession,ajournalsrcid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists journalsrc_copy
go

create procedure journalsrc_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into journalsrc 
 ( journalsrcid 
,instanceid
,partview

,onrun

,openmode

,viewalias

 ) select 
copymap(acopyaction,b2g(journalsrcid)) 
,copymap(acopyaction,b2g(instanceid))
,partview

,onrun

,openmode

,viewalias

 from journalsrc
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists journalsrc_logger
go

create procedure journalsrc_logger /*источники журнала*/ (
 acursession varchar(38),
 ajournalsrcid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists journalsrc_parent
go
create procedure journalsrc_parent /* источники журнала*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from journalsrc where  journalsrcid=arowid;
 end 
go
GO


drop procedure if exists journalsrc_islocked
go
create procedure journalsrc_islocked /* источники журнала */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from journalsrc where journalsrcid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists journalsrc_lock
go
create procedure journalsrc_lock /* источники журнала */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call journalsrc_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update journalsrc set lockuserid =auserid ,locksessionid=null  where journalsrcid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update journalsrc set lockuserid=null ,locksessionid =acursession  where journalsrcid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists journalsrc_unlock
go
create procedure journalsrc_unlock /* источники журнала */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call journalsrc_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update journalsrc set lockuserid =null  where journalsrcid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update journalsrc set locksessionid =null  where journalsrcid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS journalsrc_client_trigger
GO

create procedure journalsrc_client_trigger  (
 acursession varchar(38),
 aJournalSrcid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists journal_brief
go

create procedure journal_brief  (
 acursession varchar(38),
 ajournalid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ajournalid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from journal where journalid=g2b(ajournalid);
 if  aec &gt;0 then
   set abrief=journal_brief_f(g2b(ajournalid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists journal_delete
go

create procedure journal_delete /*журнал*/ (
 acursession varchar(38),
 ajournalid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journal where journalid=g2b(ajournalid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=journal' result;
    leave body;
  end if;
 call journal_logger(acursession,ajournalid) ; 
  delete from  journal 
  where  journalid = g2b(ajournalid) ;
  delete from num_values where ownerpartname='journal' and ownerrowid=g2b(ajournalid);
  end if;
    select 'ok' result;
 end 
go
GO

/*журнал*/

drop procedure if exists journal_save
go

create procedure journal_save /*журнал*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 ajournalid varchar(38)
,aname
 varchar (255)/* название *//* название */
,athe_alias
 varchar (32)/* псевдоним *//* псевдоним */
,athecomment
 text/* описание *//* описание */
,ajrnliconcls
 varchar (80)/* иконка журнала *//* иконка журнала */
,ausefavorites
 integer/* массовое выделение *//* массовое выделение */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journal where journalid=g2b(ajournalid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=journal' result;
    leave body;
  end if;
 start transaction ; 
 call journal_logger(acursession,ajournalid) ; 
 update  journal set changestamp=now() 
,
  name=aname
,
  the_alias=athe_alias
,
  thecomment=athecomment
,
  jrnliconcls=ajrnliconcls
,
  usefavorites=ausefavorites
  where  journalid = g2b(ajournalid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from journal where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=журнал правило=(уникальность для журнал.название)'  result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from journal where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=журнал' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from journal where 1=1  
 and the_alias=athe_alias;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=журнал' result;
  rollback;
  leave body;
end if;
 -- end if;

call journal_client_trigger(acursession,ajournalid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=journal' result;
    leave body;
  end if;
select count(*) into aec from journal where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;journal&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   journal
 (  changestamp,journalid 
,instanceid
,name

,the_alias

,thecomment

,jrnliconcls

,usefavorites

 ) values (now(), g2b(ajournalid) 
,g2b(ainstanceid)
,aname

,athe_alias

,athecomment

,ajrnliconcls

,ausefavorites

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from journal where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=журнал правило=(уникальность для журнал.название)'  result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from journal where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=журнал' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from journal where 1=1  
 and the_alias=athe_alias;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=журнал' result;
  rollback;
  leave body;
end if;
 -- end if;

call journal_client_trigger(acursession,ajournalid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists journal_copy
go

create procedure journal_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into journal 
 ( journalid 
,instanceid
,name

,the_alias

,thecomment

,jrnliconcls

,usefavorites

 ) select 
copymap(acopyaction,b2g(journalid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,the_alias

,thecomment

,jrnliconcls

,usefavorites

 from journal
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists journal_logger
go

create procedure journal_logger /*журнал*/ (
 acursession varchar(38),
 ajournalid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists journal_parent
go
create procedure journal_parent /* журнал*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from journal where  journalid=arowid;
 end 
go
GO


drop procedure if exists journal_islocked
go
create procedure journal_islocked /* журнал */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from journal where journalid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists journal_lock
go
create procedure journal_lock /* журнал */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call journal_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update journal set lockuserid =auserid ,locksessionid=null  where journalid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update journal set lockuserid=null ,locksessionid =acursession  where journalid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists journal_unlock
go
create procedure journal_unlock /* журнал */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call journal_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update journal set lockuserid =null  where journalid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update journal set locksessionid =null  where journalid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS journal_client_trigger
GO

create procedure journal_client_trigger  (
 acursession varchar(38),
 aJournalid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists bpc_info_brief
go

create procedure bpc_info_brief  (
 acursession varchar(38),
 abpc_infoid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if abpc_infoid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from bpc_info where bpc_infoid=g2b(abpc_infoid);
 if  aec &gt;0 then
   set abrief=bpc_info_brief_f(g2b(abpc_infoid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists bpc_info_delete
go

create procedure bpc_info_delete /*описание клиента*/ (
 acursession varchar(38),
 abpc_infoid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from bpc_info where bpc_infoid=g2b(abpc_infoid);
if aec&gt;0 then
 select checkoperation( acursession ,'bpc.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=bpc_info' result;
    leave body;
  end if;
 call bpc_info_logger(acursession,abpc_infoid) ; 
  delete from  bpc_info 
  where  bpc_infoid = g2b(abpc_infoid) ;
  delete from num_values where ownerpartname='bpc_info' and ownerrowid=g2b(abpc_infoid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание*/

drop procedure if exists bpc_info_save
go

create procedure bpc_info_save /*описание клиента*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 abpc_infoid varchar(38)
,aname
 varchar (255)/* название *//* название */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from bpc_info where bpc_infoid=g2b(abpc_infoid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bpc.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=bpc_info' result;
    leave body;
  end if;
 start transaction ; 
 call bpc_info_logger(acursession,abpc_infoid) ; 
 update  bpc_info set changestamp=now() 
,
  name=aname
  where  bpc_infoid = g2b(abpc_infoid) ;


call bpc_info_client_trigger(acursession,abpc_infoid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bpc.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=bpc_info' result;
    leave body;
  end if;
select count(*) into aec from bpc_info where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;bpc_info&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   bpc_info
 (  changestamp,bpc_infoid 
,instanceid
,name

 ) values (now(), g2b(abpc_infoid) 
,g2b(ainstanceid)
,aname

 ) ;


call bpc_info_client_trigger(acursession,abpc_infoid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists bpc_info_copy
go

create procedure bpc_info_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into bpc_info 
 ( bpc_infoid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(bpc_infoid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from bpc_info
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists bpc_info_logger
go

create procedure bpc_info_logger /*описание клиента*/ (
 acursession varchar(38),
 abpc_infoid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists bpc_info_parent
go
create procedure bpc_info_parent /* описание клиента*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from bpc_info where  bpc_infoid=arowid;
 end 
go
GO


drop procedure if exists bpc_info_islocked
go
create procedure bpc_info_islocked /* описание клиента */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from bpc_info where bpc_infoid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists bpc_info_lock
go
create procedure bpc_info_lock /* описание клиента */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call bpc_info_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update bpc_info set lockuserid =auserid ,locksessionid=null  where bpc_infoid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update bpc_info set lockuserid=null ,locksessionid =acursession  where bpc_infoid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists bpc_info_unlock
go
create procedure bpc_info_unlock /* описание клиента */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call bpc_info_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update bpc_info set lockuserid =null  where bpc_infoid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update bpc_info set locksessionid =null  where bpc_infoid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS bpc_info_client_trigger
GO

create procedure bpc_info_client_trigger  (
 acursession varchar(38),
 abpc_infoid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists the_session_brief
go

create procedure the_session_brief  (
 acursession varchar(38),
 athe_sessionid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if athe_sessionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from the_session where the_sessionid=g2b(athe_sessionid);
 if  aec &gt;0 then
   set abrief=the_session_brief_f(g2b(athe_sessionid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists the_session_delete
go

create procedure the_session_delete /*зарегистрированные сессии пользователей*/ (
 acursession varchar(38),
 athe_sessionid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from the_session where the_sessionid=g2b(athe_sessionid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=the_session' result;
    leave body;
  end if;
 call the_session_logger(acursession,athe_sessionid) ; 
  delete from  the_session 
  where  the_sessionid = g2b(athe_sessionid) ;
  delete from num_values where ownerpartname='the_session' and ownerrowid=g2b(athe_sessionid);
  end if;
    select 'ok' result;
 end 
go
GO

/*сессия пользователя*/

drop procedure if exists the_session_save
go

create procedure the_session_save /*зарегистрированные сессии пользователей*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 athe_sessionid varchar(38)
,aapplicationid varchar(38)/* приложение *//* приложение */
,auserrole varchar(38)/* текущая роль пользователя *//* текущая роль пользователя */
,aclosedat
 datetime/* момент закрытия *//* момент закрытия */
,aclosed
 integer/* закрыта *//* закрыта */
,ausersid varchar(38)/* пользователь *//* пользователь */
,alastaccess
 datetime/* последнее подтверждение *//* последнее подтверждение */
,astartat
 datetime/* момент открытия *//* момент открытия */
,alang
 varchar (25)/* локализация *//* локализация */
,alogin
 varchar (255)/* login *//* login */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from the_session where the_sessionid=g2b(athe_sessionid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=the_session' result;
    leave body;
  end if;
 start transaction ; 
 call the_session_logger(acursession,athe_sessionid) ; 
 update  the_session set changestamp=now() 
,
  applicationid=g2b(aapplicationid)
,
  userrole=g2b(auserrole)
,
  closedat=aclosedat
,
  closed=aclosed
,
  usersid=g2b(ausersid)
,
  lastaccess=alastaccess
,
  startat=astartat
,
  lang=alang
,
  login=alogin
  where  the_sessionid = g2b(athe_sessionid) ;


call the_session_client_trigger(acursession,athe_sessionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=the_session' result;
    leave body;
  end if;
 start transaction;  
 insert into   the_session
 (  changestamp,the_sessionid 
,instanceid
,applicationid

,userrole

,closedat

,closed

,usersid

,lastaccess

,startat

,lang

,login

 ) values (now(), g2b(athe_sessionid) 
,g2b(ainstanceid)
,g2b(aapplicationid)

,g2b(auserrole)

,aclosedat

,aclosed

,g2b(ausersid)

,alastaccess

,astartat

,alang

,alogin

 ) ;


call the_session_client_trigger(acursession,athe_sessionid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists the_session_copy
go

create procedure the_session_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into the_session 
 ( the_sessionid 
,instanceid
,applicationid

,userrole

,closedat

,closed

,usersid

,lastaccess

,startat

,lang

,login

 ) select 
copymap(acopyaction,b2g(the_sessionid)) 
,copymap(acopyaction,b2g(instanceid))
,applicationid

,userrole

,closedat

,closed

,usersid

,lastaccess

,startat

,lang

,login

 from the_session
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists the_session_logger
go

create procedure the_session_logger /*зарегистрированные сессии пользователей*/ (
 acursession varchar(38),
 athe_sessionid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists the_session_parent
go
create procedure the_session_parent /* зарегистрированные сессии пользователей*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from the_session where  the_sessionid=arowid;
 end 
go
GO


drop procedure if exists the_session_islocked
go
create procedure the_session_islocked /* зарегистрированные сессии пользователей */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from the_session where the_sessionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists the_session_lock
go
create procedure the_session_lock /* зарегистрированные сессии пользователей */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call the_session_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update the_session set lockuserid =auserid ,locksessionid=null  where the_sessionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update the_session set lockuserid=null ,locksessionid =acursession  where the_sessionid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists the_session_unlock
go
create procedure the_session_unlock /* зарегистрированные сессии пользователей */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call the_session_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update the_session set lockuserid =null  where the_sessionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update the_session set locksessionid =null  where the_sessionid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS the_session_client_trigger
GO

create procedure the_session_client_trigger  (
 acursession varchar(38),
 athe_Sessionid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists sysrefcache_brief
go

create procedure sysrefcache_brief  (
 acursession varchar(38),
 asysrefcacheid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if asysrefcacheid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from sysrefcache where sysrefcacheid=g2b(asysrefcacheid);
 if  aec &gt;0 then
   set abrief=sysrefcache_brief_f(g2b(asysrefcacheid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists sysrefcache_delete
go

create procedure sysrefcache_delete /*владельцы информации для к объектам которых
разрешен достуа для  текущей сесии*/ (
 acursession varchar(38),
 asysrefcacheid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from sysrefcache where sysrefcacheid=g2b(asysrefcacheid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=sysrefcache' result;
    leave body;
  end if;
 call sysrefcache_logger(acursession,asysrefcacheid) ; 
  delete from  sysrefcache 
  where  sysrefcacheid = g2b(asysrefcacheid) ;
  delete from num_values where ownerpartname='sysrefcache' and ownerrowid=g2b(asysrefcacheid);
  end if;
    select 'ok' result;
 end 
go
GO

/*разрешенные владельцы*/

drop procedure if exists sysrefcache_save
go

create procedure sysrefcache_save /*владельцы информации для к объектам которых
разрешен достуа для  текущей сесии*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 asysrefcacheid varchar(38)
,acachetype
 integer/* тип кеширования *//* тип кеширования */
,aobjectownerid binary(16)/* идентификатор владельца *//* идентификатор владельца */
,asessionid varchar(38)/* сессия *//* сессия */
,amodulename
 varchar (40)/* модуль *//* модуль */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from sysrefcache where sysrefcacheid=g2b(asysrefcacheid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=sysrefcache' result;
    leave body;
  end if;
 start transaction ; 
 call sysrefcache_logger(acursession,asysrefcacheid) ; 
 update  sysrefcache set changestamp=now() 
,
  cachetype=acachetype
,
  objectownerid=aobjectownerid
,
  sessionid=g2b(asessionid)
,
  modulename=amodulename
  where  sysrefcacheid = g2b(asysrefcacheid) ;


call sysrefcache_client_trigger(acursession,asysrefcacheid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=sysrefcache' result;
    leave body;
  end if;
 start transaction;  
 insert into   sysrefcache
 (  changestamp,sysrefcacheid 
,instanceid
,cachetype

,objectownerid

,sessionid

,modulename

 ) values (now(), g2b(asysrefcacheid) 
,g2b(ainstanceid)
,acachetype

,aobjectownerid

,g2b(asessionid)

,amodulename

 ) ;


call sysrefcache_client_trigger(acursession,asysrefcacheid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists sysrefcache_copy
go

create procedure sysrefcache_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into sysrefcache 
 ( sysrefcacheid 
,instanceid
,cachetype

,objectownerid

,sessionid

,modulename

 ) select 
copymap(acopyaction,b2g(sysrefcacheid)) 
,copymap(acopyaction,b2g(instanceid))
,cachetype

,objectownerid

,sessionid

,modulename

 from sysrefcache
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists sysrefcache_logger
go

create procedure sysrefcache_logger /*владельцы информации для к объектам которых
разрешен достуа для  текущей сесии*/ (
 acursession varchar(38),
 asysrefcacheid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists sysrefcache_parent
go
create procedure sysrefcache_parent /* владельцы информации для к объектам которых
разрешен достуа для  текущей сесии*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from sysrefcache where  sysrefcacheid=arowid;
 end 
go
GO


drop procedure if exists sysrefcache_islocked
go
create procedure sysrefcache_islocked /* владельцы информации для к объектам которых
разрешен достуа для  текущей сесии */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from sysrefcache where sysrefcacheid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists sysrefcache_lock
go
create procedure sysrefcache_lock /* владельцы информации для к объектам которых
разрешен достуа для  текущей сесии */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call sysrefcache_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update sysrefcache set lockuserid =auserid ,locksessionid=null  where sysrefcacheid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update sysrefcache set lockuserid=null ,locksessionid =acursession  where sysrefcacheid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists sysrefcache_unlock
go
create procedure sysrefcache_unlock /* владельцы информации для к объектам которых
разрешен достуа для  текущей сесии */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call sysrefcache_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update sysrefcache set lockuserid =null  where sysrefcacheid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update sysrefcache set locksessionid =null  where sysrefcacheid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS sysrefcache_client_trigger
GO

create procedure sysrefcache_client_trigger  (
 acursession varchar(38),
 aSysRefCacheid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists syslog_brief
go

create procedure syslog_brief  (
 acursession varchar(38),
 asyslogid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if asyslogid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from syslog where syslogid=g2b(asyslogid);
 if  aec &gt;0 then
   set abrief=syslog_brief_f(g2b(asyslogid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists syslog_delete
go

create procedure syslog_delete /*журнал событий, которые произошли в системе*/ (
 acursession varchar(38),
 asyslogid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from syslog where syslogid=g2b(asyslogid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=syslog' result;
    leave body;
  end if;
 call syslog_logger(acursession,asyslogid) ; 
  delete from  syslog 
  where  syslogid = g2b(asyslogid) ;
  delete from num_values where ownerpartname='syslog' and ownerrowid=g2b(asyslogid);
  end if;
    select 'ok' result;
 end 
go
GO

/*журнал событий*/

drop procedure if exists syslog_save
go

create procedure syslog_save /*журнал событий, которые произошли в системе*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 asyslogid varchar(38)
,athesession varchar(38)/* сессия *//* сессия */
,athe_resource
 varchar (255)/* ресурс *//* ресурс */
,alogstructid
 varchar (255)/* раздел с которым происхоит действие *//* раздел с которым происхоит действие */
,averb
 varchar (80)/* действие *//* действие */
,aloginstanceid binary(16)/* идентификатор документа *//* идентификатор документа */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from syslog where syslogid=g2b(asyslogid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=syslog' result;
    leave body;
  end if;
 start transaction ; 
 call syslog_logger(acursession,asyslogid) ; 
 update  syslog set changestamp=now() 
,
  thesession=g2b(athesession)
,
  the_resource=athe_resource
,
  logstructid=alogstructid
,
  verb=averb
,
  loginstanceid=aloginstanceid
  where  syslogid = g2b(asyslogid) ;


call syslog_client_trigger(acursession,asyslogid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=syslog' result;
    leave body;
  end if;
 start transaction;  
 insert into   syslog
 (  changestamp,syslogid 
,instanceid
,thesession

,the_resource

,logstructid

,verb

,loginstanceid

 ) values (now(), g2b(asyslogid) 
,g2b(ainstanceid)
,g2b(athesession)

,athe_resource

,alogstructid

,averb

,aloginstanceid

 ) ;


call syslog_client_trigger(acursession,asyslogid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists syslog_copy
go

create procedure syslog_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into syslog 
 ( syslogid 
,instanceid
,thesession

,the_resource

,logstructid

,verb

,loginstanceid

 ) select 
copymap(acopyaction,b2g(syslogid)) 
,copymap(acopyaction,b2g(instanceid))
,thesession

,the_resource

,logstructid

,verb

,loginstanceid

 from syslog
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists syslog_logger
go

create procedure syslog_logger /*журнал событий, которые произошли в системе*/ (
 acursession varchar(38),
 asyslogid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists syslog_parent
go
create procedure syslog_parent /* журнал событий, которые произошли в системе*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from syslog where  syslogid=arowid;
 end 
go
GO


drop procedure if exists syslog_islocked
go
create procedure syslog_islocked /* журнал событий, которые произошли в системе */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from syslog where syslogid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists syslog_lock
go
create procedure syslog_lock /* журнал событий, которые произошли в системе */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call syslog_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update syslog set lockuserid =auserid ,locksessionid=null  where syslogid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update syslog set lockuserid=null ,locksessionid =acursession  where syslogid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists syslog_unlock
go
create procedure syslog_unlock /* журнал событий, которые произошли в системе */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call syslog_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update syslog set lockuserid =null  where syslogid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update syslog set locksessionid =null  where syslogid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS syslog_client_trigger
GO

create procedure syslog_client_trigger  (
 acursession varchar(38),
 aSysLogid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpls_info_brief
go

create procedure tpls_info_brief  (
 acursession varchar(38),
 atpls_infoid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpls_infoid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpls_info where tpls_infoid=g2b(atpls_infoid);
 if  aec &gt;0 then
   set abrief=tpls_info_brief_f(g2b(atpls_infoid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpls_info_delete
go

create procedure tpls_info_delete /*схема подключения*/ (
 acursession varchar(38),
 atpls_infoid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpls_info where tpls_infoid=g2b(atpls_infoid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpls.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpls_info' result;
    leave body;
  end if;
 call tpls_info_logger(acursession,atpls_infoid) ; 
  delete from  tpls_info 
  where  tpls_infoid = g2b(atpls_infoid) ;
  delete from num_values where ownerpartname='tpls_info' and ownerrowid=g2b(atpls_infoid);
  end if;
    select 'ok' result;
 end 
go
GO

/*схема подключения*/

drop procedure if exists tpls_info_save
go

create procedure tpls_info_save /*схема подключения*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpls_infoid varchar(38)
,aname
 varchar (255)/* название *//* название */
,aschema_imagefile varchar(255)/* изображение */
,aschema_imagefile_ext varchar(4) /* изображение */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpls_info where tpls_infoid=g2b(atpls_infoid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpls.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpls_info' result;
    leave body;
  end if;
 start transaction ; 
 call tpls_info_logger(acursession,atpls_infoid) ; 
 update  tpls_info set changestamp=now() 
,
  name=aname
,
  schema_imagefile=aschema_imagefile
,schema_imagefile_ext=
aschema_imagefile_ext 
  where  tpls_infoid = g2b(atpls_infoid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpls_info where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=схема подключения правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpls_info_client_trigger(acursession,atpls_infoid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpls.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpls_info' result;
    leave body;
  end if;
select count(*) into aec from tpls_info where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tpls_info&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tpls_info
 (  changestamp,tpls_infoid 
,instanceid
,name

,schema_imagefile

,schema_imagefile_ext
 ) values (now(), g2b(atpls_infoid) 
,g2b(ainstanceid)
,aname

,aschema_imagefile

,aschema_imagefile_ext
 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpls_info where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=схема подключения правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpls_info_client_trigger(acursession,atpls_infoid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpls_info_copy
go

create procedure tpls_info_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpls_info 
 ( tpls_infoid 
,instanceid
,name

,schema_imagefile

,schema_imagefile_ext
 ) select 
copymap(acopyaction,b2g(tpls_infoid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,schema_imagefile

,schema_imagefile_ext
 from tpls_info
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpls_info_logger
go

create procedure tpls_info_logger /*схема подключения*/ (
 acursession varchar(38),
 atpls_infoid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpls_info_parent
go
create procedure tpls_info_parent /* схема подключения*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpls_info where  tpls_infoid=arowid;
 end 
go
GO


drop procedure if exists tpls_info_islocked
go
create procedure tpls_info_islocked /* схема подключения */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpls_info where tpls_infoid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpls_info_lock
go
create procedure tpls_info_lock /* схема подключения */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpls_info_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpls_info set lockuserid =auserid ,locksessionid=null  where tpls_infoid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpls_info set lockuserid=null ,locksessionid =acursession  where tpls_infoid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpls_info_unlock
go
create procedure tpls_info_unlock /* схема подключения */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpls_info_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpls_info set lockuserid =null  where tpls_infoid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpls_info set locksessionid =null  where tpls_infoid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpls_info_client_trigger
GO

create procedure tpls_info_client_trigger  (
 acursession varchar(38),
 aTPLS_INFOid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpls_param_brief
go

create procedure tpls_param_brief  (
 acursession varchar(38),
 atpls_paramid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpls_paramid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpls_param where tpls_paramid=g2b(atpls_paramid);
 if  aec &gt;0 then
   set abrief=tpls_param_brief_f(g2b(atpls_paramid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpls_param_delete
go

create procedure tpls_param_delete /*параметры на схеме*/ (
 acursession varchar(38),
 atpls_paramid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpls_param where tpls_paramid=g2b(atpls_paramid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpls.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpls_param' result;
    leave body;
  end if;
 call tpls_param_logger(acursession,atpls_paramid) ; 
  delete from  tpls_param 
  where  tpls_paramid = g2b(atpls_paramid) ;
  delete from num_values where ownerpartname='tpls_param' and ownerrowid=g2b(atpls_paramid);
  end if;
    select 'ok' result;
 end 
go
GO

/*параметры на схеме*/

drop procedure if exists tpls_param_save
go

create procedure tpls_param_save /*параметры на схеме*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpls_paramid varchar(38)
,aarchtype varchar(38)/* тип архива *//* тип архива */
,aparam varchar(38)/* параметр *//* параметр */
,apos_left
 double/* x *//* x */
,apos_top
 double/* y *//* y */
,ahideparam
 integer/* скрыть *//* скрыть */
,ahideonschema
 integer/* не отображать на схеме *//* не отображать на схеме */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpls_param where tpls_paramid=g2b(atpls_paramid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpls.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpls_param' result;
    leave body;
  end if;
 start transaction ; 
 call tpls_param_logger(acursession,atpls_paramid) ; 
 update  tpls_param set changestamp=now() 
,
  archtype=g2b(aarchtype)
,
  param=g2b(aparam)
,
  pos_left=apos_left
,
  pos_top=apos_top
,
  hideparam=ahideparam
,
  hideonschema=ahideonschema
  where  tpls_paramid = g2b(atpls_paramid) ;


call tpls_param_client_trigger(acursession,atpls_paramid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpls.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpls_param' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpls_param
 (  changestamp,tpls_paramid 
,instanceid
,archtype

,param

,pos_left

,pos_top

,hideparam

,hideonschema

 ) values (now(), g2b(atpls_paramid) 
,g2b(ainstanceid)
,g2b(aarchtype)

,g2b(aparam)

,apos_left

,apos_top

,ahideparam

,ahideonschema

 ) ;


call tpls_param_client_trigger(acursession,atpls_paramid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpls_param_copy
go

create procedure tpls_param_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpls_param 
 ( tpls_paramid 
,instanceid
,archtype

,param

,pos_left

,pos_top

,hideparam

,hideonschema

 ) select 
copymap(acopyaction,b2g(tpls_paramid)) 
,copymap(acopyaction,b2g(instanceid))
,archtype

,param

,pos_left

,pos_top

,hideparam

,hideonschema

 from tpls_param
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpls_param_logger
go

create procedure tpls_param_logger /*параметры на схеме*/ (
 acursession varchar(38),
 atpls_paramid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpls_param_parent
go
create procedure tpls_param_parent /* параметры на схеме*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpls_param where  tpls_paramid=arowid;
 end 
go
GO


drop procedure if exists tpls_param_islocked
go
create procedure tpls_param_islocked /* параметры на схеме */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpls_param where tpls_paramid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpls_param_lock
go
create procedure tpls_param_lock /* параметры на схеме */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpls_param_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpls_param set lockuserid =auserid ,locksessionid=null  where tpls_paramid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpls_param set lockuserid=null ,locksessionid =acursession  where tpls_paramid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpls_param_unlock
go
create procedure tpls_param_unlock /* параметры на схеме */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpls_param_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpls_param set lockuserid =null  where tpls_paramid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpls_param set locksessionid =null  where tpls_paramid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpls_param_client_trigger
GO

create procedure tpls_param_client_trigger  (
 acursession varchar(38),
 aTPLS_PARAMid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists armjournal_brief
go

create procedure armjournal_brief  (
 acursession varchar(38),
 aarmjournalid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmjournalid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armjournal where armjournalid=g2b(aarmjournalid);
 if  aec &gt;0 then
   set abrief=armjournal_brief_f(g2b(aarmjournalid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists armjournal_delete
go

create procedure armjournal_delete /*описание действий журанлов*/ (
 acursession varchar(38),
 aarmjournalid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjournal where armjournalid=g2b(aarmjournalid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=armjournal' result;
    leave body;
  end if;
 call armjournal_logger(acursession,aarmjournalid) ; 
  delete from  armjournal 
  where  armjournalid = g2b(aarmjournalid) ;
  delete from num_values where ownerpartname='armjournal' and ownerrowid=g2b(aarmjournalid);
  end if;
    select 'ok' result;
 end 
go
GO

/*поведение журналов*/

drop procedure if exists armjournal_save
go

create procedure armjournal_save /*описание действий журанлов*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarmjournalid varchar(38)
,athejournal varchar(38)/* журнал *//* журнал */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjournal where armjournalid=g2b(aarmjournalid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=armjournal' result;
    leave body;
  end if;
 start transaction ; 
 call armjournal_logger(acursession,aarmjournalid) ; 
 update  armjournal set changestamp=now() 
,
  thejournal=g2b(athejournal)
  where  armjournalid = g2b(aarmjournalid) ;


call armjournal_client_trigger(acursession,aarmjournalid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=armjournal' result;
    leave body;
  end if;
 start transaction;  
 insert into   armjournal
 (  changestamp,armjournalid 
,instanceid
,thejournal

 ) values (now(), g2b(aarmjournalid) 
,g2b(ainstanceid)
,g2b(athejournal)

 ) ;


call armjournal_client_trigger(acursession,aarmjournalid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists armjrnlrep_brief
go

create procedure armjrnlrep_brief  (
 acursession varchar(38),
 aarmjrnlrepid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmjrnlrepid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armjrnlrep where armjrnlrepid=g2b(aarmjrnlrepid);
 if  aec &gt;0 then
   set abrief=armjrnlrep_brief_f(g2b(aarmjrnlrepid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists armjrnlrep_delete
go

create procedure armjrnlrep_delete /*отчеты из журнала*/ (
 acursession varchar(38),
 aarmjrnlrepid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnlrep where armjrnlrepid=g2b(aarmjrnlrepid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=armjrnlrep' result;
    leave body;
  end if;
 call armjrnlrep_logger(acursession,aarmjrnlrepid) ; 
  delete from  armjrnlrep 
  where  armjrnlrepid = g2b(aarmjrnlrepid) ;
  delete from num_values where ownerpartname='armjrnlrep' and ownerrowid=g2b(aarmjrnlrepid);
  end if;
    select 'ok' result;
 end 
go
GO

/*отчеты*/

drop procedure if exists armjrnlrep_save
go

create procedure armjrnlrep_save /*отчеты из журнала*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aarmjrnlrepid varchar(38)
,arepname
 varchar (255)/* название отчета *//* название отчета */
,athereport varchar(38)/* отчет *//* отчет */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnlrep where armjrnlrepid=g2b(aarmjrnlrepid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=armjrnlrep' result;
    leave body;
  end if;
 start transaction ; 
 call armjrnlrep_logger(acursession,aarmjrnlrepid) ; 
 update  armjrnlrep set changestamp=now() 
,
  repname=arepname
,
  thereport=g2b(athereport)
  where  armjrnlrepid = g2b(aarmjrnlrepid) ;


call armjrnlrep_client_trigger(acursession,aarmjrnlrepid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=armjrnlrep' result;
    leave body;
  end if;
 start transaction;  
 insert into   armjrnlrep
 (  changestamp,armjrnlrepid 
,parentstructrowid
,repname

,thereport

 ) values (now(), g2b(aarmjrnlrepid) 
,g2b(aparentstructrowid)
,arepname

,g2b(athereport)

 ) ;


call armjrnlrep_client_trigger(acursession,aarmjrnlrepid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists armjrnlrun_brief
go

create procedure armjrnlrun_brief  (
 acursession varchar(38),
 aarmjrnlrunid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmjrnlrunid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armjrnlrun where armjrnlrunid=g2b(aarmjrnlrunid);
 if  aec &gt;0 then
   set abrief=armjrnlrun_brief_f(g2b(aarmjrnlrunid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists armjrnlrun_delete
go

create procedure armjrnlrun_delete /*дополнительные действия в журнале*/ (
 acursession varchar(38),
 aarmjrnlrunid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnlrun where armjrnlrunid=g2b(aarmjrnlrunid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=armjrnlrun' result;
    leave body;
  end if;
 call armjrnlrun_logger(acursession,aarmjrnlrunid) ; 
  delete from  armjrnlrun 
  where  armjrnlrunid = g2b(aarmjrnlrunid) ;
  delete from num_values where ownerpartname='armjrnlrun' and ownerrowid=g2b(aarmjrnlrunid);
  end if;
    select 'ok' result;
 end 
go
GO

/*действия*/

drop procedure if exists armjrnlrun_save
go

create procedure armjrnlrun_save /*дополнительные действия в журнале*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aarmjrnlrunid varchar(38)
,aname
 varchar (255)/* название *//* название */
,atheextention varchar(38)/* расширение *//* расширение */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnlrun where armjrnlrunid=g2b(aarmjrnlrunid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=armjrnlrun' result;
    leave body;
  end if;
 start transaction ; 
 call armjrnlrun_logger(acursession,aarmjrnlrunid) ; 
 update  armjrnlrun set changestamp=now() 
,
  name=aname
,
  theextention=g2b(atheextention)
  where  armjrnlrunid = g2b(aarmjrnlrunid) ;


call armjrnlrun_client_trigger(acursession,aarmjrnlrunid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=armjrnlrun' result;
    leave body;
  end if;
 start transaction;  
 insert into   armjrnlrun
 (  changestamp,armjrnlrunid 
,parentstructrowid
,name

,theextention

 ) values (now(), g2b(aarmjrnlrunid) 
,g2b(aparentstructrowid)
,aname

,g2b(atheextention)

 ) ;


call armjrnlrun_client_trigger(acursession,aarmjrnlrunid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists armjrnladd_brief
go

create procedure armjrnladd_brief  (
 acursession varchar(38),
 aarmjrnladdid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmjrnladdid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armjrnladd where armjrnladdid=g2b(aarmjrnladdid);
 if  aec &gt;0 then
   set abrief=armjrnladd_brief_f(g2b(aarmjrnladdid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists armjrnladd_delete
go

create procedure armjrnladd_delete /*варианты обработки добавления*/ (
 acursession varchar(38),
 aarmjrnladdid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnladd where armjrnladdid=g2b(aarmjrnladdid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=armjrnladd' result;
    leave body;
  end if;
 call armjrnladd_logger(acursession,aarmjrnladdid) ; 
  delete from  armjrnladd 
  where  armjrnladdid = g2b(aarmjrnladdid) ;
  delete from num_values where ownerpartname='armjrnladd' and ownerrowid=g2b(aarmjrnladdid);
  end if;
    select 'ok' result;
 end 
go
GO

/*добавление*/

drop procedure if exists armjrnladd_save
go

create procedure armjrnladd_save /*варианты обработки добавления*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aarmjrnladdid varchar(38)
,aname
 varchar (255)/* название *//* название */
,atheextention varchar(38)/* расширение *//* расширение */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnladd where armjrnladdid=g2b(aarmjrnladdid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=armjrnladd' result;
    leave body;
  end if;
 start transaction ; 
 call armjrnladd_logger(acursession,aarmjrnladdid) ; 
 update  armjrnladd set changestamp=now() 
,
  name=aname
,
  theextention=g2b(atheextention)
  where  armjrnladdid = g2b(aarmjrnladdid) ;


call armjrnladd_client_trigger(acursession,aarmjrnladdid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=armjrnladd' result;
    leave body;
  end if;
 start transaction;  
 insert into   armjrnladd
 (  changestamp,armjrnladdid 
,parentstructrowid
,name

,theextention

 ) values (now(), g2b(aarmjrnladdid) 
,g2b(aparentstructrowid)
,aname

,g2b(atheextention)

 ) ;


call armjrnladd_client_trigger(acursession,aarmjrnladdid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists armjrnlrep_copy
go

create procedure armjrnlrep_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armjrnlrep 
 ( armjrnlrepid 
,parentstructrowid
,repname

,thereport

 ) select 
copymap(acopyaction,b2g(armjrnlrepid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,repname

,thereport

 from armjrnlrep
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists armjrnlrun_copy
go

create procedure armjrnlrun_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armjrnlrun 
 ( armjrnlrunid 
,parentstructrowid
,name

,theextention

 ) select 
copymap(acopyaction,b2g(armjrnlrunid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,theextention

 from armjrnlrun
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists armjrnladd_copy
go

create procedure armjrnladd_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armjrnladd 
 ( armjrnladdid 
,parentstructrowid
,name

,theextention

 ) select 
copymap(acopyaction,b2g(armjrnladdid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,theextention

 from armjrnladd
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists armjournal_copy
go

create procedure armjournal_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_armjournal cursor for
select armjournalid from armjournal where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armjournal 
 ( armjournalid 
,instanceid
,thejournal

 ) select 
copymap(acopyaction,b2g(armjournalid)) 
,copymap(acopyaction,b2g(instanceid))
,thejournal

 from armjournal
 where instanceid =g2b( ainstanceid); 
open copy_cursor_armjournal;
  set  fetch_done=false;
fetch copy_cursor_armjournal into aid;
while not fetch_done do 
    call armjrnlrep_copy(acursession,acopyaction,ainstanceid,aid);
    call armjrnlrun_copy(acursession,acopyaction,ainstanceid,aid);
    call armjrnladd_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_armjournal into aid;
end while;

close copy_cursor_armjournal;
 end 
go
GO


drop procedure if exists armjournal_logger
go

create procedure armjournal_logger /*описание действий журанлов*/ (
 acursession varchar(38),
 aarmjournalid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists armjrnlrep_logger
go

create procedure armjrnlrep_logger /*отчеты из журнала*/ (
 acursession varchar(38),
 aarmjrnlrepid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists armjrnlrun_logger
go

create procedure armjrnlrun_logger /*дополнительные действия в журнале*/ (
 acursession varchar(38),
 aarmjrnlrunid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists armjrnladd_logger
go

create procedure armjrnladd_logger /*варианты обработки добавления*/ (
 acursession varchar(38),
 aarmjrnladdid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists armjournal_parent
go
create procedure armjournal_parent /* описание действий журанлов*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from armjournal where  armjournalid=arowid;
 end 
go
GO


drop procedure if exists armjournal_islocked
go
create procedure armjournal_islocked /* описание действий журанлов */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armjournal where armjournalid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists armjournal_lock
go
create procedure armjournal_lock /* описание действий журанлов */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armjournal_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armjournal set lockuserid =auserid ,locksessionid=null  where armjournalid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armjournal set lockuserid=null ,locksessionid =acursession  where armjournalid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists armjournal_unlock
go
create procedure armjournal_unlock /* описание действий журанлов */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armjournal_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armjournal set lockuserid =null  where armjournalid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armjournal set locksessionid =null  where armjournalid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS armjournal_client_trigger
GO

create procedure armjournal_client_trigger  (
 acursession varchar(38),
 aARMJournalid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists armjrnlrep_parent
go
create procedure armjrnlrep_parent /* отчеты из журнала*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from armjrnlrep where  armjrnlrepid=arowid;
  set aparenttable = 'armjournal';
 end 
go
GO


drop procedure if exists armjrnlrep_islocked
go
create procedure armjrnlrep_islocked /* отчеты из журнала */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armjrnlrep where armjrnlrepid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists armjrnlrep_lock
go
create procedure armjrnlrep_lock /* отчеты из журнала */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armjrnlrep_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armjrnlrep set lockuserid =auserid ,locksessionid=null  where armjrnlrepid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armjrnlrep set lockuserid=null ,locksessionid =acursession  where armjrnlrepid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists armjrnlrep_unlock
go
create procedure armjrnlrep_unlock /* отчеты из журнала */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armjrnlrep_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armjrnlrep set lockuserid =null  where armjrnlrepid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armjrnlrep set locksessionid =null  where armjrnlrepid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS armjrnlrep_client_trigger
GO

create procedure armjrnlrep_client_trigger  (
 acursession varchar(38),
 aARMJRNLREPid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists armjrnlrun_parent
go
create procedure armjrnlrun_parent /* дополнительные действия в журнале*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from armjrnlrun where  armjrnlrunid=arowid;
  set aparenttable = 'armjournal';
 end 
go
GO


drop procedure if exists armjrnlrun_islocked
go
create procedure armjrnlrun_islocked /* дополнительные действия в журнале */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armjrnlrun where armjrnlrunid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists armjrnlrun_lock
go
create procedure armjrnlrun_lock /* дополнительные действия в журнале */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armjrnlrun_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armjrnlrun set lockuserid =auserid ,locksessionid=null  where armjrnlrunid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armjrnlrun set lockuserid=null ,locksessionid =acursession  where armjrnlrunid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists armjrnlrun_unlock
go
create procedure armjrnlrun_unlock /* дополнительные действия в журнале */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armjrnlrun_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armjrnlrun set lockuserid =null  where armjrnlrunid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armjrnlrun set locksessionid =null  where armjrnlrunid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS armjrnlrun_client_trigger
GO

create procedure armjrnlrun_client_trigger  (
 acursession varchar(38),
 aARMJRNLRUNid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists armjrnladd_parent
go
create procedure armjrnladd_parent /* варианты обработки добавления*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from armjrnladd where  armjrnladdid=arowid;
  set aparenttable = 'armjournal';
 end 
go
GO


drop procedure if exists armjrnladd_islocked
go
create procedure armjrnladd_islocked /* варианты обработки добавления */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armjrnladd where armjrnladdid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists armjrnladd_lock
go
create procedure armjrnladd_lock /* варианты обработки добавления */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armjrnladd_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armjrnladd set lockuserid =auserid ,locksessionid=null  where armjrnladdid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armjrnladd set lockuserid=null ,locksessionid =acursession  where armjrnladdid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists armjrnladd_unlock
go
create procedure armjrnladd_unlock /* варианты обработки добавления */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armjrnladd_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armjrnladd set lockuserid =null  where armjrnladdid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armjrnladd set locksessionid =null  where armjrnladdid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS armjrnladd_client_trigger
GO

create procedure armjrnladd_client_trigger  (
 acursession varchar(38),
 aARMJRNLADDid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists entrypoints_brief
go

create procedure entrypoints_brief  (
 acursession varchar(38),
 aentrypointsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aentrypointsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from entrypoints where entrypointsid=g2b(aentrypointsid);
 if  aec &gt;0 then
   set abrief=entrypoints_brief_f(g2b(aentrypointsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists entrypoints_delete
go

create procedure entrypoints_delete /*меню*/ (
 acursession varchar(38),
 aentrypointsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from entrypoints where entrypointsid=g2b(aentrypointsid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=entrypoints' result;
    leave body;
  end if;
 call entrypoints_logger(acursession,aentrypointsid) ; 
  delete from  entrypoints 
  where  entrypointsid = g2b(aentrypointsid) ;
  delete from num_values where ownerpartname='entrypoints' and ownerrowid=g2b(aentrypointsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*меню*/

drop procedure if exists entrypoints_save
go

create procedure entrypoints_save /*меню*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aentrypointsid varchar(38)
,aparentrowid varchar(38) 
,asequence
 integer/* последовательность *//* последовательность */
,aname
 varchar (38)/* название *//* название */
,acaption
 varchar (255)/* заголовок *//* заголовок */
,aastoolbaritem
 integer/* включить в тулбар *//* включить в тулбар */
,aactiontype
 integer/* вариант действия *//* вариант действия */
,athefilter varchar(38)/* фильтр *//* фильтр */
,ajournal varchar(38)/* журнал *//* журнал */
,areport varchar(38)/* отчет *//* отчет */
,adocument varchar(38)/* документ *//* документ */
,amethod varchar(38)/* метод *//* метод */
,aiconfile
 varchar (2000)/* файл картинки *//* файл картинки */
,atheextention varchar(38)/* расширение *//* расширение */
,aarm varchar(38)/* арм *//* арм */
,athecomment
 text/* примечание *//* примечание */
,aobjecttype varchar(38)/* тип документа *//* тип документа */
,ajournalfixedquery
 text/* ограничения к журналу *//* ограничения к журналу */
,aallowadd
 integer/* разрешено добавление *//* разрешено добавление */
,aallowedit
 integer/* разрешено редактирование *//* разрешено редактирование */
,aallowdel
 integer/* рарешено удаление *//* рарешено удаление */
,aallowfilter
 integer/* разрешен фильтр *//* разрешен фильтр */
,aallowprint
 integer/* разрешена печать *//* разрешена печать */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from entrypoints where entrypointsid=g2b(aentrypointsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=entrypoints' result;
    leave body;
  end if;
 start transaction ; 
 call entrypoints_logger(acursession,aentrypointsid) ; 
 update  entrypoints set changestamp=now() 
,parentrowid= g2b(aparentrowid)
,
  sequence=asequence
,
  name=aname
,
  caption=acaption
,
  astoolbaritem=aastoolbaritem
,
  actiontype=aactiontype
,
  thefilter=g2b(athefilter)
,
  journal=g2b(ajournal)
,
  report=g2b(areport)
,
  document=g2b(adocument)
,
  method=g2b(amethod)
,
  iconfile=aiconfile
,
  theextention=g2b(atheextention)
,
  arm=g2b(aarm)
,
  thecomment=athecomment
,
  objecttype=g2b(aobjecttype)
,
  journalfixedquery=ajournalfixedquery
,
  allowadd=aallowadd
,
  allowedit=aallowedit
,
  allowdel=aallowdel
,
  allowfilter=aallowfilter
,
  allowprint=aallowprint
  where  entrypointsid = g2b(aentrypointsid) ;


call entrypoints_client_trigger(acursession,aentrypointsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=entrypoints' result;
    leave body;
  end if;
 start transaction;  
 insert into   entrypoints
 (  changestamp,entrypointsid 
,parentrowid
,instanceid
,sequence

,name

,caption

,astoolbaritem

,actiontype

,thefilter

,journal

,report

,document

,method

,iconfile

,theextention

,arm

,thecomment

,objecttype

,journalfixedquery

,allowadd

,allowedit

,allowdel

,allowfilter

,allowprint

 ) values (now(), g2b(aentrypointsid) 
,g2b(aparentrowid)
,g2b(ainstanceid)
,asequence

,aname

,acaption

,aastoolbaritem

,aactiontype

,g2b(athefilter)

,g2b(ajournal)

,g2b(areport)

,g2b(adocument)

,g2b(amethod)

,aiconfile

,g2b(atheextention)

,g2b(aarm)

,athecomment

,g2b(aobjecttype)

,ajournalfixedquery

,aallowadd

,aallowedit

,aallowdel

,aallowfilter

,aallowprint

 ) ;


call entrypoints_client_trigger(acursession,aentrypointsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists epfilterlink_brief
go

create procedure epfilterlink_brief  (
 acursession varchar(38),
 aepfilterlinkid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aepfilterlinkid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from epfilterlink where epfilterlinkid=g2b(aepfilterlinkid);
 if  aec &gt;0 then
   set abrief=epfilterlink_brief_f(g2b(aepfilterlinkid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists epfilterlink_delete
go

create procedure epfilterlink_delete /*привязка фильтра к журналу*/ (
 acursession varchar(38),
 aepfilterlinkid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from epfilterlink where epfilterlinkid=g2b(aepfilterlinkid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=epfilterlink' result;
    leave body;
  end if;
 call epfilterlink_logger(acursession,aepfilterlinkid) ; 
  delete from  epfilterlink 
  where  epfilterlinkid = g2b(aepfilterlinkid) ;
  delete from num_values where ownerpartname='epfilterlink' and ownerrowid=g2b(aepfilterlinkid);
  end if;
    select 'ok' result;
 end 
go
GO

/*привязка фильтра*/

drop procedure if exists epfilterlink_save
go

create procedure epfilterlink_save /*привязка фильтра к журналу*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aepfilterlinkid varchar(38)
,arowsource
 varchar (255)/* источник *//* источник */
,atheexpression
 text/* выражение *//* выражение */
,afilterfield
 varchar (255)/* поле фильтра *//* поле фильтра */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from epfilterlink where epfilterlinkid=g2b(aepfilterlinkid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=epfilterlink' result;
    leave body;
  end if;
 start transaction ; 
 call epfilterlink_logger(acursession,aepfilterlinkid) ; 
 update  epfilterlink set changestamp=now() 
,
  rowsource=arowsource
,
  theexpression=atheexpression
,
  filterfield=afilterfield
  where  epfilterlinkid = g2b(aepfilterlinkid) ;


call epfilterlink_client_trigger(acursession,aepfilterlinkid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=epfilterlink' result;
    leave body;
  end if;
 start transaction;  
 insert into   epfilterlink
 (  changestamp,epfilterlinkid 
,parentstructrowid
,rowsource

,theexpression

,filterfield

 ) values (now(), g2b(aepfilterlinkid) 
,g2b(aparentstructrowid)
,arowsource

,atheexpression

,afilterfield

 ) ;


call epfilterlink_client_trigger(acursession,aepfilterlinkid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists epfilterlink_copy
go

create procedure epfilterlink_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into epfilterlink 
 ( epfilterlinkid 
,parentstructrowid
,rowsource

,theexpression

,filterfield

 ) select 
copymap(acopyaction,b2g(epfilterlinkid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,rowsource

,theexpression

,filterfield

 from epfilterlink
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists entrypoints_copy
go

create procedure entrypoints_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_entrypoints cursor for
select entrypointsid from entrypoints where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into entrypoints 
 ( entrypointsid 
,instanceid
,parentrowid
,sequence

,name

,caption

,astoolbaritem

,actiontype

,thefilter

,journal

,report

,document

,method

,iconfile

,theextention

,arm

,thecomment

,objecttype

,journalfixedquery

,allowadd

,allowedit

,allowdel

,allowfilter

,allowprint

 ) select 
copymap(acopyaction,b2g(entrypointsid)) 
,copymap(acopyaction,b2g(instanceid))
,copymap(acopyaction,b2g(parentrowid))
,sequence

,name

,caption

,astoolbaritem

,actiontype

,thefilter

,journal

,report

,document

,method

,iconfile

,theextention

,arm

,thecomment

,objecttype

,journalfixedquery

,allowadd

,allowedit

,allowdel

,allowfilter

,allowprint

 from entrypoints
 where instanceid =g2b( ainstanceid); 
open copy_cursor_entrypoints;
  set  fetch_done=false;
fetch copy_cursor_entrypoints into aid;
while not fetch_done do 
    call epfilterlink_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_entrypoints into aid;
end while;

close copy_cursor_entrypoints;
 end 
go
GO


drop procedure if exists entrypoints_logger
go

create procedure entrypoints_logger /*меню*/ (
 acursession varchar(38),
 aentrypointsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists epfilterlink_logger
go

create procedure epfilterlink_logger /*привязка фильтра к журналу*/ (
 acursession varchar(38),
 aepfilterlinkid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists entrypoints_parent
go
create procedure entrypoints_parent /* меню*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from entrypoints where  entrypointsid=arowid;
 end 
go
GO


drop procedure if exists entrypoints_islocked
go
create procedure entrypoints_islocked /* меню */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from entrypoints where entrypointsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists entrypoints_lock
go
create procedure entrypoints_lock /* меню */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call entrypoints_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update entrypoints set lockuserid =auserid ,locksessionid=null  where entrypointsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update entrypoints set lockuserid=null ,locksessionid =acursession  where entrypointsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists entrypoints_unlock
go
create procedure entrypoints_unlock /* меню */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call entrypoints_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update entrypoints set lockuserid =null  where entrypointsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update entrypoints set locksessionid =null  where entrypointsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS entrypoints_client_trigger
GO

create procedure entrypoints_client_trigger  (
 acursession varchar(38),
 aEntryPointsid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists epfilterlink_parent
go
create procedure epfilterlink_parent /* привязка фильтра к журналу*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from epfilterlink where  epfilterlinkid=arowid;
  set aparenttable = 'entrypoints';
 end 
go
GO


drop procedure if exists epfilterlink_islocked
go
create procedure epfilterlink_islocked /* привязка фильтра к журналу */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from epfilterlink where epfilterlinkid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists epfilterlink_lock
go
create procedure epfilterlink_lock /* привязка фильтра к журналу */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call epfilterlink_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update epfilterlink set lockuserid =auserid ,locksessionid=null  where epfilterlinkid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update epfilterlink set lockuserid=null ,locksessionid =acursession  where epfilterlinkid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists epfilterlink_unlock
go
create procedure epfilterlink_unlock /* привязка фильтра к журналу */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call epfilterlink_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update epfilterlink set lockuserid =null  where epfilterlinkid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update epfilterlink set locksessionid =null  where epfilterlinkid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS epfilterlink_client_trigger
GO

create procedure epfilterlink_client_trigger  (
 acursession varchar(38),
 aEPFilterLinkid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists workplace_brief
go

create procedure workplace_brief  (
 acursession varchar(38),
 aworkplaceid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aworkplaceid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from workplace where workplaceid=g2b(aworkplaceid);
 if  aec &gt;0 then
   set abrief=workplace_brief_f(g2b(aworkplaceid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists workplace_delete
go

create procedure workplace_delete /*арм*/ (
 acursession varchar(38),
 aworkplaceid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from workplace where workplaceid=g2b(aworkplaceid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=workplace' result;
    leave body;
  end if;
 call workplace_logger(acursession,aworkplaceid) ; 
  delete from  workplace 
  where  workplaceid = g2b(aworkplaceid) ;
  delete from num_values where ownerpartname='workplace' and ownerrowid=g2b(aworkplaceid);
  end if;
    select 'ok' result;
 end 
go
GO

/*арм*/

drop procedure if exists workplace_save
go

create procedure workplace_save /*арм*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aworkplaceid varchar(38)
,aname
 varchar (255)/* название *//* название */
,acaption
 varchar (255)/* заголовок *//* заголовок */
,atheversion
 varchar (30)/* версия *//* версия */
,atheplatform
 integer/* платформа реализации *//* платформа реализации */
,athecomment
 text/* примечание *//* примечание */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from workplace where workplaceid=g2b(aworkplaceid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=workplace' result;
    leave body;
  end if;
 start transaction ; 
 call workplace_logger(acursession,aworkplaceid) ; 
 update  workplace set changestamp=now() 
,
  name=aname
,
  caption=acaption
,
  theversion=atheversion
,
  theplatform=atheplatform
,
  thecomment=athecomment
  where  workplaceid = g2b(aworkplaceid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from workplace where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=арм правило=(уникальность для арм.название)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call workplace_client_trigger(acursession,aworkplaceid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=workplace' result;
    leave body;
  end if;
select count(*) into aec from workplace where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;workplace&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   workplace
 (  changestamp,workplaceid 
,instanceid
,name

,caption

,theversion

,theplatform

,thecomment

 ) values (now(), g2b(aworkplaceid) 
,g2b(ainstanceid)
,aname

,acaption

,atheversion

,atheplatform

,athecomment

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from workplace where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=арм правило=(уникальность для арм.название)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call workplace_client_trigger(acursession,aworkplaceid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists workplace_copy
go

create procedure workplace_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into workplace 
 ( workplaceid 
,instanceid
,name

,caption

,theversion

,theplatform

,thecomment

 ) select 
copymap(acopyaction,b2g(workplaceid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,caption

,theversion

,theplatform

,thecomment

 from workplace
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists workplace_logger
go

create procedure workplace_logger /*арм*/ (
 acursession varchar(38),
 aworkplaceid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists workplace_parent
go
create procedure workplace_parent /* арм*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from workplace where  workplaceid=arowid;
 end 
go
GO


drop procedure if exists workplace_islocked
go
create procedure workplace_islocked /* арм */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from workplace where workplaceid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists workplace_lock
go
create procedure workplace_lock /* арм */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call workplace_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update workplace set lockuserid =auserid ,locksessionid=null  where workplaceid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update workplace set lockuserid=null ,locksessionid =acursession  where workplaceid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists workplace_unlock
go
create procedure workplace_unlock /* арм */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call workplace_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update workplace set lockuserid =null  where workplaceid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update workplace set locksessionid =null  where workplaceid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS workplace_client_trigger
GO

create procedure workplace_client_trigger  (
 acursession varchar(38),
 aWorkPlaceid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists armtypes_brief
go

create procedure armtypes_brief  (
 acursession varchar(38),
 aarmtypesid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmtypesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armtypes where armtypesid=g2b(aarmtypesid);
 if  aec &gt;0 then
   set abrief=armtypes_brief_f(g2b(aarmtypesid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists armtypes_delete
go

create procedure armtypes_delete /*типы документов, которые подключаются в mdi режиме*/ (
 acursession varchar(38),
 aarmtypesid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armtypes where armtypesid=g2b(aarmtypesid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=armtypes' result;
    leave body;
  end if;
 call armtypes_logger(acursession,aarmtypesid) ; 
  delete from  armtypes 
  where  armtypesid = g2b(aarmtypesid) ;
  delete from num_values where ownerpartname='armtypes' and ownerrowid=g2b(aarmtypesid);
  end if;
    select 'ok' result;
 end 
go
GO

/*список типов*/

drop procedure if exists armtypes_save
go

create procedure armtypes_save /*типы документов, которые подключаются в mdi режиме*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarmtypesid varchar(38)
,athedocumenttype varchar(38)/* тип документа *//* тип документа */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armtypes where armtypesid=g2b(aarmtypesid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=armtypes' result;
    leave body;
  end if;
 start transaction ; 
 call armtypes_logger(acursession,aarmtypesid) ; 
 update  armtypes set changestamp=now() 
,
  thedocumenttype=g2b(athedocumenttype)
  where  armtypesid = g2b(aarmtypesid) ;


call armtypes_client_trigger(acursession,aarmtypesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=armtypes' result;
    leave body;
  end if;
 start transaction;  
 insert into   armtypes
 (  changestamp,armtypesid 
,instanceid
,thedocumenttype

 ) values (now(), g2b(aarmtypesid) 
,g2b(ainstanceid)
,g2b(athedocumenttype)

 ) ;


call armtypes_client_trigger(acursession,aarmtypesid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists armtypes_copy
go

create procedure armtypes_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armtypes 
 ( armtypesid 
,instanceid
,thedocumenttype

 ) select 
copymap(acopyaction,b2g(armtypesid)) 
,copymap(acopyaction,b2g(instanceid))
,thedocumenttype

 from armtypes
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists armtypes_logger
go

create procedure armtypes_logger /*типы документов, которые подключаются в mdi режиме*/ (
 acursession varchar(38),
 aarmtypesid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists armtypes_parent
go
create procedure armtypes_parent /* типы документов, которые подключаются в mdi режиме*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from armtypes where  armtypesid=arowid;
 end 
go
GO


drop procedure if exists armtypes_islocked
go
create procedure armtypes_islocked /* типы документов, которые подключаются в mdi режиме */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armtypes where armtypesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists armtypes_lock
go
create procedure armtypes_lock /* типы документов, которые подключаются в mdi режиме */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armtypes_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armtypes set lockuserid =auserid ,locksessionid=null  where armtypesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armtypes set lockuserid=null ,locksessionid =acursession  where armtypesid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists armtypes_unlock
go
create procedure armtypes_unlock /* типы документов, которые подключаются в mdi режиме */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armtypes_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armtypes set lockuserid =null  where armtypesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armtypes set locksessionid =null  where armtypesid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS armtypes_client_trigger
GO

create procedure armtypes_client_trigger  (
 acursession varchar(38),
 aARMTypesid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists iu_crole_brief
go

create procedure iu_crole_brief  (
 acursession varchar(38),
 aiu_croleid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_croleid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_crole where iu_croleid=g2b(aiu_croleid);
 if  aec &gt;0 then
   set abrief=iu_crole_brief_f(g2b(aiu_croleid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists iu_crole_delete
go

create procedure iu_crole_delete /*роль в процессе производства*/ (
 acursession varchar(38),
 aiu_croleid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_crole where iu_croleid=g2b(aiu_croleid);
if aec&gt;0 then
 select checkoperation( acursession ,'bpdr.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=iu_crole' result;
    leave body;
  end if;
 call iu_crole_logger(acursession,aiu_croleid) ; 
  delete from  iu_crole 
  where  iu_croleid = g2b(aiu_croleid) ;
  delete from num_values where ownerpartname='iu_crole' and ownerrowid=g2b(aiu_croleid);
  end if;
    select 'ok' result;
 end 
go
GO


drop procedure if exists iu_crole_archive
go

create procedure iu_crole_archive /*роль в процессе производства*/ (
 acursession varchar(38),
 aiu_croleid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare atmpid binary(16);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_crole where iu_croleid=g2b(aiu_croleid);
if aec&gt;0 then
 select checkoperation( acursession ,'bpdr.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=iu_crole' result;
    leave body;
  end if;
 call iu_crole_logger(acursession,aiu_croleid) ; 
  update   iu_crole set archived = 1 
  where  iu_croleid = g2b(aiu_croleid) ;
  end if;
    select 'ok' result;
 end 
go
GO

/*роль*/

drop procedure if exists iu_crole_save
go

create procedure iu_crole_save /*роль в процессе производства*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_croleid varchar(38)
,aname
 varchar (120)/* название *//* название */
,aallowsetuser
 integer/* требует явного назначения *//* требует явного назначения */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_crole where iu_croleid=g2b(aiu_croleid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bpdr.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=iu_crole' result;
    leave body;
  end if;
 start transaction ; 
 call iu_crole_logger(acursession,aiu_croleid) ; 
 update  iu_crole set changestamp=now() 
,
  name=aname
,
  allowsetuser=aallowsetuser
  where  iu_croleid = g2b(aiu_croleid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from iu_crole where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=роль правило=(уникальность для роль.название)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_crole_client_trigger(acursession,aiu_croleid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bpdr.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=iu_crole' result;
    leave body;
  end if;
 start transaction;  
 insert into   iu_crole
 (  changestamp,iu_croleid 
,instanceid
,name

,allowsetuser

 ) values (now(), g2b(aiu_croleid) 
,g2b(ainstanceid)
,aname

,aallowsetuser

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from iu_crole where 1=1  
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=роль правило=(уникальность для роль.название)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_crole_client_trigger(acursession,aiu_croleid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists iu_crole_copy
go

create procedure iu_crole_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_crole 
 ( iu_croleid 
,instanceid
,archived
,name

,allowsetuser

 ) select 
copymap(acopyaction,b2g(iu_croleid)) 
,copymap(acopyaction,b2g(instanceid))
,archived
,name

,allowsetuser

 from iu_crole
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists iu_crole_logger
go

create procedure iu_crole_logger /*роль в процессе производства*/ (
 acursession varchar(38),
 aiu_croleid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists iu_crole_parent
go
create procedure iu_crole_parent /* роль в процессе производства*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_crole where  iu_croleid=arowid;
 end 
go
GO


drop procedure if exists iu_crole_islocked
go
create procedure iu_crole_islocked /* роль в процессе производства */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_crole where iu_croleid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists iu_crole_lock
go
create procedure iu_crole_lock /* роль в процессе производства */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_crole_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_crole set lockuserid =auserid ,locksessionid=null  where iu_croleid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_crole set lockuserid=null ,locksessionid =acursession  where iu_croleid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists iu_crole_unlock
go
create procedure iu_crole_unlock /* роль в процессе производства */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_crole_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_crole set lockuserid =null  where iu_croleid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_crole set locksessionid =null  where iu_croleid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS iu_crole_client_trigger
GO

create procedure iu_crole_client_trigger  (
 acursession varchar(38),
 aiu_croleid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_connecttype_brief
go

create procedure tpld_connecttype_brief  (
 acursession varchar(38),
 atpld_connecttypeid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_connecttypeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_connecttype where tpld_connecttypeid=g2b(atpld_connecttypeid);
 if  aec &gt;0 then
   set abrief=tpld_connecttype_brief_f(g2b(atpld_connecttypeid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_connecttype_delete
go

create procedure tpld_connecttype_delete /*тип подключения*/ (
 acursession varchar(38),
 atpld_connecttypeid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_connecttype where tpld_connecttypeid=g2b(atpld_connecttypeid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_connecttype' result;
    leave body;
  end if;
 call tpld_connecttype_logger(acursession,atpld_connecttypeid) ; 
  delete from  tpld_connecttype 
  where  tpld_connecttypeid = g2b(atpld_connecttypeid) ;
  delete from num_values where ownerpartname='tpld_connecttype' and ownerrowid=g2b(atpld_connecttypeid);
  end if;
    select 'ok' result;
 end 
go
GO

/*тип подключения*/

drop procedure if exists tpld_connecttype_save
go

create procedure tpld_connecttype_save /*тип подключения*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_connecttypeid varchar(38)
,aname
 varchar (128)/* название  *//* название  */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_connecttype where tpld_connecttypeid=g2b(atpld_connecttypeid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_connecttype' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_connecttype_logger(acursession,atpld_connecttypeid) ; 
 update  tpld_connecttype set changestamp=now() 
,
  name=aname
  where  tpld_connecttypeid = g2b(atpld_connecttypeid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_connecttype where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=тип подключения правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_connecttype_client_trigger(acursession,atpld_connecttypeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_connecttype' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_connecttype
 (  changestamp,tpld_connecttypeid 
,instanceid
,name

 ) values (now(), g2b(atpld_connecttypeid) 
,g2b(ainstanceid)
,aname

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_connecttype where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=тип подключения правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_connecttype_client_trigger(acursession,atpld_connecttypeid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_connecttype_copy
go

create procedure tpld_connecttype_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_connecttype 
 ( tpld_connecttypeid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(tpld_connecttypeid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from tpld_connecttype
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_connecttype_logger
go

create procedure tpld_connecttype_logger /*тип подключения*/ (
 acursession varchar(38),
 atpld_connecttypeid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_connecttype_parent
go
create procedure tpld_connecttype_parent /* тип подключения*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_connecttype where  tpld_connecttypeid=arowid;
 end 
go
GO


drop procedure if exists tpld_connecttype_islocked
go
create procedure tpld_connecttype_islocked /* тип подключения */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_connecttype where tpld_connecttypeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_connecttype_lock
go
create procedure tpld_connecttype_lock /* тип подключения */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_connecttype_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_connecttype set lockuserid =auserid ,locksessionid=null  where tpld_connecttypeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_connecttype set lockuserid=null ,locksessionid =acursession  where tpld_connecttypeid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_connecttype_unlock
go
create procedure tpld_connecttype_unlock /* тип подключения */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_connecttype_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_connecttype set lockuserid =null  where tpld_connecttypeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_connecttype set locksessionid =null  where tpld_connecttypeid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_connecttype_client_trigger
GO

create procedure tpld_connecttype_client_trigger  (
 acursession varchar(38),
 aTPLD_CONNECTTYPEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_devclass_brief
go

create procedure tpld_devclass_brief  (
 acursession varchar(38),
 atpld_devclassid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_devclassid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_devclass where tpld_devclassid=g2b(atpld_devclassid);
 if  aec &gt;0 then
   set abrief=tpld_devclass_brief_f(g2b(atpld_devclassid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_devclass_delete
go

create procedure tpld_devclass_delete /*справочник классов устройств
тепло, электричество и т.п.*/ (
 acursession varchar(38),
 atpld_devclassid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_devclass where tpld_devclassid=g2b(atpld_devclassid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_devclass' result;
    leave body;
  end if;
 call tpld_devclass_logger(acursession,atpld_devclassid) ; 
  delete from  tpld_devclass 
  where  tpld_devclassid = g2b(atpld_devclassid) ;
  delete from num_values where ownerpartname='tpld_devclass' and ownerrowid=g2b(atpld_devclassid);
  end if;
    select 'ok' result;
 end 
go
GO

/*класс устройства*/

drop procedure if exists tpld_devclass_save
go

create procedure tpld_devclass_save /*справочник классов устройств
тепло, электричество и т.п.*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_devclassid varchar(38)
,aname
 varchar (128)/* название  *//* название  */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_devclass where tpld_devclassid=g2b(atpld_devclassid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_devclass' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_devclass_logger(acursession,atpld_devclassid) ; 
 update  tpld_devclass set changestamp=now() 
,
  name=aname
  where  tpld_devclassid = g2b(atpld_devclassid) ;


call tpld_devclass_client_trigger(acursession,atpld_devclassid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_devclass' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_devclass
 (  changestamp,tpld_devclassid 
,instanceid
,name

 ) values (now(), g2b(atpld_devclassid) 
,g2b(ainstanceid)
,aname

 ) ;


call tpld_devclass_client_trigger(acursession,atpld_devclassid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_devclass_copy
go

create procedure tpld_devclass_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_devclass 
 ( tpld_devclassid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(tpld_devclassid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from tpld_devclass
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_devclass_logger
go

create procedure tpld_devclass_logger /*справочник классов устройств
тепло, электричество и т.п.*/ (
 acursession varchar(38),
 atpld_devclassid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_devclass_parent
go
create procedure tpld_devclass_parent /* справочник классов устройств
тепло, электричество и т.п.*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_devclass where  tpld_devclassid=arowid;
 end 
go
GO


drop procedure if exists tpld_devclass_islocked
go
create procedure tpld_devclass_islocked /* справочник классов устройств
тепло, электричество и т.п. */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_devclass where tpld_devclassid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_devclass_lock
go
create procedure tpld_devclass_lock /* справочник классов устройств
тепло, электричество и т.п. */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_devclass_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_devclass set lockuserid =auserid ,locksessionid=null  where tpld_devclassid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_devclass set lockuserid=null ,locksessionid =acursession  where tpld_devclassid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_devclass_unlock
go
create procedure tpld_devclass_unlock /* справочник классов устройств
тепло, электричество и т.п. */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_devclass_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_devclass set lockuserid =null  where tpld_devclassid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_devclass set locksessionid =null  where tpld_devclassid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_devclass_client_trigger
GO

create procedure tpld_devclass_client_trigger  (
 acursession varchar(38),
 aTPLD_DEVCLASSid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_f_brief
go

create procedure tpld_f_brief  (
 acursession varchar(38),
 atpld_fid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_fid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_f where tpld_fid=g2b(atpld_fid);
 if  aec &gt;0 then
   set abrief=tpld_f_brief_f(g2b(atpld_fid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_f_delete
go

create procedure tpld_f_delete /*филиал организации*/ (
 acursession varchar(38),
 atpld_fid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_f where tpld_fid=g2b(atpld_fid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_f' result;
    leave body;
  end if;
 call tpld_f_logger(acursession,atpld_fid) ; 
  delete from  tpld_f 
  where  tpld_fid = g2b(atpld_fid) ;
  delete from num_values where ownerpartname='tpld_f' and ownerrowid=g2b(atpld_fid);
  end if;
    select 'ok' result;
 end 
go
GO

/*филиал организации*/

drop procedure if exists tpld_f_save
go

create procedure tpld_f_save /*филиал организации*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_fid varchar(38)
,aname
 varchar (128)/* название  *//* название  */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_f where tpld_fid=g2b(atpld_fid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_f' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_f_logger(acursession,atpld_fid) ; 
 update  tpld_f set changestamp=now() 
,
  name=aname
  where  tpld_fid = g2b(atpld_fid) ;


call tpld_f_client_trigger(acursession,atpld_fid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_f' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_f
 (  changestamp,tpld_fid 
,instanceid
,name

 ) values (now(), g2b(atpld_fid) 
,g2b(ainstanceid)
,aname

 ) ;


call tpld_f_client_trigger(acursession,atpld_fid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_f_copy
go

create procedure tpld_f_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_f 
 ( tpld_fid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(tpld_fid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from tpld_f
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_f_logger
go

create procedure tpld_f_logger /*филиал организации*/ (
 acursession varchar(38),
 atpld_fid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_f_parent
go
create procedure tpld_f_parent /* филиал организации*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_f where  tpld_fid=arowid;
 end 
go
GO


drop procedure if exists tpld_f_islocked
go
create procedure tpld_f_islocked /* филиал организации */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_f where tpld_fid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_f_lock
go
create procedure tpld_f_lock /* филиал организации */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_f_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_f set lockuserid =auserid ,locksessionid=null  where tpld_fid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_f set lockuserid=null ,locksessionid =acursession  where tpld_fid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_f_unlock
go
create procedure tpld_f_unlock /* филиал организации */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_f_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_f set lockuserid =null  where tpld_fid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_f set locksessionid =null  where tpld_fid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_f_client_trigger
GO

create procedure tpld_f_client_trigger  (
 acursession varchar(38),
 aTPLD_Fid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_snab_brief
go

create procedure tpld_snab_brief  (
 acursession varchar(38),
 atpld_snabid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_snabid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_snab where tpld_snabid=g2b(atpld_snabid);
 if  aec &gt;0 then
   set abrief=tpld_snab_brief_f(g2b(atpld_snabid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_snab_delete
go

create procedure tpld_snab_delete /*снабжающая организация*/ (
 acursession varchar(38),
 atpld_snabid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_snab where tpld_snabid=g2b(atpld_snabid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_snab' result;
    leave body;
  end if;
 call tpld_snab_logger(acursession,atpld_snabid) ; 
  delete from  tpld_snab 
  where  tpld_snabid = g2b(atpld_snabid) ;
  delete from num_values where ownerpartname='tpld_snab' and ownerrowid=g2b(atpld_snabid);
  end if;
    select 'ok' result;
 end 
go
GO

/*снабжающая организация*/

drop procedure if exists tpld_snab_save
go

create procedure tpld_snab_save /*снабжающая организация*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_snabid varchar(38)
,acname
 varchar (128)/* название *//* название */
,acaddress
 varchar (400)/* адрес *//* адрес */
,acfio
 varchar (128)/* контактное лицо *//* контактное лицо */
,acphone
 varchar (64)/* телефон *//* телефон */
,acregion
 varchar (128)/* регион *//* регион */
,asupplier varchar(38)/* поставщик *//* поставщик */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_snab where tpld_snabid=g2b(atpld_snabid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_snab' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_snab_logger(acursession,atpld_snabid) ; 
 update  tpld_snab set changestamp=now() 
,
  cname=acname
,
  caddress=acaddress
,
  cfio=acfio
,
  cphone=acphone
,
  cregion=acregion
,
  supplier=g2b(asupplier)
  where  tpld_snabid = g2b(atpld_snabid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_snab where  instanceid=g2b(ainstanceid) 
 and cname=acname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=снабжающая организация правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_snab_client_trigger(acursession,atpld_snabid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_snab' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_snab
 (  changestamp,tpld_snabid 
,instanceid
,cname

,caddress

,cfio

,cphone

,cregion

,supplier

 ) values (now(), g2b(atpld_snabid) 
,g2b(ainstanceid)
,acname

,acaddress

,acfio

,acphone

,acregion

,g2b(asupplier)

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_snab where  instanceid=g2b(ainstanceid) 
 and cname=acname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=снабжающая организация правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_snab_client_trigger(acursession,atpld_snabid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_snab_copy
go

create procedure tpld_snab_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_snab 
 ( tpld_snabid 
,instanceid
,cname

,caddress

,cfio

,cphone

,cregion

,supplier

 ) select 
copymap(acopyaction,b2g(tpld_snabid)) 
,copymap(acopyaction,b2g(instanceid))
,cname

,caddress

,cfio

,cphone

,cregion

,supplier

 from tpld_snab
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_snab_logger
go

create procedure tpld_snab_logger /*снабжающая организация*/ (
 acursession varchar(38),
 atpld_snabid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_snab_parent
go
create procedure tpld_snab_parent /* снабжающая организация*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_snab where  tpld_snabid=arowid;
 end 
go
GO


drop procedure if exists tpld_snab_islocked
go
create procedure tpld_snab_islocked /* снабжающая организация */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_snab where tpld_snabid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_snab_lock
go
create procedure tpld_snab_lock /* снабжающая организация */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_snab_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_snab set lockuserid =auserid ,locksessionid=null  where tpld_snabid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_snab set lockuserid=null ,locksessionid =acursession  where tpld_snabid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_snab_unlock
go
create procedure tpld_snab_unlock /* снабжающая организация */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_snab_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_snab set lockuserid =null  where tpld_snabid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_snab set locksessionid =null  where tpld_snabid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_snab_client_trigger
GO

create procedure tpld_snab_client_trigger  (
 acursession varchar(38),
 aTPLD_SNABid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_paramtype_brief
go

create procedure tpld_paramtype_brief  (
 acursession varchar(38),
 atpld_paramtypeid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_paramtypeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_paramtype where tpld_paramtypeid=g2b(atpld_paramtypeid);
 if  aec &gt;0 then
   set abrief=tpld_paramtype_brief_f(g2b(atpld_paramtypeid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_paramtype_delete
go

create procedure tpld_paramtype_delete /*тип архива*/ (
 acursession varchar(38),
 atpld_paramtypeid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_paramtype where tpld_paramtypeid=g2b(atpld_paramtypeid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_paramtype' result;
    leave body;
  end if;
 call tpld_paramtype_logger(acursession,atpld_paramtypeid) ; 
  delete from  tpld_paramtype 
  where  tpld_paramtypeid = g2b(atpld_paramtypeid) ;
  delete from num_values where ownerpartname='tpld_paramtype' and ownerrowid=g2b(atpld_paramtypeid);
  end if;
    select 'ok' result;
 end 
go
GO

/*тип архива*/

drop procedure if exists tpld_paramtype_save
go

create procedure tpld_paramtype_save /*тип архива*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_paramtypeid varchar(38)
,aname
 varchar (64)/* название *//* название */
,athecode
 varchar (1)/* код  *//* код  */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_paramtype where tpld_paramtypeid=g2b(atpld_paramtypeid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_paramtype' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_paramtype_logger(acursession,atpld_paramtypeid) ; 
 update  tpld_paramtype set changestamp=now() 
,
  name=aname
,
  thecode=athecode
  where  tpld_paramtypeid = g2b(atpld_paramtypeid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_paramtype where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=тип архива правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_paramtype_client_trigger(acursession,atpld_paramtypeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_paramtype' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_paramtype
 (  changestamp,tpld_paramtypeid 
,instanceid
,name

,thecode

 ) values (now(), g2b(atpld_paramtypeid) 
,g2b(ainstanceid)
,aname

,athecode

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_paramtype where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=тип архива правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_paramtype_client_trigger(acursession,atpld_paramtypeid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_paramtype_copy
go

create procedure tpld_paramtype_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_paramtype 
 ( tpld_paramtypeid 
,instanceid
,name

,thecode

 ) select 
copymap(acopyaction,b2g(tpld_paramtypeid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,thecode

 from tpld_paramtype
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_paramtype_logger
go

create procedure tpld_paramtype_logger /*тип архива*/ (
 acursession varchar(38),
 atpld_paramtypeid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_paramtype_parent
go
create procedure tpld_paramtype_parent /* тип архива*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_paramtype where  tpld_paramtypeid=arowid;
 end 
go
GO


drop procedure if exists tpld_paramtype_islocked
go
create procedure tpld_paramtype_islocked /* тип архива */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_paramtype where tpld_paramtypeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_paramtype_lock
go
create procedure tpld_paramtype_lock /* тип архива */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_paramtype_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_paramtype set lockuserid =auserid ,locksessionid=null  where tpld_paramtypeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_paramtype set lockuserid=null ,locksessionid =acursession  where tpld_paramtypeid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_paramtype_unlock
go
create procedure tpld_paramtype_unlock /* тип архива */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_paramtype_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_paramtype set lockuserid =null  where tpld_paramtypeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_paramtype set locksessionid =null  where tpld_paramtypeid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_paramtype_client_trigger
GO

create procedure tpld_paramtype_client_trigger  (
 acursession varchar(38),
 aTPLD_PARAMTYPEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_grp_brief
go

create procedure tpld_grp_brief  (
 acursession varchar(38),
 atpld_grpid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_grpid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_grp where tpld_grpid=g2b(atpld_grpid);
 if  aec &gt;0 then
   set abrief=tpld_grp_brief_f(g2b(atpld_grpid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_grp_delete
go

create procedure tpld_grp_delete /*группы узлов учета*/ (
 acursession varchar(38),
 atpld_grpid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_grp where tpld_grpid=g2b(atpld_grpid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_grp' result;
    leave body;
  end if;
 call tpld_grp_logger(acursession,atpld_grpid) ; 
  delete from  tpld_grp 
  where  tpld_grpid = g2b(atpld_grpid) ;
  delete from num_values where ownerpartname='tpld_grp' and ownerrowid=g2b(atpld_grpid);
  end if;
    select 'ok' result;
 end 
go
GO

/*группа*/

drop procedure if exists tpld_grp_save
go

create procedure tpld_grp_save /*группы узлов учета*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_grpid varchar(38)
,atheclient varchar(38)/* клиент *//* клиент */
,acgrpnm
 varchar (72)/* название группы *//* название группы */
,actxt
 varchar (800)/* описание *//* описание */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_grp where tpld_grpid=g2b(atpld_grpid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_grp' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_grp_logger(acursession,atpld_grpid) ; 
 update  tpld_grp set changestamp=now() 
,
  theclient=g2b(atheclient)
,
  cgrpnm=acgrpnm
,
  ctxt=actxt
  where  tpld_grpid = g2b(atpld_grpid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_grp where  instanceid=g2b(ainstanceid) 
 and cgrpnm=acgrpnm;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=группа правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_grp_client_trigger(acursession,atpld_grpid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_grp' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_grp
 (  changestamp,tpld_grpid 
,instanceid
,theclient

,cgrpnm

,ctxt

 ) values (now(), g2b(atpld_grpid) 
,g2b(ainstanceid)
,g2b(atheclient)

,acgrpnm

,actxt

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_grp where  instanceid=g2b(ainstanceid) 
 and cgrpnm=acgrpnm;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=группа правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_grp_client_trigger(acursession,atpld_grpid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_grp_copy
go

create procedure tpld_grp_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_grp 
 ( tpld_grpid 
,instanceid
,theclient

,cgrpnm

,ctxt

 ) select 
copymap(acopyaction,b2g(tpld_grpid)) 
,copymap(acopyaction,b2g(instanceid))
,theclient

,cgrpnm

,ctxt

 from tpld_grp
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_grp_logger
go

create procedure tpld_grp_logger /*группы узлов учета*/ (
 acursession varchar(38),
 atpld_grpid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_grp_parent
go
create procedure tpld_grp_parent /* группы узлов учета*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_grp where  tpld_grpid=arowid;
 end 
go
GO


drop procedure if exists tpld_grp_islocked
go
create procedure tpld_grp_islocked /* группы узлов учета */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_grp where tpld_grpid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_grp_lock
go
create procedure tpld_grp_lock /* группы узлов учета */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_grp_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_grp set lockuserid =auserid ,locksessionid=null  where tpld_grpid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_grp set lockuserid=null ,locksessionid =acursession  where tpld_grpid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_grp_unlock
go
create procedure tpld_grp_unlock /* группы узлов учета */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_grp_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_grp set lockuserid =null  where tpld_grpid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_grp set locksessionid =null  where tpld_grpid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_grp_client_trigger
GO

create procedure tpld_grp_client_trigger  (
 acursession varchar(38),
 aTPLD_GRPid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_snabtop_brief
go

create procedure tpld_snabtop_brief  (
 acursession varchar(38),
 atpld_snabtopid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_snabtopid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_snabtop where tpld_snabtopid=g2b(atpld_snabtopid);
 if  aec &gt;0 then
   set abrief=tpld_snabtop_brief_f(g2b(atpld_snabtopid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_snabtop_delete
go

create procedure tpld_snabtop_delete /**/ (
 acursession varchar(38),
 atpld_snabtopid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_snabtop where tpld_snabtopid=g2b(atpld_snabtopid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_snabtop' result;
    leave body;
  end if;
 call tpld_snabtop_logger(acursession,atpld_snabtopid) ; 
  delete from  tpld_snabtop 
  where  tpld_snabtopid = g2b(atpld_snabtopid) ;
  delete from num_values where ownerpartname='tpld_snabtop' and ownerrowid=g2b(atpld_snabtopid);
  end if;
    select 'ok' result;
 end 
go
GO

/*поставщик*/

drop procedure if exists tpld_snabtop_save
go

create procedure tpld_snabtop_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_snabtopid varchar(38)
,acname
 varchar (128)/* название *//* название */
,acaddress
 varchar (400)/* адрес *//* адрес */
,acfio
 varchar (128)/* контактное лицо *//* контактное лицо */
,acphone
 varchar (64)/* телефон *//* телефон */
,acregion
 varchar (128)/* регион *//* регион */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_snabtop where tpld_snabtopid=g2b(atpld_snabtopid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_snabtop' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_snabtop_logger(acursession,atpld_snabtopid) ; 
 update  tpld_snabtop set changestamp=now() 
,
  cname=acname
,
  caddress=acaddress
,
  cfio=acfio
,
  cphone=acphone
,
  cregion=acregion
  where  tpld_snabtopid = g2b(atpld_snabtopid) ;


call tpld_snabtop_client_trigger(acursession,atpld_snabtopid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_snabtop' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_snabtop
 (  changestamp,tpld_snabtopid 
,instanceid
,cname

,caddress

,cfio

,cphone

,cregion

 ) values (now(), g2b(atpld_snabtopid) 
,g2b(ainstanceid)
,acname

,acaddress

,acfio

,acphone

,acregion

 ) ;


call tpld_snabtop_client_trigger(acursession,atpld_snabtopid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_snabtop_copy
go

create procedure tpld_snabtop_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_snabtop 
 ( tpld_snabtopid 
,instanceid
,cname

,caddress

,cfio

,cphone

,cregion

 ) select 
copymap(acopyaction,b2g(tpld_snabtopid)) 
,copymap(acopyaction,b2g(instanceid))
,cname

,caddress

,cfio

,cphone

,cregion

 from tpld_snabtop
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_snabtop_logger
go

create procedure tpld_snabtop_logger /**/ (
 acursession varchar(38),
 atpld_snabtopid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_snabtop_parent
go
create procedure tpld_snabtop_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_snabtop where  tpld_snabtopid=arowid;
 end 
go
GO


drop procedure if exists tpld_snabtop_islocked
go
create procedure tpld_snabtop_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_snabtop where tpld_snabtopid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_snabtop_lock
go
create procedure tpld_snabtop_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_snabtop_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_snabtop set lockuserid =auserid ,locksessionid=null  where tpld_snabtopid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_snabtop set lockuserid=null ,locksessionid =acursession  where tpld_snabtopid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_snabtop_unlock
go
create procedure tpld_snabtop_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_snabtop_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_snabtop set lockuserid =null  where tpld_snabtopid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_snabtop set locksessionid =null  where tpld_snabtopid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_snabtop_client_trigger
GO

create procedure tpld_snabtop_client_trigger  (
 acursession varchar(38),
 aTPLD_SNABTOPid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_param_brief
go

create procedure tpld_param_brief  (
 acursession varchar(38),
 atpld_paramid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_paramid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_param where tpld_paramid=g2b(atpld_paramid);
 if  aec &gt;0 then
   set abrief=tpld_param_brief_f(g2b(atpld_paramid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_param_delete
go

create procedure tpld_param_delete /*параметры*/ (
 acursession varchar(38),
 atpld_paramid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_param where tpld_paramid=g2b(atpld_paramid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_param' result;
    leave body;
  end if;
 call tpld_param_logger(acursession,atpld_paramid) ; 
  delete from  tpld_param 
  where  tpld_paramid = g2b(atpld_paramid) ;
  delete from num_values where ownerpartname='tpld_param' and ownerrowid=g2b(atpld_paramid);
  end if;
    select 'ok' result;
 end 
go
GO

/*параметры*/

drop procedure if exists tpld_param_save
go

create procedure tpld_param_save /*параметры*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_paramid varchar(38)
,aname
 varchar (128)/* название  *//* название  */
,aparamfield
 varchar (128)/* поле *//* поле */
,ashowas
 integer/* отображать как *//* отображать как */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_param where tpld_paramid=g2b(atpld_paramid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_param' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_param_logger(acursession,atpld_paramid) ; 
 update  tpld_param set changestamp=now() 
,
  name=aname
,
  paramfield=aparamfield
,
  showas=ashowas
  where  tpld_paramid = g2b(atpld_paramid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_param where  instanceid=g2b(ainstanceid) 
 and paramfield=aparamfield;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=параметры правило=(поле уникально)'  result;
  rollback;
  leave body;
end if;
 select count(*) into  auniquerowcount from tpld_param where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=параметры правило=(поле уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_param_client_trigger(acursession,atpld_paramid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_param' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_param
 (  changestamp,tpld_paramid 
,instanceid
,name

,paramfield

,showas

 ) values (now(), g2b(atpld_paramid) 
,g2b(ainstanceid)
,aname

,aparamfield

,ashowas

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_param where  instanceid=g2b(ainstanceid) 
 and paramfield=aparamfield;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=параметры правило=(поле уникально)'  result;
  rollback;
  leave body;
end if;
 select count(*) into  auniquerowcount from tpld_param where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=параметры правило=(поле уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_param_client_trigger(acursession,atpld_paramid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_param_copy
go

create procedure tpld_param_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_param 
 ( tpld_paramid 
,instanceid
,name

,paramfield

,showas

 ) select 
copymap(acopyaction,b2g(tpld_paramid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,paramfield

,showas

 from tpld_param
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_param_logger
go

create procedure tpld_param_logger /*параметры*/ (
 acursession varchar(38),
 atpld_paramid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_param_parent
go
create procedure tpld_param_parent /* параметры*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_param where  tpld_paramid=arowid;
 end 
go
GO


drop procedure if exists tpld_param_islocked
go
create procedure tpld_param_islocked /* параметры */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_param where tpld_paramid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_param_lock
go
create procedure tpld_param_lock /* параметры */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_param_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_param set lockuserid =auserid ,locksessionid=null  where tpld_paramid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_param set lockuserid=null ,locksessionid =acursession  where tpld_paramid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_param_unlock
go
create procedure tpld_param_unlock /* параметры */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_param_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_param set lockuserid =null  where tpld_paramid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_param set locksessionid =null  where tpld_paramid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_param_client_trigger
GO

create procedure tpld_param_client_trigger  (
 acursession varchar(38),
 aTPLD_PARAMid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpld_devtype_brief
go

create procedure tpld_devtype_brief  (
 acursession varchar(38),
 atpld_devtypeid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpld_devtypeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpld_devtype where tpld_devtypeid=g2b(atpld_devtypeid);
 if  aec &gt;0 then
   set abrief=tpld_devtype_brief_f(g2b(atpld_devtypeid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpld_devtype_delete
go

create procedure tpld_devtype_delete /*тип устройства*/ (
 acursession varchar(38),
 atpld_devtypeid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_devtype where tpld_devtypeid=g2b(atpld_devtypeid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpld_devtype' result;
    leave body;
  end if;
 call tpld_devtype_logger(acursession,atpld_devtypeid) ; 
  delete from  tpld_devtype 
  where  tpld_devtypeid = g2b(atpld_devtypeid) ;
  delete from num_values where ownerpartname='tpld_devtype' and ownerrowid=g2b(atpld_devtypeid);
  end if;
    select 'ok' result;
 end 
go
GO

/*тип устройства*/

drop procedure if exists tpld_devtype_save
go

create procedure tpld_devtype_save /*тип устройства*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpld_devtypeid varchar(38)
,adevclass varchar(38)/* класс устройства *//* класс устройства */
,aname
 varchar (128)/* название  *//* название  */
,adriverlibname
 varchar (255)/* библиотека драйвера *//* библиотека драйвера */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpld_devtype where tpld_devtypeid=g2b(atpld_devtypeid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpld_devtype' result;
    leave body;
  end if;
 start transaction ; 
 call tpld_devtype_logger(acursession,atpld_devtypeid) ; 
 update  tpld_devtype set changestamp=now() 
,
  devclass=g2b(adevclass)
,
  name=aname
,
  driverlibname=adriverlibname
  where  tpld_devtypeid = g2b(atpld_devtypeid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_devtype where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=тип устройства правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_devtype_client_trigger(acursession,atpld_devtypeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpld.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpld_devtype' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpld_devtype
 (  changestamp,tpld_devtypeid 
,instanceid
,devclass

,name

,driverlibname

 ) values (now(), g2b(atpld_devtypeid) 
,g2b(ainstanceid)
,g2b(adevclass)

,aname

,adriverlibname

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tpld_devtype where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=тип устройства правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tpld_devtype_client_trigger(acursession,atpld_devtypeid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpld_devtype_copy
go

create procedure tpld_devtype_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpld_devtype 
 ( tpld_devtypeid 
,instanceid
,devclass

,name

,driverlibname

 ) select 
copymap(acopyaction,b2g(tpld_devtypeid)) 
,copymap(acopyaction,b2g(instanceid))
,devclass

,name

,driverlibname

 from tpld_devtype
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpld_devtype_logger
go

create procedure tpld_devtype_logger /*тип устройства*/ (
 acursession varchar(38),
 atpld_devtypeid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpld_devtype_parent
go
create procedure tpld_devtype_parent /* тип устройства*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpld_devtype where  tpld_devtypeid=arowid;
 end 
go
GO


drop procedure if exists tpld_devtype_islocked
go
create procedure tpld_devtype_islocked /* тип устройства */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpld_devtype where tpld_devtypeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpld_devtype_lock
go
create procedure tpld_devtype_lock /* тип устройства */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpld_devtype_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpld_devtype set lockuserid =auserid ,locksessionid=null  where tpld_devtypeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpld_devtype set lockuserid=null ,locksessionid =acursession  where tpld_devtypeid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpld_devtype_unlock
go
create procedure tpld_devtype_unlock /* тип устройства */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpld_devtype_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpld_devtype set lockuserid =null  where tpld_devtypeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpld_devtype set locksessionid =null  where tpld_devtypeid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpld_devtype_client_trigger
GO

create procedure tpld_devtype_client_trigger  (
 acursession varchar(38),
 aTPLD_DEVTYPEid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists users_brief
go

create procedure users_brief  (
 acursession varchar(38),
 ausersid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ausersid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from users where usersid=g2b(ausersid);
 if  aec &gt;0 then
   set abrief=users_brief_f(g2b(ausersid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists users_delete
go

create procedure users_delete /*пользователи*/ (
 acursession varchar(38),
 ausersid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from users where usersid=g2b(ausersid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=users' result;
    leave body;
  end if;
 call users_logger(acursession,ausersid) ; 
  delete from  users 
  where  usersid = g2b(ausersid) ;
  delete from num_values where ownerpartname='users' and ownerrowid=g2b(ausersid);
  end if;
    select 'ok' result;
 end 
go
GO

/*пользователи*/

drop procedure if exists users_save
go

create procedure users_save /*пользователи*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 ausersid varchar(38)
,afamily
 varchar (255)/* фамилия *//* фамилия */
,aname
 varchar (64)/* имя *//* имя */
,asurname
 varchar (255)/* отчество *//* отчество */
,alogin
 varchar (64)/* имя для входа *//* имя для входа */
,apassword varchar(80)/* пароль *//* пароль */
,adomainame
 varchar (255)/* доменное имя *//* доменное имя */
,aemail varchar(255)/* e-mail *//* e-mail */
,aphone
 varchar (20)/* телефон *//* телефон */
,alocalphone
 varchar (20)/* местный телефон *//* местный телефон */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from users where usersid=g2b(ausersid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=users' result;
    leave body;
  end if;
 start transaction ; 
 call users_logger(acursession,ausersid) ; 
 update  users set changestamp=now() 
,
  family=afamily
,
  name=aname
,
  surname=asurname
,
  login=alogin
,
  password=apassword
,
  domainame=adomainame
,
  email=aemail
,
  phone=aphone
,
  localphone=alocalphone
  where  usersid = g2b(ausersid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from users where  instanceid=g2b(ainstanceid) 
 and login=alogin;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=пользователи' result;
  rollback;
  leave body;
end if;
 -- end if;

call users_client_trigger(acursession,ausersid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=users' result;
    leave body;
  end if;
 start transaction;  
 insert into   users
 (  changestamp,usersid 
,instanceid
,family

,name

,surname

,login

,password

,domainame

,email

,phone

,localphone

 ) values (now(), g2b(ausersid) 
,g2b(ainstanceid)
,afamily

,aname

,asurname

,alogin

,apassword

,adomainame

,aemail

,aphone

,alocalphone

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from users where  instanceid=g2b(ainstanceid) 
 and login=alogin;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=пользователи' result;
  rollback;
  leave body;
end if;
 -- end if;

call users_client_trigger(acursession,ausersid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists users_copy
go

create procedure users_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into users 
 ( usersid 
,instanceid
,family

,name

,surname

,login

,password

,domainame

,email

,phone

,localphone

 ) select 
copymap(acopyaction,b2g(usersid)) 
,copymap(acopyaction,b2g(instanceid))
,family

,name

,surname

,login

,password

,domainame

,email

,phone

,localphone

 from users
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists users_logger
go

create procedure users_logger /*пользователи*/ (
 acursession varchar(38),
 ausersid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists users_parent
go
create procedure users_parent /* пользователи*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from users where  usersid=arowid;
 end 
go
GO


drop procedure if exists users_islocked
go
create procedure users_islocked /* пользователи */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from users where usersid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists users_lock
go
create procedure users_lock /* пользователи */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call users_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update users set lockuserid =auserid ,locksessionid=null  where usersid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update users set lockuserid=null ,locksessionid =acursession  where usersid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists users_unlock
go
create procedure users_unlock /* пользователи */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call users_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update users set lockuserid =null  where usersid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update users set locksessionid =null  where usersid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS users_client_trigger
GO

create procedure users_client_trigger  (
 acursession varchar(38),
 aUsersid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists groups_brief
go

create procedure groups_brief  (
 acursession varchar(38),
 agroupsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agroupsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from groups where groupsid=g2b(agroupsid);
 if  aec &gt;0 then
   set abrief=groups_brief_f(g2b(agroupsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists groups_delete
go

create procedure groups_delete /*группы*/ (
 acursession varchar(38),
 agroupsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from groups where groupsid=g2b(agroupsid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=groups' result;
    leave body;
  end if;
 call groups_logger(acursession,agroupsid) ; 
  delete from  groups 
  where  groupsid = g2b(agroupsid) ;
  delete from num_values where ownerpartname='groups' and ownerrowid=g2b(agroupsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*группы*/

drop procedure if exists groups_save
go

create procedure groups_save /*группы*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 agroupsid varchar(38)
,aname
 varchar (80)/* название *//* название */
,aadgroup
 varchar (255)/* группа ad *//* группа ad */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from groups where groupsid=g2b(agroupsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=groups' result;
    leave body;
  end if;
 start transaction ; 
 call groups_logger(acursession,agroupsid) ; 
 update  groups set changestamp=now() 
,
  name=aname
,
  adgroup=aadgroup
  where  groupsid = g2b(agroupsid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from groups where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=группы' result;
  rollback;
  leave body;
end if;
 -- end if;

call groups_client_trigger(acursession,agroupsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=groups' result;
    leave body;
  end if;
 start transaction;  
 insert into   groups
 (  changestamp,groupsid 
,instanceid
,name

,adgroup

 ) values (now(), g2b(agroupsid) 
,g2b(ainstanceid)
,aname

,aadgroup

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from groups where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=группы' result;
  rollback;
  leave body;
end if;
 -- end if;

call groups_client_trigger(acursession,agroupsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists groupuser_brief
go

create procedure groupuser_brief  (
 acursession varchar(38),
 agroupuserid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agroupuserid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from groupuser where groupuserid=g2b(agroupuserid);
 if  aec &gt;0 then
   set abrief=groupuser_brief_f(g2b(agroupuserid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists groupuser_delete
go

create procedure groupuser_delete /*состав группы*/ (
 acursession varchar(38),
 agroupuserid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from groupuser where groupuserid=g2b(agroupuserid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=groupuser' result;
    leave body;
  end if;
 call groupuser_logger(acursession,agroupuserid) ; 
  delete from  groupuser 
  where  groupuserid = g2b(agroupuserid) ;
  delete from num_values where ownerpartname='groupuser' and ownerrowid=g2b(agroupuserid);
  end if;
    select 'ok' result;
 end 
go
GO

/*состав группы*/

drop procedure if exists groupuser_save
go

create procedure groupuser_save /*состав группы*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agroupuserid varchar(38)
,atheuser varchar(38)/* пользователь *//* пользователь */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from groupuser where groupuserid=g2b(agroupuserid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=groupuser' result;
    leave body;
  end if;
 start transaction ; 
 call groupuser_logger(acursession,agroupuserid) ; 
 update  groupuser set changestamp=now() 
,
  theuser=g2b(atheuser)
  where  groupuserid = g2b(agroupuserid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from groupuser where  parentstructrowid=g2b(aparentstructrowid) 
 and theuser=g2b(atheuser);
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=состав группы' result;
  rollback;
  leave body;
end if;
 -- end if;

call groupuser_client_trigger(acursession,agroupuserid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=groupuser' result;
    leave body;
  end if;
 start transaction;  
 insert into   groupuser
 (  changestamp,groupuserid 
,parentstructrowid
,theuser

 ) values (now(), g2b(agroupuserid) 
,g2b(aparentstructrowid)
,g2b(atheuser)

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from groupuser where  parentstructrowid=g2b(aparentstructrowid) 
 and theuser=g2b(atheuser);
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=состав группы' result;
  rollback;
  leave body;
end if;
 -- end if;

call groupuser_client_trigger(acursession,agroupuserid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists groupuser_copy
go

create procedure groupuser_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into groupuser 
 ( groupuserid 
,parentstructrowid
,theuser

 ) select 
copymap(acopyaction,b2g(groupuserid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,theuser

 from groupuser
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists groups_copy
go

create procedure groups_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_groups cursor for
select groupsid from groups where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into groups 
 ( groupsid 
,instanceid
,name

,adgroup

 ) select 
copymap(acopyaction,b2g(groupsid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,adgroup

 from groups
 where instanceid =g2b( ainstanceid); 
open copy_cursor_groups;
  set  fetch_done=false;
fetch copy_cursor_groups into aid;
while not fetch_done do 
    call groupuser_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_groups into aid;
end while;

close copy_cursor_groups;
 end 
go
GO


drop procedure if exists groups_logger
go

create procedure groups_logger /*группы*/ (
 acursession varchar(38),
 agroupsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists groupuser_logger
go

create procedure groupuser_logger /*состав группы*/ (
 acursession varchar(38),
 agroupuserid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists groups_parent
go
create procedure groups_parent /* группы*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from groups where  groupsid=arowid;
 end 
go
GO


drop procedure if exists groups_islocked
go
create procedure groups_islocked /* группы */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from groups where groupsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists groups_lock
go
create procedure groups_lock /* группы */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call groups_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update groups set lockuserid =auserid ,locksessionid=null  where groupsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update groups set lockuserid=null ,locksessionid =acursession  where groupsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists groups_unlock
go
create procedure groups_unlock /* группы */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call groups_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update groups set lockuserid =null  where groupsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update groups set locksessionid =null  where groupsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS groups_client_trigger
GO

create procedure groups_client_trigger  (
 acursession varchar(38),
 aGroupsid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists groupuser_parent
go
create procedure groupuser_parent /* состав группы*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from groupuser where  groupuserid=arowid;
  set aparenttable = 'groups';
 end 
go
GO


drop procedure if exists groupuser_islocked
go
create procedure groupuser_islocked /* состав группы */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from groupuser where groupuserid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists groupuser_lock
go
create procedure groupuser_lock /* состав группы */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call groupuser_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update groupuser set lockuserid =auserid ,locksessionid=null  where groupuserid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update groupuser set lockuserid=null ,locksessionid =acursession  where groupuserid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists groupuser_unlock
go
create procedure groupuser_unlock /* состав группы */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call groupuser_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update groupuser set lockuserid =null  where groupuserid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update groupuser set locksessionid =null  where groupuserid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS groupuser_client_trigger
GO

create procedure groupuser_client_trigger  (
 acursession varchar(38),
 aGroupUserid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpsrv_modems_brief
go

create procedure tpsrv_modems_brief  (
 acursession varchar(38),
 atpsrv_modemsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpsrv_modemsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpsrv_modems where tpsrv_modemsid=g2b(atpsrv_modemsid);
 if  aec &gt;0 then
   set abrief=tpsrv_modems_brief_f(g2b(atpsrv_modemsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpsrv_modems_delete
go

create procedure tpsrv_modems_delete /*модемы подключенные к данному серверу*/ (
 acursession varchar(38),
 atpsrv_modemsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpsrv_modems where tpsrv_modemsid=g2b(atpsrv_modemsid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpsrv_modems' result;
    leave body;
  end if;
 call tpsrv_modems_logger(acursession,atpsrv_modemsid) ; 
  delete from  tpsrv_modems 
  where  tpsrv_modemsid = g2b(atpsrv_modemsid) ;
  delete from num_values where ownerpartname='tpsrv_modems' and ownerrowid=g2b(atpsrv_modemsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*модемы*/

drop procedure if exists tpsrv_modems_save
go

create procedure tpsrv_modems_save /*модемы подключенные к данному серверу*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpsrv_modemsid varchar(38)
,aportnum
 varchar (20)/* номер ком порта *//* номер ком порта */
,aisusable
 integer/* может использоваться сервером *//* может использоваться сервером */
,aisused
 integer/* занят *//* занят */
,auseduntil
 datetime/* занят до *//* занят до */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpsrv_modems where tpsrv_modemsid=g2b(atpsrv_modemsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpsrv_modems' result;
    leave body;
  end if;
 start transaction ; 
 call tpsrv_modems_logger(acursession,atpsrv_modemsid) ; 
 update  tpsrv_modems set changestamp=now() 
,
  portnum=aportnum
,
  isusable=aisusable
,
  isused=aisused
,
  useduntil=auseduntil
  where  tpsrv_modemsid = g2b(atpsrv_modemsid) ;


call tpsrv_modems_client_trigger(acursession,atpsrv_modemsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpsrv_modems' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpsrv_modems
 (  changestamp,tpsrv_modemsid 
,instanceid
,portnum

,isusable

,isused

,useduntil

 ) values (now(), g2b(atpsrv_modemsid) 
,g2b(ainstanceid)
,aportnum

,aisusable

,aisused

,auseduntil

 ) ;


call tpsrv_modems_client_trigger(acursession,atpsrv_modemsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpsrv_modems_copy
go

create procedure tpsrv_modems_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpsrv_modems 
 ( tpsrv_modemsid 
,instanceid
,portnum

,isusable

,isused

,useduntil

 ) select 
copymap(acopyaction,b2g(tpsrv_modemsid)) 
,copymap(acopyaction,b2g(instanceid))
,portnum

,isusable

,isused

,useduntil

 from tpsrv_modems
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpsrv_modems_logger
go

create procedure tpsrv_modems_logger /*модемы подключенные к данному серверу*/ (
 acursession varchar(38),
 atpsrv_modemsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpsrv_modems_parent
go
create procedure tpsrv_modems_parent /* модемы подключенные к данному серверу*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpsrv_modems where  tpsrv_modemsid=arowid;
 end 
go
GO


drop procedure if exists tpsrv_modems_islocked
go
create procedure tpsrv_modems_islocked /* модемы подключенные к данному серверу */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpsrv_modems where tpsrv_modemsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpsrv_modems_lock
go
create procedure tpsrv_modems_lock /* модемы подключенные к данному серверу */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpsrv_modems_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpsrv_modems set lockuserid =auserid ,locksessionid=null  where tpsrv_modemsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpsrv_modems set lockuserid=null ,locksessionid =acursession  where tpsrv_modemsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpsrv_modems_unlock
go
create procedure tpsrv_modems_unlock /* модемы подключенные к данному серверу */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpsrv_modems_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpsrv_modems set lockuserid =null  where tpsrv_modemsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpsrv_modems set locksessionid =null  where tpsrv_modemsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpsrv_modems_client_trigger
GO

create procedure tpsrv_modems_client_trigger  (
 acursession varchar(38),
 aTPSRV_MODEMSid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpsrv_info_brief
go

create procedure tpsrv_info_brief  (
 acursession varchar(38),
 atpsrv_infoid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpsrv_infoid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpsrv_info where tpsrv_infoid=g2b(atpsrv_infoid);
 if  aec &gt;0 then
   set abrief=tpsrv_info_brief_f(g2b(atpsrv_infoid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpsrv_info_delete
go

create procedure tpsrv_info_delete /**/ (
 acursession varchar(38),
 atpsrv_infoid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpsrv_info where tpsrv_infoid=g2b(atpsrv_infoid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpsrv_info' result;
    leave body;
  end if;
 call tpsrv_info_logger(acursession,atpsrv_infoid) ; 
  delete from  tpsrv_info 
  where  tpsrv_infoid = g2b(atpsrv_infoid) ;
  delete from num_values where ownerpartname='tpsrv_info' and ownerrowid=g2b(atpsrv_infoid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание сервера*/

drop procedure if exists tpsrv_info_save
go

create procedure tpsrv_info_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpsrv_infoid varchar(38)
,aname
 varchar (255)/* имя сервера *//* имя сервера */
,aipaddr
 varchar (20)/* ip сервера *//* ip сервера */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpsrv_info where tpsrv_infoid=g2b(atpsrv_infoid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpsrv_info' result;
    leave body;
  end if;
 start transaction ; 
 call tpsrv_info_logger(acursession,atpsrv_infoid) ; 
 update  tpsrv_info set changestamp=now() 
,
  name=aname
,
  ipaddr=aipaddr
  where  tpsrv_infoid = g2b(atpsrv_infoid) ;


call tpsrv_info_client_trigger(acursession,atpsrv_infoid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpsrv_info' result;
    leave body;
  end if;
select count(*) into aec from tpsrv_info where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tpsrv_info&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tpsrv_info
 (  changestamp,tpsrv_infoid 
,instanceid
,name

,ipaddr

 ) values (now(), g2b(atpsrv_infoid) 
,g2b(ainstanceid)
,aname

,aipaddr

 ) ;


call tpsrv_info_client_trigger(acursession,atpsrv_infoid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpsrv_info_copy
go

create procedure tpsrv_info_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpsrv_info 
 ( tpsrv_infoid 
,instanceid
,name

,ipaddr

 ) select 
copymap(acopyaction,b2g(tpsrv_infoid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,ipaddr

 from tpsrv_info
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpsrv_info_logger
go

create procedure tpsrv_info_logger /**/ (
 acursession varchar(38),
 atpsrv_infoid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpsrv_info_parent
go
create procedure tpsrv_info_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpsrv_info where  tpsrv_infoid=arowid;
 end 
go
GO


drop procedure if exists tpsrv_info_islocked
go
create procedure tpsrv_info_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpsrv_info where tpsrv_infoid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpsrv_info_lock
go
create procedure tpsrv_info_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpsrv_info_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpsrv_info set lockuserid =auserid ,locksessionid=null  where tpsrv_infoid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpsrv_info set lockuserid=null ,locksessionid =acursession  where tpsrv_infoid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpsrv_info_unlock
go
create procedure tpsrv_info_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpsrv_info_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpsrv_info set lockuserid =null  where tpsrv_infoid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpsrv_info set locksessionid =null  where tpsrv_infoid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpsrv_info_client_trigger
GO

create procedure tpsrv_info_client_trigger  (
 acursession varchar(38),
 aTPSRV_INFOid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpsrv_ports_brief
go

create procedure tpsrv_ports_brief  (
 acursession varchar(38),
 atpsrv_portsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpsrv_portsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpsrv_ports where tpsrv_portsid=g2b(atpsrv_portsid);
 if  aec &gt;0 then
   set abrief=tpsrv_ports_brief_f(g2b(atpsrv_portsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpsrv_ports_delete
go

create procedure tpsrv_ports_delete /*порты для установки прямой связи с тепловычислителем*/ (
 acursession varchar(38),
 atpsrv_portsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpsrv_ports where tpsrv_portsid=g2b(atpsrv_portsid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpsrv_ports' result;
    leave body;
  end if;
 call tpsrv_ports_logger(acursession,atpsrv_portsid) ; 
  delete from  tpsrv_ports 
  where  tpsrv_portsid = g2b(atpsrv_portsid) ;
  delete from num_values where ownerpartname='tpsrv_ports' and ownerrowid=g2b(atpsrv_portsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*ком порты*/

drop procedure if exists tpsrv_ports_save
go

create procedure tpsrv_ports_save /*порты для установки прямой связи с тепловычислителем*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpsrv_portsid varchar(38)
,aportname
 varchar (20)/* номер порта *//* номер порта */
,aisusable
 integer/* может использоваться сервером *//* может использоваться сервером */
,aisused
 integer/* занят *//* занят */
,auseduntil
 datetime/* занят до *//* занят до */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpsrv_ports where tpsrv_portsid=g2b(atpsrv_portsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpsrv_ports' result;
    leave body;
  end if;
 start transaction ; 
 call tpsrv_ports_logger(acursession,atpsrv_portsid) ; 
 update  tpsrv_ports set changestamp=now() 
,
  portname=aportname
,
  isusable=aisusable
,
  isused=aisused
,
  useduntil=auseduntil
  where  tpsrv_portsid = g2b(atpsrv_portsid) ;


call tpsrv_ports_client_trigger(acursession,atpsrv_portsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpsrv.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpsrv_ports' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpsrv_ports
 (  changestamp,tpsrv_portsid 
,instanceid
,portname

,isusable

,isused

,useduntil

 ) values (now(), g2b(atpsrv_portsid) 
,g2b(ainstanceid)
,aportname

,aisusable

,aisused

,auseduntil

 ) ;


call tpsrv_ports_client_trigger(acursession,atpsrv_portsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpsrv_ports_copy
go

create procedure tpsrv_ports_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpsrv_ports 
 ( tpsrv_portsid 
,instanceid
,portname

,isusable

,isused

,useduntil

 ) select 
copymap(acopyaction,b2g(tpsrv_portsid)) 
,copymap(acopyaction,b2g(instanceid))
,portname

,isusable

,isused

,useduntil

 from tpsrv_ports
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpsrv_ports_logger
go

create procedure tpsrv_ports_logger /*порты для установки прямой связи с тепловычислителем*/ (
 acursession varchar(38),
 atpsrv_portsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpsrv_ports_parent
go
create procedure tpsrv_ports_parent /* порты для установки прямой связи с тепловычислителем*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpsrv_ports where  tpsrv_portsid=arowid;
 end 
go
GO


drop procedure if exists tpsrv_ports_islocked
go
create procedure tpsrv_ports_islocked /* порты для установки прямой связи с тепловычислителем */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpsrv_ports where tpsrv_portsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpsrv_ports_lock
go
create procedure tpsrv_ports_lock /* порты для установки прямой связи с тепловычислителем */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpsrv_ports_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpsrv_ports set lockuserid =auserid ,locksessionid=null  where tpsrv_portsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpsrv_ports set lockuserid=null ,locksessionid =acursession  where tpsrv_portsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpsrv_ports_unlock
go
create procedure tpsrv_ports_unlock /* порты для установки прямой связи с тепловычислителем */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpsrv_ports_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpsrv_ports set lockuserid =null  where tpsrv_portsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpsrv_ports set locksessionid =null  where tpsrv_portsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpsrv_ports_client_trigger
GO

create procedure tpsrv_ports_client_trigger  (
 acursession varchar(38),
 aTPSRV_PORTSid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists num_zones_brief
go

create procedure num_zones_brief  (
 acursession varchar(38),
 anum_zonesid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if anum_zonesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from num_zones where num_zonesid=g2b(anum_zonesid);
 if  aec &gt;0 then
   set abrief=num_zones_brief_f(g2b(anum_zonesid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists num_zones_delete
go

create procedure num_zones_delete /*зоны уникальных нумеров*/ (
 acursession varchar(38),
 anum_zonesid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_zones where num_zonesid=g2b(anum_zonesid);
if aec&gt;0 then
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=num_zones' result;
    leave body;
  end if;
 call num_zones_logger(acursession,anum_zonesid) ; 
  delete from  num_zones 
  where  num_zonesid = g2b(anum_zonesid) ;
  delete from num_values where ownerpartname='num_zones' and ownerrowid=g2b(anum_zonesid);
  end if;
    select 'ok' result;
 end 
go
GO

/*зоны*/

drop procedure if exists num_zones_save
go

create procedure num_zones_save /*зоны уникальных нумеров*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 anum_zonesid varchar(38)
,azonemask
 varchar (255)/* маска зоны *//* маска зоны */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_zones where num_zonesid=g2b(anum_zonesid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=num_zones' result;
    leave body;
  end if;
 start transaction ; 
 call num_zones_logger(acursession,anum_zonesid) ; 
 update  num_zones set changestamp=now() 
,
  zonemask=azonemask
  where  num_zonesid = g2b(anum_zonesid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from num_zones where  instanceid=g2b(ainstanceid) 
 and zonemask=azonemask;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=зоны' result;
  rollback;
  leave body;
end if;
 -- end if;

call num_zones_client_trigger(acursession,anum_zonesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=num_zones' result;
    leave body;
  end if;
 start transaction;  
 insert into   num_zones
 (  changestamp,num_zonesid 
,instanceid
,zonemask

 ) values (now(), g2b(anum_zonesid) 
,g2b(ainstanceid)
,azonemask

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from num_zones where  instanceid=g2b(ainstanceid) 
 and zonemask=azonemask;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=зоны' result;
  rollback;
  leave body;
end if;
 -- end if;

call num_zones_client_trigger(acursession,anum_zonesid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists num_values_brief
go

create procedure num_values_brief  (
 acursession varchar(38),
 anum_valuesid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if anum_valuesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from num_values where num_valuesid=g2b(anum_valuesid);
 if  aec &gt;0 then
   set abrief=num_values_brief_f(g2b(anum_valuesid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists num_values_delete
go

create procedure num_values_delete /*уникальные номера*/ (
 acursession varchar(38),
 anum_valuesid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_values where num_valuesid=g2b(anum_valuesid);
if aec&gt;0 then
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=num_values' result;
    leave body;
  end if;
 call num_values_logger(acursession,anum_valuesid) ; 
  delete from  num_values 
  where  num_valuesid = g2b(anum_valuesid) ;
  delete from num_values where ownerpartname='num_values' and ownerrowid=g2b(anum_valuesid);
  end if;
    select 'ok' result;
 end 
go
GO

/*номера*/

drop procedure if exists num_values_save
go

create procedure num_values_save /*уникальные номера*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 anum_valuesid varchar(38)
,athe_value
 integer/* значение *//* значение */
,aownerpartname
 varchar (64)/* раздел *//* раздел */
,aownerrowid binary(16)/* идентификатор строки *//* идентификатор строки */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_values where num_valuesid=g2b(anum_valuesid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=num_values' result;
    leave body;
  end if;
 start transaction ; 
 call num_values_logger(acursession,anum_valuesid) ; 
 update  num_values set changestamp=now() 
,
  the_value=athe_value
,
  ownerpartname=aownerpartname
,
  ownerrowid=aownerrowid
  where  num_valuesid = g2b(anum_valuesid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from num_values where  parentstructrowid=g2b(aparentstructrowid) 
 and the_value=athe_value;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=номера' result;
  rollback;
  leave body;
end if;
 -- end if;

call num_values_client_trigger(acursession,anum_valuesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=num_values' result;
    leave body;
  end if;
 start transaction;  
 insert into   num_values
 (  changestamp,num_valuesid 
,parentstructrowid
,the_value

,ownerpartname

,ownerrowid

 ) values (now(), g2b(anum_valuesid) 
,g2b(aparentstructrowid)
,athe_value

,aownerpartname

,aownerrowid

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from num_values where  parentstructrowid=g2b(aparentstructrowid) 
 and the_value=athe_value;
if auniquerowcount&gt;=2 then
 select 'нарущение уникальности сочетания полей. раздел=номера' result;
  rollback;
  leave body;
end if;
 -- end if;

call num_values_client_trigger(acursession,anum_valuesid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists num_values_copy
go

create procedure num_values_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into num_values 
 ( num_valuesid 
,parentstructrowid
,the_value

,ownerpartname

,ownerrowid

 ) select 
copymap(acopyaction,b2g(num_valuesid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,the_value

,ownerpartname

,ownerrowid

 from num_values
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists num_zones_copy
go

create procedure num_zones_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_num_zones cursor for
select num_zonesid from num_zones where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into num_zones 
 ( num_zonesid 
,instanceid
,zonemask

 ) select 
copymap(acopyaction,b2g(num_zonesid)) 
,copymap(acopyaction,b2g(instanceid))
,zonemask

 from num_zones
 where instanceid =g2b( ainstanceid); 
open copy_cursor_num_zones;
  set  fetch_done=false;
fetch copy_cursor_num_zones into aid;
while not fetch_done do 
    call num_values_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_num_zones into aid;
end while;

close copy_cursor_num_zones;
 end 
go
GO


drop procedure if exists num_zones_logger
go

create procedure num_zones_logger /*зоны уникальных нумеров*/ (
 acursession varchar(38),
 anum_zonesid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists num_values_logger
go

create procedure num_values_logger /*уникальные номера*/ (
 acursession varchar(38),
 anum_valuesid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists num_zones_parent
go
create procedure num_zones_parent /* зоны уникальных нумеров*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from num_zones where  num_zonesid=arowid;
 end 
go
GO


drop procedure if exists num_zones_islocked
go
create procedure num_zones_islocked /* зоны уникальных нумеров */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from num_zones where num_zonesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists num_zones_lock
go
create procedure num_zones_lock /* зоны уникальных нумеров */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call num_zones_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update num_zones set lockuserid =auserid ,locksessionid=null  where num_zonesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update num_zones set lockuserid=null ,locksessionid =acursession  where num_zonesid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists num_zones_unlock
go
create procedure num_zones_unlock /* зоны уникальных нумеров */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call num_zones_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update num_zones set lockuserid =null  where num_zonesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update num_zones set locksessionid =null  where num_zonesid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS num_zones_client_trigger
GO

create procedure num_zones_client_trigger  (
 acursession varchar(38),
 aNum_zonesid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists num_values_parent
go
create procedure num_values_parent /* уникальные номера*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from num_values where  num_valuesid=arowid;
  set aparenttable = 'num_zones';
 end 
go
GO


drop procedure if exists num_values_islocked
go
create procedure num_values_islocked /* уникальные номера */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from num_values where num_valuesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists num_values_lock
go
create procedure num_values_lock /* уникальные номера */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call num_values_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update num_values set lockuserid =auserid ,locksessionid=null  where num_valuesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update num_values set lockuserid=null ,locksessionid =acursession  where num_valuesid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists num_values_unlock
go
create procedure num_values_unlock /* уникальные номера */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call num_values_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update num_values set lockuserid =null  where num_valuesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update num_values set locksessionid =null  where num_valuesid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS num_values_client_trigger
GO

create procedure num_values_client_trigger  (
 acursession varchar(38),
 aNum_Valuesid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists num_head_brief
go

create procedure num_head_brief  (
 acursession varchar(38),
 anum_headid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if anum_headid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from num_head where num_headid=g2b(anum_headid);
 if  aec &gt;0 then
   set abrief=num_head_brief_f(g2b(anum_headid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists num_head_delete
go

create procedure num_head_delete /*описание нумератора*/ (
 acursession varchar(38),
 anum_headid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_head where num_headid=g2b(anum_headid);
if aec&gt;0 then
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=num_head' result;
    leave body;
  end if;
 call num_head_logger(acursession,anum_headid) ; 
  delete from  num_head 
  where  num_headid = g2b(anum_headid) ;
  delete from num_values where ownerpartname='num_head' and ownerrowid=g2b(anum_headid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание*/

drop procedure if exists num_head_save
go

create procedure num_head_save /*описание нумератора*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 anum_headid varchar(38)
,aname
 varchar (80)/* название *//* название */
,ashema
 integer/* схема нумерации *//* схема нумерации */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_head where num_headid=g2b(anum_headid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=num_head' result;
    leave body;
  end if;
 start transaction ; 
 call num_head_logger(acursession,anum_headid) ; 
 update  num_head set changestamp=now() 
,
  name=aname
,
  shema=ashema
  where  num_headid = g2b(anum_headid) ;


call num_head_client_trigger(acursession,anum_headid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=num_head' result;
    leave body;
  end if;
select count(*) into aec from num_head where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;num_head&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   num_head
 (  changestamp,num_headid 
,instanceid
,name

,shema

 ) values (now(), g2b(anum_headid) 
,g2b(ainstanceid)
,aname

,ashema

 ) ;


call num_head_client_trigger(acursession,anum_headid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists num_head_copy
go

create procedure num_head_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into num_head 
 ( num_headid 
,instanceid
,name

,shema

 ) select 
copymap(acopyaction,b2g(num_headid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,shema

 from num_head
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists num_head_logger
go

create procedure num_head_logger /*описание нумератора*/ (
 acursession varchar(38),
 anum_headid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists num_head_parent
go
create procedure num_head_parent /* описание нумератора*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from num_head where  num_headid=arowid;
 end 
go
GO


drop procedure if exists num_head_islocked
go
create procedure num_head_islocked /* описание нумератора */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from num_head where num_headid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists num_head_lock
go
create procedure num_head_lock /* описание нумератора */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call num_head_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update num_head set lockuserid =auserid ,locksessionid=null  where num_headid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update num_head set lockuserid=null ,locksessionid =acursession  where num_headid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists num_head_unlock
go
create procedure num_head_unlock /* описание нумератора */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call num_head_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update num_head set lockuserid =null  where num_headid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update num_head set locksessionid =null  where num_headid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS num_head_client_trigger
GO

create procedure num_head_client_trigger  (
 acursession varchar(38),
 aNum_headid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplt_reports_brief
go

create procedure tplt_reports_brief  (
 acursession varchar(38),
 atplt_reportsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplt_reportsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplt_reports where tplt_reportsid=g2b(atplt_reportsid);
 if  aec &gt;0 then
   set abrief=tplt_reports_brief_f(g2b(atplt_reportsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplt_reports_delete
go

create procedure tplt_reports_delete /**/ (
 acursession varchar(38),
 atplt_reportsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_reports where tplt_reportsid=g2b(atplt_reportsid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplt_reports' result;
    leave body;
  end if;
 call tplt_reports_logger(acursession,atplt_reportsid) ; 
  delete from  tplt_reports 
  where  tplt_reportsid = g2b(atplt_reportsid) ;
  delete from num_values where ownerpartname='tplt_reports' and ownerrowid=g2b(atplt_reportsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*отчеты*/

drop procedure if exists tplt_reports_save
go

create procedure tplt_reports_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplt_reportsid varchar(38)
,areptype varchar(38)/* данные *//* данные */
,aname
 varchar (255)/* название *//* название */
,athefile varchar(255)/* файл */
,athefile_ext varchar(4) /* файл */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_reports where tplt_reportsid=g2b(atplt_reportsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplt_reports' result;
    leave body;
  end if;
 start transaction ; 
 call tplt_reports_logger(acursession,atplt_reportsid) ; 
 update  tplt_reports set changestamp=now() 
,
  reptype=g2b(areptype)
,
  name=aname
,
  thefile=athefile
,thefile_ext=
athefile_ext 
  where  tplt_reportsid = g2b(atplt_reportsid) ;


call tplt_reports_client_trigger(acursession,atplt_reportsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplt_reports' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplt_reports
 (  changestamp,tplt_reportsid 
,instanceid
,reptype

,name

,thefile

,thefile_ext
 ) values (now(), g2b(atplt_reportsid) 
,g2b(ainstanceid)
,g2b(areptype)

,aname

,athefile

,athefile_ext
 ) ;


call tplt_reports_client_trigger(acursession,atplt_reportsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplt_reports_copy
go

create procedure tplt_reports_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplt_reports 
 ( tplt_reportsid 
,instanceid
,reptype

,name

,thefile

,thefile_ext
 ) select 
copymap(acopyaction,b2g(tplt_reportsid)) 
,copymap(acopyaction,b2g(instanceid))
,reptype

,name

,thefile

,thefile_ext
 from tplt_reports
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplt_reports_logger
go

create procedure tplt_reports_logger /**/ (
 acursession varchar(38),
 atplt_reportsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplt_reports_parent
go
create procedure tplt_reports_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplt_reports where  tplt_reportsid=arowid;
 end 
go
GO


drop procedure if exists tplt_reports_islocked
go
create procedure tplt_reports_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplt_reports where tplt_reportsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplt_reports_lock
go
create procedure tplt_reports_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplt_reports_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplt_reports set lockuserid =auserid ,locksessionid=null  where tplt_reportsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplt_reports set lockuserid=null ,locksessionid =acursession  where tplt_reportsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplt_reports_unlock
go
create procedure tplt_reports_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplt_reports_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplt_reports set lockuserid =null  where tplt_reportsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplt_reports set locksessionid =null  where tplt_reportsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplt_reports_client_trigger
GO

create procedure tplt_reports_client_trigger  (
 acursession varchar(38),
 aTPLT_REPORTSid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplt_connect_brief
go

create procedure tplt_connect_brief  (
 acursession varchar(38),
 atplt_connectid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplt_connectid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplt_connect where tplt_connectid=g2b(atplt_connectid);
 if  aec &gt;0 then
   set abrief=tplt_connect_brief_f(g2b(atplt_connectid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplt_connect_delete
go

create procedure tplt_connect_delete /*параметр компорта в узлах учета*/ (
 acursession varchar(38),
 atplt_connectid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_connect where tplt_connectid=g2b(atplt_connectid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplt_connect' result;
    leave body;
  end if;
 call tplt_connect_logger(acursession,atplt_connectid) ; 
  delete from  tplt_connect 
  where  tplt_connectid = g2b(atplt_connectid) ;
  delete from num_values where ownerpartname='tplt_connect' and ownerrowid=g2b(atplt_connectid);
  end if;
    select 'ok' result;
 end 
go
GO

/*параметры соединения*/

drop procedure if exists tplt_connect_save
go

create procedure tplt_connect_save /*параметр компорта в узлах учета*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplt_connectid varchar(38)
,aconnectionenabled
 integer/* подключение разрешено *//* подключение разрешено */
,aconnecttype varchar(38)/* тип подключения *//* тип подключения */
,aconnectlimit
 double/* время на соединение *//* время на соединение */
,atheserver varchar(38)/* сервер опроса *//* сервер опроса */
,anetaddr
 integer/* сетевой адрес *//* сетевой адрес */
,acspeed
 varchar (12)/* скорость бод *//* скорость бод */
,acdatabit
 varchar (2)/* биты данных *//* биты данных */
,acparity
 integer/* четность *//* четность */
,acstopbits
 integer/* стоповые биты *//* стоповые биты */
,aflowcontrol
 varchar (2)/* flowcontrol *//* flowcontrol */
,acomportnum
 varchar (6)/* com port *//* com port */
,aipaddr
 varchar (15)/* ip адрес *//* ip адрес */
,aportnum
 integer/* tcp порт *//* tcp порт */
,ausername
 varchar (100)/* пользователь *//* пользователь */
,apassword
 varchar (100)/* пароль *//* пароль */
,actowncode
 varchar (32)/* код города *//* код города */
,acphone
 varchar (48)/* телефон *//* телефон */
,aatcommand
 text/* at команда *//* at команда */
,acallerid
 varchar (64)/* идентификатор промеж. устройства *//* идентификатор промеж. устройства */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_connect where tplt_connectid=g2b(atplt_connectid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplt_connect' result;
    leave body;
  end if;
 start transaction ; 
 call tplt_connect_logger(acursession,atplt_connectid) ; 
 update  tplt_connect set changestamp=now() 
,
  connectionenabled=aconnectionenabled
,
  connecttype=g2b(aconnecttype)
,
  connectlimit=aconnectlimit
,
  theserver=g2b(atheserver)
,
  netaddr=anetaddr
,
  cspeed=acspeed
,
  cdatabit=acdatabit
,
  cparity=acparity
,
  cstopbits=acstopbits
,
  flowcontrol=aflowcontrol
,
  comportnum=acomportnum
,
  ipaddr=aipaddr
,
  portnum=aportnum
,
  username=ausername
,
  password=apassword
,
  ctowncode=actowncode
,
  cphone=acphone
,
  atcommand=aatcommand
,
  callerid=acallerid
  where  tplt_connectid = g2b(atplt_connectid) ;


call tplt_connect_client_trigger(acursession,atplt_connectid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplt_connect' result;
    leave body;
  end if;
select count(*) into aec from tplt_connect where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tplt_connect&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tplt_connect
 (  changestamp,tplt_connectid 
,instanceid
,connectionenabled

,connecttype

,connectlimit

,theserver

,netaddr

,cspeed

,cdatabit

,cparity

,cstopbits

,flowcontrol

,comportnum

,ipaddr

,portnum

,username

,password

,ctowncode

,cphone

,atcommand

,callerid

 ) values (now(), g2b(atplt_connectid) 
,g2b(ainstanceid)
,aconnectionenabled

,g2b(aconnecttype)

,aconnectlimit

,g2b(atheserver)

,anetaddr

,acspeed

,acdatabit

,acparity

,acstopbits

,aflowcontrol

,acomportnum

,aipaddr

,aportnum

,ausername

,apassword

,actowncode

,acphone

,aatcommand

,acallerid

 ) ;


call tplt_connect_client_trigger(acursession,atplt_connectid);

 call tplt_initownership( acursession,ainstanceid);
 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplt_connect_copy
go

create procedure tplt_connect_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplt_connect 
 ( tplt_connectid 
,instanceid
,connectionenabled

,connecttype

,connectlimit

,theserver

,netaddr

,cspeed

,cdatabit

,cparity

,cstopbits

,flowcontrol

,comportnum

,ipaddr

,portnum

,username

,password

,ctowncode

,cphone

,atcommand

,callerid

 ) select 
copymap(acopyaction,b2g(tplt_connectid)) 
,copymap(acopyaction,b2g(instanceid))
,connectionenabled

,connecttype

,connectlimit

,theserver

,netaddr

,cspeed

,cdatabit

,cparity

,cstopbits

,flowcontrol

,comportnum

,ipaddr

,portnum

,username

,password

,ctowncode

,cphone

,atcommand

,callerid

 from tplt_connect
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplt_connect_logger
go

create procedure tplt_connect_logger /*параметр компорта в узлах учета*/ (
 acursession varchar(38),
 atplt_connectid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplt_connect_parent
go
create procedure tplt_connect_parent /* параметр компорта в узлах учета*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplt_connect where  tplt_connectid=arowid;
 end 
go
GO


drop procedure if exists tplt_connect_islocked
go
create procedure tplt_connect_islocked /* параметр компорта в узлах учета */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplt_connect where tplt_connectid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplt_connect_lock
go
create procedure tplt_connect_lock /* параметр компорта в узлах учета */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplt_connect_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplt_connect set lockuserid =auserid ,locksessionid=null  where tplt_connectid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplt_connect set lockuserid=null ,locksessionid =acursession  where tplt_connectid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplt_connect_unlock
go
create procedure tplt_connect_unlock /* параметр компорта в узлах учета */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplt_connect_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplt_connect set lockuserid =null  where tplt_connectid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplt_connect set locksessionid =null  where tplt_connectid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplt_connect_client_trigger
GO

create procedure tplt_connect_client_trigger  (
 acursession varchar(38),
 aTPLT_CONNECTid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplt_valuebounds_brief
go

create procedure tplt_valuebounds_brief  (
 acursession varchar(38),
 atplt_valueboundsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplt_valueboundsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplt_valuebounds where tplt_valueboundsid=g2b(atplt_valueboundsid);
 if  aec &gt;0 then
   set abrief=tplt_valuebounds_brief_f(g2b(atplt_valueboundsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplt_valuebounds_delete
go

create procedure tplt_valuebounds_delete /*граничные значения проверяемых параметров*/ (
 acursession varchar(38),
 atplt_valueboundsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_valuebounds where tplt_valueboundsid=g2b(atplt_valueboundsid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplt_valuebounds' result;
    leave body;
  end if;
 call tplt_valuebounds_logger(acursession,atplt_valueboundsid) ; 
  delete from  tplt_valuebounds 
  where  tplt_valueboundsid = g2b(atplt_valueboundsid) ;
  delete from num_values where ownerpartname='tplt_valuebounds' and ownerrowid=g2b(atplt_valueboundsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*граничные значения*/

drop procedure if exists tplt_valuebounds_save
go

create procedure tplt_valuebounds_save /*граничные значения проверяемых параметров*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplt_valueboundsid varchar(38)
,apname varchar(38)/* параметр *//* параметр */
,aptype varchar(38)/* тип архива *//* тип архива */
,apmin
 double/* минимальное значение *//* минимальное значение */
,apmax
 double/* максимальное значение *//* максимальное значение */
,aismin
 integer/* проверять на минимум *//* проверять на минимум */
,aismax
 integer/* проверять на максимум *//* проверять на максимум */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_valuebounds where tplt_valueboundsid=g2b(atplt_valueboundsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplt_valuebounds' result;
    leave body;
  end if;
 start transaction ; 
 call tplt_valuebounds_logger(acursession,atplt_valueboundsid) ; 
 update  tplt_valuebounds set changestamp=now() 
,
  pname=g2b(apname)
,
  ptype=g2b(aptype)
,
  pmin=apmin
,
  pmax=apmax
,
  ismin=aismin
,
  ismax=aismax
  where  tplt_valueboundsid = g2b(atplt_valueboundsid) ;


call tplt_valuebounds_client_trigger(acursession,atplt_valueboundsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplt_valuebounds' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplt_valuebounds
 (  changestamp,tplt_valueboundsid 
,instanceid
,pname

,ptype

,pmin

,pmax

,ismin

,ismax

 ) values (now(), g2b(atplt_valueboundsid) 
,g2b(ainstanceid)
,g2b(apname)

,g2b(aptype)

,apmin

,apmax

,aismin

,aismax

 ) ;


call tplt_valuebounds_client_trigger(acursession,atplt_valueboundsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplt_valuebounds_copy
go

create procedure tplt_valuebounds_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplt_valuebounds 
 ( tplt_valueboundsid 
,instanceid
,pname

,ptype

,pmin

,pmax

,ismin

,ismax

 ) select 
copymap(acopyaction,b2g(tplt_valueboundsid)) 
,copymap(acopyaction,b2g(instanceid))
,pname

,ptype

,pmin

,pmax

,ismin

,ismax

 from tplt_valuebounds
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplt_valuebounds_logger
go

create procedure tplt_valuebounds_logger /*граничные значения проверяемых параметров*/ (
 acursession varchar(38),
 atplt_valueboundsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplt_valuebounds_parent
go
create procedure tplt_valuebounds_parent /* граничные значения проверяемых параметров*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplt_valuebounds where  tplt_valueboundsid=arowid;
 end 
go
GO


drop procedure if exists tplt_valuebounds_islocked
go
create procedure tplt_valuebounds_islocked /* граничные значения проверяемых параметров */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplt_valuebounds where tplt_valueboundsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplt_valuebounds_lock
go
create procedure tplt_valuebounds_lock /* граничные значения проверяемых параметров */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplt_valuebounds_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplt_valuebounds set lockuserid =auserid ,locksessionid=null  where tplt_valueboundsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplt_valuebounds set lockuserid=null ,locksessionid =acursession  where tplt_valueboundsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplt_valuebounds_unlock
go
create procedure tplt_valuebounds_unlock /* граничные значения проверяемых параметров */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplt_valuebounds_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplt_valuebounds set lockuserid =null  where tplt_valueboundsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplt_valuebounds set locksessionid =null  where tplt_valueboundsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplt_valuebounds_client_trigger
GO

create procedure tplt_valuebounds_client_trigger  (
 acursession varchar(38),
 aTPLT_VALUEBOUNDSid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplt_plancall_brief
go

create procedure tplt_plancall_brief  (
 acursession varchar(38),
 atplt_plancallid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplt_plancallid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplt_plancall where tplt_plancallid=g2b(atplt_plancallid);
 if  aec &gt;0 then
   set abrief=tplt_plancall_brief_f(g2b(atplt_plancallid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplt_plancall_delete
go

create procedure tplt_plancall_delete /*план опроса устройств*/ (
 acursession varchar(38),
 atplt_plancallid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_plancall where tplt_plancallid=g2b(atplt_plancallid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplt_plancall' result;
    leave body;
  end if;
 call tplt_plancall_logger(acursession,atplt_plancallid) ; 
  delete from  tplt_plancall 
  where  tplt_plancallid = g2b(atplt_plancallid) ;
  delete from num_values where ownerpartname='tplt_plancall' and ownerrowid=g2b(atplt_plancallid);
  end if;
    select 'ok' result;
 end 
go
GO

/*план опроса устройств*/

drop procedure if exists tplt_plancall_save
go

create procedure tplt_plancall_save /*план опроса устройств*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplt_plancallid varchar(38)
,acstatus
 integer/* исключить из опроса *//* исключить из опроса */
,anmaxcall
 integer/* max число попыток дозвона *//* max число попыток дозвона */
,aminrepeat
 integer/* повторить через (минут) *//* повторить через (минут) */
,adlock
 datetime/* когда заблокирован *//* когда заблокирован */
,adlastcall
 datetime/* последний опрос *//* последний опрос */
,accurr
 integer/* опрашивать текущие *//* опрашивать текущие */
,aicallcurr
 integer/* интервал (минут)  *//* интервал (минут)  */
,adnextcurr
 datetime/* следующий опрос *//* следующий опрос */
,achour
 integer/* опрашивать ч. *//* опрашивать ч. */
,aicall
 integer/* интервал опроса (минут) *//* интервал опроса (минут) */
,anumhour
 integer/* за сколько часов *//* за сколько часов */
,adnexthour
 datetime/* следующий опрос *//* следующий опрос */
,adlasthour
 datetime/* последний опрос *//* последний опрос */
,ac24
 integer/* опрашивать с. *//* опрашивать с. */
,aicall24
 integer/* интервал (часов) *//* интервал (часов) */
,anum24
 integer/* за сколько суток *//* за сколько суток */
,adnext24
 datetime/* следующий опрос *//* следующий опрос */
,adlastday
 datetime/* последний опрос *//* последний опрос */
,acsum
 integer/* опрашивать ит. *//* опрашивать ит. */
,aicallsum
 integer/* интервал  (минут)  *//* интервал  (минут)  */
,adnextsum
 datetime/* следующий опрос *//* следующий опрос */
,acel
 integer/* опрашивать эл. *//* опрашивать эл. */
,aiel
 integer/* интервал (мин.) *//* интервал (мин.) */
,adnextel
 date/* дата следующего опроса *//* дата следующего опроса */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_plancall where tplt_plancallid=g2b(atplt_plancallid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplt_plancall' result;
    leave body;
  end if;
 start transaction ; 
 call tplt_plancall_logger(acursession,atplt_plancallid) ; 
 update  tplt_plancall set changestamp=now() 
,
  cstatus=acstatus
,
  nmaxcall=anmaxcall
,
  minrepeat=aminrepeat
,
  dlock=adlock
,
  dlastcall=adlastcall
,
  ccurr=accurr
,
  icallcurr=aicallcurr
,
  dnextcurr=adnextcurr
,
  chour=achour
,
  icall=aicall
,
  numhour=anumhour
,
  dnexthour=adnexthour
,
  dlasthour=adlasthour
,
  c24=ac24
,
  icall24=aicall24
,
  num24=anum24
,
  dnext24=adnext24
,
  dlastday=adlastday
,
  csum=acsum
,
  icallsum=aicallsum
,
  dnextsum=adnextsum
,
  cel=acel
,
  iel=aiel
,
  dnextel=adnextel
  where  tplt_plancallid = g2b(atplt_plancallid) ;


call tplt_plancall_client_trigger(acursession,atplt_plancallid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplt_plancall' result;
    leave body;
  end if;
select count(*) into aec from tplt_plancall where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tplt_plancall&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tplt_plancall
 (  changestamp,tplt_plancallid 
,instanceid
,cstatus

,nmaxcall

,minrepeat

,dlock

,dlastcall

,ccurr

,icallcurr

,dnextcurr

,chour

,icall

,numhour

,dnexthour

,dlasthour

,c24

,icall24

,num24

,dnext24

,dlastday

,csum

,icallsum

,dnextsum

,cel

,iel

,dnextel

 ) values (now(), g2b(atplt_plancallid) 
,g2b(ainstanceid)
,acstatus

,anmaxcall

,aminrepeat

,adlock

,adlastcall

,accurr

,aicallcurr

,adnextcurr

,achour

,aicall

,anumhour

,adnexthour

,adlasthour

,ac24

,aicall24

,anum24

,adnext24

,adlastday

,acsum

,aicallsum

,adnextsum

,acel

,aiel

,adnextel

 ) ;


call tplt_plancall_client_trigger(acursession,atplt_plancallid);

 call tplt_initownership( acursession,ainstanceid);
 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplt_plancall_copy
go

create procedure tplt_plancall_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplt_plancall 
 ( tplt_plancallid 
,instanceid
,cstatus

,nmaxcall

,minrepeat

,dlock

,dlastcall

,ccurr

,icallcurr

,dnextcurr

,chour

,icall

,numhour

,dnexthour

,dlasthour

,c24

,icall24

,num24

,dnext24

,dlastday

,csum

,icallsum

,dnextsum

,cel

,iel

,dnextel

 ) select 
copymap(acopyaction,b2g(tplt_plancallid)) 
,copymap(acopyaction,b2g(instanceid))
,cstatus

,nmaxcall

,minrepeat

,dlock

,dlastcall

,ccurr

,icallcurr

,dnextcurr

,chour

,icall

,numhour

,dnexthour

,dlasthour

,c24

,icall24

,num24

,dnext24

,dlastday

,csum

,icallsum

,dnextsum

,cel

,iel

,dnextel

 from tplt_plancall
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplt_plancall_logger
go

create procedure tplt_plancall_logger /*план опроса устройств*/ (
 acursession varchar(38),
 atplt_plancallid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplt_plancall_parent
go
create procedure tplt_plancall_parent /* план опроса устройств*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplt_plancall where  tplt_plancallid=arowid;
 end 
go
GO


drop procedure if exists tplt_plancall_islocked
go
create procedure tplt_plancall_islocked /* план опроса устройств */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplt_plancall where tplt_plancallid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplt_plancall_lock
go
create procedure tplt_plancall_lock /* план опроса устройств */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplt_plancall_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplt_plancall set lockuserid =auserid ,locksessionid=null  where tplt_plancallid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplt_plancall set lockuserid=null ,locksessionid =acursession  where tplt_plancallid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplt_plancall_unlock
go
create procedure tplt_plancall_unlock /* план опроса устройств */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplt_plancall_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplt_plancall set lockuserid =null  where tplt_plancallid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplt_plancall set locksessionid =null  where tplt_plancallid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplt_plancall_client_trigger
GO

create procedure tplt_plancall_client_trigger  (
 acursession varchar(38),
 aTPLT_PLANCALLid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplt_mask_brief
go

create procedure tplt_mask_brief  (
 acursession varchar(38),
 atplt_maskid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplt_maskid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplt_mask where tplt_maskid=g2b(atplt_maskid);
 if  aec &gt;0 then
   set abrief=tplt_mask_brief_f(g2b(atplt_maskid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplt_mask_delete
go

create procedure tplt_mask_delete /*список параметров для вывода*/ (
 acursession varchar(38),
 atplt_maskid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_mask where tplt_maskid=g2b(atplt_maskid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplt_mask' result;
    leave body;
  end if;
 call tplt_mask_logger(acursession,atplt_maskid) ; 
  delete from  tplt_mask 
  where  tplt_maskid = g2b(atplt_maskid) ;
  delete from num_values where ownerpartname='tplt_mask' and ownerrowid=g2b(atplt_maskid);
  end if;
    select 'ok' result;
 end 
go
GO

/*параметры для вывода*/

drop procedure if exists tplt_mask_save
go

create procedure tplt_mask_save /*список параметров для вывода*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplt_maskid varchar(38)
,aptype varchar(38)/* тип архива *//* тип архива */
,asequence
 integer/* порядок вывода *//* порядок вывода */
,apname varchar(38)/* параметр *//* параметр */
,aparamformat
 varchar (10)/* формат *//* формат */
,acolwidth
 double/* ширина *//* ширина */
,aphide
 integer/* скрыть *//* скрыть */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_mask where tplt_maskid=g2b(atplt_maskid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplt_mask' result;
    leave body;
  end if;
 start transaction ; 
 call tplt_mask_logger(acursession,atplt_maskid) ; 
 update  tplt_mask set changestamp=now() 
,
  ptype=g2b(aptype)
,
  sequence=asequence
,
  pname=g2b(apname)
,
  paramformat=aparamformat
,
  colwidth=acolwidth
,
  phide=aphide
  where  tplt_maskid = g2b(atplt_maskid) ;


call tplt_mask_client_trigger(acursession,atplt_maskid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplt_mask' result;
    leave body;
  end if;
 start transaction;  
 insert into   tplt_mask
 (  changestamp,tplt_maskid 
,instanceid
,ptype

,sequence

,pname

,paramformat

,colwidth

,phide

 ) values (now(), g2b(atplt_maskid) 
,g2b(ainstanceid)
,g2b(aptype)

,asequence

,g2b(apname)

,aparamformat

,acolwidth

,aphide

 ) ;


call tplt_mask_client_trigger(acursession,atplt_maskid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplt_mask_copy
go

create procedure tplt_mask_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplt_mask 
 ( tplt_maskid 
,instanceid
,ptype

,sequence

,pname

,paramformat

,colwidth

,phide

 ) select 
copymap(acopyaction,b2g(tplt_maskid)) 
,copymap(acopyaction,b2g(instanceid))
,ptype

,sequence

,pname

,paramformat

,colwidth

,phide

 from tplt_mask
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplt_mask_logger
go

create procedure tplt_mask_logger /*список параметров для вывода*/ (
 acursession varchar(38),
 atplt_maskid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplt_mask_parent
go
create procedure tplt_mask_parent /* список параметров для вывода*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplt_mask where  tplt_maskid=arowid;
 end 
go
GO


drop procedure if exists tplt_mask_islocked
go
create procedure tplt_mask_islocked /* список параметров для вывода */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplt_mask where tplt_maskid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplt_mask_lock
go
create procedure tplt_mask_lock /* список параметров для вывода */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplt_mask_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplt_mask set lockuserid =auserid ,locksessionid=null  where tplt_maskid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplt_mask set lockuserid=null ,locksessionid =acursession  where tplt_maskid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplt_mask_unlock
go
create procedure tplt_mask_unlock /* список параметров для вывода */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplt_mask_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplt_mask set lockuserid =null  where tplt_maskid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplt_mask set locksessionid =null  where tplt_maskid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplt_mask_client_trigger
GO

create procedure tplt_mask_client_trigger  (
 acursession varchar(38),
 aTPLT_MASKid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplt_bdevices_brief
go

create procedure tplt_bdevices_brief  (
 acursession varchar(38),
 atplt_bdevicesid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplt_bdevicesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplt_bdevices where tplt_bdevicesid=g2b(atplt_bdevicesid);
 if  aec &gt;0 then
   set abrief=tplt_bdevices_brief_f(g2b(atplt_bdevicesid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplt_bdevices_delete
go

create procedure tplt_bdevices_delete /*подключенные к узлу устройства*/ (
 acursession varchar(38),
 atplt_bdevicesid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_bdevices where tplt_bdevicesid=g2b(atplt_bdevicesid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplt_bdevices' result;
    leave body;
  end if;
 call tplt_bdevices_logger(acursession,atplt_bdevicesid) ; 
  delete from  tplt_bdevices 
  where  tplt_bdevicesid = g2b(atplt_bdevicesid) ;
  delete from num_values where ownerpartname='tplt_bdevices' and ownerrowid=g2b(atplt_bdevicesid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание*/

drop procedure if exists tplt_bdevices_save
go

create procedure tplt_bdevices_save /*подключенные к узлу устройства*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplt_bdevicesid varchar(38)
,athenode varchar(38)/* узел *//* узел */
,aname
 varchar (255)/* название *//* название */
,athephone
 varchar (40)/* телефон *//* телефон */
,aaddr
 text/* адрес *//* адрес */
,adevtype varchar(38)/* устройство *//* устройство */
,ashab varchar(38)/* снабжающая орг. *//* снабжающая орг. */
,adevgrp varchar(38)/* группа *//* группа */
,atheschema varchar(38)/* схема подключения *//* схема подключения */
,atheserver varchar(38)/* сервер *//* сервер */
,anplock
 datetime/* заблокированно до *//* заблокированно до */
,aconnected
 integer/* подключен *//* подключен */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_bdevices where tplt_bdevicesid=g2b(atplt_bdevicesid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplt_bdevices' result;
    leave body;
  end if;
 start transaction ; 
 call tplt_bdevices_logger(acursession,atplt_bdevicesid) ; 
 update  tplt_bdevices set changestamp=now() 
,
  thenode=g2b(athenode)
,
  name=aname
,
  thephone=athephone
,
  addr=aaddr
,
  devtype=g2b(adevtype)
,
  shab=g2b(ashab)
,
  devgrp=g2b(adevgrp)
,
  theschema=g2b(atheschema)
,
  theserver=g2b(atheserver)
,
  nplock=anplock
,
  connected=aconnected
  where  tplt_bdevicesid = g2b(atplt_bdevicesid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tplt_bdevices where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=описание правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tplt_bdevices_client_trigger(acursession,atplt_bdevicesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplt_bdevices' result;
    leave body;
  end if;
select count(*) into aec from tplt_bdevices where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tplt_bdevices&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tplt_bdevices
 (  changestamp,tplt_bdevicesid 
,instanceid
,thenode

,name

,thephone

,addr

,devtype

,shab

,devgrp

,theschema

,theserver

,nplock

,connected

 ) values (now(), g2b(atplt_bdevicesid) 
,g2b(ainstanceid)
,g2b(athenode)

,aname

,athephone

,aaddr

,g2b(adevtype)

,g2b(ashab)

,g2b(adevgrp)

,g2b(atheschema)

,g2b(atheserver)

,anplock

,aconnected

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from tplt_bdevices where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=описание правило=(название  уникально)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call tplt_bdevices_client_trigger(acursession,atplt_bdevicesid);

 call tplt_initownership( acursession,ainstanceid);
 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplt_bdevices_copy
go

create procedure tplt_bdevices_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplt_bdevices 
 ( tplt_bdevicesid 
,instanceid
,thenode

,name

,thephone

,addr

,devtype

,shab

,devgrp

,theschema

,theserver

,nplock

,connected

 ) select 
copymap(acopyaction,b2g(tplt_bdevicesid)) 
,copymap(acopyaction,b2g(instanceid))
,thenode

,name

,thephone

,addr

,devtype

,shab

,devgrp

,theschema

,theserver

,nplock

,connected

 from tplt_bdevices
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplt_bdevices_logger
go

create procedure tplt_bdevices_logger /*подключенные к узлу устройства*/ (
 acursession varchar(38),
 atplt_bdevicesid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplt_bdevices_parent
go
create procedure tplt_bdevices_parent /* подключенные к узлу устройства*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplt_bdevices where  tplt_bdevicesid=arowid;
 end 
go
GO


drop procedure if exists tplt_bdevices_islocked
go
create procedure tplt_bdevices_islocked /* подключенные к узлу устройства */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplt_bdevices where tplt_bdevicesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplt_bdevices_lock
go
create procedure tplt_bdevices_lock /* подключенные к узлу устройства */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplt_bdevices_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplt_bdevices set lockuserid =auserid ,locksessionid=null  where tplt_bdevicesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplt_bdevices set lockuserid=null ,locksessionid =acursession  where tplt_bdevicesid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplt_bdevices_unlock
go
create procedure tplt_bdevices_unlock /* подключенные к узлу устройства */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplt_bdevices_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplt_bdevices set lockuserid =null  where tplt_bdevicesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplt_bdevices set locksessionid =null  where tplt_bdevicesid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplt_bdevices_client_trigger
GO

create procedure tplt_bdevices_client_trigger  (
 acursession varchar(38),
 aTPLT_BDEVICESid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tplt_contract_brief
go

create procedure tplt_contract_brief  (
 acursession varchar(38),
 atplt_contractid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atplt_contractid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tplt_contract where tplt_contractid=g2b(atplt_contractid);
 if  aec &gt;0 then
   set abrief=tplt_contract_brief_f(g2b(atplt_contractid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tplt_contract_delete
go

create procedure tplt_contract_delete /*договорные установки*/ (
 acursession varchar(38),
 atplt_contractid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_contract where tplt_contractid=g2b(atplt_contractid);
if aec&gt;0 then
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tplt_contract' result;
    leave body;
  end if;
 call tplt_contract_logger(acursession,atplt_contractid) ; 
  delete from  tplt_contract 
  where  tplt_contractid = g2b(atplt_contractid) ;
  delete from num_values where ownerpartname='tplt_contract' and ownerrowid=g2b(atplt_contractid);
  end if;
    select 'ok' result;
 end 
go
GO

/*договорные установки*/

drop procedure if exists tplt_contract_save
go

create procedure tplt_contract_save /*договорные установки*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atplt_contractid varchar(38)
,afld12
 varchar (96)/* № прибора *//* № прибора */
,afld13
 varchar (96)/* №ключа *//* №ключа */
,afld14
 varchar (96)/* d20об *//* d20об */
,afld15
 varchar (96)/* d20пр *//* d20пр */
,afld16
 varchar (96)/* dyгвс *//* dyгвс */
,afld17
 varchar (96)/* dyобр *//* dyобр */
,afld18
 varchar (96)/* dyпр *//* dyпр */
,afld19
 varchar (96)/* dрпроб *//* dрпроб */
,afld20
 varchar (96)/* dрпрпр *//* dрпрпр */
,afld21
 varchar (96)/* g(гвс)пр *//* g(гвс)пр */
,afld22
 varchar (96)/* gгвс *//* gгвс */
,afld23
 varchar (96)/* gоб(гвс min) *//* gоб(гвс min) */
,afld24
 varchar (96)/* gов *//* gов */
,afld25
 varchar (96)/* gпр(гвс min) *//* gпр(гвс min) */
,afld26
 varchar (96)/* gпр_minоб *//* gпр_minоб */
,afld27
 varchar (96)/* gпр_minпр *//* gпр_minпр */
,afld28
 varchar (96)/* gпроб *//* gпроб */
,afld29
 varchar (96)/* gпрпр *//* gпрпр */
,afld30
 varchar (96)/* gут *//* gут */
,afld31
 varchar (96)/* д20об *//* д20об */
,afld32
 varchar (96)/* д20пр *//* д20пр */
,afld33
 varchar (96)/* договор *//* договор */
,afld34
 varchar (96)/* договор g2 *//* договор g2 */
,afld35
 varchar (96)/* договор g1 *//* договор g1 */
,afld36
 varchar (96)/* источник *//* источник */
,afld37
 varchar (96)/* магистраль *//* магистраль */
,afld40
 varchar (96)/* расходомер *//* расходомер */
,afld41
 varchar (96)/* расходомер гвс *//* расходомер гвс */
,afld42
 varchar (96)/* робр *//* робр */
,afld43
 varchar (96)/* рпр *//* рпр */
,afld45
 varchar (96)/* способ отбора *//* способ отбора */
,afld46
 varchar (96)/* т_график *//* т_график */
,afld47
 varchar (96)/* теп_камера *//* теп_камера */
,afld48
 varchar (96)/* тип расходомера *//* тип расходомера */
,afld49
 varchar (96)/* тип термометра *//* тип термометра */
,afld50
 varchar (96)/* формула *//* формула */
,afld51
 varchar (96)/* наименование счетчика *//* наименование счетчика */
,afld52
 varchar (96)/* схема *//* схема */
,afld53
 varchar (96)/* qот *//* qот */
,afld54
 varchar (96)/* qв *//* qв */
,afld55
 varchar (96)/* qгвс *//* qгвс */
,afld56
 varchar (96)/* qну *//* qну */
,afld57
 varchar (96)/* gот *//* gот */
,afld58
 varchar (96)/* gв *//* gв */
,afld59
 varchar (96)/* gну *//* gну */
,afld60
 varchar (96)/* часов_архив *//* часов_архив */
,afld61
 varchar (96)/* сут_архив *//* сут_архив */
,afld62
 varchar (96)/* термопреобр гвс *//* термопреобр гвс */
,afld63
 varchar (96)/* т1 *//* т1 */
,afld64
 varchar (96)/* т2 *//* т2 */
,afld65
 varchar (96)/* т3 *//* т3 */
,afld66
 varchar (96)/* т4 *//* т4 */
,afld67
 varchar (96)/* gтех *//* gтех */
,afld68
 varchar (96)/* gтех_гвс *//* gтех_гвс */
,afld69
 varchar (96)/* gгвс_м *//* gгвс_м */
,afld70
 varchar (96)/* qтех *//* qтех */
,afld71
 varchar (96)/* qвент *//* qвент */
,afld72
 varchar (96)/* тхв *//* тхв */
,afld73
 varchar (96)/* расходомер гвсц *//* расходомер гвсц */
,afld81
 varchar (96)/* формула2 *//* формула2 */
,afld82
 varchar (96)/* термопреобр *//* термопреобр */
,afld83
 varchar (96)/* gвент *//* gвент */
,afld84
 varchar (96)/* код уутэ *//* код уутэ */
,afld85
 varchar (96)/* сист_теплопотребления *//* сист_теплопотребления */
,afld86
 varchar (96)/* qтех_гвс *//* qтех_гвс */
,afld87
 varchar (96)/* qтех_гвс ср *//* qтех_гвс ср */
,afld88
 varchar (96)/* qгвс ср *//* qгвс ср */
,afld89
 varchar (96)/* дата поверки *//* дата поверки */
,afld90
 varchar (96)/* фамилия *//* фамилия */
,afld92
 varchar (96)/* узел учета *//* узел учета */
,afld93
 varchar (96)/* стр.адрес *//* стр.адрес */
,afld94
 varchar (96)/* g(гвс)обр *//* g(гвс)обр */
,afld95
 varchar (96)/* dyгвсц *//* dyгвсц */
,afld96
 varchar (96)/* цена_имп_m1 *//* цена_имп_m1 */
,afld97
 varchar (96)/* цена_имп_m2 *//* цена_имп_m2 */
,afld98
 varchar (96)/* цена_имп_m1гв *//* цена_имп_m1гв */
,afld99
 varchar (96)/* цена_имп_m2гв *//* цена_имп_m2гв */
,afld100
 varchar (96)/* доп_погр_изм_m1% *//* доп_погр_изм_m1% */
,afld101
 varchar (96)/* доп_погр_изм_m2% *//* доп_погр_изм_m2% */
,afld102
 varchar (96)/* доп_погр_изм_m1гв% *//* доп_погр_изм_m1гв% */
,afld103
 varchar (96)/* доп_погр_изм_m2гв% *//* доп_погр_изм_m2гв% */
,afld104
 varchar (96)/* расходомер m2 *//* расходомер m2 */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tplt_contract where tplt_contractid=g2b(atplt_contractid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tplt_contract' result;
    leave body;
  end if;
 start transaction ; 
 call tplt_contract_logger(acursession,atplt_contractid) ; 
 update  tplt_contract set changestamp=now() 
,
  fld12=afld12
,
  fld13=afld13
,
  fld14=afld14
,
  fld15=afld15
,
  fld16=afld16
,
  fld17=afld17
,
  fld18=afld18
,
  fld19=afld19
,
  fld20=afld20
,
  fld21=afld21
,
  fld22=afld22
,
  fld23=afld23
,
  fld24=afld24
,
  fld25=afld25
,
  fld26=afld26
,
  fld27=afld27
,
  fld28=afld28
,
  fld29=afld29
,
  fld30=afld30
,
  fld31=afld31
,
  fld32=afld32
,
  fld33=afld33
,
  fld34=afld34
,
  fld35=afld35
,
  fld36=afld36
,
  fld37=afld37
,
  fld40=afld40
,
  fld41=afld41
,
  fld42=afld42
,
  fld43=afld43
,
  fld45=afld45
,
  fld46=afld46
,
  fld47=afld47
,
  fld48=afld48
,
  fld49=afld49
,
  fld50=afld50
,
  fld51=afld51
,
  fld52=afld52
,
  fld53=afld53
,
  fld54=afld54
,
  fld55=afld55
,
  fld56=afld56
,
  fld57=afld57
,
  fld58=afld58
,
  fld59=afld59
,
  fld60=afld60
,
  fld61=afld61
,
  fld62=afld62
,
  fld63=afld63
,
  fld64=afld64
,
  fld65=afld65
,
  fld66=afld66
,
  fld67=afld67
,
  fld68=afld68
,
  fld69=afld69
,
  fld70=afld70
,
  fld71=afld71
,
  fld72=afld72
,
  fld73=afld73
,
  fld81=afld81
,
  fld82=afld82
,
  fld83=afld83
,
  fld84=afld84
,
  fld85=afld85
,
  fld86=afld86
,
  fld87=afld87
,
  fld88=afld88
,
  fld89=afld89
,
  fld90=afld90
,
  fld92=afld92
,
  fld93=afld93
,
  fld94=afld94
,
  fld95=afld95
,
  fld96=afld96
,
  fld97=afld97
,
  fld98=afld98
,
  fld99=afld99
,
  fld100=afld100
,
  fld101=afld101
,
  fld102=afld102
,
  fld103=afld103
,
  fld104=afld104
  where  tplt_contractid = g2b(atplt_contractid) ;


call tplt_contract_client_trigger(acursession,atplt_contractid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tplt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tplt_contract' result;
    leave body;
  end if;
select count(*) into aec from tplt_contract where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tplt_contract&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tplt_contract
 (  changestamp,tplt_contractid 
,instanceid
,fld12

,fld13

,fld14

,fld15

,fld16

,fld17

,fld18

,fld19

,fld20

,fld21

,fld22

,fld23

,fld24

,fld25

,fld26

,fld27

,fld28

,fld29

,fld30

,fld31

,fld32

,fld33

,fld34

,fld35

,fld36

,fld37

,fld40

,fld41

,fld42

,fld43

,fld45

,fld46

,fld47

,fld48

,fld49

,fld50

,fld51

,fld52

,fld53

,fld54

,fld55

,fld56

,fld57

,fld58

,fld59

,fld60

,fld61

,fld62

,fld63

,fld64

,fld65

,fld66

,fld67

,fld68

,fld69

,fld70

,fld71

,fld72

,fld73

,fld81

,fld82

,fld83

,fld84

,fld85

,fld86

,fld87

,fld88

,fld89

,fld90

,fld92

,fld93

,fld94

,fld95

,fld96

,fld97

,fld98

,fld99

,fld100

,fld101

,fld102

,fld103

,fld104

 ) values (now(), g2b(atplt_contractid) 
,g2b(ainstanceid)
,afld12

,afld13

,afld14

,afld15

,afld16

,afld17

,afld18

,afld19

,afld20

,afld21

,afld22

,afld23

,afld24

,afld25

,afld26

,afld27

,afld28

,afld29

,afld30

,afld31

,afld32

,afld33

,afld34

,afld35

,afld36

,afld37

,afld40

,afld41

,afld42

,afld43

,afld45

,afld46

,afld47

,afld48

,afld49

,afld50

,afld51

,afld52

,afld53

,afld54

,afld55

,afld56

,afld57

,afld58

,afld59

,afld60

,afld61

,afld62

,afld63

,afld64

,afld65

,afld66

,afld67

,afld68

,afld69

,afld70

,afld71

,afld72

,afld73

,afld81

,afld82

,afld83

,afld84

,afld85

,afld86

,afld87

,afld88

,afld89

,afld90

,afld92

,afld93

,afld94

,afld95

,afld96

,afld97

,afld98

,afld99

,afld100

,afld101

,afld102

,afld103

,afld104

 ) ;


call tplt_contract_client_trigger(acursession,atplt_contractid);

 call tplt_initownership( acursession,ainstanceid);
 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tplt_contract_copy
go

create procedure tplt_contract_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tplt_contract 
 ( tplt_contractid 
,instanceid
,fld12

,fld13

,fld14

,fld15

,fld16

,fld17

,fld18

,fld19

,fld20

,fld21

,fld22

,fld23

,fld24

,fld25

,fld26

,fld27

,fld28

,fld29

,fld30

,fld31

,fld32

,fld33

,fld34

,fld35

,fld36

,fld37

,fld40

,fld41

,fld42

,fld43

,fld45

,fld46

,fld47

,fld48

,fld49

,fld50

,fld51

,fld52

,fld53

,fld54

,fld55

,fld56

,fld57

,fld58

,fld59

,fld60

,fld61

,fld62

,fld63

,fld64

,fld65

,fld66

,fld67

,fld68

,fld69

,fld70

,fld71

,fld72

,fld73

,fld81

,fld82

,fld83

,fld84

,fld85

,fld86

,fld87

,fld88

,fld89

,fld90

,fld92

,fld93

,fld94

,fld95

,fld96

,fld97

,fld98

,fld99

,fld100

,fld101

,fld102

,fld103

,fld104

 ) select 
copymap(acopyaction,b2g(tplt_contractid)) 
,copymap(acopyaction,b2g(instanceid))
,fld12

,fld13

,fld14

,fld15

,fld16

,fld17

,fld18

,fld19

,fld20

,fld21

,fld22

,fld23

,fld24

,fld25

,fld26

,fld27

,fld28

,fld29

,fld30

,fld31

,fld32

,fld33

,fld34

,fld35

,fld36

,fld37

,fld40

,fld41

,fld42

,fld43

,fld45

,fld46

,fld47

,fld48

,fld49

,fld50

,fld51

,fld52

,fld53

,fld54

,fld55

,fld56

,fld57

,fld58

,fld59

,fld60

,fld61

,fld62

,fld63

,fld64

,fld65

,fld66

,fld67

,fld68

,fld69

,fld70

,fld71

,fld72

,fld73

,fld81

,fld82

,fld83

,fld84

,fld85

,fld86

,fld87

,fld88

,fld89

,fld90

,fld92

,fld93

,fld94

,fld95

,fld96

,fld97

,fld98

,fld99

,fld100

,fld101

,fld102

,fld103

,fld104

 from tplt_contract
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tplt_contract_logger
go

create procedure tplt_contract_logger /*договорные установки*/ (
 acursession varchar(38),
 atplt_contractid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tplt_contract_parent
go
create procedure tplt_contract_parent /* договорные установки*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tplt_contract where  tplt_contractid=arowid;
 end 
go
GO


drop procedure if exists tplt_contract_islocked
go
create procedure tplt_contract_islocked /* договорные установки */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tplt_contract where tplt_contractid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tplt_contract_lock
go
create procedure tplt_contract_lock /* договорные установки */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tplt_contract_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tplt_contract set lockuserid =auserid ,locksessionid=null  where tplt_contractid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tplt_contract set lockuserid=null ,locksessionid =acursession  where tplt_contractid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tplt_contract_unlock
go
create procedure tplt_contract_unlock /* договорные установки */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tplt_contract_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tplt_contract set lockuserid =null  where tplt_contractid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tplt_contract set locksessionid =null  where tplt_contractid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tplt_contract_client_trigger
GO

create procedure tplt_contract_client_trigger  (
 acursession varchar(38),
 aTPLT_CONTRACTid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists mtzext_def_brief
go

create procedure mtzext_def_brief  (
 acursession varchar(38),
 amtzext_defid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if amtzext_defid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from mtzext_def where mtzext_defid=g2b(amtzext_defid);
 if  aec &gt;0 then
   set abrief=mtzext_def_brief_f(g2b(amtzext_defid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists mtzext_def_delete
go

create procedure mtzext_def_delete /*список зарегистрированных расширений*/ (
 acursession varchar(38),
 amtzext_defid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzext_def where mtzext_defid=g2b(amtzext_defid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=mtzext_def' result;
    leave body;
  end if;
 call mtzext_def_logger(acursession,amtzext_defid) ; 
  delete from  mtzext_def 
  where  mtzext_defid = g2b(amtzext_defid) ;
  delete from num_values where ownerpartname='mtzext_def' and ownerrowid=g2b(amtzext_defid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание*/

drop procedure if exists mtzext_def_save
go

create procedure mtzext_def_save /*список зарегистрированных расширений*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 amtzext_defid varchar(38)
,aname
 varchar (255)/* название *//* название */
,aexttype
 integer/* тип расширения *//* тип расширения */
,athedescription
 text/* описание *//* описание */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzext_def where mtzext_defid=g2b(amtzext_defid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=mtzext_def' result;
    leave body;
  end if;
 start transaction ; 
 call mtzext_def_logger(acursession,amtzext_defid) ; 
 update  mtzext_def set changestamp=now() 
,
  name=aname
,
  exttype=aexttype
,
  thedescription=athedescription
  where  mtzext_defid = g2b(amtzext_defid) ;


call mtzext_def_client_trigger(acursession,amtzext_defid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=mtzext_def' result;
    leave body;
  end if;
select count(*) into aec from mtzext_def where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;mtzext_def&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   mtzext_def
 (  changestamp,mtzext_defid 
,instanceid
,name

,exttype

,thedescription

 ) values (now(), g2b(amtzext_defid) 
,g2b(ainstanceid)
,aname

,aexttype

,athedescription

 ) ;


call mtzext_def_client_trigger(acursession,amtzext_defid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists mtzext_def_copy
go

create procedure mtzext_def_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into mtzext_def 
 ( mtzext_defid 
,instanceid
,name

,exttype

,thedescription

 ) select 
copymap(acopyaction,b2g(mtzext_defid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,exttype

,thedescription

 from mtzext_def
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists mtzext_def_logger
go

create procedure mtzext_def_logger /*список зарегистрированных расширений*/ (
 acursession varchar(38),
 amtzext_defid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists mtzext_def_parent
go
create procedure mtzext_def_parent /* список зарегистрированных расширений*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from mtzext_def where  mtzext_defid=arowid;
 end 
go
GO


drop procedure if exists mtzext_def_islocked
go
create procedure mtzext_def_islocked /* список зарегистрированных расширений */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from mtzext_def where mtzext_defid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists mtzext_def_lock
go
create procedure mtzext_def_lock /* список зарегистрированных расширений */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call mtzext_def_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update mtzext_def set lockuserid =auserid ,locksessionid=null  where mtzext_defid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update mtzext_def set lockuserid=null ,locksessionid =acursession  where mtzext_defid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists mtzext_def_unlock
go
create procedure mtzext_def_unlock /* список зарегистрированных расширений */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call mtzext_def_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update mtzext_def set lockuserid =null  where mtzext_defid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update mtzext_def set locksessionid =null  where mtzext_defid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS mtzext_def_client_trigger
GO

create procedure mtzext_def_client_trigger  (
 acursession varchar(38),
 aMTZExt_defid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists mtzextrel_brief
go

create procedure mtzextrel_brief  (
 acursession varchar(38),
 amtzextrelid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if amtzextrelid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from mtzextrel where mtzextrelid=g2b(amtzextrelid);
 if  aec &gt;0 then
   set abrief=mtzextrel_brief_f(g2b(amtzextrelid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists mtzextrel_delete
go

create procedure mtzextrel_delete /*реализации расширения для разных разработческих плаформ*/ (
 acursession varchar(38),
 amtzextrelid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzextrel where mtzextrelid=g2b(amtzextrelid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=mtzextrel' result;
    leave body;
  end if;
 call mtzextrel_logger(acursession,amtzextrelid) ; 
  delete from  mtzextrel 
  where  mtzextrelid = g2b(amtzextrelid) ;
  delete from num_values where ownerpartname='mtzextrel' and ownerrowid=g2b(amtzextrelid);
  end if;
    select 'ok' result;
 end 
go
GO

/*реализации расширения*/

drop procedure if exists mtzextrel_save
go

create procedure mtzextrel_save /*реализации расширения для разных разработческих плаформ*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 amtzextrelid varchar(38)
,atheplatform
 integer/* реализация *//* реализация */
,atheclassname
 varchar (255)/* название класса *//* название класса */
,athelibraryname
 varchar (255)/* название библиотеки *//* название библиотеки */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzextrel where mtzextrelid=g2b(amtzextrelid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=mtzextrel' result;
    leave body;
  end if;
 start transaction ; 
 call mtzextrel_logger(acursession,amtzextrelid) ; 
 update  mtzextrel set changestamp=now() 
,
  theplatform=atheplatform
,
  theclassname=atheclassname
,
  thelibraryname=athelibraryname
  where  mtzextrelid = g2b(amtzextrelid) ;


call mtzextrel_client_trigger(acursession,amtzextrelid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=mtzextrel' result;
    leave body;
  end if;
 start transaction;  
 insert into   mtzextrel
 (  changestamp,mtzextrelid 
,instanceid
,theplatform

,theclassname

,thelibraryname

 ) values (now(), g2b(amtzextrelid) 
,g2b(ainstanceid)
,atheplatform

,atheclassname

,athelibraryname

 ) ;


call mtzextrel_client_trigger(acursession,amtzextrelid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists mtzextrel_copy
go

create procedure mtzextrel_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into mtzextrel 
 ( mtzextrelid 
,instanceid
,theplatform

,theclassname

,thelibraryname

 ) select 
copymap(acopyaction,b2g(mtzextrelid)) 
,copymap(acopyaction,b2g(instanceid))
,theplatform

,theclassname

,thelibraryname

 from mtzextrel
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists mtzextrel_logger
go

create procedure mtzextrel_logger /*реализации расширения для разных разработческих плаформ*/ (
 acursession varchar(38),
 amtzextrelid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists mtzextrel_parent
go
create procedure mtzextrel_parent /* реализации расширения для разных разработческих плаформ*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from mtzextrel where  mtzextrelid=arowid;
 end 
go
GO


drop procedure if exists mtzextrel_islocked
go
create procedure mtzextrel_islocked /* реализации расширения для разных разработческих плаформ */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from mtzextrel where mtzextrelid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists mtzextrel_lock
go
create procedure mtzextrel_lock /* реализации расширения для разных разработческих плаформ */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call mtzextrel_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update mtzextrel set lockuserid =auserid ,locksessionid=null  where mtzextrelid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update mtzextrel set lockuserid=null ,locksessionid =acursession  where mtzextrelid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists mtzextrel_unlock
go
create procedure mtzextrel_unlock /* реализации расширения для разных разработческих плаформ */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call mtzextrel_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update mtzextrel set lockuserid =null  where mtzextrelid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update mtzextrel set locksessionid =null  where mtzextrelid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS mtzextrel_client_trigger
GO

create procedure mtzextrel_client_trigger  (
 acursession varchar(38),
 aMTZExtRelid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists iu_rcfg_mod_brief
go

create procedure iu_rcfg_mod_brief  (
 acursession varchar(38),
 aiu_rcfg_modid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_rcfg_modid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_rcfg_mod where iu_rcfg_modid=g2b(aiu_rcfg_modid);
 if  aec &gt;0 then
   set abrief=iu_rcfg_mod_brief_f(g2b(aiu_rcfg_modid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists iu_rcfg_mod_delete
go

create procedure iu_rcfg_mod_delete /**/ (
 acursession varchar(38),
 aiu_rcfg_modid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_mod where iu_rcfg_modid=g2b(aiu_rcfg_modid);
if aec&gt;0 then
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=iu_rcfg_mod' result;
    leave body;
  end if;
 call iu_rcfg_mod_logger(acursession,aiu_rcfg_modid) ; 
  delete from  iu_rcfg_mod 
  where  iu_rcfg_modid = g2b(aiu_rcfg_modid) ;
  delete from num_values where ownerpartname='iu_rcfg_mod' and ownerrowid=g2b(aiu_rcfg_modid);
  end if;
    select 'ok' result;
 end 
go
GO

/*модуль*/

drop procedure if exists iu_rcfg_mod_save
go

create procedure iu_rcfg_mod_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_rcfg_modid varchar(38)
,asequence
 integer/* № п/п *//* № п/п */
,acaption
 varchar (80)/* надпись *//* надпись */
,amoduleaccessible
 integer/* разрешен *//* разрешен */
,atheicon
 varchar (64)/* иконка *//* иконка */
,aname
 varchar (255)/* название меню *//* название меню */
,agroupname
 varchar (60)/* меню верхнего урровня *//* меню верхнего урровня */
,aallobjects
 integer/* вся фирма *//* вся фирма */
,acolegsobject
 integer/* объекты коллег *//* объекты коллег */
,asubstructobjects
 integer/* подчиненные подразделения *//* подчиненные подразделения */
,amydocmode
 varchar (10)/* мои документы *//* мои документы */
,aotherdocmode
 varchar (10)/* чужие документы *//* чужие документы */
,acontroldocmode
 varchar (10)/* документы на контроле *//* документы на контроле */
,avisiblecontrol
 integer/* управление видимостью *//* управление видимостью */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_mod where iu_rcfg_modid=g2b(aiu_rcfg_modid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=iu_rcfg_mod' result;
    leave body;
  end if;
 start transaction ; 
 call iu_rcfg_mod_logger(acursession,aiu_rcfg_modid) ; 
 update  iu_rcfg_mod set changestamp=now() 
,
  sequence=asequence
,
  caption=acaption
,
  moduleaccessible=amoduleaccessible
,
  theicon=atheicon
,
  name=aname
,
  groupname=agroupname
,
  allobjects=aallobjects
,
  colegsobject=acolegsobject
,
  substructobjects=asubstructobjects
,
  mydocmode=amydocmode
,
  otherdocmode=aotherdocmode
,
  controldocmode=acontroldocmode
,
  visiblecontrol=avisiblecontrol
  where  iu_rcfg_modid = g2b(aiu_rcfg_modid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from iu_rcfg_mod where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=модуль правило=(модуль уникален)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_mod_client_trigger(acursession,aiu_rcfg_modid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=iu_rcfg_mod' result;
    leave body;
  end if;
 start transaction;  
 insert into   iu_rcfg_mod
 (  changestamp,iu_rcfg_modid 
,instanceid
,sequence

,caption

,moduleaccessible

,theicon

,name

,groupname

,allobjects

,colegsobject

,substructobjects

,mydocmode

,otherdocmode

,controldocmode

,visiblecontrol

 ) values (now(), g2b(aiu_rcfg_modid) 
,g2b(ainstanceid)
,asequence

,acaption

,amoduleaccessible

,atheicon

,aname

,agroupname

,aallobjects

,acolegsobject

,asubstructobjects

,amydocmode

,aotherdocmode

,acontroldocmode

,avisiblecontrol

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from iu_rcfg_mod where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=модуль правило=(модуль уникален)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_mod_client_trigger(acursession,aiu_rcfg_modid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists iu_rcfg_mod_copy
go

create procedure iu_rcfg_mod_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_rcfg_mod 
 ( iu_rcfg_modid 
,instanceid
,sequence

,caption

,moduleaccessible

,theicon

,name

,groupname

,allobjects

,colegsobject

,substructobjects

,mydocmode

,otherdocmode

,controldocmode

,visiblecontrol

 ) select 
copymap(acopyaction,b2g(iu_rcfg_modid)) 
,copymap(acopyaction,b2g(instanceid))
,sequence

,caption

,moduleaccessible

,theicon

,name

,groupname

,allobjects

,colegsobject

,substructobjects

,mydocmode

,otherdocmode

,controldocmode

,visiblecontrol

 from iu_rcfg_mod
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists iu_rcfg_mod_logger
go

create procedure iu_rcfg_mod_logger /**/ (
 acursession varchar(38),
 aiu_rcfg_modid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists iu_rcfg_mod_parent
go
create procedure iu_rcfg_mod_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_rcfg_mod where  iu_rcfg_modid=arowid;
 end 
go
GO


drop procedure if exists iu_rcfg_mod_islocked
go
create procedure iu_rcfg_mod_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_rcfg_mod where iu_rcfg_modid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists iu_rcfg_mod_lock
go
create procedure iu_rcfg_mod_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_rcfg_mod_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_rcfg_mod set lockuserid =auserid ,locksessionid=null  where iu_rcfg_modid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_rcfg_mod set lockuserid=null ,locksessionid =acursession  where iu_rcfg_modid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists iu_rcfg_mod_unlock
go
create procedure iu_rcfg_mod_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_rcfg_mod_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_rcfg_mod set lockuserid =null  where iu_rcfg_modid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_rcfg_mod set locksessionid =null  where iu_rcfg_modid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS iu_rcfg_mod_client_trigger
GO

create procedure iu_rcfg_mod_client_trigger  (
 acursession varchar(38),
 aiu_rcfg_modid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists iu_rcfg_docmode_brief
go

create procedure iu_rcfg_docmode_brief  (
 acursession varchar(38),
 aiu_rcfg_docmodeid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_rcfg_docmodeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_rcfg_docmode where iu_rcfg_docmodeid=g2b(aiu_rcfg_docmodeid);
 if  aec &gt;0 then
   set abrief=iu_rcfg_docmode_brief_f(g2b(aiu_rcfg_docmodeid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists iu_rcfg_docmode_delete
go

create procedure iu_rcfg_docmode_delete /*какую карточку документа открывать*/ (
 acursession varchar(38),
 aiu_rcfg_docmodeid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_docmode where iu_rcfg_docmodeid=g2b(aiu_rcfg_docmodeid);
if aec&gt;0 then
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=iu_rcfg_docmode' result;
    leave body;
  end if;
 call iu_rcfg_docmode_logger(acursession,aiu_rcfg_docmodeid) ; 
  delete from  iu_rcfg_docmode 
  where  iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid) ;
  delete from num_values where ownerpartname='iu_rcfg_docmode' and ownerrowid=g2b(aiu_rcfg_docmodeid);
  end if;
    select 'ok' result;
 end 
go
GO

/*режим документа*/

drop procedure if exists iu_rcfg_docmode_save
go

create procedure iu_rcfg_docmode_save /*какую карточку документа открывать*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_rcfg_docmodeid varchar(38)
,athe_document varchar(38)/* тип документа *//* тип документа */
,aaddmode
 varchar (4)/* режим для  создания *//* режим для  создания */
,aeditmode
 varchar (4)/* режим для редактирования *//* режим для редактирования */
,aallowadd
 integer/* можно создавать *//* можно создавать */
,aallowdelete
 integer/* можно удалять *//* можно удалять */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_docmode where iu_rcfg_docmodeid=g2b(aiu_rcfg_docmodeid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=iu_rcfg_docmode' result;
    leave body;
  end if;
 start transaction ; 
 call iu_rcfg_docmode_logger(acursession,aiu_rcfg_docmodeid) ; 
 update  iu_rcfg_docmode set changestamp=now() 
,
  the_document=g2b(athe_document)
,
  addmode=aaddmode
,
  editmode=aeditmode
,
  allowadd=aallowadd
,
  allowdelete=aallowdelete
  where  iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from iu_rcfg_docmode where  instanceid=g2b(ainstanceid) 
 and the_document=g2b(athe_document);
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=режим документа правило=(тип документа уникален)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_docmode_client_trigger(acursession,aiu_rcfg_docmodeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=iu_rcfg_docmode' result;
    leave body;
  end if;
 start transaction;  
 insert into   iu_rcfg_docmode
 (  changestamp,iu_rcfg_docmodeid 
,instanceid
,the_document

,addmode

,editmode

,allowadd

,allowdelete

 ) values (now(), g2b(aiu_rcfg_docmodeid) 
,g2b(ainstanceid)
,g2b(athe_document)

,aaddmode

,aeditmode

,aallowadd

,aallowdelete

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from iu_rcfg_docmode where  instanceid=g2b(ainstanceid) 
 and the_document=g2b(athe_document);
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=режим документа правило=(тип документа уникален)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_docmode_client_trigger(acursession,aiu_rcfg_docmodeid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists iu_rcfg_docmode_copy
go

create procedure iu_rcfg_docmode_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_rcfg_docmode 
 ( iu_rcfg_docmodeid 
,instanceid
,the_document

,addmode

,editmode

,allowadd

,allowdelete

 ) select 
copymap(acopyaction,b2g(iu_rcfg_docmodeid)) 
,copymap(acopyaction,b2g(instanceid))
,the_document

,addmode

,editmode

,allowadd

,allowdelete

 from iu_rcfg_docmode
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists iu_rcfg_docmode_logger
go

create procedure iu_rcfg_docmode_logger /*какую карточку документа открывать*/ (
 acursession varchar(38),
 aiu_rcfg_docmodeid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists iu_rcfg_docmode_parent
go
create procedure iu_rcfg_docmode_parent /* какую карточку документа открывать*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_rcfg_docmode where  iu_rcfg_docmodeid=arowid;
 end 
go
GO


drop procedure if exists iu_rcfg_docmode_islocked
go
create procedure iu_rcfg_docmode_islocked /* какую карточку документа открывать */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_rcfg_docmode where iu_rcfg_docmodeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists iu_rcfg_docmode_lock
go
create procedure iu_rcfg_docmode_lock /* какую карточку документа открывать */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_rcfg_docmode_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_rcfg_docmode set lockuserid =auserid ,locksessionid=null  where iu_rcfg_docmodeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_rcfg_docmode set lockuserid=null ,locksessionid =acursession  where iu_rcfg_docmodeid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists iu_rcfg_docmode_unlock
go
create procedure iu_rcfg_docmode_unlock /* какую карточку документа открывать */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_rcfg_docmode_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_rcfg_docmode set lockuserid =null  where iu_rcfg_docmodeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_rcfg_docmode set locksessionid =null  where iu_rcfg_docmodeid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS iu_rcfg_docmode_client_trigger
GO

create procedure iu_rcfg_docmode_client_trigger  (
 acursession varchar(38),
 aiu_rcfg_docmodeid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists iu_rcfg_def_brief
go

create procedure iu_rcfg_def_brief  (
 acursession varchar(38),
 aiu_rcfg_defid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_rcfg_defid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_rcfg_def where iu_rcfg_defid=g2b(aiu_rcfg_defid);
 if  aec &gt;0 then
   set abrief=iu_rcfg_def_brief_f(g2b(aiu_rcfg_defid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists iu_rcfg_def_delete
go

create procedure iu_rcfg_def_delete /*роль для настройки*/ (
 acursession varchar(38),
 aiu_rcfg_defid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_def where iu_rcfg_defid=g2b(aiu_rcfg_defid);
if aec&gt;0 then
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=iu_rcfg_def' result;
    leave body;
  end if;
 call iu_rcfg_def_logger(acursession,aiu_rcfg_defid) ; 
  delete from  iu_rcfg_def 
  where  iu_rcfg_defid = g2b(aiu_rcfg_defid) ;
  delete from num_values where ownerpartname='iu_rcfg_def' and ownerrowid=g2b(aiu_rcfg_defid);
  end if;
    select 'ok' result;
 end 
go
GO


drop procedure if exists iu_rcfg_def_archive
go

create procedure iu_rcfg_def_archive /*роль для настройки*/ (
 acursession varchar(38),
 aiu_rcfg_defid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare atmpid binary(16);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_def where iu_rcfg_defid=g2b(aiu_rcfg_defid);
if aec&gt;0 then
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=iu_rcfg_def' result;
    leave body;
  end if;
 call iu_rcfg_def_logger(acursession,aiu_rcfg_defid) ; 
  update   iu_rcfg_def set archived = 1 
  where  iu_rcfg_defid = g2b(aiu_rcfg_defid) ;
  end if;
    select 'ok' result;
 end 
go
GO

/*роль*/

drop procedure if exists iu_rcfg_def_save
go

create procedure iu_rcfg_def_save /*роль для настройки*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_rcfg_defid varchar(38)
,atherole varchar(38)/* роль *//* роль */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_def where iu_rcfg_defid=g2b(aiu_rcfg_defid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=iu_rcfg_def' result;
    leave body;
  end if;
 start transaction ; 
 call iu_rcfg_def_logger(acursession,aiu_rcfg_defid) ; 
 update  iu_rcfg_def set changestamp=now() 
,
  therole=g2b(atherole)
  where  iu_rcfg_defid = g2b(aiu_rcfg_defid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from iu_rcfg_def where 1=1  
 and therole=g2b(atherole);
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=роль правило=(роль уникальна)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_def_client_trigger(acursession,aiu_rcfg_defid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=iu_rcfg_def' result;
    leave body;
  end if;
select count(*) into aec from iu_rcfg_def where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;iu_rcfg_def&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   iu_rcfg_def
 (  changestamp,iu_rcfg_defid 
,instanceid
,therole

 ) values (now(), g2b(aiu_rcfg_defid) 
,g2b(ainstanceid)
,g2b(atherole)

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
select count(*) into  auniquerowcount from iu_rcfg_def where 1=1  
 and therole=g2b(atherole);
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=роль правило=(роль уникальна)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_def_client_trigger(acursession,aiu_rcfg_defid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists iu_rcfg_def_copy
go

create procedure iu_rcfg_def_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_rcfg_def 
 ( iu_rcfg_defid 
,instanceid
,archived
,therole

 ) select 
copymap(acopyaction,b2g(iu_rcfg_defid)) 
,copymap(acopyaction,b2g(instanceid))
,archived
,therole

 from iu_rcfg_def
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists iu_rcfg_def_logger
go

create procedure iu_rcfg_def_logger /*роль для настройки*/ (
 acursession varchar(38),
 aiu_rcfg_defid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists iu_rcfg_def_parent
go
create procedure iu_rcfg_def_parent /* роль для настройки*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_rcfg_def where  iu_rcfg_defid=arowid;
 end 
go
GO


drop procedure if exists iu_rcfg_def_islocked
go
create procedure iu_rcfg_def_islocked /* роль для настройки */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_rcfg_def where iu_rcfg_defid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists iu_rcfg_def_lock
go
create procedure iu_rcfg_def_lock /* роль для настройки */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_rcfg_def_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_rcfg_def set lockuserid =auserid ,locksessionid=null  where iu_rcfg_defid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_rcfg_def set lockuserid=null ,locksessionid =acursession  where iu_rcfg_defid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists iu_rcfg_def_unlock
go
create procedure iu_rcfg_def_unlock /* роль для настройки */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_rcfg_def_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_rcfg_def set lockuserid =null  where iu_rcfg_defid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_rcfg_def set locksessionid =null  where iu_rcfg_defid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS iu_rcfg_def_client_trigger
GO

create procedure iu_rcfg_def_client_trigger  (
 acursession varchar(38),
 aiu_rcfg_defid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpq_def_brief
go

create procedure tpq_def_brief  (
 acursession varchar(38),
 atpq_defid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpq_defid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpq_def where tpq_defid=g2b(atpq_defid);
 if  aec &gt;0 then
   set abrief=tpq_def_brief_f(g2b(atpq_defid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpq_def_delete
go

create procedure tpq_def_delete /**/ (
 acursession varchar(38),
 atpq_defid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpq_def where tpq_defid=g2b(atpq_defid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpq.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpq_def' result;
    leave body;
  end if;
 call tpq_def_logger(acursession,atpq_defid) ; 
  delete from  tpq_def 
  where  tpq_defid = g2b(atpq_defid) ;
  delete from num_values where ownerpartname='tpq_def' and ownerrowid=g2b(atpq_defid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание*/

drop procedure if exists tpq_def_save
go

create procedure tpq_def_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpq_defid varchar(38)
,athesessionid varchar(38)/* сессия *//* сессия */
,athedevice varchar(38)/* тепловычислитель *//* тепловычислитель */
,aarchtype varchar(38)/* тип архива *//* тип архива */
,aarchtime
 datetime/* время *//* время */
,aquerytime
 datetime/* время  постановки запроса *//* время  постановки запроса */
,aisurgent
 integer/* срочный запрос *//* срочный запрос */
,arepeattimes
 integer/* количество повторений при ошибке *//* количество повторений при ошибке */
,arepeatinterval
 integer/* интервал между повторами *//* интервал между повторами */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpq_def where tpq_defid=g2b(atpq_defid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpq.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpq_def' result;
    leave body;
  end if;
 start transaction ; 
 call tpq_def_logger(acursession,atpq_defid) ; 
 update  tpq_def set changestamp=now() 
,
  thesessionid=g2b(athesessionid)
,
  thedevice=g2b(athedevice)
,
  archtype=g2b(aarchtype)
,
  archtime=aarchtime
,
  querytime=aquerytime
,
  isurgent=aisurgent
,
  repeattimes=arepeattimes
,
  repeatinterval=arepeatinterval
  where  tpq_defid = g2b(atpq_defid) ;


call tpq_def_client_trigger(acursession,atpq_defid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpq.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpq_def' result;
    leave body;
  end if;
select count(*) into aec from tpq_def where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;tpq_def&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   tpq_def
 (  changestamp,tpq_defid 
,instanceid
,thesessionid

,thedevice

,archtype

,archtime

,querytime

,isurgent

,repeattimes

,repeatinterval

 ) values (now(), g2b(atpq_defid) 
,g2b(ainstanceid)
,g2b(athesessionid)

,g2b(athedevice)

,g2b(aarchtype)

,aarchtime

,aquerytime

,aisurgent

,arepeattimes

,arepeatinterval

 ) ;


call tpq_def_client_trigger(acursession,atpq_defid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpq_def_copy
go

create procedure tpq_def_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpq_def 
 ( tpq_defid 
,instanceid
,thesessionid

,thedevice

,archtype

,archtime

,querytime

,isurgent

,repeattimes

,repeatinterval

 ) select 
copymap(acopyaction,b2g(tpq_defid)) 
,copymap(acopyaction,b2g(instanceid))
,thesessionid

,thedevice

,archtype

,archtime

,querytime

,isurgent

,repeattimes

,repeatinterval

 from tpq_def
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpq_def_logger
go

create procedure tpq_def_logger /**/ (
 acursession varchar(38),
 atpq_defid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpq_def_parent
go
create procedure tpq_def_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpq_def where  tpq_defid=arowid;
 end 
go
GO


drop procedure if exists tpq_def_islocked
go
create procedure tpq_def_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpq_def where tpq_defid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpq_def_lock
go
create procedure tpq_def_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpq_def_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpq_def set lockuserid =auserid ,locksessionid=null  where tpq_defid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpq_def set lockuserid=null ,locksessionid =acursession  where tpq_defid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpq_def_unlock
go
create procedure tpq_def_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpq_def_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpq_def set lockuserid =null  where tpq_defid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpq_def set locksessionid =null  where tpq_defid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpq_def_client_trigger
GO

create procedure tpq_def_client_trigger  (
 acursession varchar(38),
 aTPQ_DEFid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists tpq_result_brief
go

create procedure tpq_result_brief  (
 acursession varchar(38),
 atpq_resultid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atpq_resultid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from tpq_result where tpq_resultid=g2b(atpq_resultid);
 if  aec &gt;0 then
   set abrief=tpq_result_brief_f(g2b(atpq_resultid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists tpq_result_delete
go

create procedure tpq_result_delete /**/ (
 acursession varchar(38),
 atpq_resultid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpq_result where tpq_resultid=g2b(atpq_resultid);
if aec&gt;0 then
 select checkoperation( acursession ,'tpq.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=tpq_result' result;
    leave body;
  end if;
 call tpq_result_logger(acursession,atpq_resultid) ; 
  delete from  tpq_result 
  where  tpq_resultid = g2b(atpq_resultid) ;
  delete from num_values where ownerpartname='tpq_result' and ownerrowid=g2b(atpq_resultid);
  end if;
    select 'ok' result;
 end 
go
GO

/*результат обработки*/

drop procedure if exists tpq_result_save
go

create procedure tpq_result_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 atpq_resultid varchar(38)
,atextresult
 varchar (255)/* текстовый результат *//* текстовый результат */
,amomentarch varchar(38)/* запись мгновенного архива *//* запись мгновенного архива */
,ahourarch varchar(38)/* запись часового архива *//* запись часового архива */
,adayarch varchar(38)/* запись суточного архива *//* запись суточного архива */
,atotalarch varchar(38)/* запись итогового архива *//* запись итогового архива */
,aiserror
 integer/* обработан с ошибкой *//* обработан с ошибкой */
,alogmessage
 text/* протокол *//* протокол */
,astarttime
 datetime/* время начала обработки *//* время начала обработки */
,aendtime
 datetime/* время завершения обработки *//* время завершения обработки */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from tpq_result where tpq_resultid=g2b(atpq_resultid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'tpq.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=tpq_result' result;
    leave body;
  end if;
 start transaction ; 
 call tpq_result_logger(acursession,atpq_resultid) ; 
 update  tpq_result set changestamp=now() 
,
  textresult=atextresult
,
  momentarch=g2b(amomentarch)
,
  hourarch=g2b(ahourarch)
,
  dayarch=g2b(adayarch)
,
  totalarch=g2b(atotalarch)
,
  iserror=aiserror
,
  logmessage=alogmessage
,
  starttime=astarttime
,
  endtime=aendtime
  where  tpq_resultid = g2b(atpq_resultid) ;


call tpq_result_client_trigger(acursession,atpq_resultid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'tpq.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=tpq_result' result;
    leave body;
  end if;
 start transaction;  
 insert into   tpq_result
 (  changestamp,tpq_resultid 
,instanceid
,textresult

,momentarch

,hourarch

,dayarch

,totalarch

,iserror

,logmessage

,starttime

,endtime

 ) values (now(), g2b(atpq_resultid) 
,g2b(ainstanceid)
,atextresult

,g2b(amomentarch)

,g2b(ahourarch)

,g2b(adayarch)

,g2b(atotalarch)

,aiserror

,alogmessage

,astarttime

,aendtime

 ) ;


call tpq_result_client_trigger(acursession,atpq_resultid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists tpq_result_copy
go

create procedure tpq_result_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into tpq_result 
 ( tpq_resultid 
,instanceid
,textresult

,momentarch

,hourarch

,dayarch

,totalarch

,iserror

,logmessage

,starttime

,endtime

 ) select 
copymap(acopyaction,b2g(tpq_resultid)) 
,copymap(acopyaction,b2g(instanceid))
,textresult

,momentarch

,hourarch

,dayarch

,totalarch

,iserror

,logmessage

,starttime

,endtime

 from tpq_result
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists tpq_result_logger
go

create procedure tpq_result_logger /**/ (
 acursession varchar(38),
 atpq_resultid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists tpq_result_parent
go
create procedure tpq_result_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from tpq_result where  tpq_resultid=arowid;
 end 
go
GO


drop procedure if exists tpq_result_islocked
go
create procedure tpq_result_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from tpq_result where tpq_resultid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists tpq_result_lock
go
create procedure tpq_result_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call tpq_result_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update tpq_result set lockuserid =auserid ,locksessionid=null  where tpq_resultid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update tpq_result set lockuserid=null ,locksessionid =acursession  where tpq_resultid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists tpq_result_unlock
go
create procedure tpq_result_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call tpq_result_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update tpq_result set lockuserid =null  where tpq_resultid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update tpq_result set locksessionid =null  where tpq_resultid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS tpq_result_client_trigger
GO

create procedure tpq_result_client_trigger  (
 acursession varchar(38),
 aTPQ_resultid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists filterfieldgroup_brief
go

create procedure filterfieldgroup_brief  (
 acursession varchar(38),
 afilterfieldgroupid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afilterfieldgroupid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from filterfieldgroup where filterfieldgroupid=g2b(afilterfieldgroupid);
 if  aec &gt;0 then
   set abrief=filterfieldgroup_brief_f(g2b(afilterfieldgroupid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists filterfieldgroup_delete
go

create procedure filterfieldgroup_delete /*группа полей фильтра*/ (
 acursession varchar(38),
 afilterfieldgroupid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from filterfieldgroup where filterfieldgroupid=g2b(afilterfieldgroupid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=filterfieldgroup' result;
    leave body;
  end if;
 call filterfieldgroup_logger(acursession,afilterfieldgroupid) ; 
  delete from  filterfieldgroup 
  where  filterfieldgroupid = g2b(afilterfieldgroupid) ;
  delete from num_values where ownerpartname='filterfieldgroup' and ownerrowid=g2b(afilterfieldgroupid);
  end if;
    select 'ok' result;
 end 
go
GO

/*группа полей фильтра*/

drop procedure if exists filterfieldgroup_save
go

create procedure filterfieldgroup_save /*группа полей фильтра*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 afilterfieldgroupid varchar(38)
,asequence
 integer/* последовательность *//* последовательность */
,aname
 varchar (64)/* название *//* название */
,acaption
 varchar (255)/* заголовок *//* заголовок */
,aallowignore
 integer/* можно отключать *//* можно отключать */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from filterfieldgroup where filterfieldgroupid=g2b(afilterfieldgroupid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=filterfieldgroup' result;
    leave body;
  end if;
 start transaction ; 
 call filterfieldgroup_logger(acursession,afilterfieldgroupid) ; 
 update  filterfieldgroup set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  caption=acaption
,
  allowignore=aallowignore
  where  filterfieldgroupid = g2b(afilterfieldgroupid) ;


call filterfieldgroup_client_trigger(acursession,afilterfieldgroupid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=filterfieldgroup' result;
    leave body;
  end if;
 start transaction;  
 insert into   filterfieldgroup
 (  changestamp,filterfieldgroupid 
,instanceid
,sequence

,name

,caption

,allowignore

 ) values (now(), g2b(afilterfieldgroupid) 
,g2b(ainstanceid)
,asequence

,aname

,acaption

,aallowignore

 ) ;


call filterfieldgroup_client_trigger(acursession,afilterfieldgroupid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fileterfield_brief
go

create procedure fileterfield_brief  (
 acursession varchar(38),
 afileterfieldid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afileterfieldid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fileterfield where fileterfieldid=g2b(afileterfieldid);
 if  aec &gt;0 then
   set abrief=fileterfield_brief_f(g2b(afileterfieldid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists fileterfield_delete
go

create procedure fileterfield_delete /*поле фильтра*/ (
 acursession varchar(38),
 afileterfieldid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fileterfield where fileterfieldid=g2b(afileterfieldid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=fileterfield' result;
    leave body;
  end if;
 call fileterfield_logger(acursession,afileterfieldid) ; 
  delete from  fileterfield 
  where  fileterfieldid = g2b(afileterfieldid) ;
  delete from num_values where ownerpartname='fileterfield' and ownerrowid=g2b(afileterfieldid);
  end if;
    select 'ok' result;
 end 
go
GO

/*поле фильтра*/

drop procedure if exists fileterfield_save
go

create procedure fileterfield_save /*поле фильтра*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afileterfieldid varchar(38)
,asequence
 integer/* последовательность *//* последовательность */
,aname
 varchar (255)/* название *//* название */
,acaption
 varchar (255)/* заголовок *//* заголовок */
,afieldtype varchar(38)/* тип поля *//* тип поля */
,afieldsize
 integer/* размер *//* размер */
,areftype
 integer/* тип ссылки *//* тип ссылки */
,areftotype varchar(38)/* тип, куда ссылаемся *//* тип, куда ссылаемся */
,areftopart varchar(38)/* раздел, куда ссылаемся *//* раздел, куда ссылаемся */
,avaluearray
 integer/* массив значений *//* массив значений */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fileterfield where fileterfieldid=g2b(afileterfieldid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=fileterfield' result;
    leave body;
  end if;
 start transaction ; 
 call fileterfield_logger(acursession,afileterfieldid) ; 
 update  fileterfield set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  caption=acaption
,
  fieldtype=g2b(afieldtype)
,
  fieldsize=afieldsize
,
  reftype=areftype
,
  reftotype=g2b(areftotype)
,
  reftopart=g2b(areftopart)
,
  valuearray=avaluearray
  where  fileterfieldid = g2b(afileterfieldid) ;


call fileterfield_client_trigger(acursession,afileterfieldid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=fileterfield' result;
    leave body;
  end if;
 start transaction;  
 insert into   fileterfield
 (  changestamp,fileterfieldid 
,parentstructrowid
,sequence

,name

,caption

,fieldtype

,fieldsize

,reftype

,reftotype

,reftopart

,valuearray

 ) values (now(), g2b(afileterfieldid) 
,g2b(aparentstructrowid)
,asequence

,aname

,acaption

,g2b(afieldtype)

,afieldsize

,areftype

,g2b(areftotype)

,g2b(areftopart)

,avaluearray

 ) ;


call fileterfield_client_trigger(acursession,afileterfieldid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists fileterfield_copy
go

create procedure fileterfield_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fileterfield 
 ( fileterfieldid 
,parentstructrowid
,sequence

,name

,caption

,fieldtype

,fieldsize

,reftype

,reftotype

,reftopart

,valuearray

 ) select 
copymap(acopyaction,b2g(fileterfieldid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,sequence

,name

,caption

,fieldtype

,fieldsize

,reftype

,reftotype

,reftopart

,valuearray

 from fileterfield
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists filterfieldgroup_copy
go

create procedure filterfieldgroup_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_filterfieldgroup cursor for
select filterfieldgroupid from filterfieldgroup where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into filterfieldgroup 
 ( filterfieldgroupid 
,instanceid
,sequence

,name

,caption

,allowignore

 ) select 
copymap(acopyaction,b2g(filterfieldgroupid)) 
,copymap(acopyaction,b2g(instanceid))
,sequence

,name

,caption

,allowignore

 from filterfieldgroup
 where instanceid =g2b( ainstanceid); 
open copy_cursor_filterfieldgroup;
  set  fetch_done=false;
fetch copy_cursor_filterfieldgroup into aid;
while not fetch_done do 
    call fileterfield_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_filterfieldgroup into aid;
end while;

close copy_cursor_filterfieldgroup;
 end 
go
GO


drop procedure if exists filterfieldgroup_logger
go

create procedure filterfieldgroup_logger /*группа полей фильтра*/ (
 acursession varchar(38),
 afilterfieldgroupid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists fileterfield_logger
go

create procedure fileterfield_logger /*поле фильтра*/ (
 acursession varchar(38),
 afileterfieldid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists filterfieldgroup_parent
go
create procedure filterfieldgroup_parent /* группа полей фильтра*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from filterfieldgroup where  filterfieldgroupid=arowid;
 end 
go
GO


drop procedure if exists filterfieldgroup_islocked
go
create procedure filterfieldgroup_islocked /* группа полей фильтра */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from filterfieldgroup where filterfieldgroupid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists filterfieldgroup_lock
go
create procedure filterfieldgroup_lock /* группа полей фильтра */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call filterfieldgroup_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update filterfieldgroup set lockuserid =auserid ,locksessionid=null  where filterfieldgroupid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update filterfieldgroup set lockuserid=null ,locksessionid =acursession  where filterfieldgroupid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists filterfieldgroup_unlock
go
create procedure filterfieldgroup_unlock /* группа полей фильтра */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call filterfieldgroup_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update filterfieldgroup set lockuserid =null  where filterfieldgroupid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update filterfieldgroup set locksessionid =null  where filterfieldgroupid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS filterfieldgroup_client_trigger
GO

create procedure filterfieldgroup_client_trigger  (
 acursession varchar(38),
 aFilterFieldGroupid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists fileterfield_parent
go
create procedure fileterfield_parent /* поле фильтра*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fileterfield where  fileterfieldid=arowid;
  set aparenttable = 'filterfieldgroup';
 end 
go
GO


drop procedure if exists fileterfield_islocked
go
create procedure fileterfield_islocked /* поле фильтра */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fileterfield where fileterfieldid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists fileterfield_lock
go
create procedure fileterfield_lock /* поле фильтра */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fileterfield_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fileterfield set lockuserid =auserid ,locksessionid=null  where fileterfieldid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fileterfield set lockuserid=null ,locksessionid =acursession  where fileterfieldid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists fileterfield_unlock
go
create procedure fileterfield_unlock /* поле фильтра */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fileterfield_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fileterfield set lockuserid =null  where fileterfieldid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fileterfield set locksessionid =null  where fileterfieldid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS fileterfield_client_trigger
GO

create procedure fileterfield_client_trigger  (
 acursession varchar(38),
 aFileterFieldid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists filters_brief
go

create procedure filters_brief  (
 acursession varchar(38),
 afiltersid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afiltersid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from filters where filtersid=g2b(afiltersid);
 if  aec &gt;0 then
   set abrief=filters_brief_f(g2b(afiltersid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists filters_delete
go

create procedure filters_delete /*фильтр*/ (
 acursession varchar(38),
 afiltersid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from filters where filtersid=g2b(afiltersid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=filters' result;
    leave body;
  end if;
 call filters_logger(acursession,afiltersid) ; 
  delete from  filters 
  where  filtersid = g2b(afiltersid) ;
  delete from num_values where ownerpartname='filters' and ownerrowid=g2b(afiltersid);
  end if;
    select 'ok' result;
 end 
go
GO

/*фильтр*/

drop procedure if exists filters_save
go

create procedure filters_save /*фильтр*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 afiltersid varchar(38)
,aname
 varchar (255)/* название *//* название */
,athecaption
 varchar (80)/* заголовок *//* заголовок */
,athecomment
 text/* описание *//* описание */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from filters where filtersid=g2b(afiltersid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=filters' result;
    leave body;
  end if;
 start transaction ; 
 call filters_logger(acursession,afiltersid) ; 
 update  filters set changestamp=now() 
,
  name=aname
,
  thecaption=athecaption
,
  thecomment=athecomment
  where  filtersid = g2b(afiltersid) ;


call filters_client_trigger(acursession,afiltersid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=filters' result;
    leave body;
  end if;
select count(*) into aec from filters where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;filters&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   filters
 (  changestamp,filtersid 
,instanceid
,name

,thecaption

,thecomment

 ) values (now(), g2b(afiltersid) 
,g2b(ainstanceid)
,aname

,athecaption

,athecomment

 ) ;


call filters_client_trigger(acursession,afiltersid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists filters_copy
go

create procedure filters_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into filters 
 ( filtersid 
,instanceid
,name

,thecaption

,thecomment

 ) select 
copymap(acopyaction,b2g(filtersid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,thecaption

,thecomment

 from filters
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists filters_logger
go

create procedure filters_logger /*фильтр*/ (
 acursession varchar(38),
 afiltersid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists filters_parent
go
create procedure filters_parent /* фильтр*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from filters where  filtersid=arowid;
 end 
go
GO


drop procedure if exists filters_islocked
go
create procedure filters_islocked /* фильтр */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from filters where filtersid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists filters_lock
go
create procedure filters_lock /* фильтр */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call filters_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update filters set lockuserid =auserid ,locksessionid=null  where filtersid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update filters set lockuserid=null ,locksessionid =acursession  where filtersid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists filters_unlock
go
create procedure filters_unlock /* фильтр */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call filters_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update filters set lockuserid =null  where filtersid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update filters set locksessionid =null  where filtersid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS filters_client_trigger
GO

create procedure filters_client_trigger  (
 acursession varchar(38),
 aFiltersid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists iu_int_modules_brief
go

create procedure iu_int_modules_brief  (
 acursession varchar(38),
 aiu_int_modulesid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_int_modulesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_int_modules where iu_int_modulesid=g2b(aiu_int_modulesid);
 if  aec &gt;0 then
   set abrief=iu_int_modules_brief_f(g2b(aiu_int_modulesid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists iu_int_modules_delete
go

create procedure iu_int_modules_delete /**/ (
 acursession varchar(38),
 aiu_int_modulesid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_int_modules where iu_int_modulesid=g2b(aiu_int_modulesid);
if aec&gt;0 then
 select checkoperation( acursession ,'bpdi.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=iu_int_modules' result;
    leave body;
  end if;
 call iu_int_modules_logger(acursession,aiu_int_modulesid) ; 
  delete from  iu_int_modules 
  where  iu_int_modulesid = g2b(aiu_int_modulesid) ;
  delete from num_values where ownerpartname='iu_int_modules' and ownerrowid=g2b(aiu_int_modulesid);
  end if;
    select 'ok' result;
 end 
go
GO

/*модуль*/

drop procedure if exists iu_int_modules_save
go

create procedure iu_int_modules_save /**/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_int_modulesid varchar(38)
,asequence
 integer/* № п/п *//* № п/п */
,atheicon
 varchar (64)/* иконка *//* иконка */
,agroupname
 varchar (60)/* меню верхнего урровня *//* меню верхнего урровня */
,aname
 varchar (255)/* название меню *//* название меню */
,acaption
 varchar (80)/* надпись *//* надпись */
,avisiblecontrol
 integer/* управление видимостью *//* управление видимостью */
,acontroldocmode
 varchar (10)/* документы на контроле *//* документы на контроле */
,aotherdocmode
 varchar (10)/* чужие документы *//* чужие документы */
,amydocmode
 varchar (10)/* мои документы *//* мои документы */
,aallobjects
 integer/* вся фирма *//* вся фирма */
,acolegsobject
 integer/* объекты коллег *//* объекты коллег */
,asubstructobjects
 integer/* подчиненные подразделения *//* подчиненные подразделения */
)  body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_int_modules where iu_int_modulesid=g2b(aiu_int_modulesid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bpdi.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=iu_int_modules' result;
    leave body;
  end if;
 start transaction ; 
 call iu_int_modules_logger(acursession,aiu_int_modulesid) ; 
 update  iu_int_modules set changestamp=now() 
,
  sequence=asequence
,
  theicon=atheicon
,
  groupname=agroupname
,
  name=aname
,
  caption=acaption
,
  visiblecontrol=avisiblecontrol
,
  controldocmode=acontroldocmode
,
  otherdocmode=aotherdocmode
,
  mydocmode=amydocmode
,
  allobjects=aallobjects
,
  colegsobject=acolegsobject
,
  substructobjects=asubstructobjects
  where  iu_int_modulesid = g2b(aiu_int_modulesid) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from iu_int_modules where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=модуль правило=(модуль уникален)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_int_modules_client_trigger(acursession,aiu_int_modulesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bpdi.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=iu_int_modules' result;
    leave body;
  end if;
 start transaction;  
 insert into   iu_int_modules
 (  changestamp,iu_int_modulesid 
,instanceid
,sequence

,theicon

,groupname

,name

,caption

,visiblecontrol

,controldocmode

,otherdocmode

,mydocmode

,allobjects

,colegsobject

,substructobjects

 ) values (now(), g2b(aiu_int_modulesid) 
,g2b(ainstanceid)
,asequence

,atheicon

,agroupname

,aname

,acaption

,avisiblecontrol

,acontroldocmode

,aotherdocmode

,amydocmode

,aallobjects

,acolegsobject

,asubstructobjects

 ) ;
-- if asessuserlogin&lt;&gt;'replicator'  then
 select count(*) into  auniquerowcount from iu_int_modules where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount&gt;=2 then
  select 'нарущение уникальности сочетания полей.  раздел=модуль правило=(модуль уникален)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_int_modules_client_trigger(acursession,aiu_int_modulesid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists iu_int_modules_copy
go

create procedure iu_int_modules_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_int_modules 
 ( iu_int_modulesid 
,instanceid
,sequence

,theicon

,groupname

,name

,caption

,visiblecontrol

,controldocmode

,otherdocmode

,mydocmode

,allobjects

,colegsobject

,substructobjects

 ) select 
copymap(acopyaction,b2g(iu_int_modulesid)) 
,copymap(acopyaction,b2g(instanceid))
,sequence

,theicon

,groupname

,name

,caption

,visiblecontrol

,controldocmode

,otherdocmode

,mydocmode

,allobjects

,colegsobject

,substructobjects

 from iu_int_modules
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists iu_int_modules_logger
go

create procedure iu_int_modules_logger /**/ (
 acursession varchar(38),
 aiu_int_modulesid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists iu_int_modules_parent
go
create procedure iu_int_modules_parent /* */ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_int_modules where  iu_int_modulesid=arowid;
 end 
go
GO


drop procedure if exists iu_int_modules_islocked
go
create procedure iu_int_modules_islocked /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_int_modules where iu_int_modulesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists iu_int_modules_lock
go
create procedure iu_int_modules_lock /*  */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_int_modules_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_int_modules set lockuserid =auserid ,locksessionid=null  where iu_int_modulesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_int_modules set lockuserid=null ,locksessionid =acursession  where iu_int_modulesid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists iu_int_modules_unlock
go
create procedure iu_int_modules_unlock /*  */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_int_modules_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_int_modules set lockuserid =null  where iu_int_modulesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_int_modules set locksessionid =null  where iu_int_modulesid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS iu_int_modules_client_trigger
GO

create procedure iu_int_modules_client_trigger  (
 acursession varchar(38),
 aiu_int_modulesid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists rptstruct_brief
go

create procedure rptstruct_brief  (
 acursession varchar(38),
 arptstructid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if arptstructid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from rptstruct where rptstructid=g2b(arptstructid);
 if  aec &gt;0 then
   set abrief=rptstruct_brief_f(g2b(arptstructid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists rptstruct_delete
go

create procedure rptstruct_delete /*секции*/ (
 acursession varchar(38),
 arptstructid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptstruct where rptstructid=g2b(arptstructid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=rptstruct' result;
    leave body;
  end if;
 call rptstruct_logger(acursession,arptstructid) ; 
  delete from  rptstruct 
  where  rptstructid = g2b(arptstructid) ;
  delete from num_values where ownerpartname='rptstruct' and ownerrowid=g2b(arptstructid);
  end if;
    select 'ok' result;
 end 
go
GO

/*секции*/

drop procedure if exists rptstruct_save
go

create procedure rptstruct_save /*секции*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 arptstructid varchar(38)
,aparentrowid varchar(38) 
,aname
 varchar (64)/* название *//* название */
,acaption
 varchar (255)/* заголовок *//* заголовок */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptstruct where rptstructid=g2b(arptstructid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=rptstruct' result;
    leave body;
  end if;
 start transaction ; 
 call rptstruct_logger(acursession,arptstructid) ; 
 update  rptstruct set changestamp=now() 
,parentrowid= g2b(aparentrowid)
,
  name=aname
,
  caption=acaption
  where  rptstructid = g2b(arptstructid) ;


call rptstruct_client_trigger(acursession,arptstructid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=rptstruct' result;
    leave body;
  end if;
 start transaction;  
 insert into   rptstruct
 (  changestamp,rptstructid 
,parentrowid
,instanceid
,name

,caption

 ) values (now(), g2b(arptstructid) 
,g2b(aparentrowid)
,g2b(ainstanceid)
,aname

,acaption

 ) ;


call rptstruct_client_trigger(acursession,arptstructid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists rptfields_brief
go

create procedure rptfields_brief  (
 acursession varchar(38),
 arptfieldsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if arptfieldsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from rptfields where rptfieldsid=g2b(arptfieldsid);
 if  aec &gt;0 then
   set abrief=rptfields_brief_f(g2b(arptfieldsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists rptfields_delete
go

create procedure rptfields_delete /*поля секции*/ (
 acursession varchar(38),
 arptfieldsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptfields where rptfieldsid=g2b(arptfieldsid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=rptfields' result;
    leave body;
  end if;
 call rptfields_logger(acursession,arptfieldsid) ; 
  delete from  rptfields 
  where  rptfieldsid = g2b(arptfieldsid) ;
  delete from num_values where ownerpartname='rptfields' and ownerrowid=g2b(arptfieldsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*поля секции*/

drop procedure if exists rptfields_save
go

create procedure rptfields_save /*поля секции*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 arptfieldsid varchar(38)
,aname
 varchar (64)/* название *//* название */
,afieldtype varchar(38)/* тип поля *//* тип поля */
,afieldsize
 integer/* размер *//* размер */
,acaption
 varchar (255)/* заголовок *//* заголовок */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptfields where rptfieldsid=g2b(arptfieldsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=rptfields' result;
    leave body;
  end if;
 start transaction ; 
 call rptfields_logger(acursession,arptfieldsid) ; 
 update  rptfields set changestamp=now() 
,
  name=aname
,
  fieldtype=g2b(afieldtype)
,
  fieldsize=afieldsize
,
  caption=acaption
  where  rptfieldsid = g2b(arptfieldsid) ;


call rptfields_client_trigger(acursession,arptfieldsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=rptfields' result;
    leave body;
  end if;
 start transaction;  
 insert into   rptfields
 (  changestamp,rptfieldsid 
,parentstructrowid
,name

,fieldtype

,fieldsize

,caption

 ) values (now(), g2b(arptfieldsid) 
,g2b(aparentstructrowid)
,aname

,g2b(afieldtype)

,afieldsize

,acaption

 ) ;


call rptfields_client_trigger(acursession,arptfieldsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists rptfields_copy
go

create procedure rptfields_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into rptfields 
 ( rptfieldsid 
,parentstructrowid
,name

,fieldtype

,fieldsize

,caption

 ) select 
copymap(acopyaction,b2g(rptfieldsid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,fieldtype

,fieldsize

,caption

 from rptfields
 where parentstructrowid =g2b(aparentstructrowid); 
 end 
go
GO


drop procedure if exists rptstruct_copy
go

create procedure rptstruct_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_rptstruct cursor for
select rptstructid from rptstruct where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into rptstruct 
 ( rptstructid 
,instanceid
,parentrowid
,name

,caption

 ) select 
copymap(acopyaction,b2g(rptstructid)) 
,copymap(acopyaction,b2g(instanceid))
,copymap(acopyaction,b2g(parentrowid))
,name

,caption

 from rptstruct
 where instanceid =g2b( ainstanceid); 
open copy_cursor_rptstruct;
  set  fetch_done=false;
fetch copy_cursor_rptstruct into aid;
while not fetch_done do 
    call rptfields_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_rptstruct into aid;
end while;

close copy_cursor_rptstruct;
 end 
go
GO


drop procedure if exists rptstruct_logger
go

create procedure rptstruct_logger /*секции*/ (
 acursession varchar(38),
 arptstructid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists rptfields_logger
go

create procedure rptfields_logger /*поля секции*/ (
 acursession varchar(38),
 arptfieldsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists rptstruct_parent
go
create procedure rptstruct_parent /* секции*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from rptstruct where  rptstructid=arowid;
 end 
go
GO


drop procedure if exists rptstruct_islocked
go
create procedure rptstruct_islocked /* секции */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from rptstruct where rptstructid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists rptstruct_lock
go
create procedure rptstruct_lock /* секции */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call rptstruct_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update rptstruct set lockuserid =auserid ,locksessionid=null  where rptstructid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update rptstruct set lockuserid=null ,locksessionid =acursession  where rptstructid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists rptstruct_unlock
go
create procedure rptstruct_unlock /* секции */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call rptstruct_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update rptstruct set lockuserid =null  where rptstructid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update rptstruct set locksessionid =null  where rptstructid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS rptstruct_client_trigger
GO

create procedure rptstruct_client_trigger  (
 acursession varchar(38),
 aRPTStructid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists rptfields_parent
go
create procedure rptfields_parent /* поля секции*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from rptfields where  rptfieldsid=arowid;
  set aparenttable = 'rptstruct';
 end 
go
GO


drop procedure if exists rptfields_islocked
go
create procedure rptfields_islocked /* поля секции */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from rptfields where rptfieldsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists rptfields_lock
go
create procedure rptfields_lock /* поля секции */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call rptfields_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update rptfields set lockuserid =auserid ,locksessionid=null  where rptfieldsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update rptfields set lockuserid=null ,locksessionid =acursession  where rptfieldsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists rptfields_unlock
go
create procedure rptfields_unlock /* поля секции */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call rptfields_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update rptfields set lockuserid =null  where rptfieldsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update rptfields set locksessionid =null  where rptfieldsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS rptfields_client_trigger
GO

create procedure rptfields_client_trigger  (
 acursession varchar(38),
 aRPTFieldsid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists rptformula_brief
go

create procedure rptformula_brief  (
 acursession varchar(38),
 arptformulaid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if arptformulaid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from rptformula where rptformulaid=g2b(arptformulaid);
 if  aec &gt;0 then
   set abrief=rptformula_brief_f(g2b(arptformulaid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists rptformula_delete
go

create procedure rptformula_delete /*формулы*/ (
 acursession varchar(38),
 arptformulaid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptformula where rptformulaid=g2b(arptformulaid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=rptformula' result;
    leave body;
  end if;
 call rptformula_logger(acursession,arptformulaid) ; 
  delete from  rptformula 
  where  rptformulaid = g2b(arptformulaid) ;
  delete from num_values where ownerpartname='rptformula' and ownerrowid=g2b(arptformulaid);
  end if;
    select 'ok' result;
 end 
go
GO

/*формулы*/

drop procedure if exists rptformula_save
go

create procedure rptformula_save /*формулы*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 arptformulaid varchar(38)
,aname
 varchar (64)/* название *//* название */
,acode
 text/* выражение *//* выражение */
,aplatform varchar(38)/* платформа *//* платформа */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptformula where rptformulaid=g2b(arptformulaid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=rptformula' result;
    leave body;
  end if;
 start transaction ; 
 call rptformula_logger(acursession,arptformulaid) ; 
 update  rptformula set changestamp=now() 
,
  name=aname
,
  code=acode
,
  platform=g2b(aplatform)
  where  rptformulaid = g2b(arptformulaid) ;


call rptformula_client_trigger(acursession,arptformulaid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=rptformula' result;
    leave body;
  end if;
 start transaction;  
 insert into   rptformula
 (  changestamp,rptformulaid 
,instanceid
,name

,code

,platform

 ) values (now(), g2b(arptformulaid) 
,g2b(ainstanceid)
,aname

,acode

,g2b(aplatform)

 ) ;


call rptformula_client_trigger(acursession,arptformulaid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists rptformula_copy
go

create procedure rptformula_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into rptformula 
 ( rptformulaid 
,instanceid
,name

,code

,platform

 ) select 
copymap(acopyaction,b2g(rptformulaid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,code

,platform

 from rptformula
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists rptformula_logger
go

create procedure rptformula_logger /*формулы*/ (
 acursession varchar(38),
 arptformulaid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists rptformula_parent
go
create procedure rptformula_parent /* формулы*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from rptformula where  rptformulaid=arowid;
 end 
go
GO


drop procedure if exists rptformula_islocked
go
create procedure rptformula_islocked /* формулы */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from rptformula where rptformulaid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists rptformula_lock
go
create procedure rptformula_lock /* формулы */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call rptformula_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update rptformula set lockuserid =auserid ,locksessionid=null  where rptformulaid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update rptformula set lockuserid=null ,locksessionid =acursession  where rptformulaid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists rptformula_unlock
go
create procedure rptformula_unlock /* формулы */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call rptformula_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update rptformula set lockuserid =null  where rptformulaid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update rptformula set locksessionid =null  where rptformulaid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS rptformula_client_trigger
GO

create procedure rptformula_client_trigger  (
 acursession varchar(38),
 aRPTFormulaid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO


drop procedure if exists reports_brief
go

create procedure reports_brief  (
 acursession varchar(38),
 areportsid varchar(38),
out abrief varchar(255)
) body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if areportsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from reports where reportsid=g2b(areportsid);
 if  aec &gt;0 then
   set abrief=reports_brief_f(g2b(areportsid), alang2);
 else
   set abrief= 'неверный идентификатор';
 end if;
 set abrief=left(abrief,255);
end 
go
GO


drop procedure if exists reports_delete
go

create procedure reports_delete /*описание*/ (
 acursession varchar(38),
 areportsid varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from reports where reportsid=g2b(areportsid);
if aec&gt;0 then
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'удаление строк не разрешено. раздел=reports' result;
    leave body;
  end if;
 call reports_logger(acursession,areportsid) ; 
  delete from  reports 
  where  reportsid = g2b(areportsid) ;
  delete from num_values where ownerpartname='reports' and ownerrowid=g2b(areportsid);
  end if;
    select 'ok' result;
 end 
go
GO

/*описание*/

drop procedure if exists reports_save
go

create procedure reports_save /*описание*/ (
 acursession varchar(38),
ainstanceid varchar(38) ,
 areportsid varchar(38)
,aname
 varchar (255)/* название *//* название */
,areportfile varchar(255)/* файл отчета */
,areportfile_ext varchar(4) /* файл отчета */
,acaption
 varchar (255)/* заголовок *//* заголовок */
,apreparemethod varchar(38)/* метод для формирования *//* метод для формирования */
,areporttype
 integer/* тип отчета *//* тип отчета */
,athereportext varchar(38)/* расширение для создания отчета *//* расширение для создания отчета */
,areportview
 varchar (255)/* базовый запрос *//* базовый запрос */
,athecomment
 text/* описание *//* описание */
)  body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from reports where reportsid=g2b(areportsid);
if aec &gt;0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=reports' result;
    leave body;
  end if;
 start transaction ; 
 call reports_logger(acursession,areportsid) ; 
 update  reports set changestamp=now() 
,
  name=aname
,
  reportfile=areportfile
,reportfile_ext=
areportfile_ext 
,
  caption=acaption
,
  preparemethod=g2b(apreparemethod)
,
  reporttype=areporttype
,
  thereportext=g2b(athereportext)
,
  reportview=areportview
,
  thecomment=athecomment
  where  reportsid = g2b(areportsid) ;


call reports_client_trigger(acursession,areportsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=reports' result;
    leave body;
  end if;
select count(*) into aec from reports where 
instanceid=g2b(ainstanceid);
if aec &gt;0 then 
    select 'невозможно создать вторую строку в однострочной сессии. раздел: &lt;reports&gt;' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   reports
 (  changestamp,reportsid 
,instanceid
,name

,reportfile

,reportfile_ext
,caption

,preparemethod

,reporttype

,thereportext

,reportview

,thecomment

 ) values (now(), g2b(areportsid) 
,g2b(ainstanceid)
,aname

,areportfile

,areportfile_ext
,acaption

,g2b(apreparemethod)

,areporttype

,g2b(athereportext)

,areportview

,athecomment

 ) ;


call reports_client_trigger(acursession,areportsid);

 end if;
 commit; 
select 'ok' result;
 end 
go
GO


drop procedure if exists reports_copy
go

create procedure reports_copy (
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into reports 
 ( reportsid 
,instanceid
,name

,reportfile

,reportfile_ext
,caption

,preparemethod

,reporttype

,thereportext

,reportview

,thecomment

 ) select 
copymap(acopyaction,b2g(reportsid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,reportfile

,reportfile_ext
,caption

,preparemethod

,reporttype

,thereportext

,reportview

,thecomment

 from reports
 where instanceid =g2b( ainstanceid); 
 end 
go
GO


drop procedure if exists reports_logger
go

create procedure reports_logger /*описание*/ (
 acursession varchar(38),
 areportsid varchar(38)
)  body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end 
go
GO


drop procedure if exists reports_parent
go
create procedure reports_parent /* описание*/ (
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
) body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from reports where  reportsid=arowid;
 end 
go
GO


drop procedure if exists reports_islocked
go
create procedure reports_islocked /* описание */ (
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from reports where reportsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid &lt;&gt; auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid &lt;&gt; acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end 
 go
GO


drop procedure if exists reports_lock
go
create procedure reports_lock /* описание */ (
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
) body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call reports_islocked( acursession,arowid,aislocked);
 if aislocked &gt;=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update reports set lockuserid =auserid ,locksessionid=null  where reportsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update reports set lockuserid=null ,locksessionid =acursession  where reportsid=arowid;
     leave body;
   end if;
 end 
 go 
GO


drop procedure if exists reports_unlock
go
create procedure reports_unlock /* описание */ (
 acursession varchar(38),
 arowid binary(16) 
) body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call reports_islocked( acursession,arowid,aislocked );
 if aislocked &gt;=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update reports set lockuserid =null  where reportsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update reports set locksessionid =null  where reportsid=arowid;
    leave body;
   end if;
 end 
go
GO


drop procedure IF EXISTS reports_client_trigger
GO

create procedure reports_client_trigger  (
 acursession varchar(38),
 aReportsid varchar(38)
) 
 begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end 
GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--Methods" BlockCode=" 
/* SessionTouch  Поддержание сессии*/

drop procedure IF EXISTS SessionTouch
GO
create procedure SessionTouch

(aCURSESSION BINARY(16)/* Идентификатор сессии */

)
 
body:begin

update the_session set lastaccess=now() where the_sessionid=acursession and closed=0;



end
GO
/* GetServerTime  текущее время сервера*/

drop procedure IF EXISTS GetServerTime
GO
create procedure GetServerTime

( out aServerTime DATETIME/* Текущее время */

)
 
body:begin

set aServerTime=now();


end
GO
/* Logout  Завершение сессии*/

drop procedure IF EXISTS Logout
GO
create procedure Logout

(aCURSESSION BINARY(16)/* Идентификатор сессии */

)
 
body:begin
declare
existsCnt integer;

select count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;
if existsCnt &gt;0 then
    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;
    update the_session set closed=1,closedAt=now(), changeStamp=now() where     
    the_sessionid=acursession;
 End if;

end
GO
/* Login  Открытие сессии*/

drop procedure IF EXISTS Login
GO
create procedure Login

( out aTHE_SESSION BINARY(16)/* Идентификатор новой сессии */

,aPWD VARCHAR(80)/* Пароль */

,aUSR VARCHAR (64)/* Имя пользователя */

)
 
body:begin
 declare aID binary(16); 
    declare aUSERSID binary(16); 
    declare asysid binary(16); 
    declare existsCnt int;  

set asysid = null; 

select instanceid into asysid from instance where objtype = 'MTZSYSTEM'; 

set athe_session=null  ; 

if aPWD is null then 
 select count(*) into existsCnt from users where Login=ausr and Password is null; 
  if existsCNt =1 then 
    select USERSID into ausersid from users where Login=ausr and Password is null; 
    set  aID=G2B(UUID()); 
       if asysid is null then 
        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) 
        values(aid,now(),ausersid,0,now()); 
       else 
        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) 
        values(asysid,aid,now(),ausersid,0,now()); 
       end if; 
	   set athe_session=aid; 
  End if; 
else 
 
  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; 
  if existsCNt =1   then 
   select USERSID into ausersid from users where Login=ausr and Password =aPWD; 
   set  aID=G2B(UUID())  ; 
       if asysid is null then 
        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) 
        values(aid,sysdate,ausersid,0,now()); 
       else 
        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) 
        values(asysid,aid,now(),ausersid,0,now()); 
       end if; 
       set athe_session=aid; 
  else 
    select count(*) into existsCnt from users where DomaiName=ausr and aPWD='INTEGRATED'; 
    if existsCNt =1 
    then 
     select USERSID into ausersid from users where DomaiName =ausr ; 
     set aid=G2B(UUID()); 
       if asysid is null then 
        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) 
        values(aid,now(),ausersid,0,now()); 
 
       else 
        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) 
        values(asysid,aid,now(),ausersid,0,now()); 
       end if; 
     set athe_session=aid; 
    End if; 
  end if; 
end if; 

end
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Kernel views" File="">
    <BlockHolder BlockName="--body" BlockCode=" 


drop view if exists v_instance
go
create view v_instance as
select b2g(`instance`.`instanceid`) as `instanceid`,`instance`.`lockuserid` as `lockuserid`,`instance`.`locksessionid` as `locksessionid`,`instance`.`securitystyleid` as `securitystyleid`,`instance`.`name` as `name`,`instance`.`objtype` as `objtype`,`instance`.`ownerpartname` as `ownerpartname`,`instance`.`ownerrowid` as `ownerrowid`,`instance`.`status` as `status`,`instance`.`archived` as `archived`,`objstatus`.`name` as `statusname`,`objstatus`.`isarchive` as `isarchive` from (`instance` left join `objstatus` on((`instance`.`status` = `objstatus`.`objstatusid`)));
go
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Views--" File="">
    <BlockHolder BlockName="--Views--" BlockCode=" 


drop view if exists v_autotplc_e
go
create view v_autotplc_e as 
select   b2g(tplc_e. tplc_eid) tplc_eid,tplc_e. changestamp changestamp
, 
tplc_e.e2s 
tplc_e_q2h 
, 
tplc_e.oktime 
tplc_e_oktime 
, 
tplc_e.e1 
tplc_e_q1 
, 
tplc_e.dcall 
tplc_e_dcall 
, 
tplc_e.e2 
tplc_e_q2 
, 
tplc_e.worktime 
tplc_e_worktime 
, 
tplc_e.dcounter 
tplc_e_dcounter 
, 
tplc_e.e1s 
tplc_e_q1h 
, b2g(tplc_e.instanceid) instanceid 
, tplc_e.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_e.tplc_eid) id 
, 'tplc_e' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_E
 join INSTANCE on TPLC_E.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_e_ru_ru
go
create view v_autotplc_e_ru_ru as 
select   b2g(tplc_e. tplc_eid) tplc_eid,tplc_e. changestamp changestamp
, 
tplc_e.e2s 
tplc_e_q2h 
, 
tplc_e.oktime 
tplc_e_oktime 
, 
tplc_e.e1 
tplc_e_q1 
, 
tplc_e.dcall 
tplc_e_dcall 
, 
tplc_e.e2 
tplc_e_q2 
, 
tplc_e.worktime 
tplc_e_worktime 
, 
tplc_e.dcounter 
tplc_e_dcounter 
, 
tplc_e.e1s 
tplc_e_q1h 
, b2g(tplc_e.instanceid) instanceid 
, tplc_e.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_e.tplc_eid) id 
, 'tplc_e' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_E
 join INSTANCE on TPLC_E.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_e_en_us
go
create view v_autotplc_e_en_us as 
select   b2g(tplc_e. tplc_eid) tplc_eid,tplc_e. changestamp changestamp
, 
tplc_e.e2s 
tplc_e_q2h 
, 
tplc_e.oktime 
tplc_e_oktime 
, 
tplc_e.e1 
tplc_e_q1 
, 
tplc_e.dcall 
tplc_e_dcall 
, 
tplc_e.e2 
tplc_e_q2 
, 
tplc_e.worktime 
tplc_e_worktime 
, 
tplc_e.dcounter 
tplc_e_dcounter 
, 
tplc_e.e1s 
tplc_e_q1h 
, b2g(tplc_e.instanceid) instanceid 
, tplc_e.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_e.tplc_eid) id 
, 'tplc_e' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_E
 join INSTANCE on TPLC_E.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_m
go
create view v_autotplc_m as 
select   b2g(tplc_m. tplc_mid) tplc_mid,tplc_m. changestamp changestamp
, 
tplc_m.q5 
tplc_m_q5 
, 
tplc_m.errtimeh 
tplc_m_errtimeh 
, 
tplc_m.dans3 
tplc_m_dans3 
, 
tplc_m.m5 
tplc_m_m5 
, 
tplc_m.dans2 
tplc_m_dans2 
, 
tplc_m.dcall 
tplc_m_dcall 
, 
tplc_m.g6 
tplc_m_g6 
, 
tplc_m.errtime 
tplc_m_errtime 
, 
tplc_m.dp12 
tplc_m_dp12 
, 
tplc_m.sp_tb1 
tplc_m_sp_tb1 
, 
tplc_m.dans4 
tplc_m_dans4 
, 
tplc_m.p5 
tplc_m_p5 
, 
tplc_m.dans6 
tplc_m_dans6 
, 
tplc_m.g5 
tplc_m_g5 
, 
tplc_m.q3 
tplc_m_q3 
, 
tplc_m.tce1 
tplc_m_tce1 
, 
tplc_m.p6 
tplc_m_p6 
, 
tplc_m.dt45 
tplc_m_dt45 
, 
tplc_m.tsum2 
tplc_m_tsum2 
, 
tplc_m.p1 
tplc_m_p1 
, 
tplc_m.pxb 
tplc_m_pxb 
, 
tplc_m.v1 
tplc_m_v1 
, 
tplc_m.tair1 
tplc_m_tair1 
, 
tplc_m.t4 
tplc_m_t4 
, 
tplc_m.v3 
tplc_m_v3 
, 
tplc_m.t5 
tplc_m_t5 
, 
tplc_m.m4 
tplc_m_m4 
, 
tplc_m.dans1 
tplc_m_dans1 
, 
tplc_m.t3 
tplc_m_t3 
, 
tplc_m.m6 
tplc_m_m6 
, 
tplc_m.dans5 
tplc_m_dans5 
, 
tplc_m.patm 
tplc_m_patm 
, 
tplc_m.m3 
tplc_m_m3 
, 
tplc_m.v2h 
tplc_m_v2h 
, 
tplc_m.v5 
tplc_m_v5 
, 
tplc_m.worktime 
tplc_m_worktime 
, 
tplc_m.tcool 
tplc_m_tcool 
, 
tplc_m.hc_code 
tplc_m_hc_code 
, 
tplc_m.sp 
tplc_m_sp 
, 
tplc_m.dm45 
tplc_m_dm45 
, 
tplc_m.q4 
tplc_m_q4 
, 
tplc_m.g2 
tplc_m_g2 
, 
tplc_m.sp_tb2 
tplc_m_sp_tb2 
, 
tplc_m.dq45 
tplc_m_dq45 
, 
tplc_m.tsum1 
tplc_m_tsum1 
, 
tplc_m.tair2 
tplc_m_tair2 
, 
tplc_m.dv12 
tplc_m_dv12 
, 
tplc_m.tce2 
tplc_m_tce2 
, 
tplc_m.g3 
tplc_m_g3 
, 
tplc_m.dg12 
tplc_m_dg12 
, 
tplc_m.unitsr 
tplc_m_unitsr 
, 
tplc_m.q1h 
tplc_m_q1h 
, 
tplc_m.hc 
tplc_m_hc 
, 
tplc_m.dg45 
tplc_m_dg45 
, 
tplc_m.t6 
tplc_m_t6 
, 
tplc_m.m2 
tplc_m_m2 
, 
tplc_m.v1h 
tplc_m_v1h 
, 
tplc_m.g1 
tplc_m_g1 
, 
tplc_m.dp45 
tplc_m_dp45 
, 
tplc_m.thot 
tplc_m_thot 
, 
tplc_m.q1 
tplc_m_q1 
, 
tplc_m.m1 
tplc_m_m1 
, 
tplc_m.dcounter 
tplc_m_dcounter 
, 
tplc_m.v6 
tplc_m_v6 
, 
tplc_m.dv45 
tplc_m_dv45 
, 
tplc_m.v5h 
tplc_m_v5h 
, 
tplc_m.v4h 
tplc_m_v4h 
, 
tplc_m.oktime 
tplc_m_oktime 
, 
tplc_m.t1 
tplc_m_t1 
, 
tplc_m.datetimecounter 
tplc_m_datetimecounter 
, 
tplc_m.p2 
tplc_m_p2 
, 
tplc_m.q2 
tplc_m_q2 
, 
tplc_m.t2 
tplc_m_t2 
, 
tplc_m.p4 
tplc_m_p4 
, 
tplc_m.g4 
tplc_m_g4 
, 
tplc_m.dq12 
tplc_m_dq12 
, 
tplc_m.hc_2 
tplc_m_hc_2 
, 
tplc_m.dq 
tplc_m_dq 
, 
tplc_m.p3 
tplc_m_p3 
, 
tplc_m.hc_1 
tplc_m_hc_1 
, 
tplc_m.check_a 
tplc_m_check_a 
, 
tplc_m.dt12 
tplc_m_dt12 
, 
tplc_m.dm12 
tplc_m_dm12 
, 
tplc_m.q2h 
tplc_m_q2h 
, 
tplc_m.v4 
tplc_m_v4 
, 
tplc_m.v2 
tplc_m_v2 
, b2g(tplc_m.instanceid) instanceid 
, tplc_m.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_m.tplc_mid) id 
, 'tplc_m' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_M
 join INSTANCE on TPLC_M.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_m_ru_ru
go
create view v_autotplc_m_ru_ru as 
select   b2g(tplc_m. tplc_mid) tplc_mid,tplc_m. changestamp changestamp
, 
tplc_m.q5 
tplc_m_q5 
, 
tplc_m.errtimeh 
tplc_m_errtimeh 
, 
tplc_m.dans3 
tplc_m_dans3 
, 
tplc_m.m5 
tplc_m_m5 
, 
tplc_m.dans2 
tplc_m_dans2 
, 
tplc_m.dcall 
tplc_m_dcall 
, 
tplc_m.g6 
tplc_m_g6 
, 
tplc_m.errtime 
tplc_m_errtime 
, 
tplc_m.dp12 
tplc_m_dp12 
, 
tplc_m.sp_tb1 
tplc_m_sp_tb1 
, 
tplc_m.dans4 
tplc_m_dans4 
, 
tplc_m.p5 
tplc_m_p5 
, 
tplc_m.dans6 
tplc_m_dans6 
, 
tplc_m.g5 
tplc_m_g5 
, 
tplc_m.q3 
tplc_m_q3 
, 
tplc_m.tce1 
tplc_m_tce1 
, 
tplc_m.p6 
tplc_m_p6 
, 
tplc_m.dt45 
tplc_m_dt45 
, 
tplc_m.tsum2 
tplc_m_tsum2 
, 
tplc_m.p1 
tplc_m_p1 
, 
tplc_m.pxb 
tplc_m_pxb 
, 
tplc_m.v1 
tplc_m_v1 
, 
tplc_m.tair1 
tplc_m_tair1 
, 
tplc_m.t4 
tplc_m_t4 
, 
tplc_m.v3 
tplc_m_v3 
, 
tplc_m.t5 
tplc_m_t5 
, 
tplc_m.m4 
tplc_m_m4 
, 
tplc_m.dans1 
tplc_m_dans1 
, 
tplc_m.t3 
tplc_m_t3 
, 
tplc_m.m6 
tplc_m_m6 
, 
tplc_m.dans5 
tplc_m_dans5 
, 
tplc_m.patm 
tplc_m_patm 
, 
tplc_m.m3 
tplc_m_m3 
, 
tplc_m.v2h 
tplc_m_v2h 
, 
tplc_m.v5 
tplc_m_v5 
, 
tplc_m.worktime 
tplc_m_worktime 
, 
tplc_m.tcool 
tplc_m_tcool 
, 
tplc_m.hc_code 
tplc_m_hc_code 
, 
tplc_m.sp 
tplc_m_sp 
, 
tplc_m.dm45 
tplc_m_dm45 
, 
tplc_m.q4 
tplc_m_q4 
, 
tplc_m.g2 
tplc_m_g2 
, 
tplc_m.sp_tb2 
tplc_m_sp_tb2 
, 
tplc_m.dq45 
tplc_m_dq45 
, 
tplc_m.tsum1 
tplc_m_tsum1 
, 
tplc_m.tair2 
tplc_m_tair2 
, 
tplc_m.dv12 
tplc_m_dv12 
, 
tplc_m.tce2 
tplc_m_tce2 
, 
tplc_m.g3 
tplc_m_g3 
, 
tplc_m.dg12 
tplc_m_dg12 
, 
tplc_m.unitsr 
tplc_m_unitsr 
, 
tplc_m.q1h 
tplc_m_q1h 
, 
tplc_m.hc 
tplc_m_hc 
, 
tplc_m.dg45 
tplc_m_dg45 
, 
tplc_m.t6 
tplc_m_t6 
, 
tplc_m.m2 
tplc_m_m2 
, 
tplc_m.v1h 
tplc_m_v1h 
, 
tplc_m.g1 
tplc_m_g1 
, 
tplc_m.dp45 
tplc_m_dp45 
, 
tplc_m.thot 
tplc_m_thot 
, 
tplc_m.q1 
tplc_m_q1 
, 
tplc_m.m1 
tplc_m_m1 
, 
tplc_m.dcounter 
tplc_m_dcounter 
, 
tplc_m.v6 
tplc_m_v6 
, 
tplc_m.dv45 
tplc_m_dv45 
, 
tplc_m.v5h 
tplc_m_v5h 
, 
tplc_m.v4h 
tplc_m_v4h 
, 
tplc_m.oktime 
tplc_m_oktime 
, 
tplc_m.t1 
tplc_m_t1 
, 
tplc_m.datetimecounter 
tplc_m_datetimecounter 
, 
tplc_m.p2 
tplc_m_p2 
, 
tplc_m.q2 
tplc_m_q2 
, 
tplc_m.t2 
tplc_m_t2 
, 
tplc_m.p4 
tplc_m_p4 
, 
tplc_m.g4 
tplc_m_g4 
, 
tplc_m.dq12 
tplc_m_dq12 
, 
tplc_m.hc_2 
tplc_m_hc_2 
, 
tplc_m.dq 
tplc_m_dq 
, 
tplc_m.p3 
tplc_m_p3 
, 
tplc_m.hc_1 
tplc_m_hc_1 
, 
tplc_m.check_a 
tplc_m_check_a 
, 
tplc_m.dt12 
tplc_m_dt12 
, 
tplc_m.dm12 
tplc_m_dm12 
, 
tplc_m.q2h 
tplc_m_q2h 
, 
tplc_m.v4 
tplc_m_v4 
, 
tplc_m.v2 
tplc_m_v2 
, b2g(tplc_m.instanceid) instanceid 
, tplc_m.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_m.tplc_mid) id 
, 'tplc_m' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_M
 join INSTANCE on TPLC_M.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_m_en_us
go
create view v_autotplc_m_en_us as 
select   b2g(tplc_m. tplc_mid) tplc_mid,tplc_m. changestamp changestamp
, 
tplc_m.q5 
tplc_m_q5 
, 
tplc_m.errtimeh 
tplc_m_errtimeh 
, 
tplc_m.dans3 
tplc_m_dans3 
, 
tplc_m.m5 
tplc_m_m5 
, 
tplc_m.dans2 
tplc_m_dans2 
, 
tplc_m.dcall 
tplc_m_dcall 
, 
tplc_m.g6 
tplc_m_g6 
, 
tplc_m.errtime 
tplc_m_errtime 
, 
tplc_m.dp12 
tplc_m_dp12 
, 
tplc_m.sp_tb1 
tplc_m_sp_tb1 
, 
tplc_m.dans4 
tplc_m_dans4 
, 
tplc_m.p5 
tplc_m_p5 
, 
tplc_m.dans6 
tplc_m_dans6 
, 
tplc_m.g5 
tplc_m_g5 
, 
tplc_m.q3 
tplc_m_q3 
, 
tplc_m.tce1 
tplc_m_tce1 
, 
tplc_m.p6 
tplc_m_p6 
, 
tplc_m.dt45 
tplc_m_dt45 
, 
tplc_m.tsum2 
tplc_m_tsum2 
, 
tplc_m.p1 
tplc_m_p1 
, 
tplc_m.pxb 
tplc_m_pxb 
, 
tplc_m.v1 
tplc_m_v1 
, 
tplc_m.tair1 
tplc_m_tair1 
, 
tplc_m.t4 
tplc_m_t4 
, 
tplc_m.v3 
tplc_m_v3 
, 
tplc_m.t5 
tplc_m_t5 
, 
tplc_m.m4 
tplc_m_m4 
, 
tplc_m.dans1 
tplc_m_dans1 
, 
tplc_m.t3 
tplc_m_t3 
, 
tplc_m.m6 
tplc_m_m6 
, 
tplc_m.dans5 
tplc_m_dans5 
, 
tplc_m.patm 
tplc_m_patm 
, 
tplc_m.m3 
tplc_m_m3 
, 
tplc_m.v2h 
tplc_m_v2h 
, 
tplc_m.v5 
tplc_m_v5 
, 
tplc_m.worktime 
tplc_m_worktime 
, 
tplc_m.tcool 
tplc_m_tcool 
, 
tplc_m.hc_code 
tplc_m_hc_code 
, 
tplc_m.sp 
tplc_m_sp 
, 
tplc_m.dm45 
tplc_m_dm45 
, 
tplc_m.q4 
tplc_m_q4 
, 
tplc_m.g2 
tplc_m_g2 
, 
tplc_m.sp_tb2 
tplc_m_sp_tb2 
, 
tplc_m.dq45 
tplc_m_dq45 
, 
tplc_m.tsum1 
tplc_m_tsum1 
, 
tplc_m.tair2 
tplc_m_tair2 
, 
tplc_m.dv12 
tplc_m_dv12 
, 
tplc_m.tce2 
tplc_m_tce2 
, 
tplc_m.g3 
tplc_m_g3 
, 
tplc_m.dg12 
tplc_m_dg12 
, 
tplc_m.unitsr 
tplc_m_unitsr 
, 
tplc_m.q1h 
tplc_m_q1h 
, 
tplc_m.hc 
tplc_m_hc 
, 
tplc_m.dg45 
tplc_m_dg45 
, 
tplc_m.t6 
tplc_m_t6 
, 
tplc_m.m2 
tplc_m_m2 
, 
tplc_m.v1h 
tplc_m_v1h 
, 
tplc_m.g1 
tplc_m_g1 
, 
tplc_m.dp45 
tplc_m_dp45 
, 
tplc_m.thot 
tplc_m_thot 
, 
tplc_m.q1 
tplc_m_q1 
, 
tplc_m.m1 
tplc_m_m1 
, 
tplc_m.dcounter 
tplc_m_dcounter 
, 
tplc_m.v6 
tplc_m_v6 
, 
tplc_m.dv45 
tplc_m_dv45 
, 
tplc_m.v5h 
tplc_m_v5h 
, 
tplc_m.v4h 
tplc_m_v4h 
, 
tplc_m.oktime 
tplc_m_oktime 
, 
tplc_m.t1 
tplc_m_t1 
, 
tplc_m.datetimecounter 
tplc_m_datetimecounter 
, 
tplc_m.p2 
tplc_m_p2 
, 
tplc_m.q2 
tplc_m_q2 
, 
tplc_m.t2 
tplc_m_t2 
, 
tplc_m.p4 
tplc_m_p4 
, 
tplc_m.g4 
tplc_m_g4 
, 
tplc_m.dq12 
tplc_m_dq12 
, 
tplc_m.hc_2 
tplc_m_hc_2 
, 
tplc_m.dq 
tplc_m_dq 
, 
tplc_m.p3 
tplc_m_p3 
, 
tplc_m.hc_1 
tplc_m_hc_1 
, 
tplc_m.check_a 
tplc_m_check_a 
, 
tplc_m.dt12 
tplc_m_dt12 
, 
tplc_m.dm12 
tplc_m_dm12 
, 
tplc_m.q2h 
tplc_m_q2h 
, 
tplc_m.v4 
tplc_m_v4 
, 
tplc_m.v2 
tplc_m_v2 
, b2g(tplc_m.instanceid) instanceid 
, tplc_m.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_m.tplc_mid) id 
, 'tplc_m' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_M
 join INSTANCE on TPLC_M.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_header
go
create view v_autotplc_header as 
select   b2g(tplc_header. tplc_headerid) tplc_headerid,tplc_header. changestamp changestamp
, 
 b2g(tplc_header.id_bd)  
tplc_header_id_bd_id, 
 tplt_bdevices_brief_f(tplc_header.id_bd, null) 
tplc_header_id_bd 
, b2g(tplc_header.instanceid) instanceid 
, tplc_header.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_header.tplc_headerid) id 
, 'tplc_header' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_HEADER
 join INSTANCE on TPLC_HEADER.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_header_ru_ru
go
create view v_autotplc_header_ru_ru as 
select   b2g(tplc_header. tplc_headerid) tplc_headerid,tplc_header. changestamp changestamp
, 
 b2g(tplc_header.id_bd)  
tplc_header_id_bd_id, 
 tplt_bdevices_brief_f(tplc_header.id_bd, 'ru_ru') 
tplc_header_id_bd 
, b2g(tplc_header.instanceid) instanceid 
, tplc_header.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_header.tplc_headerid) id 
, 'tplc_header' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_HEADER
 join INSTANCE on TPLC_HEADER.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_header_en_us
go
create view v_autotplc_header_en_us as 
select   b2g(tplc_header. tplc_headerid) tplc_headerid,tplc_header. changestamp changestamp
, 
 b2g(tplc_header.id_bd)  
tplc_header_id_bd_id, 
 tplt_bdevices_brief_f(tplc_header.id_bd, 'en_us') 
tplc_header_id_bd 
, b2g(tplc_header.instanceid) instanceid 
, tplc_header.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_header.tplc_headerid) id 
, 'tplc_header' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_HEADER
 join INSTANCE on TPLC_HEADER.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_d
go
create view v_autotplc_d as 
select   b2g(tplc_d. tplc_did) tplc_did,tplc_d. changestamp changestamp
, 
tplc_d.t1 
tplc_d_t1 
, 
tplc_d.patm 
tplc_d_patm 
, 
tplc_d.p5 
tplc_d_p5 
, 
tplc_d.p2 
tplc_d_p2 
, 
tplc_d.v4 
tplc_d_v4 
, 
tplc_d.sp 
tplc_d_sp 
, 
tplc_d.v2h 
tplc_d_v2h 
, 
tplc_d.g2 
tplc_d_g2 
, 
tplc_d.q2h 
tplc_d_q2h 
, 
tplc_d.q4 
tplc_d_q4 
, 
tplc_d.m6 
tplc_d_m6 
, 
tplc_d.hc_2 
tplc_d_hc_2 
, 
tplc_d.errtime 
tplc_d_errtime 
, 
tplc_d.pxb 
tplc_d_pxb 
, 
tplc_d.dq45 
tplc_d_dq45 
, 
tplc_d.t3 
tplc_d_t3 
, 
tplc_d.v4h 
tplc_d_v4h 
, 
tplc_d.sp_tb1 
tplc_d_sp_tb1 
, 
tplc_d.dans4 
tplc_d_dans4 
, 
tplc_d.q1 
tplc_d_q1 
, 
tplc_d.m1 
tplc_d_m1 
, 
tplc_d.p4 
tplc_d_p4 
, 
tplc_d.v5h 
tplc_d_v5h 
, 
tplc_d.tcool 
tplc_d_tcool 
, 
tplc_d.hc_code 
tplc_d_hc_code 
, 
tplc_d.m3 
tplc_d_m3 
, 
tplc_d.dg12 
tplc_d_dg12 
, 
tplc_d.t5 
tplc_d_t5 
, 
tplc_d.check_a 
tplc_d_check_a 
, 
tplc_d.dt45 
tplc_d_dt45 
, 
tplc_d.dg45 
tplc_d_dg45 
, 
tplc_d.dq12 
tplc_d_dq12 
, 
tplc_d.q1h 
tplc_d_q1h 
, 
tplc_d.oktime 
tplc_d_oktime 
, 
tplc_d.tair2 
tplc_d_tair2 
, 
tplc_d.dcall 
tplc_d_dcall 
, 
tplc_d.dv12 
tplc_d_dv12 
, 
tplc_d.tsum2 
tplc_d_tsum2 
, 
tplc_d.t2 
tplc_d_t2 
, 
tplc_d.g3 
tplc_d_g3 
, 
tplc_d.v3 
tplc_d_v3 
, 
tplc_d.dans2 
tplc_d_dans2 
, 
tplc_d.dans3 
tplc_d_dans3 
, 
tplc_d.dans5 
tplc_d_dans5 
, 
tplc_d.dp12 
tplc_d_dp12 
, 
tplc_d.tce2 
tplc_d_tce2 
, 
tplc_d.g5 
tplc_d_g5 
, 
tplc_d.g6 
tplc_d_g6 
, 
tplc_d.dans6 
tplc_d_dans6 
, 
tplc_d.m2 
tplc_d_m2 
, 
tplc_d.m4 
tplc_d_m4 
, 
tplc_d.thot 
tplc_d_thot 
, 
tplc_d.m5 
tplc_d_m5 
, 
tplc_d.t6 
tplc_d_t6 
, 
tplc_d.dans1 
tplc_d_dans1 
, 
tplc_d.p6 
tplc_d_p6 
, 
tplc_d.tce1 
tplc_d_tce1 
, 
tplc_d.tsum1 
tplc_d_tsum1 
, 
tplc_d.v2 
tplc_d_v2 
, 
tplc_d.hc 
tplc_d_hc 
, 
tplc_d.q5 
tplc_d_q5 
, 
tplc_d.unitsr 
tplc_d_unitsr 
, 
tplc_d.g4 
tplc_d_g4 
, 
tplc_d.dcounter 
tplc_d_dcounter 
, 
tplc_d.v5 
tplc_d_v5 
, 
tplc_d.sp_tb2 
tplc_d_sp_tb2 
, 
tplc_d.v1 
tplc_d_v1 
, 
tplc_d.worktime 
tplc_d_worktime 
, 
tplc_d.q3 
tplc_d_q3 
, 
tplc_d.hc_1 
tplc_d_hc_1 
, 
tplc_d.dv45 
tplc_d_dv45 
, 
tplc_d.p1 
tplc_d_p1 
, 
tplc_d.t4 
tplc_d_t4 
, 
tplc_d.dp45 
tplc_d_dp45 
, 
tplc_d.g1 
tplc_d_g1 
, 
tplc_d.dq 
tplc_d_dq 
, 
tplc_d.datetimecounter 
tplc_d_datetimecounter 
, 
tplc_d.dm45 
tplc_d_dm45 
, 
tplc_d.dt12 
tplc_d_dt12 
, 
tplc_d.q2 
tplc_d_q2 
, 
tplc_d.tair1 
tplc_d_tair1 
, 
tplc_d.p3 
tplc_d_p3 
, 
tplc_d.v6 
tplc_d_v6 
, 
tplc_d.errtimeh 
tplc_d_errtimeh 
, 
tplc_d.v1h 
tplc_d_v1h 
, 
tplc_d.dm12 
tplc_d_dm12 
, b2g(tplc_d.instanceid) instanceid 
, tplc_d.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_d.tplc_did) id 
, 'tplc_d' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_D
 join INSTANCE on TPLC_D.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_d_ru_ru
go
create view v_autotplc_d_ru_ru as 
select   b2g(tplc_d. tplc_did) tplc_did,tplc_d. changestamp changestamp
, 
tplc_d.t1 
tplc_d_t1 
, 
tplc_d.patm 
tplc_d_patm 
, 
tplc_d.p5 
tplc_d_p5 
, 
tplc_d.p2 
tplc_d_p2 
, 
tplc_d.v4 
tplc_d_v4 
, 
tplc_d.sp 
tplc_d_sp 
, 
tplc_d.v2h 
tplc_d_v2h 
, 
tplc_d.g2 
tplc_d_g2 
, 
tplc_d.q2h 
tplc_d_q2h 
, 
tplc_d.q4 
tplc_d_q4 
, 
tplc_d.m6 
tplc_d_m6 
, 
tplc_d.hc_2 
tplc_d_hc_2 
, 
tplc_d.errtime 
tplc_d_errtime 
, 
tplc_d.pxb 
tplc_d_pxb 
, 
tplc_d.dq45 
tplc_d_dq45 
, 
tplc_d.t3 
tplc_d_t3 
, 
tplc_d.v4h 
tplc_d_v4h 
, 
tplc_d.sp_tb1 
tplc_d_sp_tb1 
, 
tplc_d.dans4 
tplc_d_dans4 
, 
tplc_d.q1 
tplc_d_q1 
, 
tplc_d.m1 
tplc_d_m1 
, 
tplc_d.p4 
tplc_d_p4 
, 
tplc_d.v5h 
tplc_d_v5h 
, 
tplc_d.tcool 
tplc_d_tcool 
, 
tplc_d.hc_code 
tplc_d_hc_code 
, 
tplc_d.m3 
tplc_d_m3 
, 
tplc_d.dg12 
tplc_d_dg12 
, 
tplc_d.t5 
tplc_d_t5 
, 
tplc_d.check_a 
tplc_d_check_a 
, 
tplc_d.dt45 
tplc_d_dt45 
, 
tplc_d.dg45 
tplc_d_dg45 
, 
tplc_d.dq12 
tplc_d_dq12 
, 
tplc_d.q1h 
tplc_d_q1h 
, 
tplc_d.oktime 
tplc_d_oktime 
, 
tplc_d.tair2 
tplc_d_tair2 
, 
tplc_d.dcall 
tplc_d_dcall 
, 
tplc_d.dv12 
tplc_d_dv12 
, 
tplc_d.tsum2 
tplc_d_tsum2 
, 
tplc_d.t2 
tplc_d_t2 
, 
tplc_d.g3 
tplc_d_g3 
, 
tplc_d.v3 
tplc_d_v3 
, 
tplc_d.dans2 
tplc_d_dans2 
, 
tplc_d.dans3 
tplc_d_dans3 
, 
tplc_d.dans5 
tplc_d_dans5 
, 
tplc_d.dp12 
tplc_d_dp12 
, 
tplc_d.tce2 
tplc_d_tce2 
, 
tplc_d.g5 
tplc_d_g5 
, 
tplc_d.g6 
tplc_d_g6 
, 
tplc_d.dans6 
tplc_d_dans6 
, 
tplc_d.m2 
tplc_d_m2 
, 
tplc_d.m4 
tplc_d_m4 
, 
tplc_d.thot 
tplc_d_thot 
, 
tplc_d.m5 
tplc_d_m5 
, 
tplc_d.t6 
tplc_d_t6 
, 
tplc_d.dans1 
tplc_d_dans1 
, 
tplc_d.p6 
tplc_d_p6 
, 
tplc_d.tce1 
tplc_d_tce1 
, 
tplc_d.tsum1 
tplc_d_tsum1 
, 
tplc_d.v2 
tplc_d_v2 
, 
tplc_d.hc 
tplc_d_hc 
, 
tplc_d.q5 
tplc_d_q5 
, 
tplc_d.unitsr 
tplc_d_unitsr 
, 
tplc_d.g4 
tplc_d_g4 
, 
tplc_d.dcounter 
tplc_d_dcounter 
, 
tplc_d.v5 
tplc_d_v5 
, 
tplc_d.sp_tb2 
tplc_d_sp_tb2 
, 
tplc_d.v1 
tplc_d_v1 
, 
tplc_d.worktime 
tplc_d_worktime 
, 
tplc_d.q3 
tplc_d_q3 
, 
tplc_d.hc_1 
tplc_d_hc_1 
, 
tplc_d.dv45 
tplc_d_dv45 
, 
tplc_d.p1 
tplc_d_p1 
, 
tplc_d.t4 
tplc_d_t4 
, 
tplc_d.dp45 
tplc_d_dp45 
, 
tplc_d.g1 
tplc_d_g1 
, 
tplc_d.dq 
tplc_d_dq 
, 
tplc_d.datetimecounter 
tplc_d_datetimecounter 
, 
tplc_d.dm45 
tplc_d_dm45 
, 
tplc_d.dt12 
tplc_d_dt12 
, 
tplc_d.q2 
tplc_d_q2 
, 
tplc_d.tair1 
tplc_d_tair1 
, 
tplc_d.p3 
tplc_d_p3 
, 
tplc_d.v6 
tplc_d_v6 
, 
tplc_d.errtimeh 
tplc_d_errtimeh 
, 
tplc_d.v1h 
tplc_d_v1h 
, 
tplc_d.dm12 
tplc_d_dm12 
, b2g(tplc_d.instanceid) instanceid 
, tplc_d.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_d.tplc_did) id 
, 'tplc_d' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_D
 join INSTANCE on TPLC_D.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_d_en_us
go
create view v_autotplc_d_en_us as 
select   b2g(tplc_d. tplc_did) tplc_did,tplc_d. changestamp changestamp
, 
tplc_d.t1 
tplc_d_t1 
, 
tplc_d.patm 
tplc_d_patm 
, 
tplc_d.p5 
tplc_d_p5 
, 
tplc_d.p2 
tplc_d_p2 
, 
tplc_d.v4 
tplc_d_v4 
, 
tplc_d.sp 
tplc_d_sp 
, 
tplc_d.v2h 
tplc_d_v2h 
, 
tplc_d.g2 
tplc_d_g2 
, 
tplc_d.q2h 
tplc_d_q2h 
, 
tplc_d.q4 
tplc_d_q4 
, 
tplc_d.m6 
tplc_d_m6 
, 
tplc_d.hc_2 
tplc_d_hc_2 
, 
tplc_d.errtime 
tplc_d_errtime 
, 
tplc_d.pxb 
tplc_d_pxb 
, 
tplc_d.dq45 
tplc_d_dq45 
, 
tplc_d.t3 
tplc_d_t3 
, 
tplc_d.v4h 
tplc_d_v4h 
, 
tplc_d.sp_tb1 
tplc_d_sp_tb1 
, 
tplc_d.dans4 
tplc_d_dans4 
, 
tplc_d.q1 
tplc_d_q1 
, 
tplc_d.m1 
tplc_d_m1 
, 
tplc_d.p4 
tplc_d_p4 
, 
tplc_d.v5h 
tplc_d_v5h 
, 
tplc_d.tcool 
tplc_d_tcool 
, 
tplc_d.hc_code 
tplc_d_hc_code 
, 
tplc_d.m3 
tplc_d_m3 
, 
tplc_d.dg12 
tplc_d_dg12 
, 
tplc_d.t5 
tplc_d_t5 
, 
tplc_d.check_a 
tplc_d_check_a 
, 
tplc_d.dt45 
tplc_d_dt45 
, 
tplc_d.dg45 
tplc_d_dg45 
, 
tplc_d.dq12 
tplc_d_dq12 
, 
tplc_d.q1h 
tplc_d_q1h 
, 
tplc_d.oktime 
tplc_d_oktime 
, 
tplc_d.tair2 
tplc_d_tair2 
, 
tplc_d.dcall 
tplc_d_dcall 
, 
tplc_d.dv12 
tplc_d_dv12 
, 
tplc_d.tsum2 
tplc_d_tsum2 
, 
tplc_d.t2 
tplc_d_t2 
, 
tplc_d.g3 
tplc_d_g3 
, 
tplc_d.v3 
tplc_d_v3 
, 
tplc_d.dans2 
tplc_d_dans2 
, 
tplc_d.dans3 
tplc_d_dans3 
, 
tplc_d.dans5 
tplc_d_dans5 
, 
tplc_d.dp12 
tplc_d_dp12 
, 
tplc_d.tce2 
tplc_d_tce2 
, 
tplc_d.g5 
tplc_d_g5 
, 
tplc_d.g6 
tplc_d_g6 
, 
tplc_d.dans6 
tplc_d_dans6 
, 
tplc_d.m2 
tplc_d_m2 
, 
tplc_d.m4 
tplc_d_m4 
, 
tplc_d.thot 
tplc_d_thot 
, 
tplc_d.m5 
tplc_d_m5 
, 
tplc_d.t6 
tplc_d_t6 
, 
tplc_d.dans1 
tplc_d_dans1 
, 
tplc_d.p6 
tplc_d_p6 
, 
tplc_d.tce1 
tplc_d_tce1 
, 
tplc_d.tsum1 
tplc_d_tsum1 
, 
tplc_d.v2 
tplc_d_v2 
, 
tplc_d.hc 
tplc_d_hc 
, 
tplc_d.q5 
tplc_d_q5 
, 
tplc_d.unitsr 
tplc_d_unitsr 
, 
tplc_d.g4 
tplc_d_g4 
, 
tplc_d.dcounter 
tplc_d_dcounter 
, 
tplc_d.v5 
tplc_d_v5 
, 
tplc_d.sp_tb2 
tplc_d_sp_tb2 
, 
tplc_d.v1 
tplc_d_v1 
, 
tplc_d.worktime 
tplc_d_worktime 
, 
tplc_d.q3 
tplc_d_q3 
, 
tplc_d.hc_1 
tplc_d_hc_1 
, 
tplc_d.dv45 
tplc_d_dv45 
, 
tplc_d.p1 
tplc_d_p1 
, 
tplc_d.t4 
tplc_d_t4 
, 
tplc_d.dp45 
tplc_d_dp45 
, 
tplc_d.g1 
tplc_d_g1 
, 
tplc_d.dq 
tplc_d_dq 
, 
tplc_d.datetimecounter 
tplc_d_datetimecounter 
, 
tplc_d.dm45 
tplc_d_dm45 
, 
tplc_d.dt12 
tplc_d_dt12 
, 
tplc_d.q2 
tplc_d_q2 
, 
tplc_d.tair1 
tplc_d_tair1 
, 
tplc_d.p3 
tplc_d_p3 
, 
tplc_d.v6 
tplc_d_v6 
, 
tplc_d.errtimeh 
tplc_d_errtimeh 
, 
tplc_d.v1h 
tplc_d_v1h 
, 
tplc_d.dm12 
tplc_d_dm12 
, b2g(tplc_d.instanceid) instanceid 
, tplc_d.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_d.tplc_did) id 
, 'tplc_d' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_D
 join INSTANCE on TPLC_D.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_h
go
create view v_autotplc_h as 
select   b2g(tplc_h. tplc_hid) tplc_hid,tplc_h. changestamp changestamp
, 
tplc_h.p2 
tplc_h_p2 
, 
tplc_h.dcall 
tplc_h_dcall 
, 
tplc_h.sp 
tplc_h_sp 
, 
tplc_h.datetimecounter 
tplc_h_datetimecounter 
, 
tplc_h.hc_1 
tplc_h_hc_1 
, 
tplc_h.dq45 
tplc_h_dq45 
, 
tplc_h.t5 
tplc_h_t5 
, 
tplc_h.q2 
tplc_h_q2 
, 
tplc_h.patm 
tplc_h_patm 
, 
tplc_h.oktime 
tplc_h_oktime 
, 
tplc_h.p4 
tplc_h_p4 
, 
tplc_h.tce1 
tplc_h_tce1 
, 
tplc_h.worktime 
tplc_h_worktime 
, 
tplc_h.dq12 
tplc_h_dq12 
, 
tplc_h.tsum2 
tplc_h_tsum2 
, 
tplc_h.t3 
tplc_h_t3 
, 
tplc_h.v6 
tplc_h_v6 
, 
tplc_h.v4 
tplc_h_v4 
, 
tplc_h.q4 
tplc_h_q4 
, 
tplc_h.q5 
tplc_h_q5 
, 
tplc_h.q2h 
tplc_h_q2h 
, 
tplc_h.g1 
tplc_h_g1 
, 
tplc_h.m5 
tplc_h_m5 
, 
tplc_h.t1 
tplc_h_t1 
, 
tplc_h.m2 
tplc_h_m2 
, 
tplc_h.check_a 
tplc_h_check_a 
, 
tplc_h.dcounter 
tplc_h_dcounter 
, 
tplc_h.errtime 
tplc_h_errtime 
, 
tplc_h.m4 
tplc_h_m4 
, 
tplc_h.hc 
tplc_h_hc 
, 
tplc_h.m1 
tplc_h_m1 
, 
tplc_h.unitsr 
tplc_h_unitsr 
, 
tplc_h.t4 
tplc_h_t4 
, 
tplc_h.tce2 
tplc_h_tce2 
, 
tplc_h.dm45 
tplc_h_dm45 
, 
tplc_h.pxb 
tplc_h_pxb 
, 
tplc_h.dt12 
tplc_h_dt12 
, 
tplc_h.hc_code 
tplc_h_hc_code 
, 
tplc_h.tcool 
tplc_h_tcool 
, 
tplc_h.q1h 
tplc_h_q1h 
, 
tplc_h.g5 
tplc_h_g5 
, 
tplc_h.dans3 
tplc_h_dans3 
, 
tplc_h.dg45 
tplc_h_dg45 
, 
tplc_h.q3 
tplc_h_q3 
, 
tplc_h.dq 
tplc_h_dq 
, 
tplc_h.dans2 
tplc_h_dans2 
, 
tplc_h.dans4 
tplc_h_dans4 
, 
tplc_h.t6 
tplc_h_t6 
, 
tplc_h.p6 
tplc_h_p6 
, 
tplc_h.sp_tb2 
tplc_h_sp_tb2 
, 
tplc_h.p5 
tplc_h_p5 
, 
tplc_h.m6 
tplc_h_m6 
, 
tplc_h.t2 
tplc_h_t2 
, 
tplc_h.dt45 
tplc_h_dt45 
, 
tplc_h.v3 
tplc_h_v3 
, 
tplc_h.v2h 
tplc_h_v2h 
, 
tplc_h.dans1 
tplc_h_dans1 
, 
tplc_h.tair2 
tplc_h_tair2 
, 
tplc_h.dp45 
tplc_h_dp45 
, 
tplc_h.g6 
tplc_h_g6 
, 
tplc_h.g2 
tplc_h_g2 
, 
tplc_h.g4 
tplc_h_g4 
, 
tplc_h.dg12 
tplc_h_dg12 
, 
tplc_h.v4h 
tplc_h_v4h 
, 
tplc_h.errtimeh 
tplc_h_errtimeh 
, 
tplc_h.dp12 
tplc_h_dp12 
, 
tplc_h.thot 
tplc_h_thot 
, 
tplc_h.g3 
tplc_h_g3 
, 
tplc_h.v2 
tplc_h_v2 
, 
tplc_h.v5 
tplc_h_v5 
, 
tplc_h.p1 
tplc_h_p1 
, 
tplc_h.tair1 
tplc_h_tair1 
, 
tplc_h.sp_tb1 
tplc_h_sp_tb1 
, 
tplc_h.dans6 
tplc_h_dans6 
, 
tplc_h.dans5 
tplc_h_dans5 
, 
tplc_h.v1h 
tplc_h_v1h 
, 
tplc_h.dm12 
tplc_h_dm12 
, 
tplc_h.m3 
tplc_h_m3 
, 
tplc_h.dv12 
tplc_h_dv12 
, 
tplc_h.v5h 
tplc_h_v5h 
, 
tplc_h.dv45 
tplc_h_dv45 
, 
tplc_h.q1 
tplc_h_q1 
, 
tplc_h.tsum1 
tplc_h_tsum1 
, 
tplc_h.v1 
tplc_h_v1 
, 
tplc_h.hc_2 
tplc_h_hc_2 
, 
tplc_h.p3 
tplc_h_p3 
, b2g(tplc_h.instanceid) instanceid 
, tplc_h.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_h.tplc_hid) id 
, 'tplc_h' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_H
 join INSTANCE on TPLC_H.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_h_ru_ru
go
create view v_autotplc_h_ru_ru as 
select   b2g(tplc_h. tplc_hid) tplc_hid,tplc_h. changestamp changestamp
, 
tplc_h.p2 
tplc_h_p2 
, 
tplc_h.dcall 
tplc_h_dcall 
, 
tplc_h.sp 
tplc_h_sp 
, 
tplc_h.datetimecounter 
tplc_h_datetimecounter 
, 
tplc_h.hc_1 
tplc_h_hc_1 
, 
tplc_h.dq45 
tplc_h_dq45 
, 
tplc_h.t5 
tplc_h_t5 
, 
tplc_h.q2 
tplc_h_q2 
, 
tplc_h.patm 
tplc_h_patm 
, 
tplc_h.oktime 
tplc_h_oktime 
, 
tplc_h.p4 
tplc_h_p4 
, 
tplc_h.tce1 
tplc_h_tce1 
, 
tplc_h.worktime 
tplc_h_worktime 
, 
tplc_h.dq12 
tplc_h_dq12 
, 
tplc_h.tsum2 
tplc_h_tsum2 
, 
tplc_h.t3 
tplc_h_t3 
, 
tplc_h.v6 
tplc_h_v6 
, 
tplc_h.v4 
tplc_h_v4 
, 
tplc_h.q4 
tplc_h_q4 
, 
tplc_h.q5 
tplc_h_q5 
, 
tplc_h.q2h 
tplc_h_q2h 
, 
tplc_h.g1 
tplc_h_g1 
, 
tplc_h.m5 
tplc_h_m5 
, 
tplc_h.t1 
tplc_h_t1 
, 
tplc_h.m2 
tplc_h_m2 
, 
tplc_h.check_a 
tplc_h_check_a 
, 
tplc_h.dcounter 
tplc_h_dcounter 
, 
tplc_h.errtime 
tplc_h_errtime 
, 
tplc_h.m4 
tplc_h_m4 
, 
tplc_h.hc 
tplc_h_hc 
, 
tplc_h.m1 
tplc_h_m1 
, 
tplc_h.unitsr 
tplc_h_unitsr 
, 
tplc_h.t4 
tplc_h_t4 
, 
tplc_h.tce2 
tplc_h_tce2 
, 
tplc_h.dm45 
tplc_h_dm45 
, 
tplc_h.pxb 
tplc_h_pxb 
, 
tplc_h.dt12 
tplc_h_dt12 
, 
tplc_h.hc_code 
tplc_h_hc_code 
, 
tplc_h.tcool 
tplc_h_tcool 
, 
tplc_h.q1h 
tplc_h_q1h 
, 
tplc_h.g5 
tplc_h_g5 
, 
tplc_h.dans3 
tplc_h_dans3 
, 
tplc_h.dg45 
tplc_h_dg45 
, 
tplc_h.q3 
tplc_h_q3 
, 
tplc_h.dq 
tplc_h_dq 
, 
tplc_h.dans2 
tplc_h_dans2 
, 
tplc_h.dans4 
tplc_h_dans4 
, 
tplc_h.t6 
tplc_h_t6 
, 
tplc_h.p6 
tplc_h_p6 
, 
tplc_h.sp_tb2 
tplc_h_sp_tb2 
, 
tplc_h.p5 
tplc_h_p5 
, 
tplc_h.m6 
tplc_h_m6 
, 
tplc_h.t2 
tplc_h_t2 
, 
tplc_h.dt45 
tplc_h_dt45 
, 
tplc_h.v3 
tplc_h_v3 
, 
tplc_h.v2h 
tplc_h_v2h 
, 
tplc_h.dans1 
tplc_h_dans1 
, 
tplc_h.tair2 
tplc_h_tair2 
, 
tplc_h.dp45 
tplc_h_dp45 
, 
tplc_h.g6 
tplc_h_g6 
, 
tplc_h.g2 
tplc_h_g2 
, 
tplc_h.g4 
tplc_h_g4 
, 
tplc_h.dg12 
tplc_h_dg12 
, 
tplc_h.v4h 
tplc_h_v4h 
, 
tplc_h.errtimeh 
tplc_h_errtimeh 
, 
tplc_h.dp12 
tplc_h_dp12 
, 
tplc_h.thot 
tplc_h_thot 
, 
tplc_h.g3 
tplc_h_g3 
, 
tplc_h.v2 
tplc_h_v2 
, 
tplc_h.v5 
tplc_h_v5 
, 
tplc_h.p1 
tplc_h_p1 
, 
tplc_h.tair1 
tplc_h_tair1 
, 
tplc_h.sp_tb1 
tplc_h_sp_tb1 
, 
tplc_h.dans6 
tplc_h_dans6 
, 
tplc_h.dans5 
tplc_h_dans5 
, 
tplc_h.v1h 
tplc_h_v1h 
, 
tplc_h.dm12 
tplc_h_dm12 
, 
tplc_h.m3 
tplc_h_m3 
, 
tplc_h.dv12 
tplc_h_dv12 
, 
tplc_h.v5h 
tplc_h_v5h 
, 
tplc_h.dv45 
tplc_h_dv45 
, 
tplc_h.q1 
tplc_h_q1 
, 
tplc_h.tsum1 
tplc_h_tsum1 
, 
tplc_h.v1 
tplc_h_v1 
, 
tplc_h.hc_2 
tplc_h_hc_2 
, 
tplc_h.p3 
tplc_h_p3 
, b2g(tplc_h.instanceid) instanceid 
, tplc_h.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_h.tplc_hid) id 
, 'tplc_h' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_H
 join INSTANCE on TPLC_H.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_h_en_us
go
create view v_autotplc_h_en_us as 
select   b2g(tplc_h. tplc_hid) tplc_hid,tplc_h. changestamp changestamp
, 
tplc_h.p2 
tplc_h_p2 
, 
tplc_h.dcall 
tplc_h_dcall 
, 
tplc_h.sp 
tplc_h_sp 
, 
tplc_h.datetimecounter 
tplc_h_datetimecounter 
, 
tplc_h.hc_1 
tplc_h_hc_1 
, 
tplc_h.dq45 
tplc_h_dq45 
, 
tplc_h.t5 
tplc_h_t5 
, 
tplc_h.q2 
tplc_h_q2 
, 
tplc_h.patm 
tplc_h_patm 
, 
tplc_h.oktime 
tplc_h_oktime 
, 
tplc_h.p4 
tplc_h_p4 
, 
tplc_h.tce1 
tplc_h_tce1 
, 
tplc_h.worktime 
tplc_h_worktime 
, 
tplc_h.dq12 
tplc_h_dq12 
, 
tplc_h.tsum2 
tplc_h_tsum2 
, 
tplc_h.t3 
tplc_h_t3 
, 
tplc_h.v6 
tplc_h_v6 
, 
tplc_h.v4 
tplc_h_v4 
, 
tplc_h.q4 
tplc_h_q4 
, 
tplc_h.q5 
tplc_h_q5 
, 
tplc_h.q2h 
tplc_h_q2h 
, 
tplc_h.g1 
tplc_h_g1 
, 
tplc_h.m5 
tplc_h_m5 
, 
tplc_h.t1 
tplc_h_t1 
, 
tplc_h.m2 
tplc_h_m2 
, 
tplc_h.check_a 
tplc_h_check_a 
, 
tplc_h.dcounter 
tplc_h_dcounter 
, 
tplc_h.errtime 
tplc_h_errtime 
, 
tplc_h.m4 
tplc_h_m4 
, 
tplc_h.hc 
tplc_h_hc 
, 
tplc_h.m1 
tplc_h_m1 
, 
tplc_h.unitsr 
tplc_h_unitsr 
, 
tplc_h.t4 
tplc_h_t4 
, 
tplc_h.tce2 
tplc_h_tce2 
, 
tplc_h.dm45 
tplc_h_dm45 
, 
tplc_h.pxb 
tplc_h_pxb 
, 
tplc_h.dt12 
tplc_h_dt12 
, 
tplc_h.hc_code 
tplc_h_hc_code 
, 
tplc_h.tcool 
tplc_h_tcool 
, 
tplc_h.q1h 
tplc_h_q1h 
, 
tplc_h.g5 
tplc_h_g5 
, 
tplc_h.dans3 
tplc_h_dans3 
, 
tplc_h.dg45 
tplc_h_dg45 
, 
tplc_h.q3 
tplc_h_q3 
, 
tplc_h.dq 
tplc_h_dq 
, 
tplc_h.dans2 
tplc_h_dans2 
, 
tplc_h.dans4 
tplc_h_dans4 
, 
tplc_h.t6 
tplc_h_t6 
, 
tplc_h.p6 
tplc_h_p6 
, 
tplc_h.sp_tb2 
tplc_h_sp_tb2 
, 
tplc_h.p5 
tplc_h_p5 
, 
tplc_h.m6 
tplc_h_m6 
, 
tplc_h.t2 
tplc_h_t2 
, 
tplc_h.dt45 
tplc_h_dt45 
, 
tplc_h.v3 
tplc_h_v3 
, 
tplc_h.v2h 
tplc_h_v2h 
, 
tplc_h.dans1 
tplc_h_dans1 
, 
tplc_h.tair2 
tplc_h_tair2 
, 
tplc_h.dp45 
tplc_h_dp45 
, 
tplc_h.g6 
tplc_h_g6 
, 
tplc_h.g2 
tplc_h_g2 
, 
tplc_h.g4 
tplc_h_g4 
, 
tplc_h.dg12 
tplc_h_dg12 
, 
tplc_h.v4h 
tplc_h_v4h 
, 
tplc_h.errtimeh 
tplc_h_errtimeh 
, 
tplc_h.dp12 
tplc_h_dp12 
, 
tplc_h.thot 
tplc_h_thot 
, 
tplc_h.g3 
tplc_h_g3 
, 
tplc_h.v2 
tplc_h_v2 
, 
tplc_h.v5 
tplc_h_v5 
, 
tplc_h.p1 
tplc_h_p1 
, 
tplc_h.tair1 
tplc_h_tair1 
, 
tplc_h.sp_tb1 
tplc_h_sp_tb1 
, 
tplc_h.dans6 
tplc_h_dans6 
, 
tplc_h.dans5 
tplc_h_dans5 
, 
tplc_h.v1h 
tplc_h_v1h 
, 
tplc_h.dm12 
tplc_h_dm12 
, 
tplc_h.m3 
tplc_h_m3 
, 
tplc_h.dv12 
tplc_h_dv12 
, 
tplc_h.v5h 
tplc_h_v5h 
, 
tplc_h.dv45 
tplc_h_dv45 
, 
tplc_h.q1 
tplc_h_q1 
, 
tplc_h.tsum1 
tplc_h_tsum1 
, 
tplc_h.v1 
tplc_h_v1 
, 
tplc_h.hc_2 
tplc_h_hc_2 
, 
tplc_h.p3 
tplc_h_p3 
, b2g(tplc_h.instanceid) instanceid 
, tplc_h.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_h.tplc_hid) id 
, 'tplc_h' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_H
 join INSTANCE on TPLC_H.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_missing
go
create view v_autotplc_missing as 
select   b2g(tplc_missing. tplc_missingid) tplc_missingid,tplc_missing. changestamp changestamp
, 
tplc_missing.querycount 
tplc_missing_querycount 
, 
tplc_missing.adate 
tplc_missing_adate 
, 
 b2g(tplc_missing.atype)  
tplc_missing_atype_id, 
 tpld_paramtype_brief_f(tplc_missing.atype, null) 
tplc_missing_atype 
, b2g(tplc_missing.instanceid) instanceid 
, tplc_missing.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_missing.tplc_missingid) id 
, 'tplc_missing' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_MISSING
 join INSTANCE on TPLC_MISSING.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_missing_ru_ru
go
create view v_autotplc_missing_ru_ru as 
select   b2g(tplc_missing. tplc_missingid) tplc_missingid,tplc_missing. changestamp changestamp
, 
tplc_missing.querycount 
tplc_missing_querycount 
, 
tplc_missing.adate 
tplc_missing_adate 
, 
 b2g(tplc_missing.atype)  
tplc_missing_atype_id, 
 tpld_paramtype_brief_f(tplc_missing.atype, 'ru_ru') 
tplc_missing_atype 
, b2g(tplc_missing.instanceid) instanceid 
, tplc_missing.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_missing.tplc_missingid) id 
, 'tplc_missing' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_MISSING
 join INSTANCE on TPLC_MISSING.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_missing_en_us
go
create view v_autotplc_missing_en_us as 
select   b2g(tplc_missing. tplc_missingid) tplc_missingid,tplc_missing. changestamp changestamp
, 
tplc_missing.querycount 
tplc_missing_querycount 
, 
tplc_missing.adate 
tplc_missing_adate 
, 
 b2g(tplc_missing.atype)  
tplc_missing_atype_id, 
 tpld_paramtype_brief_f(tplc_missing.atype, 'en_us') 
tplc_missing_atype 
, b2g(tplc_missing.instanceid) instanceid 
, tplc_missing.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_missing.tplc_missingid) id 
, 'tplc_missing' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_MISSING
 join INSTANCE on TPLC_MISSING.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_t
go
create view v_autotplc_t as 
select   b2g(tplc_t. tplc_tid) tplc_tid,tplc_t. changestamp changestamp
, 
tplc_t.worktime 
tplc_t_worktime 
, 
tplc_t.errtime 
tplc_t_errtime 
, 
tplc_t.dq45 
tplc_t_dq45 
, 
tplc_t.m2 
tplc_t_m2 
, 
tplc_t.hc_code 
tplc_t_hc_code 
, 
tplc_t.tsum1 
tplc_t_tsum1 
, 
tplc_t.dg45 
tplc_t_dg45 
, 
tplc_t.m1 
tplc_t_m1 
, 
tplc_t.q4 
tplc_t_q4 
, 
tplc_t.oktime 
tplc_t_oktime 
, 
tplc_t.tair1 
tplc_t_tair1 
, 
tplc_t.v5 
tplc_t_v5 
, 
tplc_t.dv45 
tplc_t_dv45 
, 
tplc_t.v6 
tplc_t_v6 
, 
tplc_t.g6 
tplc_t_g6 
, 
tplc_t.dt45 
tplc_t_dt45 
, 
tplc_t.p5 
tplc_t_p5 
, 
tplc_t.dv12 
tplc_t_dv12 
, 
tplc_t.tsum2 
tplc_t_tsum2 
, 
tplc_t.t3 
tplc_t_t3 
, 
tplc_t.dans6 
tplc_t_dans6 
, 
tplc_t.g4 
tplc_t_g4 
, 
tplc_t.q2 
tplc_t_q2 
, 
tplc_t.dp12 
tplc_t_dp12 
, 
tplc_t.g1 
tplc_t_g1 
, 
tplc_t.q2h 
tplc_t_q2h 
, 
tplc_t.m6 
tplc_t_m6 
, 
tplc_t.t1 
tplc_t_t1 
, 
tplc_t.dp45 
tplc_t_dp45 
, 
tplc_t.dcounter 
tplc_t_dcounter 
, 
tplc_t.hc_1 
tplc_t_hc_1 
, 
tplc_t.hc 
tplc_t_hc 
, 
tplc_t.g3 
tplc_t_g3 
, 
tplc_t.tcool 
tplc_t_tcool 
, 
tplc_t.v5h 
tplc_t_v5h 
, 
tplc_t.dans1 
tplc_t_dans1 
, 
tplc_t.errtimeh 
tplc_t_errtimeh 
, 
tplc_t.patm 
tplc_t_patm 
, 
tplc_t.hc_2 
tplc_t_hc_2 
, 
tplc_t.p6 
tplc_t_p6 
, 
tplc_t.sp 
tplc_t_sp 
, 
tplc_t.dcall 
tplc_t_dcall 
, 
tplc_t.tce1 
tplc_t_tce1 
, 
tplc_t.dm45 
tplc_t_dm45 
, 
tplc_t.dg12 
tplc_t_dg12 
, 
tplc_t.sp_tb1 
tplc_t_sp_tb1 
, 
tplc_t.g2 
tplc_t_g2 
, 
tplc_t.p4 
tplc_t_p4 
, 
tplc_t.check_a 
tplc_t_check_a 
, 
tplc_t.dans5 
tplc_t_dans5 
, 
tplc_t.v4 
tplc_t_v4 
, 
tplc_t.dq 
tplc_t_dq 
, 
tplc_t.q1h 
tplc_t_q1h 
, 
tplc_t.sp_tb2 
tplc_t_sp_tb2 
, 
tplc_t.thot 
tplc_t_thot 
, 
tplc_t.unitsr 
tplc_t_unitsr 
, 
tplc_t.m4 
tplc_t_m4 
, 
tplc_t.p3 
tplc_t_p3 
, 
tplc_t.q1 
tplc_t_q1 
, 
tplc_t.dans2 
tplc_t_dans2 
, 
tplc_t.v2 
tplc_t_v2 
, 
tplc_t.p2 
tplc_t_p2 
, 
tplc_t.pxb 
tplc_t_pxb 
, 
tplc_t.q5 
tplc_t_q5 
, 
tplc_t.t2 
tplc_t_t2 
, 
tplc_t.dq12 
tplc_t_dq12 
, 
tplc_t.t5 
tplc_t_t5 
, 
tplc_t.v1h 
tplc_t_v1h 
, 
tplc_t.t6 
tplc_t_t6 
, 
tplc_t.tair2 
tplc_t_tair2 
, 
tplc_t.t4 
tplc_t_t4 
, 
tplc_t.v1 
tplc_t_v1 
, 
tplc_t.q3 
tplc_t_q3 
, 
tplc_t.dans3 
tplc_t_dans3 
, 
tplc_t.p1 
tplc_t_p1 
, 
tplc_t.m5 
tplc_t_m5 
, 
tplc_t.dm12 
tplc_t_dm12 
, 
tplc_t.g5 
tplc_t_g5 
, 
tplc_t.datetimecounter 
tplc_t_datetimecounter 
, 
tplc_t.tce2 
tplc_t_tce2 
, 
tplc_t.dt12 
tplc_t_dt12 
, 
tplc_t.v3 
tplc_t_v3 
, 
tplc_t.v2h 
tplc_t_v2h 
, 
tplc_t.v4h 
tplc_t_v4h 
, 
tplc_t.m3 
tplc_t_m3 
, 
tplc_t.dans4 
tplc_t_dans4 
, b2g(tplc_t.instanceid) instanceid 
, tplc_t.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_t.tplc_tid) id 
, 'tplc_t' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_T
 join INSTANCE on TPLC_T.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_t_ru_ru
go
create view v_autotplc_t_ru_ru as 
select   b2g(tplc_t. tplc_tid) tplc_tid,tplc_t. changestamp changestamp
, 
tplc_t.worktime 
tplc_t_worktime 
, 
tplc_t.errtime 
tplc_t_errtime 
, 
tplc_t.dq45 
tplc_t_dq45 
, 
tplc_t.m2 
tplc_t_m2 
, 
tplc_t.hc_code 
tplc_t_hc_code 
, 
tplc_t.tsum1 
tplc_t_tsum1 
, 
tplc_t.dg45 
tplc_t_dg45 
, 
tplc_t.m1 
tplc_t_m1 
, 
tplc_t.q4 
tplc_t_q4 
, 
tplc_t.oktime 
tplc_t_oktime 
, 
tplc_t.tair1 
tplc_t_tair1 
, 
tplc_t.v5 
tplc_t_v5 
, 
tplc_t.dv45 
tplc_t_dv45 
, 
tplc_t.v6 
tplc_t_v6 
, 
tplc_t.g6 
tplc_t_g6 
, 
tplc_t.dt45 
tplc_t_dt45 
, 
tplc_t.p5 
tplc_t_p5 
, 
tplc_t.dv12 
tplc_t_dv12 
, 
tplc_t.tsum2 
tplc_t_tsum2 
, 
tplc_t.t3 
tplc_t_t3 
, 
tplc_t.dans6 
tplc_t_dans6 
, 
tplc_t.g4 
tplc_t_g4 
, 
tplc_t.q2 
tplc_t_q2 
, 
tplc_t.dp12 
tplc_t_dp12 
, 
tplc_t.g1 
tplc_t_g1 
, 
tplc_t.q2h 
tplc_t_q2h 
, 
tplc_t.m6 
tplc_t_m6 
, 
tplc_t.t1 
tplc_t_t1 
, 
tplc_t.dp45 
tplc_t_dp45 
, 
tplc_t.dcounter 
tplc_t_dcounter 
, 
tplc_t.hc_1 
tplc_t_hc_1 
, 
tplc_t.hc 
tplc_t_hc 
, 
tplc_t.g3 
tplc_t_g3 
, 
tplc_t.tcool 
tplc_t_tcool 
, 
tplc_t.v5h 
tplc_t_v5h 
, 
tplc_t.dans1 
tplc_t_dans1 
, 
tplc_t.errtimeh 
tplc_t_errtimeh 
, 
tplc_t.patm 
tplc_t_patm 
, 
tplc_t.hc_2 
tplc_t_hc_2 
, 
tplc_t.p6 
tplc_t_p6 
, 
tplc_t.sp 
tplc_t_sp 
, 
tplc_t.dcall 
tplc_t_dcall 
, 
tplc_t.tce1 
tplc_t_tce1 
, 
tplc_t.dm45 
tplc_t_dm45 
, 
tplc_t.dg12 
tplc_t_dg12 
, 
tplc_t.sp_tb1 
tplc_t_sp_tb1 
, 
tplc_t.g2 
tplc_t_g2 
, 
tplc_t.p4 
tplc_t_p4 
, 
tplc_t.check_a 
tplc_t_check_a 
, 
tplc_t.dans5 
tplc_t_dans5 
, 
tplc_t.v4 
tplc_t_v4 
, 
tplc_t.dq 
tplc_t_dq 
, 
tplc_t.q1h 
tplc_t_q1h 
, 
tplc_t.sp_tb2 
tplc_t_sp_tb2 
, 
tplc_t.thot 
tplc_t_thot 
, 
tplc_t.unitsr 
tplc_t_unitsr 
, 
tplc_t.m4 
tplc_t_m4 
, 
tplc_t.p3 
tplc_t_p3 
, 
tplc_t.q1 
tplc_t_q1 
, 
tplc_t.dans2 
tplc_t_dans2 
, 
tplc_t.v2 
tplc_t_v2 
, 
tplc_t.p2 
tplc_t_p2 
, 
tplc_t.pxb 
tplc_t_pxb 
, 
tplc_t.q5 
tplc_t_q5 
, 
tplc_t.t2 
tplc_t_t2 
, 
tplc_t.dq12 
tplc_t_dq12 
, 
tplc_t.t5 
tplc_t_t5 
, 
tplc_t.v1h 
tplc_t_v1h 
, 
tplc_t.t6 
tplc_t_t6 
, 
tplc_t.tair2 
tplc_t_tair2 
, 
tplc_t.t4 
tplc_t_t4 
, 
tplc_t.v1 
tplc_t_v1 
, 
tplc_t.q3 
tplc_t_q3 
, 
tplc_t.dans3 
tplc_t_dans3 
, 
tplc_t.p1 
tplc_t_p1 
, 
tplc_t.m5 
tplc_t_m5 
, 
tplc_t.dm12 
tplc_t_dm12 
, 
tplc_t.g5 
tplc_t_g5 
, 
tplc_t.datetimecounter 
tplc_t_datetimecounter 
, 
tplc_t.tce2 
tplc_t_tce2 
, 
tplc_t.dt12 
tplc_t_dt12 
, 
tplc_t.v3 
tplc_t_v3 
, 
tplc_t.v2h 
tplc_t_v2h 
, 
tplc_t.v4h 
tplc_t_v4h 
, 
tplc_t.m3 
tplc_t_m3 
, 
tplc_t.dans4 
tplc_t_dans4 
, b2g(tplc_t.instanceid) instanceid 
, tplc_t.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_t.tplc_tid) id 
, 'tplc_t' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_T
 join INSTANCE on TPLC_T.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplc_t_en_us
go
create view v_autotplc_t_en_us as 
select   b2g(tplc_t. tplc_tid) tplc_tid,tplc_t. changestamp changestamp
, 
tplc_t.worktime 
tplc_t_worktime 
, 
tplc_t.errtime 
tplc_t_errtime 
, 
tplc_t.dq45 
tplc_t_dq45 
, 
tplc_t.m2 
tplc_t_m2 
, 
tplc_t.hc_code 
tplc_t_hc_code 
, 
tplc_t.tsum1 
tplc_t_tsum1 
, 
tplc_t.dg45 
tplc_t_dg45 
, 
tplc_t.m1 
tplc_t_m1 
, 
tplc_t.q4 
tplc_t_q4 
, 
tplc_t.oktime 
tplc_t_oktime 
, 
tplc_t.tair1 
tplc_t_tair1 
, 
tplc_t.v5 
tplc_t_v5 
, 
tplc_t.dv45 
tplc_t_dv45 
, 
tplc_t.v6 
tplc_t_v6 
, 
tplc_t.g6 
tplc_t_g6 
, 
tplc_t.dt45 
tplc_t_dt45 
, 
tplc_t.p5 
tplc_t_p5 
, 
tplc_t.dv12 
tplc_t_dv12 
, 
tplc_t.tsum2 
tplc_t_tsum2 
, 
tplc_t.t3 
tplc_t_t3 
, 
tplc_t.dans6 
tplc_t_dans6 
, 
tplc_t.g4 
tplc_t_g4 
, 
tplc_t.q2 
tplc_t_q2 
, 
tplc_t.dp12 
tplc_t_dp12 
, 
tplc_t.g1 
tplc_t_g1 
, 
tplc_t.q2h 
tplc_t_q2h 
, 
tplc_t.m6 
tplc_t_m6 
, 
tplc_t.t1 
tplc_t_t1 
, 
tplc_t.dp45 
tplc_t_dp45 
, 
tplc_t.dcounter 
tplc_t_dcounter 
, 
tplc_t.hc_1 
tplc_t_hc_1 
, 
tplc_t.hc 
tplc_t_hc 
, 
tplc_t.g3 
tplc_t_g3 
, 
tplc_t.tcool 
tplc_t_tcool 
, 
tplc_t.v5h 
tplc_t_v5h 
, 
tplc_t.dans1 
tplc_t_dans1 
, 
tplc_t.errtimeh 
tplc_t_errtimeh 
, 
tplc_t.patm 
tplc_t_patm 
, 
tplc_t.hc_2 
tplc_t_hc_2 
, 
tplc_t.p6 
tplc_t_p6 
, 
tplc_t.sp 
tplc_t_sp 
, 
tplc_t.dcall 
tplc_t_dcall 
, 
tplc_t.tce1 
tplc_t_tce1 
, 
tplc_t.dm45 
tplc_t_dm45 
, 
tplc_t.dg12 
tplc_t_dg12 
, 
tplc_t.sp_tb1 
tplc_t_sp_tb1 
, 
tplc_t.g2 
tplc_t_g2 
, 
tplc_t.p4 
tplc_t_p4 
, 
tplc_t.check_a 
tplc_t_check_a 
, 
tplc_t.dans5 
tplc_t_dans5 
, 
tplc_t.v4 
tplc_t_v4 
, 
tplc_t.dq 
tplc_t_dq 
, 
tplc_t.q1h 
tplc_t_q1h 
, 
tplc_t.sp_tb2 
tplc_t_sp_tb2 
, 
tplc_t.thot 
tplc_t_thot 
, 
tplc_t.unitsr 
tplc_t_unitsr 
, 
tplc_t.m4 
tplc_t_m4 
, 
tplc_t.p3 
tplc_t_p3 
, 
tplc_t.q1 
tplc_t_q1 
, 
tplc_t.dans2 
tplc_t_dans2 
, 
tplc_t.v2 
tplc_t_v2 
, 
tplc_t.p2 
tplc_t_p2 
, 
tplc_t.pxb 
tplc_t_pxb 
, 
tplc_t.q5 
tplc_t_q5 
, 
tplc_t.t2 
tplc_t_t2 
, 
tplc_t.dq12 
tplc_t_dq12 
, 
tplc_t.t5 
tplc_t_t5 
, 
tplc_t.v1h 
tplc_t_v1h 
, 
tplc_t.t6 
tplc_t_t6 
, 
tplc_t.tair2 
tplc_t_tair2 
, 
tplc_t.t4 
tplc_t_t4 
, 
tplc_t.v1 
tplc_t_v1 
, 
tplc_t.q3 
tplc_t_q3 
, 
tplc_t.dans3 
tplc_t_dans3 
, 
tplc_t.p1 
tplc_t_p1 
, 
tplc_t.m5 
tplc_t_m5 
, 
tplc_t.dm12 
tplc_t_dm12 
, 
tplc_t.g5 
tplc_t_g5 
, 
tplc_t.datetimecounter 
tplc_t_datetimecounter 
, 
tplc_t.tce2 
tplc_t_tce2 
, 
tplc_t.dt12 
tplc_t_dt12 
, 
tplc_t.v3 
tplc_t_v3 
, 
tplc_t.v2h 
tplc_t_v2h 
, 
tplc_t.v4h 
tplc_t_v4h 
, 
tplc_t.m3 
tplc_t_m3 
, 
tplc_t.dans4 
tplc_t_dans4 
, b2g(tplc_t.instanceid) instanceid 
, tplc_t.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplc_t.tplc_tid) id 
, 'tplc_t' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLC_T
 join INSTANCE on TPLC_T.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpn_def
go
create view v_autotpn_def as 
select   b2g(tpn_def. tpn_defid) tpn_defid,tpn_def. changestamp changestamp
, 
tpn_def.thephone 
tpn_def_thephone 
, 
tpn_def.addr 
tpn_def_addr 
, 
 b2g(tpn_def.orgunit)  
tpn_def_orgunit_id, 
 tpld_f_brief_f(tpn_def.orgunit, null) 
tpn_def_orgunit 
, b2g(tpn_def.instanceid) instanceid 
, tpn_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpn_def.tpn_defid) id 
, 'tpn_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPN_DEF
 join INSTANCE on TPN_DEF.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpn_def_ru_ru
go
create view v_autotpn_def_ru_ru as 
select   b2g(tpn_def. tpn_defid) tpn_defid,tpn_def. changestamp changestamp
, 
tpn_def.thephone 
tpn_def_thephone 
, 
tpn_def.addr 
tpn_def_addr 
, 
 b2g(tpn_def.orgunit)  
tpn_def_orgunit_id, 
 tpld_f_brief_f(tpn_def.orgunit, 'ru_ru') 
tpn_def_orgunit 
, b2g(tpn_def.instanceid) instanceid 
, tpn_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpn_def.tpn_defid) id 
, 'tpn_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPN_DEF
 join INSTANCE on TPN_DEF.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpn_def_en_us
go
create view v_autotpn_def_en_us as 
select   b2g(tpn_def. tpn_defid) tpn_defid,tpn_def. changestamp changestamp
, 
tpn_def.thephone 
tpn_def_thephone 
, 
tpn_def.addr 
tpn_def_addr 
, 
 b2g(tpn_def.orgunit)  
tpn_def_orgunit_id, 
 tpld_f_brief_f(tpn_def.orgunit, 'en_us') 
tpn_def_orgunit 
, b2g(tpn_def.instanceid) instanceid 
, tpn_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpn_def.tpn_defid) id 
, 'tpn_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPN_DEF
 join INSTANCE on TPN_DEF.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_u_def
go
create view v_autoiu_u_def as 
select   b2g(iu_u_def. iu_u_defid) iu_u_defid,iu_u_def. changestamp changestamp
, 
 b2g(iu_u_def.currole)  
iu_u_def_currole_id, 
 iu_crole_brief_f(iu_u_def.currole, null) 
iu_u_def_currole 
, 
iu_u_def.name 
iu_u_def_name 
, 
iu_u_def.thephone 
iu_u_def_thephone 
, 
iu_u_def.surname 
iu_u_def_surname 
, 
 iu_u_def.sendtomail  
iu_u_def_sendtomail_val, 
 case iu_u_def.sendtomail 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_u_def_sendtomail 
, 
iu_u_def.login 
iu_u_def_login 
, 
 iu_u_def.freelancer  
iu_u_def_freelancer_val, 
 case iu_u_def.freelancer 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_u_def_freelancer 
, 
 b2g(iu_u_def.theclient)  
iu_u_def_theclient_id, 
 bpc_info_brief_f(iu_u_def.theclient, null) 
iu_u_def_theclient 
, 
iu_u_def.lastname 
iu_u_def_lastname 
, 
iu_u_def.email 
iu_u_def_email 
, b2g(iu_u_def.instanceid) instanceid 
, iu_u_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_u_def.iu_u_defid) id 
, 'iu_u_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_u_def
 join INSTANCE on iu_u_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_u_def_ru_ru
go
create view v_autoiu_u_def_ru_ru as 
select   b2g(iu_u_def. iu_u_defid) iu_u_defid,iu_u_def. changestamp changestamp
, 
 b2g(iu_u_def.currole)  
iu_u_def_currole_id, 
 iu_crole_brief_f(iu_u_def.currole, 'ru_ru') 
iu_u_def_currole 
, 
iu_u_def.name 
iu_u_def_name 
, 
iu_u_def.thephone 
iu_u_def_thephone 
, 
iu_u_def.surname 
iu_u_def_surname 
, 
 iu_u_def.sendtomail  
iu_u_def_sendtomail_val, 
 case iu_u_def.sendtomail 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_u_def_sendtomail 
, 
iu_u_def.login 
iu_u_def_login 
, 
 iu_u_def.freelancer  
iu_u_def_freelancer_val, 
 case iu_u_def.freelancer 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_u_def_freelancer 
, 
 b2g(iu_u_def.theclient)  
iu_u_def_theclient_id, 
 bpc_info_brief_f(iu_u_def.theclient, 'ru_ru') 
iu_u_def_theclient 
, 
iu_u_def.lastname 
iu_u_def_lastname 
, 
iu_u_def.email 
iu_u_def_email 
, b2g(iu_u_def.instanceid) instanceid 
, iu_u_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_u_def.iu_u_defid) id 
, 'iu_u_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_u_def
 join INSTANCE on iu_u_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_u_def_en_us
go
create view v_autoiu_u_def_en_us as 
select   b2g(iu_u_def. iu_u_defid) iu_u_defid,iu_u_def. changestamp changestamp
, 
 b2g(iu_u_def.currole)  
iu_u_def_currole_id, 
 iu_crole_brief_f(iu_u_def.currole, 'en_us') 
iu_u_def_currole 
, 
iu_u_def.name 
iu_u_def_name 
, 
iu_u_def.thephone 
iu_u_def_thephone 
, 
iu_u_def.surname 
iu_u_def_surname 
, 
 iu_u_def.sendtomail  
iu_u_def_sendtomail_val, 
 case iu_u_def.sendtomail 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_u_def_sendtomail 
, 
iu_u_def.login 
iu_u_def_login 
, 
 iu_u_def.freelancer  
iu_u_def_freelancer_val, 
 case iu_u_def.freelancer 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_u_def_freelancer 
, 
 b2g(iu_u_def.theclient)  
iu_u_def_theclient_id, 
 bpc_info_brief_f(iu_u_def.theclient, 'en_us') 
iu_u_def_theclient 
, 
iu_u_def.lastname 
iu_u_def_lastname 
, 
iu_u_def.email 
iu_u_def_email 
, b2g(iu_u_def.instanceid) instanceid 
, iu_u_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_u_def.iu_u_defid) id 
, 'iu_u_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_u_def
 join INSTANCE on iu_u_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenpackage
go
create view v_autogenpackage as 
select   b2g(genpackage. genpackageid) genpackageid,genpackage. changestamp changestamp
, 
genpackage.name 
genpackage_name 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genpackage.genpackageid) id 
, 'genpackage' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENPACKAGE
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenpackage_ru_ru
go
create view v_autogenpackage_ru_ru as 
select   b2g(genpackage. genpackageid) genpackageid,genpackage. changestamp changestamp
, 
genpackage.name 
genpackage_name 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genpackage.genpackageid) id 
, 'genpackage' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENPACKAGE
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenpackage_en_us
go
create view v_autogenpackage_en_us as 
select   b2g(genpackage. genpackageid) genpackageid,genpackage. changestamp changestamp
, 
genpackage.name 
genpackage_name 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genpackage.genpackageid) id 
, 'genpackage' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENPACKAGE
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenerator_target
go
create view v_autogenerator_target as 
select   b2g(generator_target. generator_targetid) generator_targetid,generator_target. changestamp changestamp, b2g(genpackageid) genpackageid
, 
generator_target.queuename 
generator_target_queuename 
, 
generator_target.generatorprogid 
generator_target_generatorprogid 
, 
generator_target.name 
generator_target_name 
, 
 generator_target.generatorstyle  
generator_target_generatorstyle_val, 
 case generator_target.generatorstyle 
when 0 then 'один тип'
when 1 then 'все типы сразу'
 else '' 
 end  
generator_target_generatorstyle 
, 
 generator_target.thedevelopmentenv  
generator_target_thedevelopmentenv_val, 
 case generator_target.thedevelopmentenv 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
generator_target_thedevelopmentenv 
, 
 generator_target.targettype  
generator_target_targettype_val, 
 case generator_target.targettype 
when 0 then 'субд'
when 3 then 'документация'
when 1 then 'модель'
when 2 then 'приложение'
when 4 then 'арм'
 else '' 
 end  
generator_target_targettype 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(generator_target.generator_targetid) id 
, 'generator_target' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENERATOR_TARGET
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenerator_target_ru_ru
go
create view v_autogenerator_target_ru_ru as 
select   b2g(generator_target. generator_targetid) generator_targetid,generator_target. changestamp changestamp, b2g(genpackageid) genpackageid
, 
generator_target.queuename 
generator_target_queuename 
, 
generator_target.generatorprogid 
generator_target_generatorprogid 
, 
generator_target.name 
generator_target_name 
, 
 generator_target.generatorstyle  
generator_target_generatorstyle_val, 
 case generator_target.generatorstyle 
when 0 then 'один тип'
when 1 then 'все типы сразу'
 else '' 
 end  
generator_target_generatorstyle 
, 
 generator_target.thedevelopmentenv  
generator_target_thedevelopmentenv_val, 
 case generator_target.thedevelopmentenv 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
generator_target_thedevelopmentenv 
, 
 generator_target.targettype  
generator_target_targettype_val, 
 case generator_target.targettype 
when 0 then 'субд'
when 3 then 'документация'
when 1 then 'модель'
when 2 then 'приложение'
when 4 then 'арм'
 else '' 
 end  
generator_target_targettype 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(generator_target.generator_targetid) id 
, 'generator_target' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENERATOR_TARGET
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenerator_target_en_us
go
create view v_autogenerator_target_en_us as 
select   b2g(generator_target. generator_targetid) generator_targetid,generator_target. changestamp changestamp, b2g(genpackageid) genpackageid
, 
generator_target.queuename 
generator_target_queuename 
, 
generator_target.generatorprogid 
generator_target_generatorprogid 
, 
generator_target.name 
generator_target_name 
, 
 generator_target.generatorstyle  
generator_target_generatorstyle_val, 
 case generator_target.generatorstyle 
when 0 then 'один тип'
when 1 then 'все типы сразу'
 else '' 
 end  
generator_target_generatorstyle 
, 
 generator_target.thedevelopmentenv  
generator_target_thedevelopmentenv_val, 
 case generator_target.thedevelopmentenv 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
generator_target_thedevelopmentenv 
, 
 generator_target.targettype  
generator_target_targettype_val, 
 case generator_target.targettype 
when 0 then 'субд'
when 3 then 'документация'
when 1 then 'модель'
when 2 then 'приложение'
when 4 then 'арм'
 else '' 
 end  
generator_target_targettype 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(generator_target.generator_targetid) id 
, 'generator_target' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENERATOR_TARGET
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenreference
go
create view v_autogenreference as 
select   b2g(genreference. genreferenceid) genreferenceid,genreference. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
genreference.name 
genreference_name 
, 
genreference.versionminor 
genreference_versionminor 
, 
genreference.versionmajor 
genreference_versionmajor 
, 
genreference.refclassid 
genreference_refclassid 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genreference.genreferenceid) id 
, 'genreference' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENREFERENCE
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENREFERENCE.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenreference_ru_ru
go
create view v_autogenreference_ru_ru as 
select   b2g(genreference. genreferenceid) genreferenceid,genreference. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
genreference.name 
genreference_name 
, 
genreference.versionminor 
genreference_versionminor 
, 
genreference.versionmajor 
genreference_versionmajor 
, 
genreference.refclassid 
genreference_refclassid 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genreference.genreferenceid) id 
, 'genreference' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENREFERENCE
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENREFERENCE.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenreference_en_us
go
create view v_autogenreference_en_us as 
select   b2g(genreference. genreferenceid) genreferenceid,genreference. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
genreference.name 
genreference_name 
, 
genreference.versionminor 
genreference_versionminor 
, 
genreference.versionmajor 
genreference_versionmajor 
, 
genreference.refclassid 
genreference_refclassid 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genreference.genreferenceid) id 
, 'genreference' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENREFERENCE
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENREFERENCE.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenmanualcode
go
create view v_autogenmanualcode as 
select   b2g(genmanualcode. genmanualcodeid) genmanualcodeid,genmanualcode. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
genmanualcode.name 
genmanualcode_name 
, 
genmanualcode.the_alias 
genmanualcode_the_alias 
, 
genmanualcode.code 
genmanualcode_code 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genmanualcode.genmanualcodeid) id 
, 'genmanualcode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENMANUALCODE
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENMANUALCODE.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenmanualcode_ru_ru
go
create view v_autogenmanualcode_ru_ru as 
select   b2g(genmanualcode. genmanualcodeid) genmanualcodeid,genmanualcode. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
genmanualcode.name 
genmanualcode_name 
, 
genmanualcode.the_alias 
genmanualcode_the_alias 
, 
genmanualcode.code 
genmanualcode_code 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genmanualcode.genmanualcodeid) id 
, 'genmanualcode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENMANUALCODE
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENMANUALCODE.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogenmanualcode_en_us
go
create view v_autogenmanualcode_en_us as 
select   b2g(genmanualcode. genmanualcodeid) genmanualcodeid,genmanualcode. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
genmanualcode.name 
genmanualcode_name 
, 
genmanualcode.the_alias 
genmanualcode_the_alias 
, 
genmanualcode.code 
genmanualcode_code 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(genmanualcode.genmanualcodeid) id 
, 'genmanualcode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENMANUALCODE
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENMANUALCODE.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogencontrols
go
create view v_autogencontrols as 
select   b2g(gencontrols. gencontrolsid) gencontrolsid,gencontrols. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
gencontrols.versionmajor 
gencontrols_versionmajor 
, 
gencontrols.controlprogid 
gencontrols_controlprogid 
, 
gencontrols.controlclassid 
gencontrols_controlclassid 
, 
gencontrols.versionminor 
gencontrols_versionminor 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(gencontrols.gencontrolsid) id 
, 'gencontrols' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENCONTROLS
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENCONTROLS.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogencontrols_ru_ru
go
create view v_autogencontrols_ru_ru as 
select   b2g(gencontrols. gencontrolsid) gencontrolsid,gencontrols. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
gencontrols.versionmajor 
gencontrols_versionmajor 
, 
gencontrols.controlprogid 
gencontrols_controlprogid 
, 
gencontrols.controlclassid 
gencontrols_controlclassid 
, 
gencontrols.versionminor 
gencontrols_versionminor 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(gencontrols.gencontrolsid) id 
, 'gencontrols' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENCONTROLS
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENCONTROLS.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogencontrols_en_us
go
create view v_autogencontrols_en_us as 
select   b2g(gencontrols. gencontrolsid) gencontrolsid,gencontrols. changestamp changestamp, b2g(generator_targetid) generator_targetid, b2g(genpackageid) genpackageid
, 
gencontrols.versionmajor 
gencontrols_versionmajor 
, 
gencontrols.controlprogid 
gencontrols_controlprogid 
, 
gencontrols.controlclassid 
gencontrols_controlclassid 
, 
gencontrols.versionminor 
gencontrols_versionminor 
, b2g(genpackage.instanceid) instanceid 
, genpackage.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(gencontrols.gencontrolsid) id 
, 'gencontrols' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GENCONTROLS
 join GENERATOR_TARGET on GENERATOR_TARGET.GENERATOR_TARGETID=GENCONTROLS.ParentStructRowID 
 join GENPACKAGE on GENPACKAGE.GENPACKAGEID=GENERATOR_TARGET.ParentStructRowID 
 join INSTANCE on GENPACKAGE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autolocalizeinfo
go
create view v_autolocalizeinfo as 
select   b2g(localizeinfo. localizeinfoid) localizeinfoid,localizeinfo. changestamp changestamp
, 
localizeinfo.langshort 
localizeinfo_langshort 
, 
localizeinfo.langfull 
localizeinfo_langfull 
, b2g(localizeinfo.instanceid) instanceid 
, localizeinfo.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(localizeinfo.localizeinfoid) id 
, 'localizeinfo' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from LocalizeInfo
 join INSTANCE on LocalizeInfo.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autolocalizeinfo_ru_ru
go
create view v_autolocalizeinfo_ru_ru as 
select   b2g(localizeinfo. localizeinfoid) localizeinfoid,localizeinfo. changestamp changestamp
, 
localizeinfo.langshort 
localizeinfo_langshort 
, 
localizeinfo.langfull 
localizeinfo_langfull 
, b2g(localizeinfo.instanceid) instanceid 
, localizeinfo.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(localizeinfo.localizeinfoid) id 
, 'localizeinfo' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from LocalizeInfo
 join INSTANCE on LocalizeInfo.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autolocalizeinfo_en_us
go
create view v_autolocalizeinfo_en_us as 
select   b2g(localizeinfo. localizeinfoid) localizeinfoid,localizeinfo. changestamp changestamp
, 
localizeinfo.langshort 
localizeinfo_langshort 
, 
localizeinfo.langfull 
localizeinfo_langfull 
, b2g(localizeinfo.instanceid) instanceid 
, localizeinfo.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(localizeinfo.localizeinfoid) id 
, 'localizeinfo' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from LocalizeInfo
 join INSTANCE on LocalizeInfo.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldtype
go
create view v_autofieldtype as 
select   b2g(fieldtype. fieldtypeid) fieldtypeid,fieldtype. changestamp changestamp
, 
fieldtype.maximum 
fieldtype_maximum 
, 
fieldtype.name 
fieldtype_name 
, 
fieldtype.the_comment 
fieldtype_the_comment 
, 
fieldtype.minimum 
fieldtype_minimum 
, 
 fieldtype.delayedsave  
fieldtype_delayedsave_val, 
 case fieldtype.delayedsave 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_delayedsave 
, 
 fieldtype.allowsize  
fieldtype_allowsize_val, 
 case fieldtype.allowsize 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_allowsize 
, 
 fieldtype.typestyle  
fieldtype_typestyle_val, 
 case fieldtype.typestyle 
when 4 then 'ссылка'
when 1 then 'выражение'
when 5 then 'элемент оформления'
when 3 then 'интервал'
when 2 then 'перечисление'
when 0 then 'скалярный тип'
 else '' 
 end  
fieldtype_typestyle 
, 
 fieldtype.gridsorttype  
fieldtype_gridsorttype_val, 
 case fieldtype.gridsorttype 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
fieldtype_gridsorttype 
, 
 fieldtype.allowlikesearch  
fieldtype_allowlikesearch_val, 
 case fieldtype.allowlikesearch 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_allowlikesearch 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldtype.fieldtypeid) id 
, 'fieldtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDTYPE
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldtype_ru_ru
go
create view v_autofieldtype_ru_ru as 
select   b2g(fieldtype. fieldtypeid) fieldtypeid,fieldtype. changestamp changestamp
, 
fieldtype.maximum 
fieldtype_maximum 
, 
fieldtype.name 
fieldtype_name 
, 
fieldtype.the_comment 
fieldtype_the_comment 
, 
fieldtype.minimum 
fieldtype_minimum 
, 
 fieldtype.delayedsave  
fieldtype_delayedsave_val, 
 case fieldtype.delayedsave 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_delayedsave 
, 
 fieldtype.allowsize  
fieldtype_allowsize_val, 
 case fieldtype.allowsize 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_allowsize 
, 
 fieldtype.typestyle  
fieldtype_typestyle_val, 
 case fieldtype.typestyle 
when 4 then 'ссылка'
when 1 then 'выражение'
when 5 then 'элемент оформления'
when 3 then 'интервал'
when 2 then 'перечисление'
when 0 then 'скалярный тип'
 else '' 
 end  
fieldtype_typestyle 
, 
 fieldtype.gridsorttype  
fieldtype_gridsorttype_val, 
 case fieldtype.gridsorttype 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
fieldtype_gridsorttype 
, 
 fieldtype.allowlikesearch  
fieldtype_allowlikesearch_val, 
 case fieldtype.allowlikesearch 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_allowlikesearch 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldtype.fieldtypeid) id 
, 'fieldtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDTYPE
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldtype_en_us
go
create view v_autofieldtype_en_us as 
select   b2g(fieldtype. fieldtypeid) fieldtypeid,fieldtype. changestamp changestamp
, 
fieldtype.maximum 
fieldtype_maximum 
, 
fieldtype.name 
fieldtype_name 
, 
fieldtype.the_comment 
fieldtype_the_comment 
, 
fieldtype.minimum 
fieldtype_minimum 
, 
 fieldtype.delayedsave  
fieldtype_delayedsave_val, 
 case fieldtype.delayedsave 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_delayedsave 
, 
 fieldtype.allowsize  
fieldtype_allowsize_val, 
 case fieldtype.allowsize 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_allowsize 
, 
 fieldtype.typestyle  
fieldtype_typestyle_val, 
 case fieldtype.typestyle 
when 4 then 'ссылка'
when 1 then 'выражение'
when 5 then 'элемент оформления'
when 3 then 'интервал'
when 2 then 'перечисление'
when 0 then 'скалярный тип'
 else '' 
 end  
fieldtype_typestyle 
, 
 fieldtype.gridsorttype  
fieldtype_gridsorttype_val, 
 case fieldtype.gridsorttype 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
fieldtype_gridsorttype 
, 
 fieldtype.allowlikesearch  
fieldtype_allowlikesearch_val, 
 case fieldtype.allowlikesearch 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldtype_allowlikesearch 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldtype.fieldtypeid) id 
, 'fieldtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDTYPE
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoenumitem
go
create view v_autoenumitem as 
select   b2g(enumitem. enumitemid) enumitemid,enumitem. changestamp changestamp, b2g(fieldtypeid) fieldtypeid
, 
enumitem.name 
enumitem_name 
, 
enumitem.namevalue 
enumitem_namevalue 
, 
enumitem.nameincode 
enumitem_nameincode 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(enumitem.enumitemid) id 
, 'enumitem' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ENUMITEM
 join FIELDTYPE on FIELDTYPE.FIELDTYPEID=ENUMITEM.ParentStructRowID 
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoenumitem_ru_ru
go
create view v_autoenumitem_ru_ru as 
select   b2g(enumitem. enumitemid) enumitemid,enumitem. changestamp changestamp, b2g(fieldtypeid) fieldtypeid
, 
enumitem.name 
enumitem_name 
, 
enumitem.namevalue 
enumitem_namevalue 
, 
enumitem.nameincode 
enumitem_nameincode 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(enumitem.enumitemid) id 
, 'enumitem' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ENUMITEM
 join FIELDTYPE on FIELDTYPE.FIELDTYPEID=ENUMITEM.ParentStructRowID 
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoenumitem_en_us
go
create view v_autoenumitem_en_us as 
select   b2g(enumitem. enumitemid) enumitemid,enumitem. changestamp changestamp, b2g(fieldtypeid) fieldtypeid
, 
enumitem.name 
enumitem_name 
, 
enumitem.namevalue 
enumitem_namevalue 
, 
enumitem.nameincode 
enumitem_nameincode 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(enumitem.enumitemid) id 
, 'enumitem' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ENUMITEM
 join FIELDTYPE on FIELDTYPE.FIELDTYPEID=ENUMITEM.ParentStructRowID 
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldtypemap
go
create view v_autofieldtypemap as 
select   b2g(fieldtypemap. fieldtypemapid) fieldtypemapid,fieldtypemap. changestamp changestamp, b2g(fieldtypeid) fieldtypeid
, 
 b2g(fieldtypemap.target)  
fieldtypemap_target_id, 
 generator_target_brief_f(fieldtypemap.target, null) 
fieldtypemap_target 
, 
fieldtypemap.stoagetype 
fieldtypemap_stoagetype 
, 
fieldtypemap.fixedsize 
fieldtypemap_fixedsize 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldtypemap.fieldtypemapid) id 
, 'fieldtypemap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDTYPEMAP
 join FIELDTYPE on FIELDTYPE.FIELDTYPEID=FIELDTYPEMAP.ParentStructRowID 
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldtypemap_ru_ru
go
create view v_autofieldtypemap_ru_ru as 
select   b2g(fieldtypemap. fieldtypemapid) fieldtypemapid,fieldtypemap. changestamp changestamp, b2g(fieldtypeid) fieldtypeid
, 
 b2g(fieldtypemap.target)  
fieldtypemap_target_id, 
 generator_target_brief_f(fieldtypemap.target, 'ru_ru') 
fieldtypemap_target 
, 
fieldtypemap.stoagetype 
fieldtypemap_stoagetype 
, 
fieldtypemap.fixedsize 
fieldtypemap_fixedsize 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldtypemap.fieldtypemapid) id 
, 'fieldtypemap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDTYPEMAP
 join FIELDTYPE on FIELDTYPE.FIELDTYPEID=FIELDTYPEMAP.ParentStructRowID 
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldtypemap_en_us
go
create view v_autofieldtypemap_en_us as 
select   b2g(fieldtypemap. fieldtypemapid) fieldtypemapid,fieldtypemap. changestamp changestamp, b2g(fieldtypeid) fieldtypeid
, 
 b2g(fieldtypemap.target)  
fieldtypemap_target_id, 
 generator_target_brief_f(fieldtypemap.target, 'en_us') 
fieldtypemap_target 
, 
fieldtypemap.stoagetype 
fieldtypemap_stoagetype 
, 
fieldtypemap.fixedsize 
fieldtypemap_fixedsize 
, b2g(fieldtype.instanceid) instanceid 
, fieldtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldtypemap.fieldtypemapid) id 
, 'fieldtypemap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDTYPEMAP
 join FIELDTYPE on FIELDTYPE.FIELDTYPEID=FIELDTYPEMAP.ParentStructRowID 
 join INSTANCE on FIELDTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosharedmethod
go
create view v_autosharedmethod as 
select   b2g(sharedmethod. sharedmethodid) sharedmethodid,sharedmethod. changestamp changestamp
, 
 b2g(sharedmethod.returntype)  
sharedmethod_returntype_id, 
 fieldtype_brief_f(sharedmethod.returntype, null) 
sharedmethod_returntype 
, 
sharedmethod.the_comment 
sharedmethod_the_comment 
, 
sharedmethod.name 
sharedmethod_name 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(sharedmethod.sharedmethodid) id 
, 'sharedmethod' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SHAREDMETHOD
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosharedmethod_ru_ru
go
create view v_autosharedmethod_ru_ru as 
select   b2g(sharedmethod. sharedmethodid) sharedmethodid,sharedmethod. changestamp changestamp
, 
 b2g(sharedmethod.returntype)  
sharedmethod_returntype_id, 
 fieldtype_brief_f(sharedmethod.returntype, 'ru_ru') 
sharedmethod_returntype 
, 
sharedmethod.the_comment 
sharedmethod_the_comment 
, 
sharedmethod.name 
sharedmethod_name 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(sharedmethod.sharedmethodid) id 
, 'sharedmethod' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SHAREDMETHOD
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosharedmethod_en_us
go
create view v_autosharedmethod_en_us as 
select   b2g(sharedmethod. sharedmethodid) sharedmethodid,sharedmethod. changestamp changestamp
, 
 b2g(sharedmethod.returntype)  
sharedmethod_returntype_id, 
 fieldtype_brief_f(sharedmethod.returntype, 'en_us') 
sharedmethod_returntype 
, 
sharedmethod.the_comment 
sharedmethod_the_comment 
, 
sharedmethod.name 
sharedmethod_name 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(sharedmethod.sharedmethodid) id 
, 'sharedmethod' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SHAREDMETHOD
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoscript
go
create view v_autoscript as 
select   b2g(script. scriptid) scriptid,script. changestamp changestamp, b2g(sharedmethodid) sharedmethodid
, 
 b2g(script.target)  
script_target_id, 
 generator_target_brief_f(script.target, null) 
script_target 
, 
script.code 
script_code 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(script.scriptid) id 
, 'script' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SCRIPT
 join SHAREDMETHOD on SHAREDMETHOD.SHAREDMETHODID=SCRIPT.ParentStructRowID 
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoscript_ru_ru
go
create view v_autoscript_ru_ru as 
select   b2g(script. scriptid) scriptid,script. changestamp changestamp, b2g(sharedmethodid) sharedmethodid
, 
 b2g(script.target)  
script_target_id, 
 generator_target_brief_f(script.target, 'ru_ru') 
script_target 
, 
script.code 
script_code 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(script.scriptid) id 
, 'script' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SCRIPT
 join SHAREDMETHOD on SHAREDMETHOD.SHAREDMETHODID=SCRIPT.ParentStructRowID 
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoscript_en_us
go
create view v_autoscript_en_us as 
select   b2g(script. scriptid) scriptid,script. changestamp changestamp, b2g(sharedmethodid) sharedmethodid
, 
 b2g(script.target)  
script_target_id, 
 generator_target_brief_f(script.target, 'en_us') 
script_target 
, 
script.code 
script_code 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(script.scriptid) id 
, 'script' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SCRIPT
 join SHAREDMETHOD on SHAREDMETHOD.SHAREDMETHODID=SCRIPT.ParentStructRowID 
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoparameters
go
create view v_autoparameters as 
select   b2g(parameters. parametersid) parametersid,parameters. changestamp changestamp, b2g(scriptid) scriptid, b2g(sharedmethodid) sharedmethodid
, 
 b2g(parameters.typeofparm)  
parameters_typeofparm_id, 
 fieldtype_brief_f(parameters.typeofparm, null) 
parameters_typeofparm 
, 
parameters.name 
parameters_name 
, 
parameters.datasize 
parameters_datasize 
, 
parameters.caption 
parameters_caption 
, 
 parameters.allownull  
parameters_allownull_val, 
 case parameters.allownull 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
parameters_allownull 
, 
 b2g(parameters.reftotype)  
parameters_reftotype_id, 
 objecttype_brief_f(parameters.reftotype, null) 
parameters_reftotype 
, 
parameters.sequence 
parameters_sequence 
, 
 parameters.referencetype  
parameters_referencetype_val, 
 case parameters.referencetype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
parameters_referencetype 
, 
 parameters.outparam  
parameters_outparam_val, 
 case parameters.outparam 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
parameters_outparam 
, 
 b2g(parameters.reftopart)  
parameters_reftopart_id, 
 part_brief_f(parameters.reftopart, null) 
parameters_reftopart 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(parameters.parametersid) id 
, 'parameters' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARAMETERS
 join SCRIPT on SCRIPT.SCRIPTID=PARAMETERS.ParentStructRowID 
 join SHAREDMETHOD on SHAREDMETHOD.SHAREDMETHODID=SCRIPT.ParentStructRowID 
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoparameters_ru_ru
go
create view v_autoparameters_ru_ru as 
select   b2g(parameters. parametersid) parametersid,parameters. changestamp changestamp, b2g(scriptid) scriptid, b2g(sharedmethodid) sharedmethodid
, 
 b2g(parameters.typeofparm)  
parameters_typeofparm_id, 
 fieldtype_brief_f(parameters.typeofparm, 'ru_ru') 
parameters_typeofparm 
, 
parameters.name 
parameters_name 
, 
parameters.datasize 
parameters_datasize 
, 
parameters.caption 
parameters_caption 
, 
 parameters.allownull  
parameters_allownull_val, 
 case parameters.allownull 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
parameters_allownull 
, 
 b2g(parameters.reftotype)  
parameters_reftotype_id, 
 objecttype_brief_f(parameters.reftotype, 'ru_ru') 
parameters_reftotype 
, 
parameters.sequence 
parameters_sequence 
, 
 parameters.referencetype  
parameters_referencetype_val, 
 case parameters.referencetype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
parameters_referencetype 
, 
 parameters.outparam  
parameters_outparam_val, 
 case parameters.outparam 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
parameters_outparam 
, 
 b2g(parameters.reftopart)  
parameters_reftopart_id, 
 part_brief_f(parameters.reftopart, 'ru_ru') 
parameters_reftopart 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(parameters.parametersid) id 
, 'parameters' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARAMETERS
 join SCRIPT on SCRIPT.SCRIPTID=PARAMETERS.ParentStructRowID 
 join SHAREDMETHOD on SHAREDMETHOD.SHAREDMETHODID=SCRIPT.ParentStructRowID 
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoparameters_en_us
go
create view v_autoparameters_en_us as 
select   b2g(parameters. parametersid) parametersid,parameters. changestamp changestamp, b2g(scriptid) scriptid, b2g(sharedmethodid) sharedmethodid
, 
 b2g(parameters.typeofparm)  
parameters_typeofparm_id, 
 fieldtype_brief_f(parameters.typeofparm, 'en_us') 
parameters_typeofparm 
, 
parameters.name 
parameters_name 
, 
parameters.datasize 
parameters_datasize 
, 
parameters.caption 
parameters_caption 
, 
 parameters.allownull  
parameters_allownull_val, 
 case parameters.allownull 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
parameters_allownull 
, 
 b2g(parameters.reftotype)  
parameters_reftotype_id, 
 objecttype_brief_f(parameters.reftotype, 'en_us') 
parameters_reftotype 
, 
parameters.sequence 
parameters_sequence 
, 
 parameters.referencetype  
parameters_referencetype_val, 
 case parameters.referencetype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
parameters_referencetype 
, 
 parameters.outparam  
parameters_outparam_val, 
 case parameters.outparam 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
parameters_outparam 
, 
 b2g(parameters.reftopart)  
parameters_reftopart_id, 
 part_brief_f(parameters.reftopart, 'en_us') 
parameters_reftopart 
, b2g(sharedmethod.instanceid) instanceid 
, sharedmethod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(parameters.parametersid) id 
, 'parameters' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARAMETERS
 join SCRIPT on SCRIPT.SCRIPTID=PARAMETERS.ParentStructRowID 
 join SHAREDMETHOD on SHAREDMETHOD.SHAREDMETHODID=SCRIPT.ParentStructRowID 
 join INSTANCE on SHAREDMETHOD.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjecttype
go
create view v_autoobjecttype as 
select   b2g(objecttype. objecttypeid) objecttypeid,objecttype. changestamp changestamp
, 
 objecttype.allowreftoobject  
objecttype_allowreftoobject_val, 
 case objecttype.allowreftoobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_allowreftoobject 
, 
 b2g(objecttype.ondelete)  
objecttype_ondelete_id, 
 typemenu_brief_f(objecttype.ondelete, null) 
objecttype_ondelete 
, 
objecttype.thecomment 
objecttype_thecomment 
, 
 objecttype.replicatype  
objecttype_replicatype_val, 
 case objecttype.replicatype 
when 1 then 'построчно'
when 0 then 'весь документ'
when 2 then 'локальный'
 else '' 
 end  
objecttype_replicatype 
, 
 b2g(objecttype.package)  
objecttype_package_id, 
 mtzapp_brief_f(objecttype.package, null) 
objecttype_package 
, 
 b2g(objecttype.oncreate)  
objecttype_oncreate_id, 
 typemenu_brief_f(objecttype.oncreate, null) 
objecttype_oncreate 
, 
objecttype.name 
objecttype_name 
, 
 objecttype.usearchiving  
objecttype_usearchiving_val, 
 case objecttype.usearchiving 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_usearchiving 
, 
 b2g(objecttype.chooseview)  
objecttype_chooseview_id, 
 partview_brief_f(objecttype.chooseview, null) 
objecttype_chooseview 
, 
objecttype.the_comment 
objecttype_the_comment 
, 
 objecttype.commitfullobject  
objecttype_commitfullobject_val, 
 case objecttype.commitfullobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_commitfullobject 
, 
 b2g(objecttype.onrun)  
objecttype_onrun_id, 
 typemenu_brief_f(objecttype.onrun, null) 
objecttype_onrun 
, 
objecttype.objiconcls 
objecttype_objiconcls 
, 
 objecttype.issingleinstance  
objecttype_issingleinstance_val, 
 case objecttype.issingleinstance 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_issingleinstance 
, 
 objecttype.useownership  
objecttype_useownership_val, 
 case objecttype.useownership 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_useownership 
, 
 objecttype.allowsearch  
objecttype_allowsearch_val, 
 case objecttype.allowsearch 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_allowsearch 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objecttype.objecttypeid) id 
, 'objecttype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJECTTYPE
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjecttype_ru_ru
go
create view v_autoobjecttype_ru_ru as 
select   b2g(objecttype. objecttypeid) objecttypeid,objecttype. changestamp changestamp
, 
 objecttype.allowreftoobject  
objecttype_allowreftoobject_val, 
 case objecttype.allowreftoobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_allowreftoobject 
, 
 b2g(objecttype.ondelete)  
objecttype_ondelete_id, 
 typemenu_brief_f(objecttype.ondelete, 'ru_ru') 
objecttype_ondelete 
, 
objecttype.thecomment 
objecttype_thecomment 
, 
 objecttype.replicatype  
objecttype_replicatype_val, 
 case objecttype.replicatype 
when 1 then 'построчно'
when 0 then 'весь документ'
when 2 then 'локальный'
 else '' 
 end  
objecttype_replicatype 
, 
 b2g(objecttype.package)  
objecttype_package_id, 
 mtzapp_brief_f(objecttype.package, 'ru_ru') 
objecttype_package 
, 
 b2g(objecttype.oncreate)  
objecttype_oncreate_id, 
 typemenu_brief_f(objecttype.oncreate, 'ru_ru') 
objecttype_oncreate 
, 
objecttype.name 
objecttype_name 
, 
 objecttype.usearchiving  
objecttype_usearchiving_val, 
 case objecttype.usearchiving 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_usearchiving 
, 
 b2g(objecttype.chooseview)  
objecttype_chooseview_id, 
 partview_brief_f(objecttype.chooseview, 'ru_ru') 
objecttype_chooseview 
, 
objecttype.the_comment 
objecttype_the_comment 
, 
 objecttype.commitfullobject  
objecttype_commitfullobject_val, 
 case objecttype.commitfullobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_commitfullobject 
, 
 b2g(objecttype.onrun)  
objecttype_onrun_id, 
 typemenu_brief_f(objecttype.onrun, 'ru_ru') 
objecttype_onrun 
, 
objecttype.objiconcls 
objecttype_objiconcls 
, 
 objecttype.issingleinstance  
objecttype_issingleinstance_val, 
 case objecttype.issingleinstance 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_issingleinstance 
, 
 objecttype.useownership  
objecttype_useownership_val, 
 case objecttype.useownership 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_useownership 
, 
 objecttype.allowsearch  
objecttype_allowsearch_val, 
 case objecttype.allowsearch 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_allowsearch 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objecttype.objecttypeid) id 
, 'objecttype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJECTTYPE
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjecttype_en_us
go
create view v_autoobjecttype_en_us as 
select   b2g(objecttype. objecttypeid) objecttypeid,objecttype. changestamp changestamp
, 
 objecttype.allowreftoobject  
objecttype_allowreftoobject_val, 
 case objecttype.allowreftoobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_allowreftoobject 
, 
 b2g(objecttype.ondelete)  
objecttype_ondelete_id, 
 typemenu_brief_f(objecttype.ondelete, 'en_us') 
objecttype_ondelete 
, 
objecttype.thecomment 
objecttype_thecomment 
, 
 objecttype.replicatype  
objecttype_replicatype_val, 
 case objecttype.replicatype 
when 1 then 'построчно'
when 0 then 'весь документ'
when 2 then 'локальный'
 else '' 
 end  
objecttype_replicatype 
, 
 b2g(objecttype.package)  
objecttype_package_id, 
 mtzapp_brief_f(objecttype.package, 'en_us') 
objecttype_package 
, 
 b2g(objecttype.oncreate)  
objecttype_oncreate_id, 
 typemenu_brief_f(objecttype.oncreate, 'en_us') 
objecttype_oncreate 
, 
objecttype.name 
objecttype_name 
, 
 objecttype.usearchiving  
objecttype_usearchiving_val, 
 case objecttype.usearchiving 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_usearchiving 
, 
 b2g(objecttype.chooseview)  
objecttype_chooseview_id, 
 partview_brief_f(objecttype.chooseview, 'en_us') 
objecttype_chooseview 
, 
objecttype.the_comment 
objecttype_the_comment 
, 
 objecttype.commitfullobject  
objecttype_commitfullobject_val, 
 case objecttype.commitfullobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_commitfullobject 
, 
 b2g(objecttype.onrun)  
objecttype_onrun_id, 
 typemenu_brief_f(objecttype.onrun, 'en_us') 
objecttype_onrun 
, 
objecttype.objiconcls 
objecttype_objiconcls 
, 
 objecttype.issingleinstance  
objecttype_issingleinstance_val, 
 case objecttype.issingleinstance 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_issingleinstance 
, 
 objecttype.useownership  
objecttype_useownership_val, 
 case objecttype.useownership 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_useownership 
, 
 objecttype.allowsearch  
objecttype_allowsearch_val, 
 case objecttype.allowsearch 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objecttype_allowsearch 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objecttype.objecttypeid) id 
, 'objecttype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJECTTYPE
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjstatus
go
create view v_autoobjstatus as 
select   b2g(objstatus. objstatusid) objstatusid,objstatus. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
 objstatus.isstartup  
objstatus_isstartup_val, 
 case objstatus.isstartup 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objstatus_isstartup 
, 
 objstatus.isarchive  
objstatus_isarchive_val, 
 case objstatus.isarchive 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objstatus_isarchive 
, 
objstatus.name 
objstatus_name 
, 
objstatus.the_comment 
objstatus_the_comment 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objstatus.objstatusid) id 
, 'objstatus' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJSTATUS
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJSTATUS.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjstatus_ru_ru
go
create view v_autoobjstatus_ru_ru as 
select   b2g(objstatus. objstatusid) objstatusid,objstatus. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
 objstatus.isstartup  
objstatus_isstartup_val, 
 case objstatus.isstartup 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objstatus_isstartup 
, 
 objstatus.isarchive  
objstatus_isarchive_val, 
 case objstatus.isarchive 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objstatus_isarchive 
, 
objstatus.name 
objstatus_name 
, 
objstatus.the_comment 
objstatus_the_comment 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objstatus.objstatusid) id 
, 'objstatus' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJSTATUS
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJSTATUS.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjstatus_en_us
go
create view v_autoobjstatus_en_us as 
select   b2g(objstatus. objstatusid) objstatusid,objstatus. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
 objstatus.isstartup  
objstatus_isstartup_val, 
 case objstatus.isstartup 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objstatus_isstartup 
, 
 objstatus.isarchive  
objstatus_isarchive_val, 
 case objstatus.isarchive 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objstatus_isarchive 
, 
objstatus.name 
objstatus_name 
, 
objstatus.the_comment 
objstatus_the_comment 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objstatus.objstatusid) id 
, 'objstatus' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJSTATUS
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJSTATUS.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonextstate
go
create view v_autonextstate as 
select   b2g(nextstate. nextstateid) nextstateid,nextstate. changestamp changestamp, b2g(objstatusid) objstatusid, b2g(objecttypeid) objecttypeid
, 
 b2g(nextstate.thestate)  
nextstate_thestate_id, 
 objstatus_brief_f(nextstate.thestate, null) 
nextstate_thestate 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(nextstate.nextstateid) id 
, 'nextstate' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from NEXTSTATE
 join OBJSTATUS on OBJSTATUS.OBJSTATUSID=NEXTSTATE.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJSTATUS.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonextstate_ru_ru
go
create view v_autonextstate_ru_ru as 
select   b2g(nextstate. nextstateid) nextstateid,nextstate. changestamp changestamp, b2g(objstatusid) objstatusid, b2g(objecttypeid) objecttypeid
, 
 b2g(nextstate.thestate)  
nextstate_thestate_id, 
 objstatus_brief_f(nextstate.thestate, 'ru_ru') 
nextstate_thestate 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(nextstate.nextstateid) id 
, 'nextstate' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from NEXTSTATE
 join OBJSTATUS on OBJSTATUS.OBJSTATUSID=NEXTSTATE.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJSTATUS.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonextstate_en_us
go
create view v_autonextstate_en_us as 
select   b2g(nextstate. nextstateid) nextstateid,nextstate. changestamp changestamp, b2g(objstatusid) objstatusid, b2g(objecttypeid) objecttypeid
, 
 b2g(nextstate.thestate)  
nextstate_thestate_id, 
 objstatus_brief_f(nextstate.thestate, 'en_us') 
nextstate_thestate 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(nextstate.nextstateid) id 
, 'nextstate' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from NEXTSTATE
 join OBJSTATUS on OBJSTATUS.OBJSTATUSID=NEXTSTATE.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJSTATUS.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjectmode
go
create view v_autoobjectmode as 
select   b2g(objectmode. objectmodeid) objectmodeid,objectmode. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
objectmode.thecomment 
objectmode_thecomment 
, 
objectmode.name 
objectmode_name 
, 
 objectmode.defaultmode  
objectmode_defaultmode_val, 
 case objectmode.defaultmode 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objectmode_defaultmode 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objectmode.objectmodeid) id 
, 'objectmode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJECTMODE
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjectmode_ru_ru
go
create view v_autoobjectmode_ru_ru as 
select   b2g(objectmode. objectmodeid) objectmodeid,objectmode. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
objectmode.thecomment 
objectmode_thecomment 
, 
objectmode.name 
objectmode_name 
, 
 objectmode.defaultmode  
objectmode_defaultmode_val, 
 case objectmode.defaultmode 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objectmode_defaultmode 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objectmode.objectmodeid) id 
, 'objectmode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJECTMODE
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoobjectmode_en_us
go
create view v_autoobjectmode_en_us as 
select   b2g(objectmode. objectmodeid) objectmodeid,objectmode. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
objectmode.thecomment 
objectmode_thecomment 
, 
objectmode.name 
objectmode_name 
, 
 objectmode.defaultmode  
objectmode_defaultmode_val, 
 case objectmode.defaultmode 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
objectmode_defaultmode 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(objectmode.objectmodeid) id 
, 'objectmode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from OBJECTMODE
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autostructrestriction
go
create view v_autostructrestriction as 
select   b2g(structrestriction. structrestrictionid) structrestrictionid,structrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 structrestriction.allowdelete  
structrestriction_allowdelete_val, 
 case structrestriction.allowdelete 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowdelete 
, 
 structrestriction.allowadd  
structrestriction_allowadd_val, 
 case structrestriction.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowadd 
, 
 structrestriction.allowedit  
structrestriction_allowedit_val, 
 case structrestriction.allowedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowedit 
, 
 structrestriction.allowread  
structrestriction_allowread_val, 
 case structrestriction.allowread 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowread 
, 
 b2g(structrestriction.struct)  
structrestriction_struct_id, 
 part_brief_f(structrestriction.struct, null) 
structrestriction_struct 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(structrestriction.structrestrictionid) id 
, 'structrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from STRUCTRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=STRUCTRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autostructrestriction_ru_ru
go
create view v_autostructrestriction_ru_ru as 
select   b2g(structrestriction. structrestrictionid) structrestrictionid,structrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 structrestriction.allowdelete  
structrestriction_allowdelete_val, 
 case structrestriction.allowdelete 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowdelete 
, 
 structrestriction.allowadd  
structrestriction_allowadd_val, 
 case structrestriction.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowadd 
, 
 structrestriction.allowedit  
structrestriction_allowedit_val, 
 case structrestriction.allowedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowedit 
, 
 structrestriction.allowread  
structrestriction_allowread_val, 
 case structrestriction.allowread 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowread 
, 
 b2g(structrestriction.struct)  
structrestriction_struct_id, 
 part_brief_f(structrestriction.struct, 'ru_ru') 
structrestriction_struct 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(structrestriction.structrestrictionid) id 
, 'structrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from STRUCTRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=STRUCTRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autostructrestriction_en_us
go
create view v_autostructrestriction_en_us as 
select   b2g(structrestriction. structrestrictionid) structrestrictionid,structrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 structrestriction.allowdelete  
structrestriction_allowdelete_val, 
 case structrestriction.allowdelete 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowdelete 
, 
 structrestriction.allowadd  
structrestriction_allowadd_val, 
 case structrestriction.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowadd 
, 
 structrestriction.allowedit  
structrestriction_allowedit_val, 
 case structrestriction.allowedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowedit 
, 
 structrestriction.allowread  
structrestriction_allowread_val, 
 case structrestriction.allowread 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
structrestriction_allowread 
, 
 b2g(structrestriction.struct)  
structrestriction_struct_id, 
 part_brief_f(structrestriction.struct, 'en_us') 
structrestriction_struct 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(structrestriction.structrestrictionid) id 
, 'structrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from STRUCTRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=STRUCTRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automethodrestriction
go
create view v_automethodrestriction as 
select   b2g(methodrestriction. methodrestrictionid) methodrestrictionid,methodrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 b2g(methodrestriction.method)  
methodrestriction_method_id, 
 sharedmethod_brief_f(methodrestriction.method, null) 
methodrestriction_method 
, 
 b2g(methodrestriction.part)  
methodrestriction_part_id, 
 part_brief_f(methodrestriction.part, null) 
methodrestriction_part 
, 
 methodrestriction.isrestricted  
methodrestriction_isrestricted_val, 
 case methodrestriction.isrestricted 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
methodrestriction_isrestricted 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(methodrestriction.methodrestrictionid) id 
, 'methodrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from METHODRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=METHODRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automethodrestriction_ru_ru
go
create view v_automethodrestriction_ru_ru as 
select   b2g(methodrestriction. methodrestrictionid) methodrestrictionid,methodrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 b2g(methodrestriction.method)  
methodrestriction_method_id, 
 sharedmethod_brief_f(methodrestriction.method, 'ru_ru') 
methodrestriction_method 
, 
 b2g(methodrestriction.part)  
methodrestriction_part_id, 
 part_brief_f(methodrestriction.part, 'ru_ru') 
methodrestriction_part 
, 
 methodrestriction.isrestricted  
methodrestriction_isrestricted_val, 
 case methodrestriction.isrestricted 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
methodrestriction_isrestricted 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(methodrestriction.methodrestrictionid) id 
, 'methodrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from METHODRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=METHODRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automethodrestriction_en_us
go
create view v_automethodrestriction_en_us as 
select   b2g(methodrestriction. methodrestrictionid) methodrestrictionid,methodrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 b2g(methodrestriction.method)  
methodrestriction_method_id, 
 sharedmethod_brief_f(methodrestriction.method, 'en_us') 
methodrestriction_method 
, 
 b2g(methodrestriction.part)  
methodrestriction_part_id, 
 part_brief_f(methodrestriction.part, 'en_us') 
methodrestriction_part 
, 
 methodrestriction.isrestricted  
methodrestriction_isrestricted_val, 
 case methodrestriction.isrestricted 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
methodrestriction_isrestricted 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(methodrestriction.methodrestrictionid) id 
, 'methodrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from METHODRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=METHODRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldrestriction
go
create view v_autofieldrestriction as 
select   b2g(fieldrestriction. fieldrestrictionid) fieldrestrictionid,fieldrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 fieldrestriction.allowread  
fieldrestriction_allowread_val, 
 case fieldrestriction.allowread 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_allowread 
, 
 b2g(fieldrestriction.thepart)  
fieldrestriction_thepart_id, 
 part_brief_f(fieldrestriction.thepart, null) 
fieldrestriction_thepart 
, 
 fieldrestriction.allowmodify  
fieldrestriction_allowmodify_val, 
 case fieldrestriction.allowmodify 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_allowmodify 
, 
 b2g(fieldrestriction.thefield)  
fieldrestriction_thefield_id, 
 field_brief_f(fieldrestriction.thefield, null) 
fieldrestriction_thefield 
, 
 fieldrestriction.mandatoryfield  
fieldrestriction_mandatoryfield_val, 
 case fieldrestriction.mandatoryfield 
when -1 then 'не существенно'
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_mandatoryfield 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldrestriction.fieldrestrictionid) id 
, 'fieldrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=FIELDRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldrestriction_ru_ru
go
create view v_autofieldrestriction_ru_ru as 
select   b2g(fieldrestriction. fieldrestrictionid) fieldrestrictionid,fieldrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 fieldrestriction.allowread  
fieldrestriction_allowread_val, 
 case fieldrestriction.allowread 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_allowread 
, 
 b2g(fieldrestriction.thepart)  
fieldrestriction_thepart_id, 
 part_brief_f(fieldrestriction.thepart, 'ru_ru') 
fieldrestriction_thepart 
, 
 fieldrestriction.allowmodify  
fieldrestriction_allowmodify_val, 
 case fieldrestriction.allowmodify 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_allowmodify 
, 
 b2g(fieldrestriction.thefield)  
fieldrestriction_thefield_id, 
 field_brief_f(fieldrestriction.thefield, 'ru_ru') 
fieldrestriction_thefield 
, 
 fieldrestriction.mandatoryfield  
fieldrestriction_mandatoryfield_val, 
 case fieldrestriction.mandatoryfield 
when -1 then 'не существенно'
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_mandatoryfield 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldrestriction.fieldrestrictionid) id 
, 'fieldrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=FIELDRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldrestriction_en_us
go
create view v_autofieldrestriction_en_us as 
select   b2g(fieldrestriction. fieldrestrictionid) fieldrestrictionid,fieldrestriction. changestamp changestamp, b2g(objectmodeid) objectmodeid, b2g(objecttypeid) objecttypeid
, 
 fieldrestriction.allowread  
fieldrestriction_allowread_val, 
 case fieldrestriction.allowread 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_allowread 
, 
 b2g(fieldrestriction.thepart)  
fieldrestriction_thepart_id, 
 part_brief_f(fieldrestriction.thepart, 'en_us') 
fieldrestriction_thepart 
, 
 fieldrestriction.allowmodify  
fieldrestriction_allowmodify_val, 
 case fieldrestriction.allowmodify 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_allowmodify 
, 
 b2g(fieldrestriction.thefield)  
fieldrestriction_thefield_id, 
 field_brief_f(fieldrestriction.thefield, 'en_us') 
fieldrestriction_thefield 
, 
 fieldrestriction.mandatoryfield  
fieldrestriction_mandatoryfield_val, 
 case fieldrestriction.mandatoryfield 
when -1 then 'не существенно'
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldrestriction_mandatoryfield 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldrestriction.fieldrestrictionid) id 
, 'fieldrestriction' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDRESTRICTION
 join OBJECTMODE on OBJECTMODE.OBJECTMODEID=FIELDRESTRICTION.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=OBJECTMODE.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotypemenu
go
create view v_autotypemenu as 
select   b2g(typemenu. typemenuid) typemenuid,typemenu. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
typemenu.name 
typemenu_name 
, 
 b2g(typemenu.the_action)  
typemenu_the_action_id, 
 sharedmethod_brief_f(typemenu.the_action, null) 
typemenu_the_action 
, 
typemenu.hotkey 
typemenu_hotkey 
, 
typemenu.caption 
typemenu_caption 
, 
 typemenu.istoolbarbutton  
typemenu_istoolbarbutton_val, 
 case typemenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
typemenu_istoolbarbutton 
, 
typemenu.tooltip 
typemenu_tooltip 
, 
 typemenu.ismenuitem  
typemenu_ismenuitem_val, 
 case typemenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
typemenu_ismenuitem 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(typemenu.typemenuid) id 
, 'typemenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TYPEMENU
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=TYPEMENU.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotypemenu_ru_ru
go
create view v_autotypemenu_ru_ru as 
select   b2g(typemenu. typemenuid) typemenuid,typemenu. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
typemenu.name 
typemenu_name 
, 
 b2g(typemenu.the_action)  
typemenu_the_action_id, 
 sharedmethod_brief_f(typemenu.the_action, 'ru_ru') 
typemenu_the_action 
, 
typemenu.hotkey 
typemenu_hotkey 
, 
typemenu.caption 
typemenu_caption 
, 
 typemenu.istoolbarbutton  
typemenu_istoolbarbutton_val, 
 case typemenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
typemenu_istoolbarbutton 
, 
typemenu.tooltip 
typemenu_tooltip 
, 
 typemenu.ismenuitem  
typemenu_ismenuitem_val, 
 case typemenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
typemenu_ismenuitem 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(typemenu.typemenuid) id 
, 'typemenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TYPEMENU
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=TYPEMENU.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotypemenu_en_us
go
create view v_autotypemenu_en_us as 
select   b2g(typemenu. typemenuid) typemenuid,typemenu. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
typemenu.name 
typemenu_name 
, 
 b2g(typemenu.the_action)  
typemenu_the_action_id, 
 sharedmethod_brief_f(typemenu.the_action, 'en_us') 
typemenu_the_action 
, 
typemenu.hotkey 
typemenu_hotkey 
, 
typemenu.caption 
typemenu_caption 
, 
 typemenu.istoolbarbutton  
typemenu_istoolbarbutton_val, 
 case typemenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
typemenu_istoolbarbutton 
, 
typemenu.tooltip 
typemenu_tooltip 
, 
 typemenu.ismenuitem  
typemenu_ismenuitem_val, 
 case typemenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
typemenu_ismenuitem 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(typemenu.typemenuid) id 
, 'typemenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TYPEMENU
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=TYPEMENU.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoinstancevalidator
go
create view v_autoinstancevalidator as 
select   b2g(instancevalidator. instancevalidatorid) instancevalidatorid,instancevalidator. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
instancevalidator.code 
instancevalidator_code 
, 
 b2g(instancevalidator.target)  
instancevalidator_target_id, 
 generator_target_brief_f(instancevalidator.target, null) 
instancevalidator_target 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(instancevalidator.instancevalidatorid) id 
, 'instancevalidator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from INSTANCEVALIDATOR
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=INSTANCEVALIDATOR.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoinstancevalidator_ru_ru
go
create view v_autoinstancevalidator_ru_ru as 
select   b2g(instancevalidator. instancevalidatorid) instancevalidatorid,instancevalidator. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
instancevalidator.code 
instancevalidator_code 
, 
 b2g(instancevalidator.target)  
instancevalidator_target_id, 
 generator_target_brief_f(instancevalidator.target, 'ru_ru') 
instancevalidator_target 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(instancevalidator.instancevalidatorid) id 
, 'instancevalidator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from INSTANCEVALIDATOR
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=INSTANCEVALIDATOR.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoinstancevalidator_en_us
go
create view v_autoinstancevalidator_en_us as 
select   b2g(instancevalidator. instancevalidatorid) instancevalidatorid,instancevalidator. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
instancevalidator.code 
instancevalidator_code 
, 
 b2g(instancevalidator.target)  
instancevalidator_target_id, 
 generator_target_brief_f(instancevalidator.target, 'en_us') 
instancevalidator_target 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(instancevalidator.instancevalidatorid) id 
, 'instancevalidator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from INSTANCEVALIDATOR
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=INSTANCEVALIDATOR.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopart
go
create view v_autopart as 
select   b2g(part. partid) partid,part. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
 part.isjormalchange  
part_isjormalchange_val, 
 case part.isjormalchange 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_isjormalchange 
, 
part.rulebrief 
part_rulebrief 
, 
 b2g(part.ondelete)  
part_ondelete_id, 
 partmenu_brief_f(part.ondelete, null) 
part_ondelete 
, 
part.name 
part_name 
, 
 part.parttype  
part_parttype_val, 
 case part.parttype 
when 1 then 'коллекция'
when 2 then 'дерево'
when 0 then 'строка'
when 4 then 'расширение с данными'
when 3 then 'расширение'
 else '' 
 end  
part_parttype 
, 
 b2g(part.extenderobject)  
part_extenderobject_id, 
 instance_brief_f(part.extenderobject , null) 
part_extenderobject 
, 
part.particoncls 
part_particoncls 
, 
 b2g(part.oncreate)  
part_oncreate_id, 
 partmenu_brief_f(part.oncreate, null) 
part_oncreate 
, 
 b2g(part.onsave)  
part_onsave_id, 
 partmenu_brief_f(part.onsave, null) 
part_onsave 
, 
 part.integerpkey  
part_integerpkey_val, 
 case part.integerpkey 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_integerpkey 
, 
part.caption 
part_caption 
, 
part.shablonbrief 
part_shablonbrief 
, 
part.sequence 
part_sequence 
, 
part.the_comment 
part_the_comment 
, 
 part.addbehaivor  
part_addbehaivor_val, 
 case part.addbehaivor 
when 0 then 'addform'
when 2 then 'runaction'
when 1 then 'refreshonly'
 else '' 
 end  
part_addbehaivor 
, 
 part.manualregister  
part_manualregister_val, 
 case part.manualregister 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_manualregister 
, 
 b2g(part.onrun)  
part_onrun_id, 
 partmenu_brief_f(part.onrun, null) 
part_onrun 
, 
 part.usearchiving  
part_usearchiving_val, 
 case part.usearchiving 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_usearchiving 
, 
 part.nolog  
part_nolog_val, 
 case part.nolog 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_nolog 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(part.partid) id 
, 'part' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PART
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopart_ru_ru
go
create view v_autopart_ru_ru as 
select   b2g(part. partid) partid,part. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
 part.isjormalchange  
part_isjormalchange_val, 
 case part.isjormalchange 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_isjormalchange 
, 
part.rulebrief 
part_rulebrief 
, 
 b2g(part.ondelete)  
part_ondelete_id, 
 partmenu_brief_f(part.ondelete, 'ru_ru') 
part_ondelete 
, 
part.name 
part_name 
, 
 part.parttype  
part_parttype_val, 
 case part.parttype 
when 1 then 'коллекция'
when 2 then 'дерево'
when 0 then 'строка'
when 4 then 'расширение с данными'
when 3 then 'расширение'
 else '' 
 end  
part_parttype 
, 
 b2g(part.extenderobject)  
part_extenderobject_id, 
 instance_brief_f(part.extenderobject, 'ru_ru') 
part_extenderobject 
, 
part.particoncls 
part_particoncls 
, 
 b2g(part.oncreate)  
part_oncreate_id, 
 partmenu_brief_f(part.oncreate, 'ru_ru') 
part_oncreate 
, 
 b2g(part.onsave)  
part_onsave_id, 
 partmenu_brief_f(part.onsave, 'ru_ru') 
part_onsave 
, 
 part.integerpkey  
part_integerpkey_val, 
 case part.integerpkey 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_integerpkey 
, 
part.caption 
part_caption 
, 
part.shablonbrief 
part_shablonbrief 
, 
part.sequence 
part_sequence 
, 
part.the_comment 
part_the_comment 
, 
 part.addbehaivor  
part_addbehaivor_val, 
 case part.addbehaivor 
when 0 then 'addform'
when 2 then 'runaction'
when 1 then 'refreshonly'
 else '' 
 end  
part_addbehaivor 
, 
 part.manualregister  
part_manualregister_val, 
 case part.manualregister 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_manualregister 
, 
 b2g(part.onrun)  
part_onrun_id, 
 partmenu_brief_f(part.onrun, 'ru_ru') 
part_onrun 
, 
 part.usearchiving  
part_usearchiving_val, 
 case part.usearchiving 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_usearchiving 
, 
 part.nolog  
part_nolog_val, 
 case part.nolog 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_nolog 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(part.partid) id 
, 'part' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PART
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopart_en_us
go
create view v_autopart_en_us as 
select   b2g(part. partid) partid,part. changestamp changestamp, b2g(objecttypeid) objecttypeid
, 
 part.isjormalchange  
part_isjormalchange_val, 
 case part.isjormalchange 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_isjormalchange 
, 
part.rulebrief 
part_rulebrief 
, 
 b2g(part.ondelete)  
part_ondelete_id, 
 partmenu_brief_f(part.ondelete, 'en_us') 
part_ondelete 
, 
part.name 
part_name 
, 
 part.parttype  
part_parttype_val, 
 case part.parttype 
when 1 then 'коллекция'
when 2 then 'дерево'
when 0 then 'строка'
when 4 then 'расширение с данными'
when 3 then 'расширение'
 else '' 
 end  
part_parttype 
, 
 b2g(part.extenderobject)  
part_extenderobject_id, 
 instance_brief_f(part.extenderobject, 'en_us') 
part_extenderobject 
, 
part.particoncls 
part_particoncls 
, 
 b2g(part.oncreate)  
part_oncreate_id, 
 partmenu_brief_f(part.oncreate, 'en_us') 
part_oncreate 
, 
 b2g(part.onsave)  
part_onsave_id, 
 partmenu_brief_f(part.onsave, 'en_us') 
part_onsave 
, 
 part.integerpkey  
part_integerpkey_val, 
 case part.integerpkey 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_integerpkey 
, 
part.caption 
part_caption 
, 
part.shablonbrief 
part_shablonbrief 
, 
part.sequence 
part_sequence 
, 
part.the_comment 
part_the_comment 
, 
 part.addbehaivor  
part_addbehaivor_val, 
 case part.addbehaivor 
when 0 then 'addform'
when 2 then 'runaction'
when 1 then 'refreshonly'
 else '' 
 end  
part_addbehaivor 
, 
 part.manualregister  
part_manualregister_val, 
 case part.manualregister 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_manualregister 
, 
 b2g(part.onrun)  
part_onrun_id, 
 partmenu_brief_f(part.onrun, 'en_us') 
part_onrun 
, 
 part.usearchiving  
part_usearchiving_val, 
 case part.usearchiving 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_usearchiving 
, 
 part.nolog  
part_nolog_val, 
 case part.nolog 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
part_nolog 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(part.partid) id 
, 'part' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PART
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartmenu
go
create view v_autopartmenu as 
select   b2g(partmenu. partmenuid) partmenuid,partmenu. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
partmenu.hotkey 
partmenu_hotkey 
, 
partmenu.name 
partmenu_name 
, 
 partmenu.istoolbarbutton  
partmenu_istoolbarbutton_val, 
 case partmenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partmenu_istoolbarbutton 
, 
partmenu.caption 
partmenu_caption 
, 
partmenu.tooltip 
partmenu_tooltip 
, 
 partmenu.ismenuitem  
partmenu_ismenuitem_val, 
 case partmenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partmenu_ismenuitem 
, 
 b2g(partmenu.the_action)  
partmenu_the_action_id, 
 sharedmethod_brief_f(partmenu.the_action, null) 
partmenu_the_action 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partmenu.partmenuid) id 
, 'partmenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTMENU
 join PART on PART.PARTID=PARTMENU.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartmenu_ru_ru
go
create view v_autopartmenu_ru_ru as 
select   b2g(partmenu. partmenuid) partmenuid,partmenu. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
partmenu.hotkey 
partmenu_hotkey 
, 
partmenu.name 
partmenu_name 
, 
 partmenu.istoolbarbutton  
partmenu_istoolbarbutton_val, 
 case partmenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partmenu_istoolbarbutton 
, 
partmenu.caption 
partmenu_caption 
, 
partmenu.tooltip 
partmenu_tooltip 
, 
 partmenu.ismenuitem  
partmenu_ismenuitem_val, 
 case partmenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partmenu_ismenuitem 
, 
 b2g(partmenu.the_action)  
partmenu_the_action_id, 
 sharedmethod_brief_f(partmenu.the_action, 'ru_ru') 
partmenu_the_action 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partmenu.partmenuid) id 
, 'partmenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTMENU
 join PART on PART.PARTID=PARTMENU.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartmenu_en_us
go
create view v_autopartmenu_en_us as 
select   b2g(partmenu. partmenuid) partmenuid,partmenu. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
partmenu.hotkey 
partmenu_hotkey 
, 
partmenu.name 
partmenu_name 
, 
 partmenu.istoolbarbutton  
partmenu_istoolbarbutton_val, 
 case partmenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partmenu_istoolbarbutton 
, 
partmenu.caption 
partmenu_caption 
, 
partmenu.tooltip 
partmenu_tooltip 
, 
 partmenu.ismenuitem  
partmenu_ismenuitem_val, 
 case partmenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partmenu_ismenuitem 
, 
 b2g(partmenu.the_action)  
partmenu_the_action_id, 
 sharedmethod_brief_f(partmenu.the_action, 'en_us') 
partmenu_the_action 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partmenu.partmenuid) id 
, 'partmenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTMENU
 join PART on PART.PARTID=PARTMENU.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartparammap
go
create view v_autopartparammap as 
select   b2g(partparammap. partparammapid) partparammapid,partparammap. changestamp changestamp, b2g(partmenuid) partmenuid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 partparammap.noedit  
partparammap_noedit_val, 
 case partparammap.noedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partparammap_noedit 
, 
partparammap.fieldname 
partparammap_fieldname 
, 
partparammap.paramname 
partparammap_paramname 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partparammap.partparammapid) id 
, 'partparammap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTPARAMMAP
 join PARTMENU on PARTMENU.PARTMENUID=PARTPARAMMAP.ParentStructRowID 
 join PART on PART.PARTID=PARTMENU.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartparammap_ru_ru
go
create view v_autopartparammap_ru_ru as 
select   b2g(partparammap. partparammapid) partparammapid,partparammap. changestamp changestamp, b2g(partmenuid) partmenuid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 partparammap.noedit  
partparammap_noedit_val, 
 case partparammap.noedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partparammap_noedit 
, 
partparammap.fieldname 
partparammap_fieldname 
, 
partparammap.paramname 
partparammap_paramname 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partparammap.partparammapid) id 
, 'partparammap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTPARAMMAP
 join PARTMENU on PARTMENU.PARTMENUID=PARTPARAMMAP.ParentStructRowID 
 join PART on PART.PARTID=PARTMENU.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartparammap_en_us
go
create view v_autopartparammap_en_us as 
select   b2g(partparammap. partparammapid) partparammapid,partparammap. changestamp changestamp, b2g(partmenuid) partmenuid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 partparammap.noedit  
partparammap_noedit_val, 
 case partparammap.noedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partparammap_noedit 
, 
partparammap.fieldname 
partparammap_fieldname 
, 
partparammap.paramname 
partparammap_paramname 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partparammap.partparammapid) id 
, 'partparammap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTPARAMMAP
 join PARTMENU on PARTMENU.PARTMENUID=PARTPARAMMAP.ParentStructRowID 
 join PART on PART.PARTID=PARTMENU.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartview
go
create view v_autopartview as 
select   b2g(partview. partviewid) partviewid,partview. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
partview.the_alias 
partview_the_alias 
, 
partview.filterfield2 
partview_filterfield2 
, 
 partview.forchoose  
partview_forchoose_val, 
 case partview.forchoose 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partview_forchoose 
, 
partview.filterfield3 
partview_filterfield3 
, 
partview.filterfield0 
partview_filterfield0 
, 
partview.filterfield1 
partview_filterfield1 
, 
partview.name 
partview_name 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partview.partviewid) id 
, 'partview' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTVIEW
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartview_ru_ru
go
create view v_autopartview_ru_ru as 
select   b2g(partview. partviewid) partviewid,partview. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
partview.the_alias 
partview_the_alias 
, 
partview.filterfield2 
partview_filterfield2 
, 
 partview.forchoose  
partview_forchoose_val, 
 case partview.forchoose 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partview_forchoose 
, 
partview.filterfield3 
partview_filterfield3 
, 
partview.filterfield0 
partview_filterfield0 
, 
partview.filterfield1 
partview_filterfield1 
, 
partview.name 
partview_name 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partview.partviewid) id 
, 'partview' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTVIEW
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartview_en_us
go
create view v_autopartview_en_us as 
select   b2g(partview. partviewid) partviewid,partview. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
partview.the_alias 
partview_the_alias 
, 
partview.filterfield2 
partview_filterfield2 
, 
 partview.forchoose  
partview_forchoose_val, 
 case partview.forchoose 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
partview_forchoose 
, 
partview.filterfield3 
partview_filterfield3 
, 
partview.filterfield0 
partview_filterfield0 
, 
partview.filterfield1 
partview_filterfield1 
, 
partview.name 
partview_name 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partview.partviewid) id 
, 'partview' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTVIEW
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoviewcolumn
go
create view v_autoviewcolumn as 
select   b2g(viewcolumn. viewcolumnid) viewcolumnid,viewcolumn. changestamp changestamp, b2g(partviewid) partviewid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 viewcolumn.forcombo  
viewcolumn_forcombo_val, 
 case viewcolumn.forcombo 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
viewcolumn_forcombo 
, 
viewcolumn.expression 
viewcolumn_expression 
, 
 viewcolumn.aggregation  
viewcolumn_aggregation_val, 
 case viewcolumn.aggregation 
when 3 then 'sum'
when 1 then 'avg'
when 6 then 'custom'
when 0 then 'none'
when 2 then 'count'
when 5 then 'max'
when 4 then 'min'
 else '' 
 end  
viewcolumn_aggregation 
, 
 b2g(viewcolumn.field)  
viewcolumn_field_id, 
 field_brief_f(viewcolumn.field, null) 
viewcolumn_field 
, 
viewcolumn.the_alias 
viewcolumn_the_alias 
, 
viewcolumn.sequence 
viewcolumn_sequence 
, 
viewcolumn.name 
viewcolumn_name 
, 
 b2g(viewcolumn.frompart)  
viewcolumn_frompart_id, 
 part_brief_f(viewcolumn.frompart, null) 
viewcolumn_frompart 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(viewcolumn.viewcolumnid) id 
, 'viewcolumn' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ViewColumn
 join PARTVIEW on PARTVIEW.PARTVIEWID=ViewColumn.ParentStructRowID 
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoviewcolumn_ru_ru
go
create view v_autoviewcolumn_ru_ru as 
select   b2g(viewcolumn. viewcolumnid) viewcolumnid,viewcolumn. changestamp changestamp, b2g(partviewid) partviewid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 viewcolumn.forcombo  
viewcolumn_forcombo_val, 
 case viewcolumn.forcombo 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
viewcolumn_forcombo 
, 
viewcolumn.expression 
viewcolumn_expression 
, 
 viewcolumn.aggregation  
viewcolumn_aggregation_val, 
 case viewcolumn.aggregation 
when 3 then 'sum'
when 1 then 'avg'
when 6 then 'custom'
when 0 then 'none'
when 2 then 'count'
when 5 then 'max'
when 4 then 'min'
 else '' 
 end  
viewcolumn_aggregation 
, 
 b2g(viewcolumn.field)  
viewcolumn_field_id, 
 field_brief_f(viewcolumn.field, 'ru_ru') 
viewcolumn_field 
, 
viewcolumn.the_alias 
viewcolumn_the_alias 
, 
viewcolumn.sequence 
viewcolumn_sequence 
, 
viewcolumn.name 
viewcolumn_name 
, 
 b2g(viewcolumn.frompart)  
viewcolumn_frompart_id, 
 part_brief_f(viewcolumn.frompart, 'ru_ru') 
viewcolumn_frompart 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(viewcolumn.viewcolumnid) id 
, 'viewcolumn' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ViewColumn
 join PARTVIEW on PARTVIEW.PARTVIEWID=ViewColumn.ParentStructRowID 
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoviewcolumn_en_us
go
create view v_autoviewcolumn_en_us as 
select   b2g(viewcolumn. viewcolumnid) viewcolumnid,viewcolumn. changestamp changestamp, b2g(partviewid) partviewid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 viewcolumn.forcombo  
viewcolumn_forcombo_val, 
 case viewcolumn.forcombo 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
viewcolumn_forcombo 
, 
viewcolumn.expression 
viewcolumn_expression 
, 
 viewcolumn.aggregation  
viewcolumn_aggregation_val, 
 case viewcolumn.aggregation 
when 3 then 'sum'
when 1 then 'avg'
when 6 then 'custom'
when 0 then 'none'
when 2 then 'count'
when 5 then 'max'
when 4 then 'min'
 else '' 
 end  
viewcolumn_aggregation 
, 
 b2g(viewcolumn.field)  
viewcolumn_field_id, 
 field_brief_f(viewcolumn.field, 'en_us') 
viewcolumn_field 
, 
viewcolumn.the_alias 
viewcolumn_the_alias 
, 
viewcolumn.sequence 
viewcolumn_sequence 
, 
viewcolumn.name 
viewcolumn_name 
, 
 b2g(viewcolumn.frompart)  
viewcolumn_frompart_id, 
 part_brief_f(viewcolumn.frompart, 'en_us') 
viewcolumn_frompart 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(viewcolumn.viewcolumnid) id 
, 'viewcolumn' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ViewColumn
 join PARTVIEW on PARTVIEW.PARTVIEWID=ViewColumn.ParentStructRowID 
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartview_lnk
go
create view v_autopartview_lnk as 
select   b2g(partview_lnk. partview_lnkid) partview_lnkid,partview_lnk. changestamp changestamp, b2g(partviewid) partviewid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(partview_lnk.theview)  
partview_lnk_theview_id, 
 partview_brief_f(partview_lnk.theview, null) 
partview_lnk_theview 
, 
 b2g(partview_lnk.thejoinsource)  
partview_lnk_thejoinsource_id, 
 viewcolumn_brief_f(partview_lnk.thejoinsource, null) 
partview_lnk_thejoinsource 
, 
 b2g(partview_lnk.thejoindestination)  
partview_lnk_thejoindestination_id, 
 viewcolumn_brief_f(partview_lnk.thejoindestination, null) 
partview_lnk_thejoindestination 
, 
 partview_lnk.reftype  
partview_lnk_reftype_val, 
 case partview_lnk.reftype 
when 0 then 'нет'
when 4 then 'связка parentstructrowid  (в передлах объекта)'
when 3 then 'связка instanceid (в передлах объекта)'
when 1 then 'ссылка на объект'
when 2 then 'ссылка на строку'
 else '' 
 end  
partview_lnk_reftype 
, 
partview_lnk.handjoin 
partview_lnk_handjoin 
, 
partview_lnk.seq 
partview_lnk_seq 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partview_lnk.partview_lnkid) id 
, 'partview_lnk' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTVIEW_LNK
 join PARTVIEW on PARTVIEW.PARTVIEWID=PARTVIEW_LNK.ParentStructRowID 
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartview_lnk_ru_ru
go
create view v_autopartview_lnk_ru_ru as 
select   b2g(partview_lnk. partview_lnkid) partview_lnkid,partview_lnk. changestamp changestamp, b2g(partviewid) partviewid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(partview_lnk.theview)  
partview_lnk_theview_id, 
 partview_brief_f(partview_lnk.theview, 'ru_ru') 
partview_lnk_theview 
, 
 b2g(partview_lnk.thejoinsource)  
partview_lnk_thejoinsource_id, 
 viewcolumn_brief_f(partview_lnk.thejoinsource, 'ru_ru') 
partview_lnk_thejoinsource 
, 
 b2g(partview_lnk.thejoindestination)  
partview_lnk_thejoindestination_id, 
 viewcolumn_brief_f(partview_lnk.thejoindestination, 'ru_ru') 
partview_lnk_thejoindestination 
, 
 partview_lnk.reftype  
partview_lnk_reftype_val, 
 case partview_lnk.reftype 
when 0 then 'нет'
when 4 then 'связка parentstructrowid  (в передлах объекта)'
when 3 then 'связка instanceid (в передлах объекта)'
when 1 then 'ссылка на объект'
when 2 then 'ссылка на строку'
 else '' 
 end  
partview_lnk_reftype 
, 
partview_lnk.handjoin 
partview_lnk_handjoin 
, 
partview_lnk.seq 
partview_lnk_seq 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partview_lnk.partview_lnkid) id 
, 'partview_lnk' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTVIEW_LNK
 join PARTVIEW on PARTVIEW.PARTVIEWID=PARTVIEW_LNK.ParentStructRowID 
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autopartview_lnk_en_us
go
create view v_autopartview_lnk_en_us as 
select   b2g(partview_lnk. partview_lnkid) partview_lnkid,partview_lnk. changestamp changestamp, b2g(partviewid) partviewid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(partview_lnk.theview)  
partview_lnk_theview_id, 
 partview_brief_f(partview_lnk.theview, 'en_us') 
partview_lnk_theview 
, 
 b2g(partview_lnk.thejoinsource)  
partview_lnk_thejoinsource_id, 
 viewcolumn_brief_f(partview_lnk.thejoinsource, 'en_us') 
partview_lnk_thejoinsource 
, 
 b2g(partview_lnk.thejoindestination)  
partview_lnk_thejoindestination_id, 
 viewcolumn_brief_f(partview_lnk.thejoindestination, 'en_us') 
partview_lnk_thejoindestination 
, 
 partview_lnk.reftype  
partview_lnk_reftype_val, 
 case partview_lnk.reftype 
when 0 then 'нет'
when 4 then 'связка parentstructrowid  (в передлах объекта)'
when 3 then 'связка instanceid (в передлах объекта)'
when 1 then 'ссылка на объект'
when 2 then 'ссылка на строку'
 else '' 
 end  
partview_lnk_reftype 
, 
partview_lnk.handjoin 
partview_lnk_handjoin 
, 
partview_lnk.seq 
partview_lnk_seq 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(partview_lnk.partview_lnkid) id 
, 'partview_lnk' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from PARTVIEW_LNK
 join PARTVIEW on PARTVIEW.PARTVIEWID=PARTVIEW_LNK.ParentStructRowID 
 join PART on PART.PARTID=PARTVIEW.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autovalidator
go
create view v_autovalidator as 
select   b2g(validator. validatorid) validatorid,validator. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(validator.target)  
validator_target_id, 
 generator_target_brief_f(validator.target, null) 
validator_target 
, 
validator.code 
validator_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(validator.validatorid) id 
, 'validator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from VALIDATOR
 join PART on PART.PARTID=VALIDATOR.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autovalidator_ru_ru
go
create view v_autovalidator_ru_ru as 
select   b2g(validator. validatorid) validatorid,validator. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(validator.target)  
validator_target_id, 
 generator_target_brief_f(validator.target, 'ru_ru') 
validator_target 
, 
validator.code 
validator_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(validator.validatorid) id 
, 'validator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from VALIDATOR
 join PART on PART.PARTID=VALIDATOR.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autovalidator_en_us
go
create view v_autovalidator_en_us as 
select   b2g(validator. validatorid) validatorid,validator. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(validator.target)  
validator_target_id, 
 generator_target_brief_f(validator.target, 'en_us') 
validator_target 
, 
validator.code 
validator_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(validator.validatorid) id 
, 'validator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from VALIDATOR
 join PART on PART.PARTID=VALIDATOR.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autouniqueconstraint
go
create view v_autouniqueconstraint as 
select   b2g(uniqueconstraint. uniqueconstraintid) uniqueconstraintid,uniqueconstraint. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 uniqueconstraint.perparent  
uniqueconstraint_perparent_val, 
 case uniqueconstraint.perparent 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
uniqueconstraint_perparent 
, 
uniqueconstraint.name 
uniqueconstraint_name 
, 
uniqueconstraint.thecomment 
uniqueconstraint_thecomment 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(uniqueconstraint.uniqueconstraintid) id 
, 'uniqueconstraint' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from UNIQUECONSTRAINT
 join PART on PART.PARTID=UNIQUECONSTRAINT.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autouniqueconstraint_ru_ru
go
create view v_autouniqueconstraint_ru_ru as 
select   b2g(uniqueconstraint. uniqueconstraintid) uniqueconstraintid,uniqueconstraint. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 uniqueconstraint.perparent  
uniqueconstraint_perparent_val, 
 case uniqueconstraint.perparent 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
uniqueconstraint_perparent 
, 
uniqueconstraint.name 
uniqueconstraint_name 
, 
uniqueconstraint.thecomment 
uniqueconstraint_thecomment 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(uniqueconstraint.uniqueconstraintid) id 
, 'uniqueconstraint' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from UNIQUECONSTRAINT
 join PART on PART.PARTID=UNIQUECONSTRAINT.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autouniqueconstraint_en_us
go
create view v_autouniqueconstraint_en_us as 
select   b2g(uniqueconstraint. uniqueconstraintid) uniqueconstraintid,uniqueconstraint. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 uniqueconstraint.perparent  
uniqueconstraint_perparent_val, 
 case uniqueconstraint.perparent 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
uniqueconstraint_perparent 
, 
uniqueconstraint.name 
uniqueconstraint_name 
, 
uniqueconstraint.thecomment 
uniqueconstraint_thecomment 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(uniqueconstraint.uniqueconstraintid) id 
, 'uniqueconstraint' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from UNIQUECONSTRAINT
 join PART on PART.PARTID=UNIQUECONSTRAINT.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoconstraintfield
go
create view v_autoconstraintfield as 
select   b2g(constraintfield. constraintfieldid) constraintfieldid,constraintfield. changestamp changestamp, b2g(uniqueconstraintid) uniqueconstraintid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(constraintfield.thefield)  
constraintfield_thefield_id, 
 field_brief_f(constraintfield.thefield, null) 
constraintfield_thefield 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(constraintfield.constraintfieldid) id 
, 'constraintfield' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from CONSTRAINTFIELD
 join UNIQUECONSTRAINT on UNIQUECONSTRAINT.UNIQUECONSTRAINTID=CONSTRAINTFIELD.ParentStructRowID 
 join PART on PART.PARTID=UNIQUECONSTRAINT.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoconstraintfield_ru_ru
go
create view v_autoconstraintfield_ru_ru as 
select   b2g(constraintfield. constraintfieldid) constraintfieldid,constraintfield. changestamp changestamp, b2g(uniqueconstraintid) uniqueconstraintid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(constraintfield.thefield)  
constraintfield_thefield_id, 
 field_brief_f(constraintfield.thefield, 'ru_ru') 
constraintfield_thefield 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(constraintfield.constraintfieldid) id 
, 'constraintfield' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from CONSTRAINTFIELD
 join UNIQUECONSTRAINT on UNIQUECONSTRAINT.UNIQUECONSTRAINTID=CONSTRAINTFIELD.ParentStructRowID 
 join PART on PART.PARTID=UNIQUECONSTRAINT.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoconstraintfield_en_us
go
create view v_autoconstraintfield_en_us as 
select   b2g(constraintfield. constraintfieldid) constraintfieldid,constraintfield. changestamp changestamp, b2g(uniqueconstraintid) uniqueconstraintid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(constraintfield.thefield)  
constraintfield_thefield_id, 
 field_brief_f(constraintfield.thefield, 'en_us') 
constraintfield_thefield 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(constraintfield.constraintfieldid) id 
, 'constraintfield' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from CONSTRAINTFIELD
 join UNIQUECONSTRAINT on UNIQUECONSTRAINT.UNIQUECONSTRAINTID=CONSTRAINTFIELD.ParentStructRowID 
 join PART on PART.PARTID=UNIQUECONSTRAINT.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoextenderinterface
go
create view v_autoextenderinterface as 
select   b2g(extenderinterface. extenderinterfaceid) extenderinterfaceid,extenderinterface. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(extenderinterface.targetplatform)  
extenderinterface_targetplatform_id, 
 generator_target_brief_f(extenderinterface.targetplatform, null) 
extenderinterface_targetplatform 
, 
extenderinterface.thename 
extenderinterface_thename 
, 
extenderinterface.theconfig 
extenderinterface_theconfig 
, 
extenderinterface.theobject 
extenderinterface_theobject 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(extenderinterface.extenderinterfaceid) id 
, 'extenderinterface' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ExtenderInterface
 join PART on PART.PARTID=ExtenderInterface.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoextenderinterface_ru_ru
go
create view v_autoextenderinterface_ru_ru as 
select   b2g(extenderinterface. extenderinterfaceid) extenderinterfaceid,extenderinterface. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(extenderinterface.targetplatform)  
extenderinterface_targetplatform_id, 
 generator_target_brief_f(extenderinterface.targetplatform, 'ru_ru') 
extenderinterface_targetplatform 
, 
extenderinterface.thename 
extenderinterface_thename 
, 
extenderinterface.theconfig 
extenderinterface_theconfig 
, 
extenderinterface.theobject 
extenderinterface_theobject 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(extenderinterface.extenderinterfaceid) id 
, 'extenderinterface' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ExtenderInterface
 join PART on PART.PARTID=ExtenderInterface.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoextenderinterface_en_us
go
create view v_autoextenderinterface_en_us as 
select   b2g(extenderinterface. extenderinterfaceid) extenderinterfaceid,extenderinterface. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(extenderinterface.targetplatform)  
extenderinterface_targetplatform_id, 
 generator_target_brief_f(extenderinterface.targetplatform, 'en_us') 
extenderinterface_targetplatform 
, 
extenderinterface.thename 
extenderinterface_thename 
, 
extenderinterface.theconfig 
extenderinterface_theconfig 
, 
extenderinterface.theobject 
extenderinterface_theobject 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(extenderinterface.extenderinterfaceid) id 
, 'extenderinterface' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ExtenderInterface
 join PART on PART.PARTID=ExtenderInterface.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofield
go
create view v_autofield as 
select   b2g(field. fieldid) fieldid,field. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
field.datasize 
field_datasize 
, 
 field.istabbrief  
field_istabbrief_val, 
 case field.istabbrief 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_istabbrief 
, 
field.sequence 
field_sequence 
, 
field.fieldgroupbox 
field_fieldgroupbox 
, 
field.thenameclass 
field_thenameclass 
, 
 field.allownull  
field_allownull_val, 
 case field.allownull 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_allownull 
, 
 b2g(field.fieldtype)  
field_fieldtype_id, 
 fieldtype_brief_f(field.fieldtype, null) 
field_fieldtype 
, 
 b2g(field.thenumerator)  
field_thenumerator_id, 
 instance_brief_f(field.thenumerator , null) 
field_thenumerator 
, 
 field.referencetype  
field_referencetype_val, 
 case field.referencetype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
field_referencetype 
, 
 field.internalreference  
field_internalreference_val, 
 case field.internalreference 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_internalreference 
, 
field.caption 
field_caption 
, 
 field.createrefonly  
field_createrefonly_val, 
 case field.createrefonly 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_createrefonly 
, 
field.zonetemplate 
field_zonetemplate 
, 
field.name 
field_name 
, 
 field.isbrief  
field_isbrief_val, 
 case field.isbrief 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_isbrief 
, 
 b2g(field.numberdatefield)  
field_numberdatefield_id, 
 field_brief_f(field.numberdatefield, null) 
field_numberdatefield 
, 
 b2g(field.reftotype)  
field_reftotype_id, 
 objecttype_brief_f(field.reftotype, null) 
field_reftotype 
, 
field.themask 
field_themask 
, 
field.tabname 
field_tabname 
, 
field.shablonbrief 
field_shablonbrief 
, 
field.thestyle 
field_thestyle 
, 
 b2g(field.reftopart)  
field_reftopart_id, 
 part_brief_f(field.reftopart, null) 
field_reftopart 
, 
field.thecomment 
field_thecomment 
, 
 field.isautonumber  
field_isautonumber_val, 
 case field.isautonumber 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_isautonumber 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(field.fieldid) id 
, 'field' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELD
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofield_ru_ru
go
create view v_autofield_ru_ru as 
select   b2g(field. fieldid) fieldid,field. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
field.datasize 
field_datasize 
, 
 field.istabbrief  
field_istabbrief_val, 
 case field.istabbrief 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_istabbrief 
, 
field.sequence 
field_sequence 
, 
field.fieldgroupbox 
field_fieldgroupbox 
, 
field.thenameclass 
field_thenameclass 
, 
 field.allownull  
field_allownull_val, 
 case field.allownull 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_allownull 
, 
 b2g(field.fieldtype)  
field_fieldtype_id, 
 fieldtype_brief_f(field.fieldtype, 'ru_ru') 
field_fieldtype 
, 
 b2g(field.thenumerator)  
field_thenumerator_id, 
 instance_brief_f(field.thenumerator, 'ru_ru') 
field_thenumerator 
, 
 field.referencetype  
field_referencetype_val, 
 case field.referencetype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
field_referencetype 
, 
 field.internalreference  
field_internalreference_val, 
 case field.internalreference 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_internalreference 
, 
field.caption 
field_caption 
, 
 field.createrefonly  
field_createrefonly_val, 
 case field.createrefonly 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_createrefonly 
, 
field.zonetemplate 
field_zonetemplate 
, 
field.name 
field_name 
, 
 field.isbrief  
field_isbrief_val, 
 case field.isbrief 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_isbrief 
, 
 b2g(field.numberdatefield)  
field_numberdatefield_id, 
 field_brief_f(field.numberdatefield, 'ru_ru') 
field_numberdatefield 
, 
 b2g(field.reftotype)  
field_reftotype_id, 
 objecttype_brief_f(field.reftotype, 'ru_ru') 
field_reftotype 
, 
field.themask 
field_themask 
, 
field.tabname 
field_tabname 
, 
field.shablonbrief 
field_shablonbrief 
, 
field.thestyle 
field_thestyle 
, 
 b2g(field.reftopart)  
field_reftopart_id, 
 part_brief_f(field.reftopart, 'ru_ru') 
field_reftopart 
, 
field.thecomment 
field_thecomment 
, 
 field.isautonumber  
field_isautonumber_val, 
 case field.isautonumber 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_isautonumber 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(field.fieldid) id 
, 'field' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELD
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofield_en_us
go
create view v_autofield_en_us as 
select   b2g(field. fieldid) fieldid,field. changestamp changestamp, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
field.datasize 
field_datasize 
, 
 field.istabbrief  
field_istabbrief_val, 
 case field.istabbrief 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_istabbrief 
, 
field.sequence 
field_sequence 
, 
field.fieldgroupbox 
field_fieldgroupbox 
, 
field.thenameclass 
field_thenameclass 
, 
 field.allownull  
field_allownull_val, 
 case field.allownull 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_allownull 
, 
 b2g(field.fieldtype)  
field_fieldtype_id, 
 fieldtype_brief_f(field.fieldtype, 'en_us') 
field_fieldtype 
, 
 b2g(field.thenumerator)  
field_thenumerator_id, 
 instance_brief_f(field.thenumerator, 'en_us') 
field_thenumerator 
, 
 field.referencetype  
field_referencetype_val, 
 case field.referencetype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
field_referencetype 
, 
 field.internalreference  
field_internalreference_val, 
 case field.internalreference 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_internalreference 
, 
field.caption 
field_caption 
, 
 field.createrefonly  
field_createrefonly_val, 
 case field.createrefonly 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_createrefonly 
, 
field.zonetemplate 
field_zonetemplate 
, 
field.name 
field_name 
, 
 field.isbrief  
field_isbrief_val, 
 case field.isbrief 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_isbrief 
, 
 b2g(field.numberdatefield)  
field_numberdatefield_id, 
 field_brief_f(field.numberdatefield, 'en_us') 
field_numberdatefield 
, 
 b2g(field.reftotype)  
field_reftotype_id, 
 objecttype_brief_f(field.reftotype, 'en_us') 
field_reftotype 
, 
field.themask 
field_themask 
, 
field.tabname 
field_tabname 
, 
field.shablonbrief 
field_shablonbrief 
, 
field.thestyle 
field_thestyle 
, 
 b2g(field.reftopart)  
field_reftopart_id, 
 part_brief_f(field.reftopart, 'en_us') 
field_reftopart 
, 
field.thecomment 
field_thecomment 
, 
 field.isautonumber  
field_isautonumber_val, 
 case field.isautonumber 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
field_isautonumber 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(field.fieldid) id 
, 'field' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELD
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofldextenders
go
create view v_autofldextenders as 
select   b2g(fldextenders. fldextendersid) fldextendersid,fldextenders. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fldextenders.targetplatform)  
fldextenders_targetplatform_id, 
 generator_target_brief_f(fldextenders.targetplatform, null) 
fldextenders_targetplatform 
, 
fldextenders.theconfig 
fldextenders_theconfig 
, 
fldextenders.thename 
fldextenders_thename 
, 
fldextenders.theobject 
fldextenders_theobject 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fldextenders.fldextendersid) id 
, 'fldextenders' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FldExtenders
 join FIELD on FIELD.FIELDID=FldExtenders.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofldextenders_ru_ru
go
create view v_autofldextenders_ru_ru as 
select   b2g(fldextenders. fldextendersid) fldextendersid,fldextenders. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fldextenders.targetplatform)  
fldextenders_targetplatform_id, 
 generator_target_brief_f(fldextenders.targetplatform, 'ru_ru') 
fldextenders_targetplatform 
, 
fldextenders.theconfig 
fldextenders_theconfig 
, 
fldextenders.thename 
fldextenders_thename 
, 
fldextenders.theobject 
fldextenders_theobject 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fldextenders.fldextendersid) id 
, 'fldextenders' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FldExtenders
 join FIELD on FIELD.FIELDID=FldExtenders.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofldextenders_en_us
go
create view v_autofldextenders_en_us as 
select   b2g(fldextenders. fldextendersid) fldextendersid,fldextenders. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fldextenders.targetplatform)  
fldextenders_targetplatform_id, 
 generator_target_brief_f(fldextenders.targetplatform, 'en_us') 
fldextenders_targetplatform 
, 
fldextenders.theconfig 
fldextenders_theconfig 
, 
fldextenders.thename 
fldextenders_thename 
, 
fldextenders.theobject 
fldextenders_theobject 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fldextenders.fldextendersid) id 
, 'fldextenders' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FldExtenders
 join FIELD on FIELD.FIELDID=FldExtenders.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldsrcdef
go
create view v_autofieldsrcdef as 
select   b2g(fieldsrcdef. fieldsrcdefid) fieldsrcdefid,fieldsrcdef. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldsrcdef.sortfield 
fieldsrcdef_sortfield 
, 
fieldsrcdef.descriptionstring 
fieldsrcdef_descriptionstring 
, 
fieldsrcdef.provider 
fieldsrcdef_provider 
, 
fieldsrcdef.filterstring 
fieldsrcdef_filterstring 
, 
 fieldsrcdef.dontshowdialog  
fieldsrcdef_dontshowdialog_val, 
 case fieldsrcdef.dontshowdialog 
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldsrcdef_dontshowdialog 
, 
fieldsrcdef.datasource 
fieldsrcdef_datasource 
, 
fieldsrcdef.connectionstring 
fieldsrcdef_connectionstring 
, 
fieldsrcdef.idfield 
fieldsrcdef_idfield 
, 
fieldsrcdef.briefstring 
fieldsrcdef_briefstring 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldsrcdef.fieldsrcdefid) id 
, 'fieldsrcdef' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDSRCDEF
 join FIELD on FIELD.FIELDID=FIELDSRCDEF.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldsrcdef_ru_ru
go
create view v_autofieldsrcdef_ru_ru as 
select   b2g(fieldsrcdef. fieldsrcdefid) fieldsrcdefid,fieldsrcdef. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldsrcdef.sortfield 
fieldsrcdef_sortfield 
, 
fieldsrcdef.descriptionstring 
fieldsrcdef_descriptionstring 
, 
fieldsrcdef.provider 
fieldsrcdef_provider 
, 
fieldsrcdef.filterstring 
fieldsrcdef_filterstring 
, 
 fieldsrcdef.dontshowdialog  
fieldsrcdef_dontshowdialog_val, 
 case fieldsrcdef.dontshowdialog 
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldsrcdef_dontshowdialog 
, 
fieldsrcdef.datasource 
fieldsrcdef_datasource 
, 
fieldsrcdef.connectionstring 
fieldsrcdef_connectionstring 
, 
fieldsrcdef.idfield 
fieldsrcdef_idfield 
, 
fieldsrcdef.briefstring 
fieldsrcdef_briefstring 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldsrcdef.fieldsrcdefid) id 
, 'fieldsrcdef' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDSRCDEF
 join FIELD on FIELD.FIELDID=FIELDSRCDEF.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldsrcdef_en_us
go
create view v_autofieldsrcdef_en_us as 
select   b2g(fieldsrcdef. fieldsrcdefid) fieldsrcdefid,fieldsrcdef. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldsrcdef.sortfield 
fieldsrcdef_sortfield 
, 
fieldsrcdef.descriptionstring 
fieldsrcdef_descriptionstring 
, 
fieldsrcdef.provider 
fieldsrcdef_provider 
, 
fieldsrcdef.filterstring 
fieldsrcdef_filterstring 
, 
 fieldsrcdef.dontshowdialog  
fieldsrcdef_dontshowdialog_val, 
 case fieldsrcdef.dontshowdialog 
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldsrcdef_dontshowdialog 
, 
fieldsrcdef.datasource 
fieldsrcdef_datasource 
, 
fieldsrcdef.connectionstring 
fieldsrcdef_connectionstring 
, 
fieldsrcdef.idfield 
fieldsrcdef_idfield 
, 
fieldsrcdef.briefstring 
fieldsrcdef_briefstring 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldsrcdef.fieldsrcdefid) id 
, 'fieldsrcdef' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDSRCDEF
 join FIELD on FIELD.FIELDID=FIELDSRCDEF.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autodinamicfilterscript
go
create view v_autodinamicfilterscript as 
select   b2g(dinamicfilterscript. dinamicfilterscriptid) dinamicfilterscriptid,dinamicfilterscript. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(dinamicfilterscript.target)  
dinamicfilterscript_target_id, 
 generator_target_brief_f(dinamicfilterscript.target, null) 
dinamicfilterscript_target 
, 
dinamicfilterscript.code 
dinamicfilterscript_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(dinamicfilterscript.dinamicfilterscriptid) id 
, 'dinamicfilterscript' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from DINAMICFILTERSCRIPT
 join FIELD on FIELD.FIELDID=DINAMICFILTERSCRIPT.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autodinamicfilterscript_ru_ru
go
create view v_autodinamicfilterscript_ru_ru as 
select   b2g(dinamicfilterscript. dinamicfilterscriptid) dinamicfilterscriptid,dinamicfilterscript. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(dinamicfilterscript.target)  
dinamicfilterscript_target_id, 
 generator_target_brief_f(dinamicfilterscript.target, 'ru_ru') 
dinamicfilterscript_target 
, 
dinamicfilterscript.code 
dinamicfilterscript_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(dinamicfilterscript.dinamicfilterscriptid) id 
, 'dinamicfilterscript' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from DINAMICFILTERSCRIPT
 join FIELD on FIELD.FIELDID=DINAMICFILTERSCRIPT.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autodinamicfilterscript_en_us
go
create view v_autodinamicfilterscript_en_us as 
select   b2g(dinamicfilterscript. dinamicfilterscriptid) dinamicfilterscriptid,dinamicfilterscript. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(dinamicfilterscript.target)  
dinamicfilterscript_target_id, 
 generator_target_brief_f(dinamicfilterscript.target, 'en_us') 
dinamicfilterscript_target 
, 
dinamicfilterscript.code 
dinamicfilterscript_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(dinamicfilterscript.dinamicfilterscriptid) id 
, 'dinamicfilterscript' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from DINAMICFILTERSCRIPT
 join FIELD on FIELD.FIELDID=DINAMICFILTERSCRIPT.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldexpression
go
create view v_autofieldexpression as 
select   b2g(fieldexpression. fieldexpressionid) fieldexpressionid,fieldexpression. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fieldexpression.target)  
fieldexpression_target_id, 
 generator_target_brief_f(fieldexpression.target, null) 
fieldexpression_target 
, 
fieldexpression.code 
fieldexpression_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldexpression.fieldexpressionid) id 
, 'fieldexpression' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDEXPRESSION
 join FIELD on FIELD.FIELDID=FIELDEXPRESSION.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldexpression_ru_ru
go
create view v_autofieldexpression_ru_ru as 
select   b2g(fieldexpression. fieldexpressionid) fieldexpressionid,fieldexpression. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fieldexpression.target)  
fieldexpression_target_id, 
 generator_target_brief_f(fieldexpression.target, 'ru_ru') 
fieldexpression_target 
, 
fieldexpression.code 
fieldexpression_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldexpression.fieldexpressionid) id 
, 'fieldexpression' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDEXPRESSION
 join FIELD on FIELD.FIELDID=FIELDEXPRESSION.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldexpression_en_us
go
create view v_autofieldexpression_en_us as 
select   b2g(fieldexpression. fieldexpressionid) fieldexpressionid,fieldexpression. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fieldexpression.target)  
fieldexpression_target_id, 
 generator_target_brief_f(fieldexpression.target, 'en_us') 
fieldexpression_target 
, 
fieldexpression.code 
fieldexpression_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldexpression.fieldexpressionid) id 
, 'fieldexpression' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDEXPRESSION
 join FIELD on FIELD.FIELDID=FIELDEXPRESSION.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldvalidator
go
create view v_autofieldvalidator as 
select   b2g(fieldvalidator. fieldvalidatorid) fieldvalidatorid,fieldvalidator. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fieldvalidator.target)  
fieldvalidator_target_id, 
 generator_target_brief_f(fieldvalidator.target, null) 
fieldvalidator_target 
, 
fieldvalidator.code 
fieldvalidator_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldvalidator.fieldvalidatorid) id 
, 'fieldvalidator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDVALIDATOR
 join FIELD on FIELD.FIELDID=FIELDVALIDATOR.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldvalidator_ru_ru
go
create view v_autofieldvalidator_ru_ru as 
select   b2g(fieldvalidator. fieldvalidatorid) fieldvalidatorid,fieldvalidator. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fieldvalidator.target)  
fieldvalidator_target_id, 
 generator_target_brief_f(fieldvalidator.target, 'ru_ru') 
fieldvalidator_target 
, 
fieldvalidator.code 
fieldvalidator_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldvalidator.fieldvalidatorid) id 
, 'fieldvalidator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDVALIDATOR
 join FIELD on FIELD.FIELDID=FIELDVALIDATOR.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldvalidator_en_us
go
create view v_autofieldvalidator_en_us as 
select   b2g(fieldvalidator. fieldvalidatorid) fieldvalidatorid,fieldvalidator. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
 b2g(fieldvalidator.target)  
fieldvalidator_target_id, 
 generator_target_brief_f(fieldvalidator.target, 'en_us') 
fieldvalidator_target 
, 
fieldvalidator.code 
fieldvalidator_code 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldvalidator.fieldvalidatorid) id 
, 'fieldvalidator' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDVALIDATOR
 join FIELD on FIELD.FIELDID=FIELDVALIDATOR.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldmenu
go
create view v_autofieldmenu as 
select   b2g(fieldmenu. fieldmenuid) fieldmenuid,fieldmenu. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldmenu.hotkey 
fieldmenu_hotkey 
, 
 fieldmenu.istoolbarbutton  
fieldmenu_istoolbarbutton_val, 
 case fieldmenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldmenu_istoolbarbutton 
, 
fieldmenu.tooltip 
fieldmenu_tooltip 
, 
 b2g(fieldmenu.actionid)  
fieldmenu_actionid_id, 
 sharedmethod_brief_f(fieldmenu.actionid, null) 
fieldmenu_actionid 
, 
 fieldmenu.ismenuitem  
fieldmenu_ismenuitem_val, 
 case fieldmenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldmenu_ismenuitem 
, 
fieldmenu.caption 
fieldmenu_caption 
, 
fieldmenu.name 
fieldmenu_name 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldmenu.fieldmenuid) id 
, 'fieldmenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDMENU
 join FIELD on FIELD.FIELDID=FIELDMENU.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldmenu_ru_ru
go
create view v_autofieldmenu_ru_ru as 
select   b2g(fieldmenu. fieldmenuid) fieldmenuid,fieldmenu. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldmenu.hotkey 
fieldmenu_hotkey 
, 
 fieldmenu.istoolbarbutton  
fieldmenu_istoolbarbutton_val, 
 case fieldmenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldmenu_istoolbarbutton 
, 
fieldmenu.tooltip 
fieldmenu_tooltip 
, 
 b2g(fieldmenu.actionid)  
fieldmenu_actionid_id, 
 sharedmethod_brief_f(fieldmenu.actionid, 'ru_ru') 
fieldmenu_actionid 
, 
 fieldmenu.ismenuitem  
fieldmenu_ismenuitem_val, 
 case fieldmenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldmenu_ismenuitem 
, 
fieldmenu.caption 
fieldmenu_caption 
, 
fieldmenu.name 
fieldmenu_name 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldmenu.fieldmenuid) id 
, 'fieldmenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDMENU
 join FIELD on FIELD.FIELDID=FIELDMENU.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldmenu_en_us
go
create view v_autofieldmenu_en_us as 
select   b2g(fieldmenu. fieldmenuid) fieldmenuid,fieldmenu. changestamp changestamp, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldmenu.hotkey 
fieldmenu_hotkey 
, 
 fieldmenu.istoolbarbutton  
fieldmenu_istoolbarbutton_val, 
 case fieldmenu.istoolbarbutton 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldmenu_istoolbarbutton 
, 
fieldmenu.tooltip 
fieldmenu_tooltip 
, 
 b2g(fieldmenu.actionid)  
fieldmenu_actionid_id, 
 sharedmethod_brief_f(fieldmenu.actionid, 'en_us') 
fieldmenu_actionid 
, 
 fieldmenu.ismenuitem  
fieldmenu_ismenuitem_val, 
 case fieldmenu.ismenuitem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldmenu_ismenuitem 
, 
fieldmenu.caption 
fieldmenu_caption 
, 
fieldmenu.name 
fieldmenu_name 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldmenu.fieldmenuid) id 
, 'fieldmenu' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDMENU
 join FIELD on FIELD.FIELDID=FIELDMENU.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldparammap
go
create view v_autofieldparammap as 
select   b2g(fieldparammap. fieldparammapid) fieldparammapid,fieldparammap. changestamp changestamp, b2g(fieldmenuid) fieldmenuid, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldparammap.paramname 
fieldparammap_paramname 
, 
 fieldparammap.noedit  
fieldparammap_noedit_val, 
 case fieldparammap.noedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldparammap_noedit 
, 
fieldparammap.fieldname 
fieldparammap_fieldname 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldparammap.fieldparammapid) id 
, 'fieldparammap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDPARAMMAP
 join FIELDMENU on FIELDMENU.FIELDMENUID=FIELDPARAMMAP.ParentStructRowID 
 join FIELD on FIELD.FIELDID=FIELDMENU.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldparammap_ru_ru
go
create view v_autofieldparammap_ru_ru as 
select   b2g(fieldparammap. fieldparammapid) fieldparammapid,fieldparammap. changestamp changestamp, b2g(fieldmenuid) fieldmenuid, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldparammap.paramname 
fieldparammap_paramname 
, 
 fieldparammap.noedit  
fieldparammap_noedit_val, 
 case fieldparammap.noedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldparammap_noedit 
, 
fieldparammap.fieldname 
fieldparammap_fieldname 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldparammap.fieldparammapid) id 
, 'fieldparammap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDPARAMMAP
 join FIELDMENU on FIELDMENU.FIELDMENUID=FIELDPARAMMAP.ParentStructRowID 
 join FIELD on FIELD.FIELDID=FIELDMENU.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofieldparammap_en_us
go
create view v_autofieldparammap_en_us as 
select   b2g(fieldparammap. fieldparammapid) fieldparammapid,fieldparammap. changestamp changestamp, b2g(fieldmenuid) fieldmenuid, b2g(fieldid) fieldid, b2g(partid) partid, b2g(objecttypeid) objecttypeid
, 
fieldparammap.paramname 
fieldparammap_paramname 
, 
 fieldparammap.noedit  
fieldparammap_noedit_val, 
 case fieldparammap.noedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fieldparammap_noedit 
, 
fieldparammap.fieldname 
fieldparammap_fieldname 
, b2g(objecttype.instanceid) instanceid 
, objecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fieldparammap.fieldparammapid) id 
, 'fieldparammap' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FIELDPARAMMAP
 join FIELDMENU on FIELDMENU.FIELDMENUID=FIELDPARAMMAP.ParentStructRowID 
 join FIELD on FIELD.FIELDID=FIELDMENU.ParentStructRowID 
 join PART on PART.PARTID=FIELD.ParentStructRowID 
 join OBJECTTYPE on OBJECTTYPE.OBJECTTYPEID=PART.ParentStructRowID 
 join INSTANCE on OBJECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzapp
go
create view v_automtzapp as 
select   b2g(mtzapp. mtzappid) mtzappid,mtzapp. changestamp changestamp
, 
mtzapp.dbname 
mtzapp_dbname 
, 
mtzapp.name 
mtzapp_name 
, 
mtzapp.thecomment 
mtzapp_thecomment 
, b2g(mtzapp.instanceid) instanceid 
, mtzapp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzapp.mtzappid) id 
, 'mtzapp' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZAPP
 join INSTANCE on MTZAPP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzapp_ru_ru
go
create view v_automtzapp_ru_ru as 
select   b2g(mtzapp. mtzappid) mtzappid,mtzapp. changestamp changestamp
, 
mtzapp.dbname 
mtzapp_dbname 
, 
mtzapp.name 
mtzapp_name 
, 
mtzapp.thecomment 
mtzapp_thecomment 
, b2g(mtzapp.instanceid) instanceid 
, mtzapp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzapp.mtzappid) id 
, 'mtzapp' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZAPP
 join INSTANCE on MTZAPP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzapp_en_us
go
create view v_automtzapp_en_us as 
select   b2g(mtzapp. mtzappid) mtzappid,mtzapp. changestamp changestamp
, 
mtzapp.dbname 
mtzapp_dbname 
, 
mtzapp.name 
mtzapp_name 
, 
mtzapp.thecomment 
mtzapp_thecomment 
, b2g(mtzapp.instanceid) instanceid 
, mtzapp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzapp.mtzappid) id 
, 'mtzapp' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZAPP
 join INSTANCE on MTZAPP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoparentpackage
go
create view v_autoparentpackage as 
select   b2g(parentpackage. parentpackageid) parentpackageid,parentpackage. changestamp changestamp, b2g(mtzappid) mtzappid
, 
 b2g(parentpackage.package)  
parentpackage_package_id, 
 mtzapp_brief_f(parentpackage.package, null) 
parentpackage_package 
, b2g(mtzapp.instanceid) instanceid 
, mtzapp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(parentpackage.parentpackageid) id 
, 'parentpackage' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ParentPackage
 join MTZAPP on MTZAPP.MTZAPPID=ParentPackage.ParentStructRowID 
 join INSTANCE on MTZAPP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoparentpackage_ru_ru
go
create view v_autoparentpackage_ru_ru as 
select   b2g(parentpackage. parentpackageid) parentpackageid,parentpackage. changestamp changestamp, b2g(mtzappid) mtzappid
, 
 b2g(parentpackage.package)  
parentpackage_package_id, 
 mtzapp_brief_f(parentpackage.package, 'ru_ru') 
parentpackage_package 
, b2g(mtzapp.instanceid) instanceid 
, mtzapp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(parentpackage.parentpackageid) id 
, 'parentpackage' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ParentPackage
 join MTZAPP on MTZAPP.MTZAPPID=ParentPackage.ParentStructRowID 
 join INSTANCE on MTZAPP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoparentpackage_en_us
go
create view v_autoparentpackage_en_us as 
select   b2g(parentpackage. parentpackageid) parentpackageid,parentpackage. changestamp changestamp, b2g(mtzappid) mtzappid
, 
 b2g(parentpackage.package)  
parentpackage_package_id, 
 mtzapp_brief_f(parentpackage.package, 'en_us') 
parentpackage_package 
, b2g(mtzapp.instanceid) instanceid 
, mtzapp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(parentpackage.parentpackageid) id 
, 'parentpackage' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ParentPackage
 join MTZAPP on MTZAPP.MTZAPPID=ParentPackage.ParentStructRowID 
 join INSTANCE on MTZAPP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournalcolumn
go
create view v_autojournalcolumn as 
select   b2g(journalcolumn. journalcolumnid) journalcolumnid,journalcolumn. changestamp changestamp
, 
journalcolumn.sequence 
journalcolumn_sequence 
, 
 journalcolumn.groupaggregation  
journalcolumn_groupaggregation_val, 
 case journalcolumn.groupaggregation 
when 3 then 'sum'
when 1 then 'avg'
when 6 then 'custom'
when 0 then 'none'
when 2 then 'count'
when 5 then 'max'
when 4 then 'min'
 else '' 
 end  
journalcolumn_groupaggregation 
, 
 journalcolumn.columnalignment  
journalcolumn_columnalignment_val, 
 case journalcolumn.columnalignment 
when 6 then 'right top'
when 7 then 'right center'
when 8 then 'right bottom'
when 3 then 'center top'
when 0 then 'left top'
when 4 then 'center center'
when 1 then 'left center'
when 5 then 'center bottom'
when 2 then 'left bottom'
 else '' 
 end  
journalcolumn_columnalignment 
, 
journalcolumn.name 
journalcolumn_name 
, 
 journalcolumn.colsort  
journalcolumn_colsort_val, 
 case journalcolumn.colsort 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
journalcolumn_colsort 
, b2g(journalcolumn.instanceid) instanceid 
, journalcolumn.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journalcolumn.journalcolumnid) id 
, 'journalcolumn' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JournalColumn
 join INSTANCE on JournalColumn.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournalcolumn_ru_ru
go
create view v_autojournalcolumn_ru_ru as 
select   b2g(journalcolumn. journalcolumnid) journalcolumnid,journalcolumn. changestamp changestamp
, 
journalcolumn.sequence 
journalcolumn_sequence 
, 
 journalcolumn.groupaggregation  
journalcolumn_groupaggregation_val, 
 case journalcolumn.groupaggregation 
when 3 then 'sum'
when 1 then 'avg'
when 6 then 'custom'
when 0 then 'none'
when 2 then 'count'
when 5 then 'max'
when 4 then 'min'
 else '' 
 end  
journalcolumn_groupaggregation 
, 
 journalcolumn.columnalignment  
journalcolumn_columnalignment_val, 
 case journalcolumn.columnalignment 
when 6 then 'right top'
when 7 then 'right center'
when 8 then 'right bottom'
when 3 then 'center top'
when 0 then 'left top'
when 4 then 'center center'
when 1 then 'left center'
when 5 then 'center bottom'
when 2 then 'left bottom'
 else '' 
 end  
journalcolumn_columnalignment 
, 
journalcolumn.name 
journalcolumn_name 
, 
 journalcolumn.colsort  
journalcolumn_colsort_val, 
 case journalcolumn.colsort 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
journalcolumn_colsort 
, b2g(journalcolumn.instanceid) instanceid 
, journalcolumn.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journalcolumn.journalcolumnid) id 
, 'journalcolumn' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JournalColumn
 join INSTANCE on JournalColumn.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournalcolumn_en_us
go
create view v_autojournalcolumn_en_us as 
select   b2g(journalcolumn. journalcolumnid) journalcolumnid,journalcolumn. changestamp changestamp
, 
journalcolumn.sequence 
journalcolumn_sequence 
, 
 journalcolumn.groupaggregation  
journalcolumn_groupaggregation_val, 
 case journalcolumn.groupaggregation 
when 3 then 'sum'
when 1 then 'avg'
when 6 then 'custom'
when 0 then 'none'
when 2 then 'count'
when 5 then 'max'
when 4 then 'min'
 else '' 
 end  
journalcolumn_groupaggregation 
, 
 journalcolumn.columnalignment  
journalcolumn_columnalignment_val, 
 case journalcolumn.columnalignment 
when 6 then 'right top'
when 7 then 'right center'
when 8 then 'right bottom'
when 3 then 'center top'
when 0 then 'left top'
when 4 then 'center center'
when 1 then 'left center'
when 5 then 'center bottom'
when 2 then 'left bottom'
 else '' 
 end  
journalcolumn_columnalignment 
, 
journalcolumn.name 
journalcolumn_name 
, 
 journalcolumn.colsort  
journalcolumn_colsort_val, 
 case journalcolumn.colsort 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
journalcolumn_colsort 
, b2g(journalcolumn.instanceid) instanceid 
, journalcolumn.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journalcolumn.journalcolumnid) id 
, 'journalcolumn' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JournalColumn
 join INSTANCE on JournalColumn.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojcolumnsource
go
create view v_autojcolumnsource as 
select   b2g(jcolumnsource. jcolumnsourceid) jcolumnsourceid,jcolumnsource. changestamp changestamp, b2g(journalcolumnid) journalcolumnid
, 
jcolumnsource.viewfield 
jcolumnsource_viewfield 
, 
 b2g(jcolumnsource.srcpartview)  
jcolumnsource_srcpartview_id, 
 journalsrc_brief_f(jcolumnsource.srcpartview, null) 
jcolumnsource_srcpartview 
, b2g(journalcolumn.instanceid) instanceid 
, journalcolumn.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(jcolumnsource.jcolumnsourceid) id 
, 'jcolumnsource' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JColumnSource
 join JournalColumn on JournalColumn.JournalColumnID=JColumnSource.ParentStructRowID 
 join INSTANCE on JournalColumn.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojcolumnsource_ru_ru
go
create view v_autojcolumnsource_ru_ru as 
select   b2g(jcolumnsource. jcolumnsourceid) jcolumnsourceid,jcolumnsource. changestamp changestamp, b2g(journalcolumnid) journalcolumnid
, 
jcolumnsource.viewfield 
jcolumnsource_viewfield 
, 
 b2g(jcolumnsource.srcpartview)  
jcolumnsource_srcpartview_id, 
 journalsrc_brief_f(jcolumnsource.srcpartview, 'ru_ru') 
jcolumnsource_srcpartview 
, b2g(journalcolumn.instanceid) instanceid 
, journalcolumn.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(jcolumnsource.jcolumnsourceid) id 
, 'jcolumnsource' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JColumnSource
 join JournalColumn on JournalColumn.JournalColumnID=JColumnSource.ParentStructRowID 
 join INSTANCE on JournalColumn.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojcolumnsource_en_us
go
create view v_autojcolumnsource_en_us as 
select   b2g(jcolumnsource. jcolumnsourceid) jcolumnsourceid,jcolumnsource. changestamp changestamp, b2g(journalcolumnid) journalcolumnid
, 
jcolumnsource.viewfield 
jcolumnsource_viewfield 
, 
 b2g(jcolumnsource.srcpartview)  
jcolumnsource_srcpartview_id, 
 journalsrc_brief_f(jcolumnsource.srcpartview, 'en_us') 
jcolumnsource_srcpartview 
, b2g(journalcolumn.instanceid) instanceid 
, journalcolumn.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(jcolumnsource.jcolumnsourceid) id 
, 'jcolumnsource' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JColumnSource
 join JournalColumn on JournalColumn.JournalColumnID=JColumnSource.ParentStructRowID 
 join INSTANCE on JournalColumn.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournalsrc
go
create view v_autojournalsrc as 
select   b2g(journalsrc. journalsrcid) journalsrcid,journalsrc. changestamp changestamp
, 
 journalsrc.onrun  
journalsrc_onrun_val, 
 case journalsrc.onrun 
when 2 then 'открыть документ'
when 0 then 'ничего не делать'
when 1 then 'открыть строку'
 else '' 
 end  
journalsrc_onrun 
, 
journalsrc.partview 
journalsrc_partview 
, 
journalsrc.viewalias 
journalsrc_viewalias 
, 
journalsrc.openmode 
journalsrc_openmode 
, b2g(journalsrc.instanceid) instanceid 
, journalsrc.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journalsrc.journalsrcid) id 
, 'journalsrc' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JournalSrc
 join INSTANCE on JournalSrc.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournalsrc_ru_ru
go
create view v_autojournalsrc_ru_ru as 
select   b2g(journalsrc. journalsrcid) journalsrcid,journalsrc. changestamp changestamp
, 
 journalsrc.onrun  
journalsrc_onrun_val, 
 case journalsrc.onrun 
when 2 then 'открыть документ'
when 0 then 'ничего не делать'
when 1 then 'открыть строку'
 else '' 
 end  
journalsrc_onrun 
, 
journalsrc.partview 
journalsrc_partview 
, 
journalsrc.viewalias 
journalsrc_viewalias 
, 
journalsrc.openmode 
journalsrc_openmode 
, b2g(journalsrc.instanceid) instanceid 
, journalsrc.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journalsrc.journalsrcid) id 
, 'journalsrc' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JournalSrc
 join INSTANCE on JournalSrc.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournalsrc_en_us
go
create view v_autojournalsrc_en_us as 
select   b2g(journalsrc. journalsrcid) journalsrcid,journalsrc. changestamp changestamp
, 
 journalsrc.onrun  
journalsrc_onrun_val, 
 case journalsrc.onrun 
when 2 then 'открыть документ'
when 0 then 'ничего не делать'
when 1 then 'открыть строку'
 else '' 
 end  
journalsrc_onrun 
, 
journalsrc.partview 
journalsrc_partview 
, 
journalsrc.viewalias 
journalsrc_viewalias 
, 
journalsrc.openmode 
journalsrc_openmode 
, b2g(journalsrc.instanceid) instanceid 
, journalsrc.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journalsrc.journalsrcid) id 
, 'journalsrc' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from JournalSrc
 join INSTANCE on JournalSrc.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournal
go
create view v_autojournal as 
select   b2g(journal. journalid) journalid,journal. changestamp changestamp
, 
journal.the_alias 
journal_the_alias 
, 
journal.jrnliconcls 
journal_jrnliconcls 
, 
 journal.usefavorites  
journal_usefavorites_val, 
 case journal.usefavorites 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
journal_usefavorites 
, 
journal.name 
journal_name 
, 
journal.thecomment 
journal_thecomment 
, b2g(journal.instanceid) instanceid 
, journal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journal.journalid) id 
, 'journal' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Journal
 join INSTANCE on Journal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournal_ru_ru
go
create view v_autojournal_ru_ru as 
select   b2g(journal. journalid) journalid,journal. changestamp changestamp
, 
journal.the_alias 
journal_the_alias 
, 
journal.jrnliconcls 
journal_jrnliconcls 
, 
 journal.usefavorites  
journal_usefavorites_val, 
 case journal.usefavorites 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
journal_usefavorites 
, 
journal.name 
journal_name 
, 
journal.thecomment 
journal_thecomment 
, b2g(journal.instanceid) instanceid 
, journal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journal.journalid) id 
, 'journal' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Journal
 join INSTANCE on Journal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autojournal_en_us
go
create view v_autojournal_en_us as 
select   b2g(journal. journalid) journalid,journal. changestamp changestamp
, 
journal.the_alias 
journal_the_alias 
, 
journal.jrnliconcls 
journal_jrnliconcls 
, 
 journal.usefavorites  
journal_usefavorites_val, 
 case journal.usefavorites 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
journal_usefavorites 
, 
journal.name 
journal_name 
, 
journal.thecomment 
journal_thecomment 
, b2g(journal.instanceid) instanceid 
, journal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(journal.journalid) id 
, 'journal' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Journal
 join INSTANCE on Journal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autobpc_info
go
create view v_autobpc_info as 
select   b2g(bpc_info. bpc_infoid) bpc_infoid,bpc_info. changestamp changestamp
, 
bpc_info.name 
bpc_info_name 
, b2g(bpc_info.instanceid) instanceid 
, bpc_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(bpc_info.bpc_infoid) id 
, 'bpc_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from bpc_info
 join INSTANCE on bpc_info.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autobpc_info_ru_ru
go
create view v_autobpc_info_ru_ru as 
select   b2g(bpc_info. bpc_infoid) bpc_infoid,bpc_info. changestamp changestamp
, 
bpc_info.name 
bpc_info_name 
, b2g(bpc_info.instanceid) instanceid 
, bpc_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(bpc_info.bpc_infoid) id 
, 'bpc_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from bpc_info
 join INSTANCE on bpc_info.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autobpc_info_en_us
go
create view v_autobpc_info_en_us as 
select   b2g(bpc_info. bpc_infoid) bpc_infoid,bpc_info. changestamp changestamp
, 
bpc_info.name 
bpc_info_name 
, b2g(bpc_info.instanceid) instanceid 
, bpc_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(bpc_info.bpc_infoid) id 
, 'bpc_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from bpc_info
 join INSTANCE on bpc_info.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autothe_session
go
create view v_autothe_session as 
select   b2g(the_session. the_sessionid) the_sessionid,the_session. changestamp changestamp
, 
the_session.lastaccess 
the_session_lastaccess 
, 
the_session.startat 
the_session_startat 
, 
the_session.closedat 
the_session_closedat 
, 
 b2g(the_session.userrole)  
the_session_userrole_id, 
 groups_brief_f(the_session.userrole, null) 
the_session_userrole 
, 
 b2g(the_session.applicationid)  
the_session_applicationid_id, 
 workplace_brief_f(the_session.applicationid, null) 
the_session_applicationid 
, 
 the_session.closed  
the_session_closed_val, 
 case the_session.closed 
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
the_session_closed 
, 
 b2g(the_session.usersid)  
the_session_usersid_id, 
 users_brief_f(the_session.usersid, null) 
the_session_usersid 
, 
the_session.login 
the_session_login 
, 
the_session.lang 
the_session_lang 
, b2g(the_session.instanceid) instanceid 
, the_session.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(the_session.the_sessionid) id 
, 'the_session' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from the_Session
 join INSTANCE on the_Session.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autothe_session_ru_ru
go
create view v_autothe_session_ru_ru as 
select   b2g(the_session. the_sessionid) the_sessionid,the_session. changestamp changestamp
, 
the_session.lastaccess 
the_session_lastaccess 
, 
the_session.startat 
the_session_startat 
, 
the_session.closedat 
the_session_closedat 
, 
 b2g(the_session.userrole)  
the_session_userrole_id, 
 groups_brief_f(the_session.userrole, 'ru_ru') 
the_session_userrole 
, 
 b2g(the_session.applicationid)  
the_session_applicationid_id, 
 workplace_brief_f(the_session.applicationid, 'ru_ru') 
the_session_applicationid 
, 
 the_session.closed  
the_session_closed_val, 
 case the_session.closed 
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
the_session_closed 
, 
 b2g(the_session.usersid)  
the_session_usersid_id, 
 users_brief_f(the_session.usersid, 'ru_ru') 
the_session_usersid 
, 
the_session.login 
the_session_login 
, 
the_session.lang 
the_session_lang 
, b2g(the_session.instanceid) instanceid 
, the_session.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(the_session.the_sessionid) id 
, 'the_session' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from the_Session
 join INSTANCE on the_Session.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autothe_session_en_us
go
create view v_autothe_session_en_us as 
select   b2g(the_session. the_sessionid) the_sessionid,the_session. changestamp changestamp
, 
the_session.lastaccess 
the_session_lastaccess 
, 
the_session.startat 
the_session_startat 
, 
the_session.closedat 
the_session_closedat 
, 
 b2g(the_session.userrole)  
the_session_userrole_id, 
 groups_brief_f(the_session.userrole, 'en_us') 
the_session_userrole 
, 
 b2g(the_session.applicationid)  
the_session_applicationid_id, 
 workplace_brief_f(the_session.applicationid, 'en_us') 
the_session_applicationid 
, 
 the_session.closed  
the_session_closed_val, 
 case the_session.closed 
when 1 then 'да'
when 0 then 'нет'
 else '' 
 end  
the_session_closed 
, 
 b2g(the_session.usersid)  
the_session_usersid_id, 
 users_brief_f(the_session.usersid, 'en_us') 
the_session_usersid 
, 
the_session.login 
the_session_login 
, 
the_session.lang 
the_session_lang 
, b2g(the_session.instanceid) instanceid 
, the_session.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(the_session.the_sessionid) id 
, 'the_session' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from the_Session
 join INSTANCE on the_Session.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosysrefcache
go
create view v_autosysrefcache as 
select   b2g(sysrefcache. sysrefcacheid) sysrefcacheid,sysrefcache. changestamp changestamp
, 
sysrefcache.modulename 
sysrefcache_modulename 
, 
 b2g(sysrefcache.sessionid)  
sysrefcache_sessionid_id, 
 the_session_brief_f(sysrefcache.sessionid, null) 
sysrefcache_sessionid 
, 
sysrefcache.objectownerid 
sysrefcache_objectownerid 
, 
 sysrefcache.cachetype  
sysrefcache_cachetype_val, 
 case sysrefcache.cachetype 
when 4 then 'space'
when 3 then 'mark'
when 2 then 'odd'
when 0 then 'none'
when 1 then 'even'
 else '' 
 end  
sysrefcache_cachetype 
, b2g(sysrefcache.instanceid) instanceid 
, sysrefcache.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(sysrefcache.sysrefcacheid) id 
, 'sysrefcache' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SysRefCache
 join INSTANCE on SysRefCache.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosysrefcache_ru_ru
go
create view v_autosysrefcache_ru_ru as 
select   b2g(sysrefcache. sysrefcacheid) sysrefcacheid,sysrefcache. changestamp changestamp
, 
sysrefcache.modulename 
sysrefcache_modulename 
, 
 b2g(sysrefcache.sessionid)  
sysrefcache_sessionid_id, 
 the_session_brief_f(sysrefcache.sessionid, 'ru_ru') 
sysrefcache_sessionid 
, 
sysrefcache.objectownerid 
sysrefcache_objectownerid 
, 
 sysrefcache.cachetype  
sysrefcache_cachetype_val, 
 case sysrefcache.cachetype 
when 4 then 'space'
when 3 then 'mark'
when 2 then 'odd'
when 0 then 'none'
when 1 then 'even'
 else '' 
 end  
sysrefcache_cachetype 
, b2g(sysrefcache.instanceid) instanceid 
, sysrefcache.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(sysrefcache.sysrefcacheid) id 
, 'sysrefcache' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SysRefCache
 join INSTANCE on SysRefCache.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosysrefcache_en_us
go
create view v_autosysrefcache_en_us as 
select   b2g(sysrefcache. sysrefcacheid) sysrefcacheid,sysrefcache. changestamp changestamp
, 
sysrefcache.modulename 
sysrefcache_modulename 
, 
 b2g(sysrefcache.sessionid)  
sysrefcache_sessionid_id, 
 the_session_brief_f(sysrefcache.sessionid, 'en_us') 
sysrefcache_sessionid 
, 
sysrefcache.objectownerid 
sysrefcache_objectownerid 
, 
 sysrefcache.cachetype  
sysrefcache_cachetype_val, 
 case sysrefcache.cachetype 
when 4 then 'space'
when 3 then 'mark'
when 2 then 'odd'
when 0 then 'none'
when 1 then 'even'
 else '' 
 end  
sysrefcache_cachetype 
, b2g(sysrefcache.instanceid) instanceid 
, sysrefcache.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(sysrefcache.sysrefcacheid) id 
, 'sysrefcache' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SysRefCache
 join INSTANCE on SysRefCache.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosyslog
go
create view v_autosyslog as 
select   b2g(syslog. syslogid) syslogid,syslog. changestamp changestamp
, 
syslog.logstructid 
syslog_logstructid 
, 
syslog.loginstanceid 
syslog_loginstanceid 
, 
syslog.verb 
syslog_verb 
, 
syslog.the_resource 
syslog_the_resource 
, 
 b2g(syslog.thesession)  
syslog_thesession_id, 
 the_session_brief_f(syslog.thesession, null) 
syslog_thesession 
, b2g(syslog.instanceid) instanceid 
, syslog.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(syslog.syslogid) id 
, 'syslog' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SysLog
 join INSTANCE on SysLog.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosyslog_ru_ru
go
create view v_autosyslog_ru_ru as 
select   b2g(syslog. syslogid) syslogid,syslog. changestamp changestamp
, 
syslog.logstructid 
syslog_logstructid 
, 
syslog.loginstanceid 
syslog_loginstanceid 
, 
syslog.verb 
syslog_verb 
, 
syslog.the_resource 
syslog_the_resource 
, 
 b2g(syslog.thesession)  
syslog_thesession_id, 
 the_session_brief_f(syslog.thesession, 'ru_ru') 
syslog_thesession 
, b2g(syslog.instanceid) instanceid 
, syslog.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(syslog.syslogid) id 
, 'syslog' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SysLog
 join INSTANCE on SysLog.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autosyslog_en_us
go
create view v_autosyslog_en_us as 
select   b2g(syslog. syslogid) syslogid,syslog. changestamp changestamp
, 
syslog.logstructid 
syslog_logstructid 
, 
syslog.loginstanceid 
syslog_loginstanceid 
, 
syslog.verb 
syslog_verb 
, 
syslog.the_resource 
syslog_the_resource 
, 
 b2g(syslog.thesession)  
syslog_thesession_id, 
 the_session_brief_f(syslog.thesession, 'en_us') 
syslog_thesession 
, b2g(syslog.instanceid) instanceid 
, syslog.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(syslog.syslogid) id 
, 'syslog' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from SysLog
 join INSTANCE on SysLog.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpls_info
go
create view v_autotpls_info as 
select   b2g(tpls_info. tpls_infoid) tpls_infoid,tpls_info. changestamp changestamp
, 
tpls_info.name 
tpls_info_name 
, 
tpls_info.schema_imagefile 
tpls_info_schema_imagefile 
, b2g(tpls_info.instanceid) instanceid 
, tpls_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpls_info.tpls_infoid) id 
, 'tpls_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLS_INFO
 join INSTANCE on TPLS_INFO.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpls_info_ru_ru
go
create view v_autotpls_info_ru_ru as 
select   b2g(tpls_info. tpls_infoid) tpls_infoid,tpls_info. changestamp changestamp
, 
tpls_info.name 
tpls_info_name 
, 
tpls_info.schema_imagefile 
tpls_info_schema_imagefile 
, b2g(tpls_info.instanceid) instanceid 
, tpls_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpls_info.tpls_infoid) id 
, 'tpls_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLS_INFO
 join INSTANCE on TPLS_INFO.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpls_info_en_us
go
create view v_autotpls_info_en_us as 
select   b2g(tpls_info. tpls_infoid) tpls_infoid,tpls_info. changestamp changestamp
, 
tpls_info.name 
tpls_info_name 
, 
tpls_info.schema_imagefile 
tpls_info_schema_imagefile 
, b2g(tpls_info.instanceid) instanceid 
, tpls_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpls_info.tpls_infoid) id 
, 'tpls_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLS_INFO
 join INSTANCE on TPLS_INFO.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpls_param
go
create view v_autotpls_param as 
select   b2g(tpls_param. tpls_paramid) tpls_paramid,tpls_param. changestamp changestamp
, 
 tpls_param.hideparam  
tpls_param_hideparam_val, 
 case tpls_param.hideparam 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpls_param_hideparam 
, 
 b2g(tpls_param.archtype)  
tpls_param_archtype_id, 
 tpld_paramtype_brief_f(tpls_param.archtype, null) 
tpls_param_archtype 
, 
 b2g(tpls_param.param)  
tpls_param_param_id, 
 tpld_param_brief_f(tpls_param.param, null) 
tpls_param_param 
, 
tpls_param.pos_left 
tpls_param_pos_left 
, 
 tpls_param.hideonschema  
tpls_param_hideonschema_val, 
 case tpls_param.hideonschema 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpls_param_hideonschema 
, 
tpls_param.pos_top 
tpls_param_pos_top 
, b2g(tpls_param.instanceid) instanceid 
, tpls_param.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpls_param.tpls_paramid) id 
, 'tpls_param' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLS_PARAM
 join INSTANCE on TPLS_PARAM.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpls_param_ru_ru
go
create view v_autotpls_param_ru_ru as 
select   b2g(tpls_param. tpls_paramid) tpls_paramid,tpls_param. changestamp changestamp
, 
 tpls_param.hideparam  
tpls_param_hideparam_val, 
 case tpls_param.hideparam 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpls_param_hideparam 
, 
 b2g(tpls_param.archtype)  
tpls_param_archtype_id, 
 tpld_paramtype_brief_f(tpls_param.archtype, 'ru_ru') 
tpls_param_archtype 
, 
 b2g(tpls_param.param)  
tpls_param_param_id, 
 tpld_param_brief_f(tpls_param.param, 'ru_ru') 
tpls_param_param 
, 
tpls_param.pos_left 
tpls_param_pos_left 
, 
 tpls_param.hideonschema  
tpls_param_hideonschema_val, 
 case tpls_param.hideonschema 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpls_param_hideonschema 
, 
tpls_param.pos_top 
tpls_param_pos_top 
, b2g(tpls_param.instanceid) instanceid 
, tpls_param.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpls_param.tpls_paramid) id 
, 'tpls_param' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLS_PARAM
 join INSTANCE on TPLS_PARAM.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpls_param_en_us
go
create view v_autotpls_param_en_us as 
select   b2g(tpls_param. tpls_paramid) tpls_paramid,tpls_param. changestamp changestamp
, 
 tpls_param.hideparam  
tpls_param_hideparam_val, 
 case tpls_param.hideparam 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpls_param_hideparam 
, 
 b2g(tpls_param.archtype)  
tpls_param_archtype_id, 
 tpld_paramtype_brief_f(tpls_param.archtype, 'en_us') 
tpls_param_archtype 
, 
 b2g(tpls_param.param)  
tpls_param_param_id, 
 tpld_param_brief_f(tpls_param.param, 'en_us') 
tpls_param_param 
, 
tpls_param.pos_left 
tpls_param_pos_left 
, 
 tpls_param.hideonschema  
tpls_param_hideonschema_val, 
 case tpls_param.hideonschema 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpls_param_hideonschema 
, 
tpls_param.pos_top 
tpls_param_pos_top 
, b2g(tpls_param.instanceid) instanceid 
, tpls_param.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpls_param.tpls_paramid) id 
, 'tpls_param' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLS_PARAM
 join INSTANCE on TPLS_PARAM.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjournal
go
create view v_autoarmjournal as 
select   b2g(armjournal. armjournalid) armjournalid,armjournal. changestamp changestamp
, 
 b2g(armjournal.thejournal)  
armjournal_thejournal_id, 
 instance_brief_f(armjournal.thejournal , null) 
armjournal_thejournal 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjournal.armjournalid) id 
, 'armjournal' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJournal
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjournal_ru_ru
go
create view v_autoarmjournal_ru_ru as 
select   b2g(armjournal. armjournalid) armjournalid,armjournal. changestamp changestamp
, 
 b2g(armjournal.thejournal)  
armjournal_thejournal_id, 
 instance_brief_f(armjournal.thejournal, 'ru_ru') 
armjournal_thejournal 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjournal.armjournalid) id 
, 'armjournal' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJournal
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjournal_en_us
go
create view v_autoarmjournal_en_us as 
select   b2g(armjournal. armjournalid) armjournalid,armjournal. changestamp changestamp
, 
 b2g(armjournal.thejournal)  
armjournal_thejournal_id, 
 instance_brief_f(armjournal.thejournal, 'en_us') 
armjournal_thejournal 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjournal.armjournalid) id 
, 'armjournal' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJournal
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnlrep
go
create view v_autoarmjrnlrep as 
select   b2g(armjrnlrep. armjrnlrepid) armjrnlrepid,armjrnlrep. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnlrep.thereport)  
armjrnlrep_thereport_id, 
 instance_brief_f(armjrnlrep.thereport , null) 
armjrnlrep_thereport 
, 
armjrnlrep.repname 
armjrnlrep_repname 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnlrep.armjrnlrepid) id 
, 'armjrnlrep' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLREP
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLREP.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnlrep_ru_ru
go
create view v_autoarmjrnlrep_ru_ru as 
select   b2g(armjrnlrep. armjrnlrepid) armjrnlrepid,armjrnlrep. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnlrep.thereport)  
armjrnlrep_thereport_id, 
 instance_brief_f(armjrnlrep.thereport, 'ru_ru') 
armjrnlrep_thereport 
, 
armjrnlrep.repname 
armjrnlrep_repname 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnlrep.armjrnlrepid) id 
, 'armjrnlrep' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLREP
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLREP.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnlrep_en_us
go
create view v_autoarmjrnlrep_en_us as 
select   b2g(armjrnlrep. armjrnlrepid) armjrnlrepid,armjrnlrep. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnlrep.thereport)  
armjrnlrep_thereport_id, 
 instance_brief_f(armjrnlrep.thereport, 'en_us') 
armjrnlrep_thereport 
, 
armjrnlrep.repname 
armjrnlrep_repname 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnlrep.armjrnlrepid) id 
, 'armjrnlrep' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLREP
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLREP.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnlrun
go
create view v_autoarmjrnlrun as 
select   b2g(armjrnlrun. armjrnlrunid) armjrnlrunid,armjrnlrun. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnlrun.theextention)  
armjrnlrun_theextention_id, 
 instance_brief_f(armjrnlrun.theextention , null) 
armjrnlrun_theextention 
, 
armjrnlrun.name 
armjrnlrun_name 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnlrun.armjrnlrunid) id 
, 'armjrnlrun' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLRUN
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLRUN.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnlrun_ru_ru
go
create view v_autoarmjrnlrun_ru_ru as 
select   b2g(armjrnlrun. armjrnlrunid) armjrnlrunid,armjrnlrun. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnlrun.theextention)  
armjrnlrun_theextention_id, 
 instance_brief_f(armjrnlrun.theextention, 'ru_ru') 
armjrnlrun_theextention 
, 
armjrnlrun.name 
armjrnlrun_name 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnlrun.armjrnlrunid) id 
, 'armjrnlrun' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLRUN
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLRUN.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnlrun_en_us
go
create view v_autoarmjrnlrun_en_us as 
select   b2g(armjrnlrun. armjrnlrunid) armjrnlrunid,armjrnlrun. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnlrun.theextention)  
armjrnlrun_theextention_id, 
 instance_brief_f(armjrnlrun.theextention, 'en_us') 
armjrnlrun_theextention 
, 
armjrnlrun.name 
armjrnlrun_name 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnlrun.armjrnlrunid) id 
, 'armjrnlrun' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLRUN
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLRUN.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnladd
go
create view v_autoarmjrnladd as 
select   b2g(armjrnladd. armjrnladdid) armjrnladdid,armjrnladd. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnladd.theextention)  
armjrnladd_theextention_id, 
 instance_brief_f(armjrnladd.theextention , null) 
armjrnladd_theextention 
, 
armjrnladd.name 
armjrnladd_name 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnladd.armjrnladdid) id 
, 'armjrnladd' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLADD
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLADD.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnladd_ru_ru
go
create view v_autoarmjrnladd_ru_ru as 
select   b2g(armjrnladd. armjrnladdid) armjrnladdid,armjrnladd. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnladd.theextention)  
armjrnladd_theextention_id, 
 instance_brief_f(armjrnladd.theextention, 'ru_ru') 
armjrnladd_theextention 
, 
armjrnladd.name 
armjrnladd_name 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnladd.armjrnladdid) id 
, 'armjrnladd' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLADD
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLADD.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmjrnladd_en_us
go
create view v_autoarmjrnladd_en_us as 
select   b2g(armjrnladd. armjrnladdid) armjrnladdid,armjrnladd. changestamp changestamp, b2g(armjournalid) armjournalid
, 
 b2g(armjrnladd.theextention)  
armjrnladd_theextention_id, 
 instance_brief_f(armjrnladd.theextention, 'en_us') 
armjrnladd_theextention 
, 
armjrnladd.name 
armjrnladd_name 
, b2g(armjournal.instanceid) instanceid 
, armjournal.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armjrnladd.armjrnladdid) id 
, 'armjrnladd' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMJRNLADD
 join ARMJournal on ARMJournal.ARMJournalID=ARMJRNLADD.ParentStructRowID 
 join INSTANCE on ARMJournal.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoentrypoints
go
create view v_autoentrypoints as 
select   b2g(entrypoints. entrypointsid) entrypointsid,entrypoints. changestamp changestamp
, 
entrypoints.name 
entrypoints_name 
, 
 entrypoints.allowadd  
entrypoints_allowadd_val, 
 case entrypoints.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowadd 
, 
 entrypoints.allowfilter  
entrypoints_allowfilter_val, 
 case entrypoints.allowfilter 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowfilter 
, 
entrypoints.iconfile 
entrypoints_iconfile 
, 
 b2g(entrypoints.document)  
entrypoints_document_id, 
 instance_brief_f(entrypoints.document , null) 
entrypoints_document 
, 
 entrypoints.allowdel  
entrypoints_allowdel_val, 
 case entrypoints.allowdel 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowdel 
, 
entrypoints.caption 
entrypoints_caption 
, 
entrypoints.thecomment 
entrypoints_thecomment 
, 
 entrypoints.actiontype  
entrypoints_actiontype_val, 
 case entrypoints.actiontype 
when 4 then 'запустить арм'
when 2 then 'выполнить метод'
when 5 then 'открыть отчет'
when 0 then 'ничего не делать'
when 1 then 'открыть документ'
when 3 then 'открыть журнал'
 else '' 
 end  
entrypoints_actiontype 
, 
 b2g(entrypoints.objecttype)  
entrypoints_objecttype_id, 
 objecttype_brief_f(entrypoints.objecttype, null) 
entrypoints_objecttype 
, 
 b2g(entrypoints.theextention)  
entrypoints_theextention_id, 
 instance_brief_f(entrypoints.theextention , null) 
entrypoints_theextention 
, 
 entrypoints.astoolbaritem  
entrypoints_astoolbaritem_val, 
 case entrypoints.astoolbaritem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_astoolbaritem 
, 
entrypoints.journalfixedquery 
entrypoints_journalfixedquery 
, 
 b2g(entrypoints.method)  
entrypoints_method_id, 
 sharedmethod_brief_f(entrypoints.method, null) 
entrypoints_method 
, 
 b2g(entrypoints.report)  
entrypoints_report_id, 
 instance_brief_f(entrypoints.report , null) 
entrypoints_report 
, 
 b2g(entrypoints.arm)  
entrypoints_arm_id, 
 instance_brief_f(entrypoints.arm , null) 
entrypoints_arm 
, 
 entrypoints.allowprint  
entrypoints_allowprint_val, 
 case entrypoints.allowprint 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowprint 
, 
 entrypoints.allowedit  
entrypoints_allowedit_val, 
 case entrypoints.allowedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowedit 
, 
entrypoints.sequence 
entrypoints_sequence 
, 
 b2g(entrypoints.journal)  
entrypoints_journal_id, 
 instance_brief_f(entrypoints.journal , null) 
entrypoints_journal 
, 
 b2g(entrypoints.thefilter)  
entrypoints_thefilter_id, 
 instance_brief_f(entrypoints.thefilter , null) 
entrypoints_thefilter 
, b2g(entrypoints.instanceid) instanceid 
, entrypoints.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(entrypoints.entrypointsid) id 
, 'entrypoints' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from EntryPoints
 join INSTANCE on EntryPoints.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoentrypoints_ru_ru
go
create view v_autoentrypoints_ru_ru as 
select   b2g(entrypoints. entrypointsid) entrypointsid,entrypoints. changestamp changestamp
, 
entrypoints.name 
entrypoints_name 
, 
 entrypoints.allowadd  
entrypoints_allowadd_val, 
 case entrypoints.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowadd 
, 
 entrypoints.allowfilter  
entrypoints_allowfilter_val, 
 case entrypoints.allowfilter 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowfilter 
, 
entrypoints.iconfile 
entrypoints_iconfile 
, 
 b2g(entrypoints.document)  
entrypoints_document_id, 
 instance_brief_f(entrypoints.document, 'ru_ru') 
entrypoints_document 
, 
 entrypoints.allowdel  
entrypoints_allowdel_val, 
 case entrypoints.allowdel 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowdel 
, 
entrypoints.caption 
entrypoints_caption 
, 
entrypoints.thecomment 
entrypoints_thecomment 
, 
 entrypoints.actiontype  
entrypoints_actiontype_val, 
 case entrypoints.actiontype 
when 4 then 'запустить арм'
when 2 then 'выполнить метод'
when 5 then 'открыть отчет'
when 0 then 'ничего не делать'
when 1 then 'открыть документ'
when 3 then 'открыть журнал'
 else '' 
 end  
entrypoints_actiontype 
, 
 b2g(entrypoints.objecttype)  
entrypoints_objecttype_id, 
 objecttype_brief_f(entrypoints.objecttype, 'ru_ru') 
entrypoints_objecttype 
, 
 b2g(entrypoints.theextention)  
entrypoints_theextention_id, 
 instance_brief_f(entrypoints.theextention, 'ru_ru') 
entrypoints_theextention 
, 
 entrypoints.astoolbaritem  
entrypoints_astoolbaritem_val, 
 case entrypoints.astoolbaritem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_astoolbaritem 
, 
entrypoints.journalfixedquery 
entrypoints_journalfixedquery 
, 
 b2g(entrypoints.method)  
entrypoints_method_id, 
 sharedmethod_brief_f(entrypoints.method, 'ru_ru') 
entrypoints_method 
, 
 b2g(entrypoints.report)  
entrypoints_report_id, 
 instance_brief_f(entrypoints.report, 'ru_ru') 
entrypoints_report 
, 
 b2g(entrypoints.arm)  
entrypoints_arm_id, 
 instance_brief_f(entrypoints.arm, 'ru_ru') 
entrypoints_arm 
, 
 entrypoints.allowprint  
entrypoints_allowprint_val, 
 case entrypoints.allowprint 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowprint 
, 
 entrypoints.allowedit  
entrypoints_allowedit_val, 
 case entrypoints.allowedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowedit 
, 
entrypoints.sequence 
entrypoints_sequence 
, 
 b2g(entrypoints.journal)  
entrypoints_journal_id, 
 instance_brief_f(entrypoints.journal, 'ru_ru') 
entrypoints_journal 
, 
 b2g(entrypoints.thefilter)  
entrypoints_thefilter_id, 
 instance_brief_f(entrypoints.thefilter, 'ru_ru') 
entrypoints_thefilter 
, b2g(entrypoints.instanceid) instanceid 
, entrypoints.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(entrypoints.entrypointsid) id 
, 'entrypoints' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from EntryPoints
 join INSTANCE on EntryPoints.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoentrypoints_en_us
go
create view v_autoentrypoints_en_us as 
select   b2g(entrypoints. entrypointsid) entrypointsid,entrypoints. changestamp changestamp
, 
entrypoints.name 
entrypoints_name 
, 
 entrypoints.allowadd  
entrypoints_allowadd_val, 
 case entrypoints.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowadd 
, 
 entrypoints.allowfilter  
entrypoints_allowfilter_val, 
 case entrypoints.allowfilter 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowfilter 
, 
entrypoints.iconfile 
entrypoints_iconfile 
, 
 b2g(entrypoints.document)  
entrypoints_document_id, 
 instance_brief_f(entrypoints.document, 'en_us') 
entrypoints_document 
, 
 entrypoints.allowdel  
entrypoints_allowdel_val, 
 case entrypoints.allowdel 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowdel 
, 
entrypoints.caption 
entrypoints_caption 
, 
entrypoints.thecomment 
entrypoints_thecomment 
, 
 entrypoints.actiontype  
entrypoints_actiontype_val, 
 case entrypoints.actiontype 
when 4 then 'запустить арм'
when 2 then 'выполнить метод'
when 5 then 'открыть отчет'
when 0 then 'ничего не делать'
when 1 then 'открыть документ'
when 3 then 'открыть журнал'
 else '' 
 end  
entrypoints_actiontype 
, 
 b2g(entrypoints.objecttype)  
entrypoints_objecttype_id, 
 objecttype_brief_f(entrypoints.objecttype, 'en_us') 
entrypoints_objecttype 
, 
 b2g(entrypoints.theextention)  
entrypoints_theextention_id, 
 instance_brief_f(entrypoints.theextention, 'en_us') 
entrypoints_theextention 
, 
 entrypoints.astoolbaritem  
entrypoints_astoolbaritem_val, 
 case entrypoints.astoolbaritem 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_astoolbaritem 
, 
entrypoints.journalfixedquery 
entrypoints_journalfixedquery 
, 
 b2g(entrypoints.method)  
entrypoints_method_id, 
 sharedmethod_brief_f(entrypoints.method, 'en_us') 
entrypoints_method 
, 
 b2g(entrypoints.report)  
entrypoints_report_id, 
 instance_brief_f(entrypoints.report, 'en_us') 
entrypoints_report 
, 
 b2g(entrypoints.arm)  
entrypoints_arm_id, 
 instance_brief_f(entrypoints.arm, 'en_us') 
entrypoints_arm 
, 
 entrypoints.allowprint  
entrypoints_allowprint_val, 
 case entrypoints.allowprint 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowprint 
, 
 entrypoints.allowedit  
entrypoints_allowedit_val, 
 case entrypoints.allowedit 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
entrypoints_allowedit 
, 
entrypoints.sequence 
entrypoints_sequence 
, 
 b2g(entrypoints.journal)  
entrypoints_journal_id, 
 instance_brief_f(entrypoints.journal, 'en_us') 
entrypoints_journal 
, 
 b2g(entrypoints.thefilter)  
entrypoints_thefilter_id, 
 instance_brief_f(entrypoints.thefilter, 'en_us') 
entrypoints_thefilter 
, b2g(entrypoints.instanceid) instanceid 
, entrypoints.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(entrypoints.entrypointsid) id 
, 'entrypoints' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from EntryPoints
 join INSTANCE on EntryPoints.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoepfilterlink
go
create view v_autoepfilterlink as 
select   b2g(epfilterlink. epfilterlinkid) epfilterlinkid,epfilterlink. changestamp changestamp, b2g(entrypointsid) entrypointsid
, 
epfilterlink.rowsource 
epfilterlink_rowsource 
, 
epfilterlink.filterfield 
epfilterlink_filterfield 
, 
epfilterlink.theexpression 
epfilterlink_theexpression 
, b2g(entrypoints.instanceid) instanceid 
, entrypoints.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(epfilterlink.epfilterlinkid) id 
, 'epfilterlink' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from EPFilterLink
 join EntryPoints on EntryPoints.EntryPointsID=EPFilterLink.ParentStructRowID 
 join INSTANCE on EntryPoints.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoepfilterlink_ru_ru
go
create view v_autoepfilterlink_ru_ru as 
select   b2g(epfilterlink. epfilterlinkid) epfilterlinkid,epfilterlink. changestamp changestamp, b2g(entrypointsid) entrypointsid
, 
epfilterlink.rowsource 
epfilterlink_rowsource 
, 
epfilterlink.filterfield 
epfilterlink_filterfield 
, 
epfilterlink.theexpression 
epfilterlink_theexpression 
, b2g(entrypoints.instanceid) instanceid 
, entrypoints.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(epfilterlink.epfilterlinkid) id 
, 'epfilterlink' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from EPFilterLink
 join EntryPoints on EntryPoints.EntryPointsID=EPFilterLink.ParentStructRowID 
 join INSTANCE on EntryPoints.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoepfilterlink_en_us
go
create view v_autoepfilterlink_en_us as 
select   b2g(epfilterlink. epfilterlinkid) epfilterlinkid,epfilterlink. changestamp changestamp, b2g(entrypointsid) entrypointsid
, 
epfilterlink.rowsource 
epfilterlink_rowsource 
, 
epfilterlink.filterfield 
epfilterlink_filterfield 
, 
epfilterlink.theexpression 
epfilterlink_theexpression 
, b2g(entrypoints.instanceid) instanceid 
, entrypoints.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(epfilterlink.epfilterlinkid) id 
, 'epfilterlink' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from EPFilterLink
 join EntryPoints on EntryPoints.EntryPointsID=EPFilterLink.ParentStructRowID 
 join INSTANCE on EntryPoints.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoworkplace
go
create view v_autoworkplace as 
select   b2g(workplace. workplaceid) workplaceid,workplace. changestamp changestamp
, 
workplace.theversion 
workplace_theversion 
, 
workplace.thecomment 
workplace_thecomment 
, 
workplace.caption 
workplace_caption 
, 
 workplace.theplatform  
workplace_theplatform_val, 
 case workplace.theplatform 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
workplace_theplatform 
, 
workplace.name 
workplace_name 
, b2g(workplace.instanceid) instanceid 
, workplace.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(workplace.workplaceid) id 
, 'workplace' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from WorkPlace
 join INSTANCE on WorkPlace.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoworkplace_ru_ru
go
create view v_autoworkplace_ru_ru as 
select   b2g(workplace. workplaceid) workplaceid,workplace. changestamp changestamp
, 
workplace.theversion 
workplace_theversion 
, 
workplace.thecomment 
workplace_thecomment 
, 
workplace.caption 
workplace_caption 
, 
 workplace.theplatform  
workplace_theplatform_val, 
 case workplace.theplatform 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
workplace_theplatform 
, 
workplace.name 
workplace_name 
, b2g(workplace.instanceid) instanceid 
, workplace.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(workplace.workplaceid) id 
, 'workplace' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from WorkPlace
 join INSTANCE on WorkPlace.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoworkplace_en_us
go
create view v_autoworkplace_en_us as 
select   b2g(workplace. workplaceid) workplaceid,workplace. changestamp changestamp
, 
workplace.theversion 
workplace_theversion 
, 
workplace.thecomment 
workplace_thecomment 
, 
workplace.caption 
workplace_caption 
, 
 workplace.theplatform  
workplace_theplatform_val, 
 case workplace.theplatform 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
workplace_theplatform 
, 
workplace.name 
workplace_name 
, b2g(workplace.instanceid) instanceid 
, workplace.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(workplace.workplaceid) id 
, 'workplace' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from WorkPlace
 join INSTANCE on WorkPlace.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmtypes
go
create view v_autoarmtypes as 
select   b2g(armtypes. armtypesid) armtypesid,armtypes. changestamp changestamp
, 
 b2g(armtypes.thedocumenttype)  
armtypes_thedocumenttype_id, 
 objecttype_brief_f(armtypes.thedocumenttype, null) 
armtypes_thedocumenttype 
, b2g(armtypes.instanceid) instanceid 
, armtypes.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armtypes.armtypesid) id 
, 'armtypes' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMTypes
 join INSTANCE on ARMTypes.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmtypes_ru_ru
go
create view v_autoarmtypes_ru_ru as 
select   b2g(armtypes. armtypesid) armtypesid,armtypes. changestamp changestamp
, 
 b2g(armtypes.thedocumenttype)  
armtypes_thedocumenttype_id, 
 objecttype_brief_f(armtypes.thedocumenttype, 'ru_ru') 
armtypes_thedocumenttype 
, b2g(armtypes.instanceid) instanceid 
, armtypes.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armtypes.armtypesid) id 
, 'armtypes' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMTypes
 join INSTANCE on ARMTypes.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoarmtypes_en_us
go
create view v_autoarmtypes_en_us as 
select   b2g(armtypes. armtypesid) armtypesid,armtypes. changestamp changestamp
, 
 b2g(armtypes.thedocumenttype)  
armtypes_thedocumenttype_id, 
 objecttype_brief_f(armtypes.thedocumenttype, 'en_us') 
armtypes_thedocumenttype 
, b2g(armtypes.instanceid) instanceid 
, armtypes.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(armtypes.armtypesid) id 
, 'armtypes' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from ARMTypes
 join INSTANCE on ARMTypes.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_crole
go
create view v_autoiu_crole as 
select   b2g(iu_crole. iu_croleid) iu_croleid,iu_crole. changestamp changestamp
, 
 iu_crole.allowsetuser  
iu_crole_allowsetuser_val, 
 case iu_crole.allowsetuser 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_crole_allowsetuser 
, 
iu_crole.name 
iu_crole_name 
, b2g(iu_crole.instanceid) instanceid 
, iu_crole.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_crole.iu_croleid) id 
, 'iu_crole' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_crole
 join INSTANCE on iu_crole.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_crole_ru_ru
go
create view v_autoiu_crole_ru_ru as 
select   b2g(iu_crole. iu_croleid) iu_croleid,iu_crole. changestamp changestamp
, 
 iu_crole.allowsetuser  
iu_crole_allowsetuser_val, 
 case iu_crole.allowsetuser 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_crole_allowsetuser 
, 
iu_crole.name 
iu_crole_name 
, b2g(iu_crole.instanceid) instanceid 
, iu_crole.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_crole.iu_croleid) id 
, 'iu_crole' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_crole
 join INSTANCE on iu_crole.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_crole_en_us
go
create view v_autoiu_crole_en_us as 
select   b2g(iu_crole. iu_croleid) iu_croleid,iu_crole. changestamp changestamp
, 
 iu_crole.allowsetuser  
iu_crole_allowsetuser_val, 
 case iu_crole.allowsetuser 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_crole_allowsetuser 
, 
iu_crole.name 
iu_crole_name 
, b2g(iu_crole.instanceid) instanceid 
, iu_crole.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_crole.iu_croleid) id 
, 'iu_crole' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_crole
 join INSTANCE on iu_crole.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_connecttype
go
create view v_autotpld_connecttype as 
select   b2g(tpld_connecttype. tpld_connecttypeid) tpld_connecttypeid,tpld_connecttype. changestamp changestamp
, 
tpld_connecttype.name 
tpld_connecttype_name 
, b2g(tpld_connecttype.instanceid) instanceid 
, tpld_connecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_connecttype.tpld_connecttypeid) id 
, 'tpld_connecttype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_CONNECTTYPE
 join INSTANCE on TPLD_CONNECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_connecttype_ru_ru
go
create view v_autotpld_connecttype_ru_ru as 
select   b2g(tpld_connecttype. tpld_connecttypeid) tpld_connecttypeid,tpld_connecttype. changestamp changestamp
, 
tpld_connecttype.name 
tpld_connecttype_name 
, b2g(tpld_connecttype.instanceid) instanceid 
, tpld_connecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_connecttype.tpld_connecttypeid) id 
, 'tpld_connecttype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_CONNECTTYPE
 join INSTANCE on TPLD_CONNECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_connecttype_en_us
go
create view v_autotpld_connecttype_en_us as 
select   b2g(tpld_connecttype. tpld_connecttypeid) tpld_connecttypeid,tpld_connecttype. changestamp changestamp
, 
tpld_connecttype.name 
tpld_connecttype_name 
, b2g(tpld_connecttype.instanceid) instanceid 
, tpld_connecttype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_connecttype.tpld_connecttypeid) id 
, 'tpld_connecttype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_CONNECTTYPE
 join INSTANCE on TPLD_CONNECTTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_devclass
go
create view v_autotpld_devclass as 
select   b2g(tpld_devclass. tpld_devclassid) tpld_devclassid,tpld_devclass. changestamp changestamp
, 
tpld_devclass.name 
tpld_devclass_name 
, b2g(tpld_devclass.instanceid) instanceid 
, tpld_devclass.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_devclass.tpld_devclassid) id 
, 'tpld_devclass' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_DEVCLASS
 join INSTANCE on TPLD_DEVCLASS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_devclass_ru_ru
go
create view v_autotpld_devclass_ru_ru as 
select   b2g(tpld_devclass. tpld_devclassid) tpld_devclassid,tpld_devclass. changestamp changestamp
, 
tpld_devclass.name 
tpld_devclass_name 
, b2g(tpld_devclass.instanceid) instanceid 
, tpld_devclass.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_devclass.tpld_devclassid) id 
, 'tpld_devclass' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_DEVCLASS
 join INSTANCE on TPLD_DEVCLASS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_devclass_en_us
go
create view v_autotpld_devclass_en_us as 
select   b2g(tpld_devclass. tpld_devclassid) tpld_devclassid,tpld_devclass. changestamp changestamp
, 
tpld_devclass.name 
tpld_devclass_name 
, b2g(tpld_devclass.instanceid) instanceid 
, tpld_devclass.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_devclass.tpld_devclassid) id 
, 'tpld_devclass' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_DEVCLASS
 join INSTANCE on TPLD_DEVCLASS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_f
go
create view v_autotpld_f as 
select   b2g(tpld_f. tpld_fid) tpld_fid,tpld_f. changestamp changestamp
, 
tpld_f.name 
tpld_f_name 
, b2g(tpld_f.instanceid) instanceid 
, tpld_f.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_f.tpld_fid) id 
, 'tpld_f' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_F
 join INSTANCE on TPLD_F.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_f_ru_ru
go
create view v_autotpld_f_ru_ru as 
select   b2g(tpld_f. tpld_fid) tpld_fid,tpld_f. changestamp changestamp
, 
tpld_f.name 
tpld_f_name 
, b2g(tpld_f.instanceid) instanceid 
, tpld_f.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_f.tpld_fid) id 
, 'tpld_f' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_F
 join INSTANCE on TPLD_F.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_f_en_us
go
create view v_autotpld_f_en_us as 
select   b2g(tpld_f. tpld_fid) tpld_fid,tpld_f. changestamp changestamp
, 
tpld_f.name 
tpld_f_name 
, b2g(tpld_f.instanceid) instanceid 
, tpld_f.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_f.tpld_fid) id 
, 'tpld_f' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_F
 join INSTANCE on TPLD_F.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_snab
go
create view v_autotpld_snab as 
select   b2g(tpld_snab. tpld_snabid) tpld_snabid,tpld_snab. changestamp changestamp
, 
tpld_snab.cfio 
tpld_snab_cfio 
, 
tpld_snab.cregion 
tpld_snab_cregion 
, 
tpld_snab.cphone 
tpld_snab_cphone 
, 
 b2g(tpld_snab.supplier)  
tpld_snab_supplier_id, 
 tpld_snabtop_brief_f(tpld_snab.supplier, null) 
tpld_snab_supplier 
, 
tpld_snab.cname 
tpld_snab_cname 
, 
tpld_snab.caddress 
tpld_snab_caddress 
, b2g(tpld_snab.instanceid) instanceid 
, tpld_snab.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_snab.tpld_snabid) id 
, 'tpld_snab' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_SNAB
 join INSTANCE on TPLD_SNAB.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_snab_ru_ru
go
create view v_autotpld_snab_ru_ru as 
select   b2g(tpld_snab. tpld_snabid) tpld_snabid,tpld_snab. changestamp changestamp
, 
tpld_snab.cfio 
tpld_snab_cfio 
, 
tpld_snab.cregion 
tpld_snab_cregion 
, 
tpld_snab.cphone 
tpld_snab_cphone 
, 
 b2g(tpld_snab.supplier)  
tpld_snab_supplier_id, 
 tpld_snabtop_brief_f(tpld_snab.supplier, 'ru_ru') 
tpld_snab_supplier 
, 
tpld_snab.cname 
tpld_snab_cname 
, 
tpld_snab.caddress 
tpld_snab_caddress 
, b2g(tpld_snab.instanceid) instanceid 
, tpld_snab.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_snab.tpld_snabid) id 
, 'tpld_snab' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_SNAB
 join INSTANCE on TPLD_SNAB.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_snab_en_us
go
create view v_autotpld_snab_en_us as 
select   b2g(tpld_snab. tpld_snabid) tpld_snabid,tpld_snab. changestamp changestamp
, 
tpld_snab.cfio 
tpld_snab_cfio 
, 
tpld_snab.cregion 
tpld_snab_cregion 
, 
tpld_snab.cphone 
tpld_snab_cphone 
, 
 b2g(tpld_snab.supplier)  
tpld_snab_supplier_id, 
 tpld_snabtop_brief_f(tpld_snab.supplier, 'en_us') 
tpld_snab_supplier 
, 
tpld_snab.cname 
tpld_snab_cname 
, 
tpld_snab.caddress 
tpld_snab_caddress 
, b2g(tpld_snab.instanceid) instanceid 
, tpld_snab.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_snab.tpld_snabid) id 
, 'tpld_snab' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_SNAB
 join INSTANCE on TPLD_SNAB.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_paramtype
go
create view v_autotpld_paramtype as 
select   b2g(tpld_paramtype. tpld_paramtypeid) tpld_paramtypeid,tpld_paramtype. changestamp changestamp
, 
tpld_paramtype.thecode 
tpld_paramtype_thecode 
, 
tpld_paramtype.name 
tpld_paramtype_name 
, b2g(tpld_paramtype.instanceid) instanceid 
, tpld_paramtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_paramtype.tpld_paramtypeid) id 
, 'tpld_paramtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_PARAMTYPE
 join INSTANCE on TPLD_PARAMTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_paramtype_ru_ru
go
create view v_autotpld_paramtype_ru_ru as 
select   b2g(tpld_paramtype. tpld_paramtypeid) tpld_paramtypeid,tpld_paramtype. changestamp changestamp
, 
tpld_paramtype.thecode 
tpld_paramtype_thecode 
, 
tpld_paramtype.name 
tpld_paramtype_name 
, b2g(tpld_paramtype.instanceid) instanceid 
, tpld_paramtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_paramtype.tpld_paramtypeid) id 
, 'tpld_paramtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_PARAMTYPE
 join INSTANCE on TPLD_PARAMTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_paramtype_en_us
go
create view v_autotpld_paramtype_en_us as 
select   b2g(tpld_paramtype. tpld_paramtypeid) tpld_paramtypeid,tpld_paramtype. changestamp changestamp
, 
tpld_paramtype.thecode 
tpld_paramtype_thecode 
, 
tpld_paramtype.name 
tpld_paramtype_name 
, b2g(tpld_paramtype.instanceid) instanceid 
, tpld_paramtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_paramtype.tpld_paramtypeid) id 
, 'tpld_paramtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_PARAMTYPE
 join INSTANCE on TPLD_PARAMTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_grp
go
create view v_autotpld_grp as 
select   b2g(tpld_grp. tpld_grpid) tpld_grpid,tpld_grp. changestamp changestamp
, 
tpld_grp.cgrpnm 
tpld_grp_cgrpnm 
, 
tpld_grp.ctxt 
tpld_grp_ctxt 
, 
 b2g(tpld_grp.theclient)  
tpld_grp_theclient_id, 
 bpc_info_brief_f(tpld_grp.theclient, null) 
tpld_grp_theclient 
, b2g(tpld_grp.instanceid) instanceid 
, tpld_grp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_grp.tpld_grpid) id 
, 'tpld_grp' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_GRP
 join INSTANCE on TPLD_GRP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_grp_ru_ru
go
create view v_autotpld_grp_ru_ru as 
select   b2g(tpld_grp. tpld_grpid) tpld_grpid,tpld_grp. changestamp changestamp
, 
tpld_grp.cgrpnm 
tpld_grp_cgrpnm 
, 
tpld_grp.ctxt 
tpld_grp_ctxt 
, 
 b2g(tpld_grp.theclient)  
tpld_grp_theclient_id, 
 bpc_info_brief_f(tpld_grp.theclient, 'ru_ru') 
tpld_grp_theclient 
, b2g(tpld_grp.instanceid) instanceid 
, tpld_grp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_grp.tpld_grpid) id 
, 'tpld_grp' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_GRP
 join INSTANCE on TPLD_GRP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_grp_en_us
go
create view v_autotpld_grp_en_us as 
select   b2g(tpld_grp. tpld_grpid) tpld_grpid,tpld_grp. changestamp changestamp
, 
tpld_grp.cgrpnm 
tpld_grp_cgrpnm 
, 
tpld_grp.ctxt 
tpld_grp_ctxt 
, 
 b2g(tpld_grp.theclient)  
tpld_grp_theclient_id, 
 bpc_info_brief_f(tpld_grp.theclient, 'en_us') 
tpld_grp_theclient 
, b2g(tpld_grp.instanceid) instanceid 
, tpld_grp.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_grp.tpld_grpid) id 
, 'tpld_grp' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_GRP
 join INSTANCE on TPLD_GRP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_snabtop
go
create view v_autotpld_snabtop as 
select   b2g(tpld_snabtop. tpld_snabtopid) tpld_snabtopid,tpld_snabtop. changestamp changestamp
, 
tpld_snabtop.cfio 
tpld_snabtop_cfio 
, 
tpld_snabtop.cname 
tpld_snabtop_cname 
, 
tpld_snabtop.caddress 
tpld_snabtop_caddress 
, 
tpld_snabtop.cphone 
tpld_snabtop_cphone 
, 
tpld_snabtop.cregion 
tpld_snabtop_cregion 
, b2g(tpld_snabtop.instanceid) instanceid 
, tpld_snabtop.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_snabtop.tpld_snabtopid) id 
, 'tpld_snabtop' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_SNABTOP
 join INSTANCE on TPLD_SNABTOP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_snabtop_ru_ru
go
create view v_autotpld_snabtop_ru_ru as 
select   b2g(tpld_snabtop. tpld_snabtopid) tpld_snabtopid,tpld_snabtop. changestamp changestamp
, 
tpld_snabtop.cfio 
tpld_snabtop_cfio 
, 
tpld_snabtop.cname 
tpld_snabtop_cname 
, 
tpld_snabtop.caddress 
tpld_snabtop_caddress 
, 
tpld_snabtop.cphone 
tpld_snabtop_cphone 
, 
tpld_snabtop.cregion 
tpld_snabtop_cregion 
, b2g(tpld_snabtop.instanceid) instanceid 
, tpld_snabtop.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_snabtop.tpld_snabtopid) id 
, 'tpld_snabtop' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_SNABTOP
 join INSTANCE on TPLD_SNABTOP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_snabtop_en_us
go
create view v_autotpld_snabtop_en_us as 
select   b2g(tpld_snabtop. tpld_snabtopid) tpld_snabtopid,tpld_snabtop. changestamp changestamp
, 
tpld_snabtop.cfio 
tpld_snabtop_cfio 
, 
tpld_snabtop.cname 
tpld_snabtop_cname 
, 
tpld_snabtop.caddress 
tpld_snabtop_caddress 
, 
tpld_snabtop.cphone 
tpld_snabtop_cphone 
, 
tpld_snabtop.cregion 
tpld_snabtop_cregion 
, b2g(tpld_snabtop.instanceid) instanceid 
, tpld_snabtop.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_snabtop.tpld_snabtopid) id 
, 'tpld_snabtop' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_SNABTOP
 join INSTANCE on TPLD_SNABTOP.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_param
go
create view v_autotpld_param as 
select   b2g(tpld_param. tpld_paramid) tpld_paramid,tpld_param. changestamp changestamp
, 
 tpld_param.showas  
tpld_param_showas_val, 
 case tpld_param.showas 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
tpld_param_showas 
, 
tpld_param.name 
tpld_param_name 
, 
tpld_param.paramfield 
tpld_param_paramfield 
, b2g(tpld_param.instanceid) instanceid 
, tpld_param.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_param.tpld_paramid) id 
, 'tpld_param' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_PARAM
 join INSTANCE on TPLD_PARAM.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_param_ru_ru
go
create view v_autotpld_param_ru_ru as 
select   b2g(tpld_param. tpld_paramid) tpld_paramid,tpld_param. changestamp changestamp
, 
 tpld_param.showas  
tpld_param_showas_val, 
 case tpld_param.showas 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
tpld_param_showas 
, 
tpld_param.name 
tpld_param_name 
, 
tpld_param.paramfield 
tpld_param_paramfield 
, b2g(tpld_param.instanceid) instanceid 
, tpld_param.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_param.tpld_paramid) id 
, 'tpld_param' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_PARAM
 join INSTANCE on TPLD_PARAM.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_param_en_us
go
create view v_autotpld_param_en_us as 
select   b2g(tpld_param. tpld_paramid) tpld_paramid,tpld_param. changestamp changestamp
, 
 tpld_param.showas  
tpld_param_showas_val, 
 case tpld_param.showas 
when 0 then 'as string'
when 1 then 'as numeric'
when 2 then 'as date'
 else '' 
 end  
tpld_param_showas 
, 
tpld_param.name 
tpld_param_name 
, 
tpld_param.paramfield 
tpld_param_paramfield 
, b2g(tpld_param.instanceid) instanceid 
, tpld_param.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_param.tpld_paramid) id 
, 'tpld_param' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_PARAM
 join INSTANCE on TPLD_PARAM.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_devtype
go
create view v_autotpld_devtype as 
select   b2g(tpld_devtype. tpld_devtypeid) tpld_devtypeid,tpld_devtype. changestamp changestamp
, 
tpld_devtype.driverlibname 
tpld_devtype_driverlibname 
, 
 b2g(tpld_devtype.devclass)  
tpld_devtype_devclass_id, 
 tpld_devclass_brief_f(tpld_devtype.devclass, null) 
tpld_devtype_devclass 
, 
tpld_devtype.name 
tpld_devtype_name 
, b2g(tpld_devtype.instanceid) instanceid 
, tpld_devtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_devtype.tpld_devtypeid) id 
, 'tpld_devtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_DEVTYPE
 join INSTANCE on TPLD_DEVTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_devtype_ru_ru
go
create view v_autotpld_devtype_ru_ru as 
select   b2g(tpld_devtype. tpld_devtypeid) tpld_devtypeid,tpld_devtype. changestamp changestamp
, 
tpld_devtype.driverlibname 
tpld_devtype_driverlibname 
, 
 b2g(tpld_devtype.devclass)  
tpld_devtype_devclass_id, 
 tpld_devclass_brief_f(tpld_devtype.devclass, 'ru_ru') 
tpld_devtype_devclass 
, 
tpld_devtype.name 
tpld_devtype_name 
, b2g(tpld_devtype.instanceid) instanceid 
, tpld_devtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_devtype.tpld_devtypeid) id 
, 'tpld_devtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_DEVTYPE
 join INSTANCE on TPLD_DEVTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpld_devtype_en_us
go
create view v_autotpld_devtype_en_us as 
select   b2g(tpld_devtype. tpld_devtypeid) tpld_devtypeid,tpld_devtype. changestamp changestamp
, 
tpld_devtype.driverlibname 
tpld_devtype_driverlibname 
, 
 b2g(tpld_devtype.devclass)  
tpld_devtype_devclass_id, 
 tpld_devclass_brief_f(tpld_devtype.devclass, 'en_us') 
tpld_devtype_devclass 
, 
tpld_devtype.name 
tpld_devtype_name 
, b2g(tpld_devtype.instanceid) instanceid 
, tpld_devtype.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpld_devtype.tpld_devtypeid) id 
, 'tpld_devtype' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLD_DEVTYPE
 join INSTANCE on TPLD_DEVTYPE.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autousers
go
create view v_autousers as 
select   b2g(users. usersid) usersid,users. changestamp changestamp
, 
users.login 
users_login 
, 
users.domainame 
users_domainame 
, 
users.surname 
users_surname 
, 
users.phone 
users_phone 
, 
users.email 
users_email 
, 
users.localphone 
users_localphone 
, 
users.name 
users_name 
, 
users.family 
users_family 
, b2g(users.instanceid) instanceid 
, users.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(users.usersid) id 
, 'users' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Users
 join INSTANCE on Users.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autousers_ru_ru
go
create view v_autousers_ru_ru as 
select   b2g(users. usersid) usersid,users. changestamp changestamp
, 
users.login 
users_login 
, 
users.domainame 
users_domainame 
, 
users.surname 
users_surname 
, 
users.phone 
users_phone 
, 
users.email 
users_email 
, 
users.localphone 
users_localphone 
, 
users.name 
users_name 
, 
users.family 
users_family 
, b2g(users.instanceid) instanceid 
, users.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(users.usersid) id 
, 'users' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Users
 join INSTANCE on Users.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autousers_en_us
go
create view v_autousers_en_us as 
select   b2g(users. usersid) usersid,users. changestamp changestamp
, 
users.login 
users_login 
, 
users.domainame 
users_domainame 
, 
users.surname 
users_surname 
, 
users.phone 
users_phone 
, 
users.email 
users_email 
, 
users.localphone 
users_localphone 
, 
users.name 
users_name 
, 
users.family 
users_family 
, b2g(users.instanceid) instanceid 
, users.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(users.usersid) id 
, 'users' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Users
 join INSTANCE on Users.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogroups
go
create view v_autogroups as 
select   b2g(groups. groupsid) groupsid,groups. changestamp changestamp
, 
groups.adgroup 
groups_adgroup 
, 
groups.name 
groups_name 
, b2g(groups.instanceid) instanceid 
, groups.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(groups.groupsid) id 
, 'groups' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Groups
 join INSTANCE on Groups.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogroups_ru_ru
go
create view v_autogroups_ru_ru as 
select   b2g(groups. groupsid) groupsid,groups. changestamp changestamp
, 
groups.adgroup 
groups_adgroup 
, 
groups.name 
groups_name 
, b2g(groups.instanceid) instanceid 
, groups.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(groups.groupsid) id 
, 'groups' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Groups
 join INSTANCE on Groups.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogroups_en_us
go
create view v_autogroups_en_us as 
select   b2g(groups. groupsid) groupsid,groups. changestamp changestamp
, 
groups.adgroup 
groups_adgroup 
, 
groups.name 
groups_name 
, b2g(groups.instanceid) instanceid 
, groups.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(groups.groupsid) id 
, 'groups' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Groups
 join INSTANCE on Groups.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogroupuser
go
create view v_autogroupuser as 
select   b2g(groupuser. groupuserid) groupuserid,groupuser. changestamp changestamp, b2g(groupsid) groupsid
, 
 b2g(groupuser.theuser)  
groupuser_theuser_id, 
 users_brief_f(groupuser.theuser, null) 
groupuser_theuser 
, b2g(groups.instanceid) instanceid 
, groups.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(groupuser.groupuserid) id 
, 'groupuser' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GroupUser
 join Groups on Groups.GroupsID=GroupUser.ParentStructRowID 
 join INSTANCE on Groups.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogroupuser_ru_ru
go
create view v_autogroupuser_ru_ru as 
select   b2g(groupuser. groupuserid) groupuserid,groupuser. changestamp changestamp, b2g(groupsid) groupsid
, 
 b2g(groupuser.theuser)  
groupuser_theuser_id, 
 users_brief_f(groupuser.theuser, 'ru_ru') 
groupuser_theuser 
, b2g(groups.instanceid) instanceid 
, groups.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(groupuser.groupuserid) id 
, 'groupuser' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GroupUser
 join Groups on Groups.GroupsID=GroupUser.ParentStructRowID 
 join INSTANCE on Groups.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autogroupuser_en_us
go
create view v_autogroupuser_en_us as 
select   b2g(groupuser. groupuserid) groupuserid,groupuser. changestamp changestamp, b2g(groupsid) groupsid
, 
 b2g(groupuser.theuser)  
groupuser_theuser_id, 
 users_brief_f(groupuser.theuser, 'en_us') 
groupuser_theuser 
, b2g(groups.instanceid) instanceid 
, groups.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(groupuser.groupuserid) id 
, 'groupuser' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from GroupUser
 join Groups on Groups.GroupsID=GroupUser.ParentStructRowID 
 join INSTANCE on Groups.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_modems
go
create view v_autotpsrv_modems as 
select   b2g(tpsrv_modems. tpsrv_modemsid) tpsrv_modemsid,tpsrv_modems. changestamp changestamp
, 
tpsrv_modems.useduntil 
tpsrv_modems_useduntil 
, 
tpsrv_modems.portnum 
tpsrv_modems_portnum 
, 
 tpsrv_modems.isused  
tpsrv_modems_isused_val, 
 case tpsrv_modems.isused 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_modems_isused 
, 
 tpsrv_modems.isusable  
tpsrv_modems_isusable_val, 
 case tpsrv_modems.isusable 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_modems_isusable 
, b2g(tpsrv_modems.instanceid) instanceid 
, tpsrv_modems.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_modems.tpsrv_modemsid) id 
, 'tpsrv_modems' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_MODEMS
 join INSTANCE on TPSRV_MODEMS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_modems_ru_ru
go
create view v_autotpsrv_modems_ru_ru as 
select   b2g(tpsrv_modems. tpsrv_modemsid) tpsrv_modemsid,tpsrv_modems. changestamp changestamp
, 
tpsrv_modems.useduntil 
tpsrv_modems_useduntil 
, 
tpsrv_modems.portnum 
tpsrv_modems_portnum 
, 
 tpsrv_modems.isused  
tpsrv_modems_isused_val, 
 case tpsrv_modems.isused 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_modems_isused 
, 
 tpsrv_modems.isusable  
tpsrv_modems_isusable_val, 
 case tpsrv_modems.isusable 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_modems_isusable 
, b2g(tpsrv_modems.instanceid) instanceid 
, tpsrv_modems.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_modems.tpsrv_modemsid) id 
, 'tpsrv_modems' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_MODEMS
 join INSTANCE on TPSRV_MODEMS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_modems_en_us
go
create view v_autotpsrv_modems_en_us as 
select   b2g(tpsrv_modems. tpsrv_modemsid) tpsrv_modemsid,tpsrv_modems. changestamp changestamp
, 
tpsrv_modems.useduntil 
tpsrv_modems_useduntil 
, 
tpsrv_modems.portnum 
tpsrv_modems_portnum 
, 
 tpsrv_modems.isused  
tpsrv_modems_isused_val, 
 case tpsrv_modems.isused 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_modems_isused 
, 
 tpsrv_modems.isusable  
tpsrv_modems_isusable_val, 
 case tpsrv_modems.isusable 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_modems_isusable 
, b2g(tpsrv_modems.instanceid) instanceid 
, tpsrv_modems.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_modems.tpsrv_modemsid) id 
, 'tpsrv_modems' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_MODEMS
 join INSTANCE on TPSRV_MODEMS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_info
go
create view v_autotpsrv_info as 
select   b2g(tpsrv_info. tpsrv_infoid) tpsrv_infoid,tpsrv_info. changestamp changestamp
, 
tpsrv_info.name 
tpsrv_info_name 
, 
tpsrv_info.ipaddr 
tpsrv_info_ipaddr 
, b2g(tpsrv_info.instanceid) instanceid 
, tpsrv_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_info.tpsrv_infoid) id 
, 'tpsrv_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_INFO
 join INSTANCE on TPSRV_INFO.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_info_ru_ru
go
create view v_autotpsrv_info_ru_ru as 
select   b2g(tpsrv_info. tpsrv_infoid) tpsrv_infoid,tpsrv_info. changestamp changestamp
, 
tpsrv_info.name 
tpsrv_info_name 
, 
tpsrv_info.ipaddr 
tpsrv_info_ipaddr 
, b2g(tpsrv_info.instanceid) instanceid 
, tpsrv_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_info.tpsrv_infoid) id 
, 'tpsrv_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_INFO
 join INSTANCE on TPSRV_INFO.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_info_en_us
go
create view v_autotpsrv_info_en_us as 
select   b2g(tpsrv_info. tpsrv_infoid) tpsrv_infoid,tpsrv_info. changestamp changestamp
, 
tpsrv_info.name 
tpsrv_info_name 
, 
tpsrv_info.ipaddr 
tpsrv_info_ipaddr 
, b2g(tpsrv_info.instanceid) instanceid 
, tpsrv_info.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_info.tpsrv_infoid) id 
, 'tpsrv_info' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_INFO
 join INSTANCE on TPSRV_INFO.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_ports
go
create view v_autotpsrv_ports as 
select   b2g(tpsrv_ports. tpsrv_portsid) tpsrv_portsid,tpsrv_ports. changestamp changestamp
, 
tpsrv_ports.useduntil 
tpsrv_ports_useduntil 
, 
 tpsrv_ports.isused  
tpsrv_ports_isused_val, 
 case tpsrv_ports.isused 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_ports_isused 
, 
tpsrv_ports.portname 
tpsrv_ports_portname 
, 
 tpsrv_ports.isusable  
tpsrv_ports_isusable_val, 
 case tpsrv_ports.isusable 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_ports_isusable 
, b2g(tpsrv_ports.instanceid) instanceid 
, tpsrv_ports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_ports.tpsrv_portsid) id 
, 'tpsrv_ports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_PORTS
 join INSTANCE on TPSRV_PORTS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_ports_ru_ru
go
create view v_autotpsrv_ports_ru_ru as 
select   b2g(tpsrv_ports. tpsrv_portsid) tpsrv_portsid,tpsrv_ports. changestamp changestamp
, 
tpsrv_ports.useduntil 
tpsrv_ports_useduntil 
, 
 tpsrv_ports.isused  
tpsrv_ports_isused_val, 
 case tpsrv_ports.isused 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_ports_isused 
, 
tpsrv_ports.portname 
tpsrv_ports_portname 
, 
 tpsrv_ports.isusable  
tpsrv_ports_isusable_val, 
 case tpsrv_ports.isusable 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_ports_isusable 
, b2g(tpsrv_ports.instanceid) instanceid 
, tpsrv_ports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_ports.tpsrv_portsid) id 
, 'tpsrv_ports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_PORTS
 join INSTANCE on TPSRV_PORTS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpsrv_ports_en_us
go
create view v_autotpsrv_ports_en_us as 
select   b2g(tpsrv_ports. tpsrv_portsid) tpsrv_portsid,tpsrv_ports. changestamp changestamp
, 
tpsrv_ports.useduntil 
tpsrv_ports_useduntil 
, 
 tpsrv_ports.isused  
tpsrv_ports_isused_val, 
 case tpsrv_ports.isused 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_ports_isused 
, 
tpsrv_ports.portname 
tpsrv_ports_portname 
, 
 tpsrv_ports.isusable  
tpsrv_ports_isusable_val, 
 case tpsrv_ports.isusable 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpsrv_ports_isusable 
, b2g(tpsrv_ports.instanceid) instanceid 
, tpsrv_ports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpsrv_ports.tpsrv_portsid) id 
, 'tpsrv_ports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPSRV_PORTS
 join INSTANCE on TPSRV_PORTS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_zones
go
create view v_autonum_zones as 
select   b2g(num_zones. num_zonesid) num_zonesid,num_zones. changestamp changestamp
, 
num_zones.zonemask 
num_zones_zonemask 
, b2g(num_zones.instanceid) instanceid 
, num_zones.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_zones.num_zonesid) id 
, 'num_zones' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_zones
 join INSTANCE on Num_zones.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_zones_ru_ru
go
create view v_autonum_zones_ru_ru as 
select   b2g(num_zones. num_zonesid) num_zonesid,num_zones. changestamp changestamp
, 
num_zones.zonemask 
num_zones_zonemask 
, b2g(num_zones.instanceid) instanceid 
, num_zones.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_zones.num_zonesid) id 
, 'num_zones' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_zones
 join INSTANCE on Num_zones.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_zones_en_us
go
create view v_autonum_zones_en_us as 
select   b2g(num_zones. num_zonesid) num_zonesid,num_zones. changestamp changestamp
, 
num_zones.zonemask 
num_zones_zonemask 
, b2g(num_zones.instanceid) instanceid 
, num_zones.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_zones.num_zonesid) id 
, 'num_zones' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_zones
 join INSTANCE on Num_zones.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_values
go
create view v_autonum_values as 
select   b2g(num_values. num_valuesid) num_valuesid,num_values. changestamp changestamp, b2g(num_zonesid) num_zonesid
, 
num_values.ownerpartname 
num_values_ownerpartname 
, 
num_values.ownerrowid 
num_values_ownerrowid 
, 
num_values.the_value 
num_values_the_value 
, b2g(num_zones.instanceid) instanceid 
, num_zones.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_values.num_valuesid) id 
, 'num_values' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_Values
 join Num_zones on Num_zones.Num_zonesID=Num_Values.ParentStructRowID 
 join INSTANCE on Num_zones.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_values_ru_ru
go
create view v_autonum_values_ru_ru as 
select   b2g(num_values. num_valuesid) num_valuesid,num_values. changestamp changestamp, b2g(num_zonesid) num_zonesid
, 
num_values.ownerpartname 
num_values_ownerpartname 
, 
num_values.ownerrowid 
num_values_ownerrowid 
, 
num_values.the_value 
num_values_the_value 
, b2g(num_zones.instanceid) instanceid 
, num_zones.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_values.num_valuesid) id 
, 'num_values' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_Values
 join Num_zones on Num_zones.Num_zonesID=Num_Values.ParentStructRowID 
 join INSTANCE on Num_zones.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_values_en_us
go
create view v_autonum_values_en_us as 
select   b2g(num_values. num_valuesid) num_valuesid,num_values. changestamp changestamp, b2g(num_zonesid) num_zonesid
, 
num_values.ownerpartname 
num_values_ownerpartname 
, 
num_values.ownerrowid 
num_values_ownerrowid 
, 
num_values.the_value 
num_values_the_value 
, b2g(num_zones.instanceid) instanceid 
, num_zones.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_values.num_valuesid) id 
, 'num_values' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_Values
 join Num_zones on Num_zones.Num_zonesID=Num_Values.ParentStructRowID 
 join INSTANCE on Num_zones.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_head
go
create view v_autonum_head as 
select   b2g(num_head. num_headid) num_headid,num_head. changestamp changestamp
, 
 num_head.shema  
num_head_shema_val, 
 case num_head.shema 
when 2 then 'по кварталу'
when 3 then 'по месяцу'
when 0 then 'единая зона'
when 4 then 'по дню'
when 1 then 'по году'
when 10 then 'произвольные зоны'
 else '' 
 end  
num_head_shema 
, 
num_head.name 
num_head_name 
, b2g(num_head.instanceid) instanceid 
, num_head.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_head.num_headid) id 
, 'num_head' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_head
 join INSTANCE on Num_head.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_head_ru_ru
go
create view v_autonum_head_ru_ru as 
select   b2g(num_head. num_headid) num_headid,num_head. changestamp changestamp
, 
 num_head.shema  
num_head_shema_val, 
 case num_head.shema 
when 2 then 'по кварталу'
when 3 then 'по месяцу'
when 0 then 'единая зона'
when 4 then 'по дню'
when 1 then 'по году'
when 10 then 'произвольные зоны'
 else '' 
 end  
num_head_shema 
, 
num_head.name 
num_head_name 
, b2g(num_head.instanceid) instanceid 
, num_head.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_head.num_headid) id 
, 'num_head' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_head
 join INSTANCE on Num_head.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autonum_head_en_us
go
create view v_autonum_head_en_us as 
select   b2g(num_head. num_headid) num_headid,num_head. changestamp changestamp
, 
 num_head.shema  
num_head_shema_val, 
 case num_head.shema 
when 2 then 'по кварталу'
when 3 then 'по месяцу'
when 0 then 'единая зона'
when 4 then 'по дню'
when 1 then 'по году'
when 10 then 'произвольные зоны'
 else '' 
 end  
num_head_shema 
, 
num_head.name 
num_head_name 
, b2g(num_head.instanceid) instanceid 
, num_head.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(num_head.num_headid) id 
, 'num_head' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Num_head
 join INSTANCE on Num_head.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_reports
go
create view v_autotplt_reports as 
select   b2g(tplt_reports. tplt_reportsid) tplt_reportsid,tplt_reports. changestamp changestamp
, 
 b2g(tplt_reports.reptype)  
tplt_reports_reptype_id, 
 tpld_paramtype_brief_f(tplt_reports.reptype, null) 
tplt_reports_reptype 
, 
tplt_reports.name 
tplt_reports_name 
, 
tplt_reports.thefile 
tplt_reports_thefile 
, b2g(tplt_reports.instanceid) instanceid 
, tplt_reports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_reports.tplt_reportsid) id 
, 'tplt_reports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_REPORTS
 join INSTANCE on TPLT_REPORTS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_reports_ru_ru
go
create view v_autotplt_reports_ru_ru as 
select   b2g(tplt_reports. tplt_reportsid) tplt_reportsid,tplt_reports. changestamp changestamp
, 
 b2g(tplt_reports.reptype)  
tplt_reports_reptype_id, 
 tpld_paramtype_brief_f(tplt_reports.reptype, 'ru_ru') 
tplt_reports_reptype 
, 
tplt_reports.name 
tplt_reports_name 
, 
tplt_reports.thefile 
tplt_reports_thefile 
, b2g(tplt_reports.instanceid) instanceid 
, tplt_reports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_reports.tplt_reportsid) id 
, 'tplt_reports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_REPORTS
 join INSTANCE on TPLT_REPORTS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_reports_en_us
go
create view v_autotplt_reports_en_us as 
select   b2g(tplt_reports. tplt_reportsid) tplt_reportsid,tplt_reports. changestamp changestamp
, 
 b2g(tplt_reports.reptype)  
tplt_reports_reptype_id, 
 tpld_paramtype_brief_f(tplt_reports.reptype, 'en_us') 
tplt_reports_reptype 
, 
tplt_reports.name 
tplt_reports_name 
, 
tplt_reports.thefile 
tplt_reports_thefile 
, b2g(tplt_reports.instanceid) instanceid 
, tplt_reports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_reports.tplt_reportsid) id 
, 'tplt_reports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_REPORTS
 join INSTANCE on TPLT_REPORTS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_connect
go
create view v_autotplt_connect as 
select   b2g(tplt_connect. tplt_connectid) tplt_connectid,tplt_connect. changestamp changestamp
, 
 tplt_connect.cparity  
tplt_connect_cparity_val, 
 case tplt_connect.cparity 
when 4 then 'space'
when 3 then 'mark'
when 2 then 'odd'
when 0 then 'none'
when 1 then 'even'
 else '' 
 end  
tplt_connect_cparity 
, 
tplt_connect.flowcontrol 
tplt_connect_flowcontrol 
, 
tplt_connect.password 
tplt_connect_password 
, 
tplt_connect.username 
tplt_connect_username 
, 
 tplt_connect.connectionenabled  
tplt_connect_connectionenabled_val, 
 case tplt_connect.connectionenabled 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_connect_connectionenabled 
, 
tplt_connect.cspeed 
tplt_connect_cspeed 
, 
tplt_connect.cphone 
tplt_connect_cphone 
, 
tplt_connect.cstopbits 
tplt_connect_cstopbits 
, 
 b2g(tplt_connect.theserver)  
tplt_connect_theserver_id, 
 tpsrv_info_brief_f(tplt_connect.theserver, null) 
tplt_connect_theserver 
, 
tplt_connect.ipaddr 
tplt_connect_ipaddr 
, 
tplt_connect.comportnum 
tplt_connect_comportnum 
, 
tplt_connect.portnum 
tplt_connect_portnum 
, 
 b2g(tplt_connect.connecttype)  
tplt_connect_connecttype_id, 
 tpld_connecttype_brief_f(tplt_connect.connecttype, null) 
tplt_connect_connecttype 
, 
tplt_connect.atcommand 
tplt_connect_atcommand 
, 
tplt_connect.ctowncode 
tplt_connect_ctowncode 
, 
tplt_connect.connectlimit 
tplt_connect_connectlimit 
, 
tplt_connect.cdatabit 
tplt_connect_cdatabit 
, b2g(tplt_connect.instanceid) instanceid 
, tplt_connect.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_connect.tplt_connectid) id 
, 'tplt_connect' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_CONNECT
 join INSTANCE on TPLT_CONNECT.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid
 group by TPLT_CONNECT.InstanceID, TPLT_CONNECT.TPLT_CONNECTID 
,TPLT_CONNECT.CPARITY 
,TPLT_CONNECT.FlowControl 
,TPLT_CONNECT.Password 
,TPLT_CONNECT.UserName 
,TPLT_CONNECT.ConnectionEnabled 
,TPLT_CONNECT.CSPEED 
,TPLT_CONNECT.CPHONE 
,TPLT_CONNECT.CSTOPBITS 
,TPLT_CONNECT.TheServer 
,TPLT_CONNECT.IPAddr 
,TPLT_CONNECT.ComPortNum 
,TPLT_CONNECT.PortNum 
,TPLT_CONNECT.ConnectType 
,TPLT_CONNECT.ATCommand 
,TPLT_CONNECT.CTOWNCODE 
,TPLT_CONNECT.CONNECTLIMIT 
,TPLT_CONNECT.CDATABIT 
GO


drop view if exists v_autotplt_connect_ru_ru
go
create view v_autotplt_connect_ru_ru as 
select   b2g(tplt_connect. tplt_connectid) tplt_connectid,tplt_connect. changestamp changestamp
, 
 tplt_connect.cparity  
tplt_connect_cparity_val, 
 case tplt_connect.cparity 
when 4 then 'space'
when 3 then 'mark'
when 2 then 'odd'
when 0 then 'none'
when 1 then 'even'
 else '' 
 end  
tplt_connect_cparity 
, 
tplt_connect.flowcontrol 
tplt_connect_flowcontrol 
, 
tplt_connect.password 
tplt_connect_password 
, 
tplt_connect.username 
tplt_connect_username 
, 
 tplt_connect.connectionenabled  
tplt_connect_connectionenabled_val, 
 case tplt_connect.connectionenabled 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_connect_connectionenabled 
, 
tplt_connect.cspeed 
tplt_connect_cspeed 
, 
tplt_connect.cphone 
tplt_connect_cphone 
, 
tplt_connect.cstopbits 
tplt_connect_cstopbits 
, 
 b2g(tplt_connect.theserver)  
tplt_connect_theserver_id, 
 tpsrv_info_brief_f(tplt_connect.theserver, 'ru_ru') 
tplt_connect_theserver 
, 
tplt_connect.ipaddr 
tplt_connect_ipaddr 
, 
tplt_connect.comportnum 
tplt_connect_comportnum 
, 
tplt_connect.portnum 
tplt_connect_portnum 
, 
 b2g(tplt_connect.connecttype)  
tplt_connect_connecttype_id, 
 tpld_connecttype_brief_f(tplt_connect.connecttype, 'ru_ru') 
tplt_connect_connecttype 
, 
tplt_connect.atcommand 
tplt_connect_atcommand 
, 
tplt_connect.ctowncode 
tplt_connect_ctowncode 
, 
tplt_connect.connectlimit 
tplt_connect_connectlimit 
, 
tplt_connect.cdatabit 
tplt_connect_cdatabit 
, b2g(tplt_connect.instanceid) instanceid 
, tplt_connect.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_connect.tplt_connectid) id 
, 'tplt_connect' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_CONNECT
 join INSTANCE on TPLT_CONNECT.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid
 group by TPLT_CONNECT.InstanceID, TPLT_CONNECT.TPLT_CONNECTID 
,TPLT_CONNECT.CPARITY 
,TPLT_CONNECT.FlowControl 
,TPLT_CONNECT.Password 
,TPLT_CONNECT.UserName 
,TPLT_CONNECT.ConnectionEnabled 
,TPLT_CONNECT.CSPEED 
,TPLT_CONNECT.CPHONE 
,TPLT_CONNECT.CSTOPBITS 
,TPLT_CONNECT.TheServer 
,TPLT_CONNECT.IPAddr 
,TPLT_CONNECT.ComPortNum 
,TPLT_CONNECT.PortNum 
,TPLT_CONNECT.ConnectType 
,TPLT_CONNECT.ATCommand 
,TPLT_CONNECT.CTOWNCODE 
,TPLT_CONNECT.CONNECTLIMIT 
,TPLT_CONNECT.CDATABIT 
GO


drop view if exists v_autotplt_connect_en_us
go
create view v_autotplt_connect_en_us as 
select   b2g(tplt_connect. tplt_connectid) tplt_connectid,tplt_connect. changestamp changestamp
, 
 tplt_connect.cparity  
tplt_connect_cparity_val, 
 case tplt_connect.cparity 
when 4 then 'space'
when 3 then 'mark'
when 2 then 'odd'
when 0 then 'none'
when 1 then 'even'
 else '' 
 end  
tplt_connect_cparity 
, 
tplt_connect.flowcontrol 
tplt_connect_flowcontrol 
, 
tplt_connect.password 
tplt_connect_password 
, 
tplt_connect.username 
tplt_connect_username 
, 
 tplt_connect.connectionenabled  
tplt_connect_connectionenabled_val, 
 case tplt_connect.connectionenabled 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_connect_connectionenabled 
, 
tplt_connect.cspeed 
tplt_connect_cspeed 
, 
tplt_connect.cphone 
tplt_connect_cphone 
, 
tplt_connect.cstopbits 
tplt_connect_cstopbits 
, 
 b2g(tplt_connect.theserver)  
tplt_connect_theserver_id, 
 tpsrv_info_brief_f(tplt_connect.theserver, 'en_us') 
tplt_connect_theserver 
, 
tplt_connect.ipaddr 
tplt_connect_ipaddr 
, 
tplt_connect.comportnum 
tplt_connect_comportnum 
, 
tplt_connect.portnum 
tplt_connect_portnum 
, 
 b2g(tplt_connect.connecttype)  
tplt_connect_connecttype_id, 
 tpld_connecttype_brief_f(tplt_connect.connecttype, 'en_us') 
tplt_connect_connecttype 
, 
tplt_connect.atcommand 
tplt_connect_atcommand 
, 
tplt_connect.ctowncode 
tplt_connect_ctowncode 
, 
tplt_connect.connectlimit 
tplt_connect_connectlimit 
, 
tplt_connect.cdatabit 
tplt_connect_cdatabit 
, b2g(tplt_connect.instanceid) instanceid 
, tplt_connect.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_connect.tplt_connectid) id 
, 'tplt_connect' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_CONNECT
 join INSTANCE on TPLT_CONNECT.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid
 group by TPLT_CONNECT.InstanceID, TPLT_CONNECT.TPLT_CONNECTID 
,TPLT_CONNECT.CPARITY 
,TPLT_CONNECT.FlowControl 
,TPLT_CONNECT.Password 
,TPLT_CONNECT.UserName 
,TPLT_CONNECT.ConnectionEnabled 
,TPLT_CONNECT.CSPEED 
,TPLT_CONNECT.CPHONE 
,TPLT_CONNECT.CSTOPBITS 
,TPLT_CONNECT.TheServer 
,TPLT_CONNECT.IPAddr 
,TPLT_CONNECT.ComPortNum 
,TPLT_CONNECT.PortNum 
,TPLT_CONNECT.ConnectType 
,TPLT_CONNECT.ATCommand 
,TPLT_CONNECT.CTOWNCODE 
,TPLT_CONNECT.CONNECTLIMIT 
,TPLT_CONNECT.CDATABIT 
GO


drop view if exists v_autotplt_valuebounds
go
create view v_autotplt_valuebounds as 
select   b2g(tplt_valuebounds. tplt_valueboundsid) tplt_valueboundsid,tplt_valuebounds. changestamp changestamp
, 
 tplt_valuebounds.ismin  
tplt_valuebounds_ismin_val, 
 case tplt_valuebounds.ismin 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_valuebounds_ismin 
, 
tplt_valuebounds.pmax 
tplt_valuebounds_pmax 
, 
tplt_valuebounds.pmin 
tplt_valuebounds_pmin 
, 
 b2g(tplt_valuebounds.pname)  
tplt_valuebounds_pname_id, 
 tpld_param_brief_f(tplt_valuebounds.pname, null) 
tplt_valuebounds_pname 
, 
 tplt_valuebounds.ismax  
tplt_valuebounds_ismax_val, 
 case tplt_valuebounds.ismax 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_valuebounds_ismax 
, 
 b2g(tplt_valuebounds.ptype)  
tplt_valuebounds_ptype_id, 
 tpld_paramtype_brief_f(tplt_valuebounds.ptype, null) 
tplt_valuebounds_ptype 
, b2g(tplt_valuebounds.instanceid) instanceid 
, tplt_valuebounds.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_valuebounds.tplt_valueboundsid) id 
, 'tplt_valuebounds' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_VALUEBOUNDS
 join INSTANCE on TPLT_VALUEBOUNDS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_valuebounds_ru_ru
go
create view v_autotplt_valuebounds_ru_ru as 
select   b2g(tplt_valuebounds. tplt_valueboundsid) tplt_valueboundsid,tplt_valuebounds. changestamp changestamp
, 
 tplt_valuebounds.ismin  
tplt_valuebounds_ismin_val, 
 case tplt_valuebounds.ismin 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_valuebounds_ismin 
, 
tplt_valuebounds.pmax 
tplt_valuebounds_pmax 
, 
tplt_valuebounds.pmin 
tplt_valuebounds_pmin 
, 
 b2g(tplt_valuebounds.pname)  
tplt_valuebounds_pname_id, 
 tpld_param_brief_f(tplt_valuebounds.pname, 'ru_ru') 
tplt_valuebounds_pname 
, 
 tplt_valuebounds.ismax  
tplt_valuebounds_ismax_val, 
 case tplt_valuebounds.ismax 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_valuebounds_ismax 
, 
 b2g(tplt_valuebounds.ptype)  
tplt_valuebounds_ptype_id, 
 tpld_paramtype_brief_f(tplt_valuebounds.ptype, 'ru_ru') 
tplt_valuebounds_ptype 
, b2g(tplt_valuebounds.instanceid) instanceid 
, tplt_valuebounds.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_valuebounds.tplt_valueboundsid) id 
, 'tplt_valuebounds' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_VALUEBOUNDS
 join INSTANCE on TPLT_VALUEBOUNDS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_valuebounds_en_us
go
create view v_autotplt_valuebounds_en_us as 
select   b2g(tplt_valuebounds. tplt_valueboundsid) tplt_valueboundsid,tplt_valuebounds. changestamp changestamp
, 
 tplt_valuebounds.ismin  
tplt_valuebounds_ismin_val, 
 case tplt_valuebounds.ismin 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_valuebounds_ismin 
, 
tplt_valuebounds.pmax 
tplt_valuebounds_pmax 
, 
tplt_valuebounds.pmin 
tplt_valuebounds_pmin 
, 
 b2g(tplt_valuebounds.pname)  
tplt_valuebounds_pname_id, 
 tpld_param_brief_f(tplt_valuebounds.pname, 'en_us') 
tplt_valuebounds_pname 
, 
 tplt_valuebounds.ismax  
tplt_valuebounds_ismax_val, 
 case tplt_valuebounds.ismax 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_valuebounds_ismax 
, 
 b2g(tplt_valuebounds.ptype)  
tplt_valuebounds_ptype_id, 
 tpld_paramtype_brief_f(tplt_valuebounds.ptype, 'en_us') 
tplt_valuebounds_ptype 
, b2g(tplt_valuebounds.instanceid) instanceid 
, tplt_valuebounds.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_valuebounds.tplt_valueboundsid) id 
, 'tplt_valuebounds' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_VALUEBOUNDS
 join INSTANCE on TPLT_VALUEBOUNDS.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_plancall
go
create view v_autotplt_plancall as 
select   b2g(tplt_plancall. tplt_plancallid) tplt_plancallid,tplt_plancall. changestamp changestamp
, 
tplt_plancall.dlastday 
tplt_plancall_dlastday 
, 
tplt_plancall.dnextcurr 
tplt_plancall_dnextcurr 
, 
 tplt_plancall.c24  
tplt_plancall_c24_val, 
 case tplt_plancall.c24 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_c24 
, 
 tplt_plancall.cstatus  
tplt_plancall_cstatus_val, 
 case tplt_plancall.cstatus 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_cstatus 
, 
tplt_plancall.numhour 
tplt_plancall_numhour 
, 
tplt_plancall.dnext24 
tplt_plancall_dnext24 
, 
tplt_plancall.dnextsum 
tplt_plancall_dnextsum 
, 
tplt_plancall.dlastcall 
tplt_plancall_dlastcall 
, 
 tplt_plancall.ccurr  
tplt_plancall_ccurr_val, 
 case tplt_plancall.ccurr 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_ccurr 
, 
tplt_plancall.dnexthour 
tplt_plancall_dnexthour 
, 
tplt_plancall.icall24 
tplt_plancall_icall24 
, 
tplt_plancall.nmaxcall 
tplt_plancall_nmaxcall 
, 
tplt_plancall.icallcurr 
tplt_plancall_icallcurr 
, 
tplt_plancall.icallsum 
tplt_plancall_icallsum 
, 
tplt_plancall.dlock 
tplt_plancall_dlock 
, 
tplt_plancall.minrepeat 
tplt_plancall_minrepeat 
, 
 tplt_plancall.chour  
tplt_plancall_chour_val, 
 case tplt_plancall.chour 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_chour 
, 
tplt_plancall.dlasthour 
tplt_plancall_dlasthour 
, 
tplt_plancall.num24 
tplt_plancall_num24 
, 
tplt_plancall.icall 
tplt_plancall_icall 
, 
 tplt_plancall.csum  
tplt_plancall_csum_val, 
 case tplt_plancall.csum 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_csum 
, b2g(tplt_plancall.instanceid) instanceid 
, tplt_plancall.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_plancall.tplt_plancallid) id 
, 'tplt_plancall' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_PLANCALL
 join INSTANCE on TPLT_PLANCALL.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_plancall_ru_ru
go
create view v_autotplt_plancall_ru_ru as 
select   b2g(tplt_plancall. tplt_plancallid) tplt_plancallid,tplt_plancall. changestamp changestamp
, 
tplt_plancall.dlastday 
tplt_plancall_dlastday 
, 
tplt_plancall.dnextcurr 
tplt_plancall_dnextcurr 
, 
 tplt_plancall.c24  
tplt_plancall_c24_val, 
 case tplt_plancall.c24 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_c24 
, 
 tplt_plancall.cstatus  
tplt_plancall_cstatus_val, 
 case tplt_plancall.cstatus 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_cstatus 
, 
tplt_plancall.numhour 
tplt_plancall_numhour 
, 
tplt_plancall.dnext24 
tplt_plancall_dnext24 
, 
tplt_plancall.dnextsum 
tplt_plancall_dnextsum 
, 
tplt_plancall.dlastcall 
tplt_plancall_dlastcall 
, 
 tplt_plancall.ccurr  
tplt_plancall_ccurr_val, 
 case tplt_plancall.ccurr 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_ccurr 
, 
tplt_plancall.dnexthour 
tplt_plancall_dnexthour 
, 
tplt_plancall.icall24 
tplt_plancall_icall24 
, 
tplt_plancall.nmaxcall 
tplt_plancall_nmaxcall 
, 
tplt_plancall.icallcurr 
tplt_plancall_icallcurr 
, 
tplt_plancall.icallsum 
tplt_plancall_icallsum 
, 
tplt_plancall.dlock 
tplt_plancall_dlock 
, 
tplt_plancall.minrepeat 
tplt_plancall_minrepeat 
, 
 tplt_plancall.chour  
tplt_plancall_chour_val, 
 case tplt_plancall.chour 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_chour 
, 
tplt_plancall.dlasthour 
tplt_plancall_dlasthour 
, 
tplt_plancall.num24 
tplt_plancall_num24 
, 
tplt_plancall.icall 
tplt_plancall_icall 
, 
 tplt_plancall.csum  
tplt_plancall_csum_val, 
 case tplt_plancall.csum 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_csum 
, b2g(tplt_plancall.instanceid) instanceid 
, tplt_plancall.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_plancall.tplt_plancallid) id 
, 'tplt_plancall' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_PLANCALL
 join INSTANCE on TPLT_PLANCALL.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_plancall_en_us
go
create view v_autotplt_plancall_en_us as 
select   b2g(tplt_plancall. tplt_plancallid) tplt_plancallid,tplt_plancall. changestamp changestamp
, 
tplt_plancall.dlastday 
tplt_plancall_dlastday 
, 
tplt_plancall.dnextcurr 
tplt_plancall_dnextcurr 
, 
 tplt_plancall.c24  
tplt_plancall_c24_val, 
 case tplt_plancall.c24 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_c24 
, 
 tplt_plancall.cstatus  
tplt_plancall_cstatus_val, 
 case tplt_plancall.cstatus 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_cstatus 
, 
tplt_plancall.numhour 
tplt_plancall_numhour 
, 
tplt_plancall.dnext24 
tplt_plancall_dnext24 
, 
tplt_plancall.dnextsum 
tplt_plancall_dnextsum 
, 
tplt_plancall.dlastcall 
tplt_plancall_dlastcall 
, 
 tplt_plancall.ccurr  
tplt_plancall_ccurr_val, 
 case tplt_plancall.ccurr 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_ccurr 
, 
tplt_plancall.dnexthour 
tplt_plancall_dnexthour 
, 
tplt_plancall.icall24 
tplt_plancall_icall24 
, 
tplt_plancall.nmaxcall 
tplt_plancall_nmaxcall 
, 
tplt_plancall.icallcurr 
tplt_plancall_icallcurr 
, 
tplt_plancall.icallsum 
tplt_plancall_icallsum 
, 
tplt_plancall.dlock 
tplt_plancall_dlock 
, 
tplt_plancall.minrepeat 
tplt_plancall_minrepeat 
, 
 tplt_plancall.chour  
tplt_plancall_chour_val, 
 case tplt_plancall.chour 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_chour 
, 
tplt_plancall.dlasthour 
tplt_plancall_dlasthour 
, 
tplt_plancall.num24 
tplt_plancall_num24 
, 
tplt_plancall.icall 
tplt_plancall_icall 
, 
 tplt_plancall.csum  
tplt_plancall_csum_val, 
 case tplt_plancall.csum 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_plancall_csum 
, b2g(tplt_plancall.instanceid) instanceid 
, tplt_plancall.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_plancall.tplt_plancallid) id 
, 'tplt_plancall' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_PLANCALL
 join INSTANCE on TPLT_PLANCALL.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_mask
go
create view v_autotplt_mask as 
select   b2g(tplt_mask. tplt_maskid) tplt_maskid,tplt_mask. changestamp changestamp
, 
tplt_mask.colwidth 
tplt_mask_colwidth 
, 
 b2g(tplt_mask.pname)  
tplt_mask_pname_id, 
 tpld_param_brief_f(tplt_mask.pname, null) 
tplt_mask_pname 
, 
tplt_mask.sequence 
tplt_mask_sequence 
, 
tplt_mask.paramformat 
tplt_mask_paramformat 
, 
 tplt_mask.phide  
tplt_mask_phide_val, 
 case tplt_mask.phide 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_mask_phide 
, 
 b2g(tplt_mask.ptype)  
tplt_mask_ptype_id, 
 tpld_paramtype_brief_f(tplt_mask.ptype, null) 
tplt_mask_ptype 
, b2g(tplt_mask.instanceid) instanceid 
, tplt_mask.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_mask.tplt_maskid) id 
, 'tplt_mask' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_MASK
 join INSTANCE on TPLT_MASK.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_mask_ru_ru
go
create view v_autotplt_mask_ru_ru as 
select   b2g(tplt_mask. tplt_maskid) tplt_maskid,tplt_mask. changestamp changestamp
, 
tplt_mask.colwidth 
tplt_mask_colwidth 
, 
 b2g(tplt_mask.pname)  
tplt_mask_pname_id, 
 tpld_param_brief_f(tplt_mask.pname, 'ru_ru') 
tplt_mask_pname 
, 
tplt_mask.sequence 
tplt_mask_sequence 
, 
tplt_mask.paramformat 
tplt_mask_paramformat 
, 
 tplt_mask.phide  
tplt_mask_phide_val, 
 case tplt_mask.phide 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_mask_phide 
, 
 b2g(tplt_mask.ptype)  
tplt_mask_ptype_id, 
 tpld_paramtype_brief_f(tplt_mask.ptype, 'ru_ru') 
tplt_mask_ptype 
, b2g(tplt_mask.instanceid) instanceid 
, tplt_mask.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_mask.tplt_maskid) id 
, 'tplt_mask' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_MASK
 join INSTANCE on TPLT_MASK.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_mask_en_us
go
create view v_autotplt_mask_en_us as 
select   b2g(tplt_mask. tplt_maskid) tplt_maskid,tplt_mask. changestamp changestamp
, 
tplt_mask.colwidth 
tplt_mask_colwidth 
, 
 b2g(tplt_mask.pname)  
tplt_mask_pname_id, 
 tpld_param_brief_f(tplt_mask.pname, 'en_us') 
tplt_mask_pname 
, 
tplt_mask.sequence 
tplt_mask_sequence 
, 
tplt_mask.paramformat 
tplt_mask_paramformat 
, 
 tplt_mask.phide  
tplt_mask_phide_val, 
 case tplt_mask.phide 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_mask_phide 
, 
 b2g(tplt_mask.ptype)  
tplt_mask_ptype_id, 
 tpld_paramtype_brief_f(tplt_mask.ptype, 'en_us') 
tplt_mask_ptype 
, b2g(tplt_mask.instanceid) instanceid 
, tplt_mask.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_mask.tplt_maskid) id 
, 'tplt_mask' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_MASK
 join INSTANCE on TPLT_MASK.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_bdevices
go
create view v_autotplt_bdevices as 
select   b2g(tplt_bdevices. tplt_bdevicesid) tplt_bdevicesid,tplt_bdevices. changestamp changestamp
, 
tplt_bdevices.thephone 
tplt_bdevices_thephone 
, 
 b2g(tplt_bdevices.thenode)  
tplt_bdevices_thenode_id, 
 tpn_def_brief_f(tplt_bdevices.thenode, null) 
tplt_bdevices_thenode 
, 
 b2g(tplt_bdevices.shab)  
tplt_bdevices_shab_id, 
 tpld_snab_brief_f(tplt_bdevices.shab, null) 
tplt_bdevices_shab 
, 
 tplt_bdevices.connected  
tplt_bdevices_connected_val, 
 case tplt_bdevices.connected 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_bdevices_connected 
, 
 b2g(tplt_bdevices.devtype)  
tplt_bdevices_devtype_id, 
 tpld_devtype_brief_f(tplt_bdevices.devtype, null) 
tplt_bdevices_devtype 
, 
tplt_bdevices.name 
tplt_bdevices_name 
, 
 b2g(tplt_bdevices.theserver)  
tplt_bdevices_theserver_id, 
 tpsrv_info_brief_f(tplt_bdevices.theserver, null) 
tplt_bdevices_theserver 
, 
 b2g(tplt_bdevices.theschema)  
tplt_bdevices_theschema_id, 
 tpls_info_brief_f(tplt_bdevices.theschema, null) 
tplt_bdevices_theschema 
, 
tplt_bdevices.addr 
tplt_bdevices_addr 
, 
 b2g(tplt_bdevices.devgrp)  
tplt_bdevices_devgrp_id, 
 tpld_grp_brief_f(tplt_bdevices.devgrp, null) 
tplt_bdevices_devgrp 
, 
tplt_bdevices.nplock 
tplt_bdevices_nplock 
, b2g(tplt_bdevices.instanceid) instanceid 
, tplt_bdevices.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_bdevices.tplt_bdevicesid) id 
, 'tplt_bdevices' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_BDEVICES
 join INSTANCE on TPLT_BDEVICES.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_bdevices_ru_ru
go
create view v_autotplt_bdevices_ru_ru as 
select   b2g(tplt_bdevices. tplt_bdevicesid) tplt_bdevicesid,tplt_bdevices. changestamp changestamp
, 
tplt_bdevices.thephone 
tplt_bdevices_thephone 
, 
 b2g(tplt_bdevices.thenode)  
tplt_bdevices_thenode_id, 
 tpn_def_brief_f(tplt_bdevices.thenode, 'ru_ru') 
tplt_bdevices_thenode 
, 
 b2g(tplt_bdevices.shab)  
tplt_bdevices_shab_id, 
 tpld_snab_brief_f(tplt_bdevices.shab, 'ru_ru') 
tplt_bdevices_shab 
, 
 tplt_bdevices.connected  
tplt_bdevices_connected_val, 
 case tplt_bdevices.connected 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_bdevices_connected 
, 
 b2g(tplt_bdevices.devtype)  
tplt_bdevices_devtype_id, 
 tpld_devtype_brief_f(tplt_bdevices.devtype, 'ru_ru') 
tplt_bdevices_devtype 
, 
tplt_bdevices.name 
tplt_bdevices_name 
, 
 b2g(tplt_bdevices.theserver)  
tplt_bdevices_theserver_id, 
 tpsrv_info_brief_f(tplt_bdevices.theserver, 'ru_ru') 
tplt_bdevices_theserver 
, 
 b2g(tplt_bdevices.theschema)  
tplt_bdevices_theschema_id, 
 tpls_info_brief_f(tplt_bdevices.theschema, 'ru_ru') 
tplt_bdevices_theschema 
, 
tplt_bdevices.addr 
tplt_bdevices_addr 
, 
 b2g(tplt_bdevices.devgrp)  
tplt_bdevices_devgrp_id, 
 tpld_grp_brief_f(tplt_bdevices.devgrp, 'ru_ru') 
tplt_bdevices_devgrp 
, 
tplt_bdevices.nplock 
tplt_bdevices_nplock 
, b2g(tplt_bdevices.instanceid) instanceid 
, tplt_bdevices.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_bdevices.tplt_bdevicesid) id 
, 'tplt_bdevices' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_BDEVICES
 join INSTANCE on TPLT_BDEVICES.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_bdevices_en_us
go
create view v_autotplt_bdevices_en_us as 
select   b2g(tplt_bdevices. tplt_bdevicesid) tplt_bdevicesid,tplt_bdevices. changestamp changestamp
, 
tplt_bdevices.thephone 
tplt_bdevices_thephone 
, 
 b2g(tplt_bdevices.thenode)  
tplt_bdevices_thenode_id, 
 tpn_def_brief_f(tplt_bdevices.thenode, 'en_us') 
tplt_bdevices_thenode 
, 
 b2g(tplt_bdevices.shab)  
tplt_bdevices_shab_id, 
 tpld_snab_brief_f(tplt_bdevices.shab, 'en_us') 
tplt_bdevices_shab 
, 
 tplt_bdevices.connected  
tplt_bdevices_connected_val, 
 case tplt_bdevices.connected 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tplt_bdevices_connected 
, 
 b2g(tplt_bdevices.devtype)  
tplt_bdevices_devtype_id, 
 tpld_devtype_brief_f(tplt_bdevices.devtype, 'en_us') 
tplt_bdevices_devtype 
, 
tplt_bdevices.name 
tplt_bdevices_name 
, 
 b2g(tplt_bdevices.theserver)  
tplt_bdevices_theserver_id, 
 tpsrv_info_brief_f(tplt_bdevices.theserver, 'en_us') 
tplt_bdevices_theserver 
, 
 b2g(tplt_bdevices.theschema)  
tplt_bdevices_theschema_id, 
 tpls_info_brief_f(tplt_bdevices.theschema, 'en_us') 
tplt_bdevices_theschema 
, 
tplt_bdevices.addr 
tplt_bdevices_addr 
, 
 b2g(tplt_bdevices.devgrp)  
tplt_bdevices_devgrp_id, 
 tpld_grp_brief_f(tplt_bdevices.devgrp, 'en_us') 
tplt_bdevices_devgrp 
, 
tplt_bdevices.nplock 
tplt_bdevices_nplock 
, b2g(tplt_bdevices.instanceid) instanceid 
, tplt_bdevices.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_bdevices.tplt_bdevicesid) id 
, 'tplt_bdevices' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_BDEVICES
 join INSTANCE on TPLT_BDEVICES.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_contract
go
create view v_autotplt_contract as 
select   b2g(tplt_contract. tplt_contractid) tplt_contractid,tplt_contract. changestamp changestamp
, 
tplt_contract.fld30 
tplt_contract_fld30 
, 
tplt_contract.fld73 
tplt_contract_fld73 
, 
tplt_contract.fld54 
tplt_contract_fld54 
, 
tplt_contract.fld67 
tplt_contract_fld67 
, 
tplt_contract.fld22 
tplt_contract_fld22 
, 
tplt_contract.fld60 
tplt_contract_fld60 
, 
tplt_contract.fld69 
tplt_contract_fld69 
, 
tplt_contract.fld43 
tplt_contract_fld43 
, 
tplt_contract.fld19 
tplt_contract_fld19 
, 
tplt_contract.fld66 
tplt_contract_fld66 
, 
tplt_contract.fld99 
tplt_contract_fld99 
, 
tplt_contract.fld49 
tplt_contract_fld49 
, 
tplt_contract.fld23 
tplt_contract_fld23 
, 
tplt_contract.fld92 
tplt_contract_fld92 
, 
tplt_contract.fld82 
tplt_contract_fld82 
, 
tplt_contract.fld27 
tplt_contract_fld27 
, 
tplt_contract.fld86 
tplt_contract_fld86 
, 
tplt_contract.fld41 
tplt_contract_fld41 
, 
tplt_contract.fld53 
tplt_contract_fld53 
, 
tplt_contract.fld59 
tplt_contract_fld59 
, 
tplt_contract.fld62 
tplt_contract_fld62 
, 
tplt_contract.fld14 
tplt_contract_fld14 
, 
tplt_contract.fld93 
tplt_contract_fld93 
, 
tplt_contract.fld35 
tplt_contract_fld35 
, 
tplt_contract.fld51 
tplt_contract_fld51 
, 
tplt_contract.fld15 
tplt_contract_fld15 
, 
tplt_contract.fld47 
tplt_contract_fld47 
, 
tplt_contract.fld85 
tplt_contract_fld85 
, 
tplt_contract.fld55 
tplt_contract_fld55 
, 
tplt_contract.fld13 
tplt_contract_fld13 
, 
tplt_contract.fld34 
tplt_contract_fld34 
, 
tplt_contract.fld17 
tplt_contract_fld17 
, 
tplt_contract.fld16 
tplt_contract_fld16 
, 
tplt_contract.fld37 
tplt_contract_fld37 
, 
tplt_contract.fld81 
tplt_contract_fld81 
, 
tplt_contract.fld58 
tplt_contract_fld58 
, 
tplt_contract.fld88 
tplt_contract_fld88 
, 
tplt_contract.fld21 
tplt_contract_fld21 
, 
tplt_contract.fld89 
tplt_contract_fld89 
, 
tplt_contract.fld98 
tplt_contract_fld98 
, 
tplt_contract.fld31 
tplt_contract_fld31 
, 
tplt_contract.fld101 
tplt_contract_fld101 
, 
tplt_contract.fld45 
tplt_contract_fld45 
, 
tplt_contract.fld103 
tplt_contract_fld103 
, 
tplt_contract.fld95 
tplt_contract_fld95 
, 
tplt_contract.fld46 
tplt_contract_fld46 
, 
tplt_contract.fld63 
tplt_contract_fld63 
, 
tplt_contract.fld71 
tplt_contract_fld71 
, 
tplt_contract.fld72 
tplt_contract_fld72 
, 
tplt_contract.fld83 
tplt_contract_fld83 
, 
tplt_contract.fld57 
tplt_contract_fld57 
, 
tplt_contract.fld84 
tplt_contract_fld84 
, 
tplt_contract.fld12 
tplt_contract_fld12 
, 
tplt_contract.fld61 
tplt_contract_fld61 
, 
tplt_contract.fld52 
tplt_contract_fld52 
, 
tplt_contract.fld32 
tplt_contract_fld32 
, 
tplt_contract.fld33 
tplt_contract_fld33 
, 
tplt_contract.fld26 
tplt_contract_fld26 
, 
tplt_contract.fld20 
tplt_contract_fld20 
, 
tplt_contract.fld70 
tplt_contract_fld70 
, 
tplt_contract.fld24 
tplt_contract_fld24 
, 
tplt_contract.fld56 
tplt_contract_fld56 
, 
tplt_contract.fld50 
tplt_contract_fld50 
, 
tplt_contract.fld68 
tplt_contract_fld68 
, 
tplt_contract.fld25 
tplt_contract_fld25 
, 
tplt_contract.fld28 
tplt_contract_fld28 
, 
tplt_contract.fld36 
tplt_contract_fld36 
, 
tplt_contract.fld102 
tplt_contract_fld102 
, 
tplt_contract.fld97 
tplt_contract_fld97 
, 
tplt_contract.fld40 
tplt_contract_fld40 
, 
tplt_contract.fld18 
tplt_contract_fld18 
, 
tplt_contract.fld29 
tplt_contract_fld29 
, 
tplt_contract.fld100 
tplt_contract_fld100 
, 
tplt_contract.fld94 
tplt_contract_fld94 
, 
tplt_contract.fld65 
tplt_contract_fld65 
, 
tplt_contract.fld42 
tplt_contract_fld42 
, 
tplt_contract.fld96 
tplt_contract_fld96 
, 
tplt_contract.fld48 
tplt_contract_fld48 
, 
tplt_contract.fld64 
tplt_contract_fld64 
, 
tplt_contract.fld87 
tplt_contract_fld87 
, 
tplt_contract.fld104 
tplt_contract_fld104 
, 
tplt_contract.fld90 
tplt_contract_fld90 
, b2g(tplt_contract.instanceid) instanceid 
, tplt_contract.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_contract.tplt_contractid) id 
, 'tplt_contract' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_CONTRACT
 join INSTANCE on TPLT_CONTRACT.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_contract_ru_ru
go
create view v_autotplt_contract_ru_ru as 
select   b2g(tplt_contract. tplt_contractid) tplt_contractid,tplt_contract. changestamp changestamp
, 
tplt_contract.fld30 
tplt_contract_fld30 
, 
tplt_contract.fld73 
tplt_contract_fld73 
, 
tplt_contract.fld54 
tplt_contract_fld54 
, 
tplt_contract.fld67 
tplt_contract_fld67 
, 
tplt_contract.fld22 
tplt_contract_fld22 
, 
tplt_contract.fld60 
tplt_contract_fld60 
, 
tplt_contract.fld69 
tplt_contract_fld69 
, 
tplt_contract.fld43 
tplt_contract_fld43 
, 
tplt_contract.fld19 
tplt_contract_fld19 
, 
tplt_contract.fld66 
tplt_contract_fld66 
, 
tplt_contract.fld99 
tplt_contract_fld99 
, 
tplt_contract.fld49 
tplt_contract_fld49 
, 
tplt_contract.fld23 
tplt_contract_fld23 
, 
tplt_contract.fld92 
tplt_contract_fld92 
, 
tplt_contract.fld82 
tplt_contract_fld82 
, 
tplt_contract.fld27 
tplt_contract_fld27 
, 
tplt_contract.fld86 
tplt_contract_fld86 
, 
tplt_contract.fld41 
tplt_contract_fld41 
, 
tplt_contract.fld53 
tplt_contract_fld53 
, 
tplt_contract.fld59 
tplt_contract_fld59 
, 
tplt_contract.fld62 
tplt_contract_fld62 
, 
tplt_contract.fld14 
tplt_contract_fld14 
, 
tplt_contract.fld93 
tplt_contract_fld93 
, 
tplt_contract.fld35 
tplt_contract_fld35 
, 
tplt_contract.fld51 
tplt_contract_fld51 
, 
tplt_contract.fld15 
tplt_contract_fld15 
, 
tplt_contract.fld47 
tplt_contract_fld47 
, 
tplt_contract.fld85 
tplt_contract_fld85 
, 
tplt_contract.fld55 
tplt_contract_fld55 
, 
tplt_contract.fld13 
tplt_contract_fld13 
, 
tplt_contract.fld34 
tplt_contract_fld34 
, 
tplt_contract.fld17 
tplt_contract_fld17 
, 
tplt_contract.fld16 
tplt_contract_fld16 
, 
tplt_contract.fld37 
tplt_contract_fld37 
, 
tplt_contract.fld81 
tplt_contract_fld81 
, 
tplt_contract.fld58 
tplt_contract_fld58 
, 
tplt_contract.fld88 
tplt_contract_fld88 
, 
tplt_contract.fld21 
tplt_contract_fld21 
, 
tplt_contract.fld89 
tplt_contract_fld89 
, 
tplt_contract.fld98 
tplt_contract_fld98 
, 
tplt_contract.fld31 
tplt_contract_fld31 
, 
tplt_contract.fld101 
tplt_contract_fld101 
, 
tplt_contract.fld45 
tplt_contract_fld45 
, 
tplt_contract.fld103 
tplt_contract_fld103 
, 
tplt_contract.fld95 
tplt_contract_fld95 
, 
tplt_contract.fld46 
tplt_contract_fld46 
, 
tplt_contract.fld63 
tplt_contract_fld63 
, 
tplt_contract.fld71 
tplt_contract_fld71 
, 
tplt_contract.fld72 
tplt_contract_fld72 
, 
tplt_contract.fld83 
tplt_contract_fld83 
, 
tplt_contract.fld57 
tplt_contract_fld57 
, 
tplt_contract.fld84 
tplt_contract_fld84 
, 
tplt_contract.fld12 
tplt_contract_fld12 
, 
tplt_contract.fld61 
tplt_contract_fld61 
, 
tplt_contract.fld52 
tplt_contract_fld52 
, 
tplt_contract.fld32 
tplt_contract_fld32 
, 
tplt_contract.fld33 
tplt_contract_fld33 
, 
tplt_contract.fld26 
tplt_contract_fld26 
, 
tplt_contract.fld20 
tplt_contract_fld20 
, 
tplt_contract.fld70 
tplt_contract_fld70 
, 
tplt_contract.fld24 
tplt_contract_fld24 
, 
tplt_contract.fld56 
tplt_contract_fld56 
, 
tplt_contract.fld50 
tplt_contract_fld50 
, 
tplt_contract.fld68 
tplt_contract_fld68 
, 
tplt_contract.fld25 
tplt_contract_fld25 
, 
tplt_contract.fld28 
tplt_contract_fld28 
, 
tplt_contract.fld36 
tplt_contract_fld36 
, 
tplt_contract.fld102 
tplt_contract_fld102 
, 
tplt_contract.fld97 
tplt_contract_fld97 
, 
tplt_contract.fld40 
tplt_contract_fld40 
, 
tplt_contract.fld18 
tplt_contract_fld18 
, 
tplt_contract.fld29 
tplt_contract_fld29 
, 
tplt_contract.fld100 
tplt_contract_fld100 
, 
tplt_contract.fld94 
tplt_contract_fld94 
, 
tplt_contract.fld65 
tplt_contract_fld65 
, 
tplt_contract.fld42 
tplt_contract_fld42 
, 
tplt_contract.fld96 
tplt_contract_fld96 
, 
tplt_contract.fld48 
tplt_contract_fld48 
, 
tplt_contract.fld64 
tplt_contract_fld64 
, 
tplt_contract.fld87 
tplt_contract_fld87 
, 
tplt_contract.fld104 
tplt_contract_fld104 
, 
tplt_contract.fld90 
tplt_contract_fld90 
, b2g(tplt_contract.instanceid) instanceid 
, tplt_contract.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_contract.tplt_contractid) id 
, 'tplt_contract' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_CONTRACT
 join INSTANCE on TPLT_CONTRACT.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotplt_contract_en_us
go
create view v_autotplt_contract_en_us as 
select   b2g(tplt_contract. tplt_contractid) tplt_contractid,tplt_contract. changestamp changestamp
, 
tplt_contract.fld30 
tplt_contract_fld30 
, 
tplt_contract.fld73 
tplt_contract_fld73 
, 
tplt_contract.fld54 
tplt_contract_fld54 
, 
tplt_contract.fld67 
tplt_contract_fld67 
, 
tplt_contract.fld22 
tplt_contract_fld22 
, 
tplt_contract.fld60 
tplt_contract_fld60 
, 
tplt_contract.fld69 
tplt_contract_fld69 
, 
tplt_contract.fld43 
tplt_contract_fld43 
, 
tplt_contract.fld19 
tplt_contract_fld19 
, 
tplt_contract.fld66 
tplt_contract_fld66 
, 
tplt_contract.fld99 
tplt_contract_fld99 
, 
tplt_contract.fld49 
tplt_contract_fld49 
, 
tplt_contract.fld23 
tplt_contract_fld23 
, 
tplt_contract.fld92 
tplt_contract_fld92 
, 
tplt_contract.fld82 
tplt_contract_fld82 
, 
tplt_contract.fld27 
tplt_contract_fld27 
, 
tplt_contract.fld86 
tplt_contract_fld86 
, 
tplt_contract.fld41 
tplt_contract_fld41 
, 
tplt_contract.fld53 
tplt_contract_fld53 
, 
tplt_contract.fld59 
tplt_contract_fld59 
, 
tplt_contract.fld62 
tplt_contract_fld62 
, 
tplt_contract.fld14 
tplt_contract_fld14 
, 
tplt_contract.fld93 
tplt_contract_fld93 
, 
tplt_contract.fld35 
tplt_contract_fld35 
, 
tplt_contract.fld51 
tplt_contract_fld51 
, 
tplt_contract.fld15 
tplt_contract_fld15 
, 
tplt_contract.fld47 
tplt_contract_fld47 
, 
tplt_contract.fld85 
tplt_contract_fld85 
, 
tplt_contract.fld55 
tplt_contract_fld55 
, 
tplt_contract.fld13 
tplt_contract_fld13 
, 
tplt_contract.fld34 
tplt_contract_fld34 
, 
tplt_contract.fld17 
tplt_contract_fld17 
, 
tplt_contract.fld16 
tplt_contract_fld16 
, 
tplt_contract.fld37 
tplt_contract_fld37 
, 
tplt_contract.fld81 
tplt_contract_fld81 
, 
tplt_contract.fld58 
tplt_contract_fld58 
, 
tplt_contract.fld88 
tplt_contract_fld88 
, 
tplt_contract.fld21 
tplt_contract_fld21 
, 
tplt_contract.fld89 
tplt_contract_fld89 
, 
tplt_contract.fld98 
tplt_contract_fld98 
, 
tplt_contract.fld31 
tplt_contract_fld31 
, 
tplt_contract.fld101 
tplt_contract_fld101 
, 
tplt_contract.fld45 
tplt_contract_fld45 
, 
tplt_contract.fld103 
tplt_contract_fld103 
, 
tplt_contract.fld95 
tplt_contract_fld95 
, 
tplt_contract.fld46 
tplt_contract_fld46 
, 
tplt_contract.fld63 
tplt_contract_fld63 
, 
tplt_contract.fld71 
tplt_contract_fld71 
, 
tplt_contract.fld72 
tplt_contract_fld72 
, 
tplt_contract.fld83 
tplt_contract_fld83 
, 
tplt_contract.fld57 
tplt_contract_fld57 
, 
tplt_contract.fld84 
tplt_contract_fld84 
, 
tplt_contract.fld12 
tplt_contract_fld12 
, 
tplt_contract.fld61 
tplt_contract_fld61 
, 
tplt_contract.fld52 
tplt_contract_fld52 
, 
tplt_contract.fld32 
tplt_contract_fld32 
, 
tplt_contract.fld33 
tplt_contract_fld33 
, 
tplt_contract.fld26 
tplt_contract_fld26 
, 
tplt_contract.fld20 
tplt_contract_fld20 
, 
tplt_contract.fld70 
tplt_contract_fld70 
, 
tplt_contract.fld24 
tplt_contract_fld24 
, 
tplt_contract.fld56 
tplt_contract_fld56 
, 
tplt_contract.fld50 
tplt_contract_fld50 
, 
tplt_contract.fld68 
tplt_contract_fld68 
, 
tplt_contract.fld25 
tplt_contract_fld25 
, 
tplt_contract.fld28 
tplt_contract_fld28 
, 
tplt_contract.fld36 
tplt_contract_fld36 
, 
tplt_contract.fld102 
tplt_contract_fld102 
, 
tplt_contract.fld97 
tplt_contract_fld97 
, 
tplt_contract.fld40 
tplt_contract_fld40 
, 
tplt_contract.fld18 
tplt_contract_fld18 
, 
tplt_contract.fld29 
tplt_contract_fld29 
, 
tplt_contract.fld100 
tplt_contract_fld100 
, 
tplt_contract.fld94 
tplt_contract_fld94 
, 
tplt_contract.fld65 
tplt_contract_fld65 
, 
tplt_contract.fld42 
tplt_contract_fld42 
, 
tplt_contract.fld96 
tplt_contract_fld96 
, 
tplt_contract.fld48 
tplt_contract_fld48 
, 
tplt_contract.fld64 
tplt_contract_fld64 
, 
tplt_contract.fld87 
tplt_contract_fld87 
, 
tplt_contract.fld104 
tplt_contract_fld104 
, 
tplt_contract.fld90 
tplt_contract_fld90 
, b2g(tplt_contract.instanceid) instanceid 
, tplt_contract.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tplt_contract.tplt_contractid) id 
, 'tplt_contract' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPLT_CONTRACT
 join INSTANCE on TPLT_CONTRACT.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzext_def
go
create view v_automtzext_def as 
select   b2g(mtzext_def. mtzext_defid) mtzext_defid,mtzext_def. changestamp changestamp
, 
 mtzext_def.exttype  
mtzext_def_exttype_val, 
 case mtzext_def.exttype 
when 6 then 'verifyrowext'
when 7 then 'codegenerator'
when 5 then 'defaultext'
when 0 then 'statusext'
when 4 then 'jrnlrunext'
when 2 then 'customext'
when 8 then 'armgenerator'
when 1 then 'onformext'
when 3 then 'jrnladdext'
 else '' 
 end  
mtzext_def_exttype 
, 
mtzext_def.name 
mtzext_def_name 
, 
mtzext_def.thedescription 
mtzext_def_thedescription 
, b2g(mtzext_def.instanceid) instanceid 
, mtzext_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzext_def.mtzext_defid) id 
, 'mtzext_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZExt_def
 join INSTANCE on MTZExt_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzext_def_ru_ru
go
create view v_automtzext_def_ru_ru as 
select   b2g(mtzext_def. mtzext_defid) mtzext_defid,mtzext_def. changestamp changestamp
, 
 mtzext_def.exttype  
mtzext_def_exttype_val, 
 case mtzext_def.exttype 
when 6 then 'verifyrowext'
when 7 then 'codegenerator'
when 5 then 'defaultext'
when 0 then 'statusext'
when 4 then 'jrnlrunext'
when 2 then 'customext'
when 8 then 'armgenerator'
when 1 then 'onformext'
when 3 then 'jrnladdext'
 else '' 
 end  
mtzext_def_exttype 
, 
mtzext_def.name 
mtzext_def_name 
, 
mtzext_def.thedescription 
mtzext_def_thedescription 
, b2g(mtzext_def.instanceid) instanceid 
, mtzext_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzext_def.mtzext_defid) id 
, 'mtzext_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZExt_def
 join INSTANCE on MTZExt_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzext_def_en_us
go
create view v_automtzext_def_en_us as 
select   b2g(mtzext_def. mtzext_defid) mtzext_defid,mtzext_def. changestamp changestamp
, 
 mtzext_def.exttype  
mtzext_def_exttype_val, 
 case mtzext_def.exttype 
when 6 then 'verifyrowext'
when 7 then 'codegenerator'
when 5 then 'defaultext'
when 0 then 'statusext'
when 4 then 'jrnlrunext'
when 2 then 'customext'
when 8 then 'armgenerator'
when 1 then 'onformext'
when 3 then 'jrnladdext'
 else '' 
 end  
mtzext_def_exttype 
, 
mtzext_def.name 
mtzext_def_name 
, 
mtzext_def.thedescription 
mtzext_def_thedescription 
, b2g(mtzext_def.instanceid) instanceid 
, mtzext_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzext_def.mtzext_defid) id 
, 'mtzext_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZExt_def
 join INSTANCE on MTZExt_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzextrel
go
create view v_automtzextrel as 
select   b2g(mtzextrel. mtzextrelid) mtzextrelid,mtzextrel. changestamp changestamp
, 
mtzextrel.theclassname 
mtzextrel_theclassname 
, 
 mtzextrel.theplatform  
mtzextrel_theplatform_val, 
 case mtzextrel.theplatform 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
mtzextrel_theplatform 
, 
mtzextrel.thelibraryname 
mtzextrel_thelibraryname 
, b2g(mtzextrel.instanceid) instanceid 
, mtzextrel.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzextrel.mtzextrelid) id 
, 'mtzextrel' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZExtRel
 join INSTANCE on MTZExtRel.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzextrel_ru_ru
go
create view v_automtzextrel_ru_ru as 
select   b2g(mtzextrel. mtzextrelid) mtzextrelid,mtzextrel. changestamp changestamp
, 
mtzextrel.theclassname 
mtzextrel_theclassname 
, 
 mtzextrel.theplatform  
mtzextrel_theplatform_val, 
 case mtzextrel.theplatform 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
mtzextrel_theplatform 
, 
mtzextrel.thelibraryname 
mtzextrel_thelibraryname 
, b2g(mtzextrel.instanceid) instanceid 
, mtzextrel.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzextrel.mtzextrelid) id 
, 'mtzextrel' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZExtRel
 join INSTANCE on MTZExtRel.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_automtzextrel_en_us
go
create view v_automtzextrel_en_us as 
select   b2g(mtzextrel. mtzextrelid) mtzextrelid,mtzextrel. changestamp changestamp
, 
mtzextrel.theclassname 
mtzextrel_theclassname 
, 
 mtzextrel.theplatform  
mtzextrel_theplatform_val, 
 case mtzextrel.theplatform 
when 3 then 'other'
when 1 then 'dotnet'
when 2 then 'java'
when 0 then 'vb6'
 else '' 
 end  
mtzextrel_theplatform 
, 
mtzextrel.thelibraryname 
mtzextrel_thelibraryname 
, b2g(mtzextrel.instanceid) instanceid 
, mtzextrel.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(mtzextrel.mtzextrelid) id 
, 'mtzextrel' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from MTZExtRel
 join INSTANCE on MTZExtRel.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_mod
go
create view v_autoiu_rcfg_mod as 
select   b2g(iu_rcfg_mod. iu_rcfg_modid) iu_rcfg_modid,iu_rcfg_mod. changestamp changestamp
, 
iu_rcfg_mod.otherdocmode 
iu_rcfg_mod_otherdocmode 
, 
 iu_rcfg_mod.visiblecontrol  
iu_rcfg_mod_visiblecontrol_val, 
 case iu_rcfg_mod.visiblecontrol 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_visiblecontrol 
, 
iu_rcfg_mod.name 
iu_rcfg_mod_name 
, 
iu_rcfg_mod.mydocmode 
iu_rcfg_mod_mydocmode 
, 
 iu_rcfg_mod.moduleaccessible  
iu_rcfg_mod_moduleaccessible_val, 
 case iu_rcfg_mod.moduleaccessible 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_moduleaccessible 
, 
iu_rcfg_mod.controldocmode 
iu_rcfg_mod_controldocmode 
, 
iu_rcfg_mod.theicon 
iu_rcfg_mod_theicon 
, 
iu_rcfg_mod.sequence 
iu_rcfg_mod_sequence 
, 
 iu_rcfg_mod.substructobjects  
iu_rcfg_mod_substructobjects_val, 
 case iu_rcfg_mod.substructobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_substructobjects 
, 
 iu_rcfg_mod.allobjects  
iu_rcfg_mod_allobjects_val, 
 case iu_rcfg_mod.allobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_allobjects 
, 
iu_rcfg_mod.caption 
iu_rcfg_mod_caption 
, 
 iu_rcfg_mod.colegsobject  
iu_rcfg_mod_colegsobject_val, 
 case iu_rcfg_mod.colegsobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_colegsobject 
, 
iu_rcfg_mod.groupname 
iu_rcfg_mod_groupname 
, b2g(iu_rcfg_mod.instanceid) instanceid 
, iu_rcfg_mod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_mod.iu_rcfg_modid) id 
, 'iu_rcfg_mod' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_mod
 join INSTANCE on iu_rcfg_mod.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_mod_ru_ru
go
create view v_autoiu_rcfg_mod_ru_ru as 
select   b2g(iu_rcfg_mod. iu_rcfg_modid) iu_rcfg_modid,iu_rcfg_mod. changestamp changestamp
, 
iu_rcfg_mod.otherdocmode 
iu_rcfg_mod_otherdocmode 
, 
 iu_rcfg_mod.visiblecontrol  
iu_rcfg_mod_visiblecontrol_val, 
 case iu_rcfg_mod.visiblecontrol 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_visiblecontrol 
, 
iu_rcfg_mod.name 
iu_rcfg_mod_name 
, 
iu_rcfg_mod.mydocmode 
iu_rcfg_mod_mydocmode 
, 
 iu_rcfg_mod.moduleaccessible  
iu_rcfg_mod_moduleaccessible_val, 
 case iu_rcfg_mod.moduleaccessible 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_moduleaccessible 
, 
iu_rcfg_mod.controldocmode 
iu_rcfg_mod_controldocmode 
, 
iu_rcfg_mod.theicon 
iu_rcfg_mod_theicon 
, 
iu_rcfg_mod.sequence 
iu_rcfg_mod_sequence 
, 
 iu_rcfg_mod.substructobjects  
iu_rcfg_mod_substructobjects_val, 
 case iu_rcfg_mod.substructobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_substructobjects 
, 
 iu_rcfg_mod.allobjects  
iu_rcfg_mod_allobjects_val, 
 case iu_rcfg_mod.allobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_allobjects 
, 
iu_rcfg_mod.caption 
iu_rcfg_mod_caption 
, 
 iu_rcfg_mod.colegsobject  
iu_rcfg_mod_colegsobject_val, 
 case iu_rcfg_mod.colegsobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_colegsobject 
, 
iu_rcfg_mod.groupname 
iu_rcfg_mod_groupname 
, b2g(iu_rcfg_mod.instanceid) instanceid 
, iu_rcfg_mod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_mod.iu_rcfg_modid) id 
, 'iu_rcfg_mod' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_mod
 join INSTANCE on iu_rcfg_mod.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_mod_en_us
go
create view v_autoiu_rcfg_mod_en_us as 
select   b2g(iu_rcfg_mod. iu_rcfg_modid) iu_rcfg_modid,iu_rcfg_mod. changestamp changestamp
, 
iu_rcfg_mod.otherdocmode 
iu_rcfg_mod_otherdocmode 
, 
 iu_rcfg_mod.visiblecontrol  
iu_rcfg_mod_visiblecontrol_val, 
 case iu_rcfg_mod.visiblecontrol 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_visiblecontrol 
, 
iu_rcfg_mod.name 
iu_rcfg_mod_name 
, 
iu_rcfg_mod.mydocmode 
iu_rcfg_mod_mydocmode 
, 
 iu_rcfg_mod.moduleaccessible  
iu_rcfg_mod_moduleaccessible_val, 
 case iu_rcfg_mod.moduleaccessible 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_moduleaccessible 
, 
iu_rcfg_mod.controldocmode 
iu_rcfg_mod_controldocmode 
, 
iu_rcfg_mod.theicon 
iu_rcfg_mod_theicon 
, 
iu_rcfg_mod.sequence 
iu_rcfg_mod_sequence 
, 
 iu_rcfg_mod.substructobjects  
iu_rcfg_mod_substructobjects_val, 
 case iu_rcfg_mod.substructobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_substructobjects 
, 
 iu_rcfg_mod.allobjects  
iu_rcfg_mod_allobjects_val, 
 case iu_rcfg_mod.allobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_allobjects 
, 
iu_rcfg_mod.caption 
iu_rcfg_mod_caption 
, 
 iu_rcfg_mod.colegsobject  
iu_rcfg_mod_colegsobject_val, 
 case iu_rcfg_mod.colegsobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_mod_colegsobject 
, 
iu_rcfg_mod.groupname 
iu_rcfg_mod_groupname 
, b2g(iu_rcfg_mod.instanceid) instanceid 
, iu_rcfg_mod.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_mod.iu_rcfg_modid) id 
, 'iu_rcfg_mod' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_mod
 join INSTANCE on iu_rcfg_mod.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_docmode
go
create view v_autoiu_rcfg_docmode as 
select   b2g(iu_rcfg_docmode. iu_rcfg_docmodeid) iu_rcfg_docmodeid,iu_rcfg_docmode. changestamp changestamp
, 
iu_rcfg_docmode.addmode 
iu_rcfg_docmode_addmode 
, 
iu_rcfg_docmode.editmode 
iu_rcfg_docmode_editmode 
, 
 iu_rcfg_docmode.allowadd  
iu_rcfg_docmode_allowadd_val, 
 case iu_rcfg_docmode.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_docmode_allowadd 
, 
 iu_rcfg_docmode.allowdelete  
iu_rcfg_docmode_allowdelete_val, 
 case iu_rcfg_docmode.allowdelete 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_docmode_allowdelete 
, 
 b2g(iu_rcfg_docmode.the_document)  
iu_rcfg_docmode_the_document_id, 
 objecttype_brief_f(iu_rcfg_docmode.the_document, null) 
iu_rcfg_docmode_the_document 
, b2g(iu_rcfg_docmode.instanceid) instanceid 
, iu_rcfg_docmode.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_docmode.iu_rcfg_docmodeid) id 
, 'iu_rcfg_docmode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_docmode
 join INSTANCE on iu_rcfg_docmode.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_docmode_ru_ru
go
create view v_autoiu_rcfg_docmode_ru_ru as 
select   b2g(iu_rcfg_docmode. iu_rcfg_docmodeid) iu_rcfg_docmodeid,iu_rcfg_docmode. changestamp changestamp
, 
iu_rcfg_docmode.addmode 
iu_rcfg_docmode_addmode 
, 
iu_rcfg_docmode.editmode 
iu_rcfg_docmode_editmode 
, 
 iu_rcfg_docmode.allowadd  
iu_rcfg_docmode_allowadd_val, 
 case iu_rcfg_docmode.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_docmode_allowadd 
, 
 iu_rcfg_docmode.allowdelete  
iu_rcfg_docmode_allowdelete_val, 
 case iu_rcfg_docmode.allowdelete 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_docmode_allowdelete 
, 
 b2g(iu_rcfg_docmode.the_document)  
iu_rcfg_docmode_the_document_id, 
 objecttype_brief_f(iu_rcfg_docmode.the_document, 'ru_ru') 
iu_rcfg_docmode_the_document 
, b2g(iu_rcfg_docmode.instanceid) instanceid 
, iu_rcfg_docmode.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_docmode.iu_rcfg_docmodeid) id 
, 'iu_rcfg_docmode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_docmode
 join INSTANCE on iu_rcfg_docmode.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_docmode_en_us
go
create view v_autoiu_rcfg_docmode_en_us as 
select   b2g(iu_rcfg_docmode. iu_rcfg_docmodeid) iu_rcfg_docmodeid,iu_rcfg_docmode. changestamp changestamp
, 
iu_rcfg_docmode.addmode 
iu_rcfg_docmode_addmode 
, 
iu_rcfg_docmode.editmode 
iu_rcfg_docmode_editmode 
, 
 iu_rcfg_docmode.allowadd  
iu_rcfg_docmode_allowadd_val, 
 case iu_rcfg_docmode.allowadd 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_docmode_allowadd 
, 
 iu_rcfg_docmode.allowdelete  
iu_rcfg_docmode_allowdelete_val, 
 case iu_rcfg_docmode.allowdelete 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_rcfg_docmode_allowdelete 
, 
 b2g(iu_rcfg_docmode.the_document)  
iu_rcfg_docmode_the_document_id, 
 objecttype_brief_f(iu_rcfg_docmode.the_document, 'en_us') 
iu_rcfg_docmode_the_document 
, b2g(iu_rcfg_docmode.instanceid) instanceid 
, iu_rcfg_docmode.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_docmode.iu_rcfg_docmodeid) id 
, 'iu_rcfg_docmode' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_docmode
 join INSTANCE on iu_rcfg_docmode.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_def
go
create view v_autoiu_rcfg_def as 
select   b2g(iu_rcfg_def. iu_rcfg_defid) iu_rcfg_defid,iu_rcfg_def. changestamp changestamp
, 
 b2g(iu_rcfg_def.therole)  
iu_rcfg_def_therole_id, 
 iu_crole_brief_f(iu_rcfg_def.therole, null) 
iu_rcfg_def_therole 
, b2g(iu_rcfg_def.instanceid) instanceid 
, iu_rcfg_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_def.iu_rcfg_defid) id 
, 'iu_rcfg_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_def
 join INSTANCE on iu_rcfg_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_def_ru_ru
go
create view v_autoiu_rcfg_def_ru_ru as 
select   b2g(iu_rcfg_def. iu_rcfg_defid) iu_rcfg_defid,iu_rcfg_def. changestamp changestamp
, 
 b2g(iu_rcfg_def.therole)  
iu_rcfg_def_therole_id, 
 iu_crole_brief_f(iu_rcfg_def.therole, 'ru_ru') 
iu_rcfg_def_therole 
, b2g(iu_rcfg_def.instanceid) instanceid 
, iu_rcfg_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_def.iu_rcfg_defid) id 
, 'iu_rcfg_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_def
 join INSTANCE on iu_rcfg_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_rcfg_def_en_us
go
create view v_autoiu_rcfg_def_en_us as 
select   b2g(iu_rcfg_def. iu_rcfg_defid) iu_rcfg_defid,iu_rcfg_def. changestamp changestamp
, 
 b2g(iu_rcfg_def.therole)  
iu_rcfg_def_therole_id, 
 iu_crole_brief_f(iu_rcfg_def.therole, 'en_us') 
iu_rcfg_def_therole 
, b2g(iu_rcfg_def.instanceid) instanceid 
, iu_rcfg_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_rcfg_def.iu_rcfg_defid) id 
, 'iu_rcfg_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_rcfg_def
 join INSTANCE on iu_rcfg_def.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpq_def
go
create view v_autotpq_def as 
select   b2g(tpq_def. tpq_defid) tpq_defid,tpq_def. changestamp changestamp
, 
 b2g(tpq_def.archtype)  
tpq_def_archtype_id, 
 tpld_paramtype_brief_f(tpq_def.archtype, null) 
tpq_def_archtype 
, 
tpq_def.repeattimes 
tpq_def_repeattimes 
, 
 b2g(tpq_def.thesessionid)  
tpq_def_thesessionid_id, 
 the_session_brief_f(tpq_def.thesessionid, null) 
tpq_def_thesessionid 
, 
 b2g(tpq_def.thedevice)  
tpq_def_thedevice_id, 
 tplt_bdevices_brief_f(tpq_def.thedevice, null) 
tpq_def_thedevice 
, 
 tpq_def.isurgent  
tpq_def_isurgent_val, 
 case tpq_def.isurgent 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpq_def_isurgent 
, 
tpq_def.querytime 
tpq_def_querytime 
, 
tpq_def.archtime 
tpq_def_archtime 
, 
tpq_def.repeatinterval 
tpq_def_repeatinterval 
, b2g(tpq_def.instanceid) instanceid 
, tpq_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpq_def.tpq_defid) id 
, 'tpq_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPQ_DEF
 join INSTANCE on TPQ_DEF.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpq_def_ru_ru
go
create view v_autotpq_def_ru_ru as 
select   b2g(tpq_def. tpq_defid) tpq_defid,tpq_def. changestamp changestamp
, 
 b2g(tpq_def.archtype)  
tpq_def_archtype_id, 
 tpld_paramtype_brief_f(tpq_def.archtype, 'ru_ru') 
tpq_def_archtype 
, 
tpq_def.repeattimes 
tpq_def_repeattimes 
, 
 b2g(tpq_def.thesessionid)  
tpq_def_thesessionid_id, 
 the_session_brief_f(tpq_def.thesessionid, 'ru_ru') 
tpq_def_thesessionid 
, 
 b2g(tpq_def.thedevice)  
tpq_def_thedevice_id, 
 tplt_bdevices_brief_f(tpq_def.thedevice, 'ru_ru') 
tpq_def_thedevice 
, 
 tpq_def.isurgent  
tpq_def_isurgent_val, 
 case tpq_def.isurgent 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpq_def_isurgent 
, 
tpq_def.querytime 
tpq_def_querytime 
, 
tpq_def.archtime 
tpq_def_archtime 
, 
tpq_def.repeatinterval 
tpq_def_repeatinterval 
, b2g(tpq_def.instanceid) instanceid 
, tpq_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpq_def.tpq_defid) id 
, 'tpq_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPQ_DEF
 join INSTANCE on TPQ_DEF.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpq_def_en_us
go
create view v_autotpq_def_en_us as 
select   b2g(tpq_def. tpq_defid) tpq_defid,tpq_def. changestamp changestamp
, 
 b2g(tpq_def.archtype)  
tpq_def_archtype_id, 
 tpld_paramtype_brief_f(tpq_def.archtype, 'en_us') 
tpq_def_archtype 
, 
tpq_def.repeattimes 
tpq_def_repeattimes 
, 
 b2g(tpq_def.thesessionid)  
tpq_def_thesessionid_id, 
 the_session_brief_f(tpq_def.thesessionid, 'en_us') 
tpq_def_thesessionid 
, 
 b2g(tpq_def.thedevice)  
tpq_def_thedevice_id, 
 tplt_bdevices_brief_f(tpq_def.thedevice, 'en_us') 
tpq_def_thedevice 
, 
 tpq_def.isurgent  
tpq_def_isurgent_val, 
 case tpq_def.isurgent 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpq_def_isurgent 
, 
tpq_def.querytime 
tpq_def_querytime 
, 
tpq_def.archtime 
tpq_def_archtime 
, 
tpq_def.repeatinterval 
tpq_def_repeatinterval 
, b2g(tpq_def.instanceid) instanceid 
, tpq_def.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpq_def.tpq_defid) id 
, 'tpq_def' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPQ_DEF
 join INSTANCE on TPQ_DEF.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpq_result
go
create view v_autotpq_result as 
select   b2g(tpq_result. tpq_resultid) tpq_resultid,tpq_result. changestamp changestamp
, 
 b2g(tpq_result.hourarch)  
tpq_result_hourarch_id, 
 tplc_h_brief_f(tpq_result.hourarch, null) 
tpq_result_hourarch 
, 
 tpq_result.iserror  
tpq_result_iserror_val, 
 case tpq_result.iserror 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpq_result_iserror 
, 
 b2g(tpq_result.momentarch)  
tpq_result_momentarch_id, 
 tplc_m_brief_f(tpq_result.momentarch, null) 
tpq_result_momentarch 
, 
 b2g(tpq_result.totalarch)  
tpq_result_totalarch_id, 
 tplc_t_brief_f(tpq_result.totalarch, null) 
tpq_result_totalarch 
, 
tpq_result.starttime 
tpq_result_starttime 
, 
tpq_result.endtime 
tpq_result_endtime 
, 
tpq_result.logmessage 
tpq_result_logmessage 
, 
 b2g(tpq_result.dayarch)  
tpq_result_dayarch_id, 
 tplc_d_brief_f(tpq_result.dayarch, null) 
tpq_result_dayarch 
, 
tpq_result.textresult 
tpq_result_textresult 
, b2g(tpq_result.instanceid) instanceid 
, tpq_result.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpq_result.tpq_resultid) id 
, 'tpq_result' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPQ_result
 join INSTANCE on TPQ_result.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpq_result_ru_ru
go
create view v_autotpq_result_ru_ru as 
select   b2g(tpq_result. tpq_resultid) tpq_resultid,tpq_result. changestamp changestamp
, 
 b2g(tpq_result.hourarch)  
tpq_result_hourarch_id, 
 tplc_h_brief_f(tpq_result.hourarch, 'ru_ru') 
tpq_result_hourarch 
, 
 tpq_result.iserror  
tpq_result_iserror_val, 
 case tpq_result.iserror 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpq_result_iserror 
, 
 b2g(tpq_result.momentarch)  
tpq_result_momentarch_id, 
 tplc_m_brief_f(tpq_result.momentarch, 'ru_ru') 
tpq_result_momentarch 
, 
 b2g(tpq_result.totalarch)  
tpq_result_totalarch_id, 
 tplc_t_brief_f(tpq_result.totalarch, 'ru_ru') 
tpq_result_totalarch 
, 
tpq_result.starttime 
tpq_result_starttime 
, 
tpq_result.endtime 
tpq_result_endtime 
, 
tpq_result.logmessage 
tpq_result_logmessage 
, 
 b2g(tpq_result.dayarch)  
tpq_result_dayarch_id, 
 tplc_d_brief_f(tpq_result.dayarch, 'ru_ru') 
tpq_result_dayarch 
, 
tpq_result.textresult 
tpq_result_textresult 
, b2g(tpq_result.instanceid) instanceid 
, tpq_result.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpq_result.tpq_resultid) id 
, 'tpq_result' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPQ_result
 join INSTANCE on TPQ_result.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autotpq_result_en_us
go
create view v_autotpq_result_en_us as 
select   b2g(tpq_result. tpq_resultid) tpq_resultid,tpq_result. changestamp changestamp
, 
 b2g(tpq_result.hourarch)  
tpq_result_hourarch_id, 
 tplc_h_brief_f(tpq_result.hourarch, 'en_us') 
tpq_result_hourarch 
, 
 tpq_result.iserror  
tpq_result_iserror_val, 
 case tpq_result.iserror 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
tpq_result_iserror 
, 
 b2g(tpq_result.momentarch)  
tpq_result_momentarch_id, 
 tplc_m_brief_f(tpq_result.momentarch, 'en_us') 
tpq_result_momentarch 
, 
 b2g(tpq_result.totalarch)  
tpq_result_totalarch_id, 
 tplc_t_brief_f(tpq_result.totalarch, 'en_us') 
tpq_result_totalarch 
, 
tpq_result.starttime 
tpq_result_starttime 
, 
tpq_result.endtime 
tpq_result_endtime 
, 
tpq_result.logmessage 
tpq_result_logmessage 
, 
 b2g(tpq_result.dayarch)  
tpq_result_dayarch_id, 
 tplc_d_brief_f(tpq_result.dayarch, 'en_us') 
tpq_result_dayarch 
, 
tpq_result.textresult 
tpq_result_textresult 
, b2g(tpq_result.instanceid) instanceid 
, tpq_result.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(tpq_result.tpq_resultid) id 
, 'tpq_result' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from TPQ_result
 join INSTANCE on TPQ_result.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofilterfieldgroup
go
create view v_autofilterfieldgroup as 
select   b2g(filterfieldgroup. filterfieldgroupid) filterfieldgroupid,filterfieldgroup. changestamp changestamp
, 
filterfieldgroup.name 
filterfieldgroup_name 
, 
filterfieldgroup.sequence 
filterfieldgroup_sequence 
, 
filterfieldgroup.caption 
filterfieldgroup_caption 
, 
 filterfieldgroup.allowignore  
filterfieldgroup_allowignore_val, 
 case filterfieldgroup.allowignore 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
filterfieldgroup_allowignore 
, b2g(filterfieldgroup.instanceid) instanceid 
, filterfieldgroup.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(filterfieldgroup.filterfieldgroupid) id 
, 'filterfieldgroup' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FilterFieldGroup
 join INSTANCE on FilterFieldGroup.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofilterfieldgroup_ru_ru
go
create view v_autofilterfieldgroup_ru_ru as 
select   b2g(filterfieldgroup. filterfieldgroupid) filterfieldgroupid,filterfieldgroup. changestamp changestamp
, 
filterfieldgroup.name 
filterfieldgroup_name 
, 
filterfieldgroup.sequence 
filterfieldgroup_sequence 
, 
filterfieldgroup.caption 
filterfieldgroup_caption 
, 
 filterfieldgroup.allowignore  
filterfieldgroup_allowignore_val, 
 case filterfieldgroup.allowignore 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
filterfieldgroup_allowignore 
, b2g(filterfieldgroup.instanceid) instanceid 
, filterfieldgroup.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(filterfieldgroup.filterfieldgroupid) id 
, 'filterfieldgroup' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FilterFieldGroup
 join INSTANCE on FilterFieldGroup.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofilterfieldgroup_en_us
go
create view v_autofilterfieldgroup_en_us as 
select   b2g(filterfieldgroup. filterfieldgroupid) filterfieldgroupid,filterfieldgroup. changestamp changestamp
, 
filterfieldgroup.name 
filterfieldgroup_name 
, 
filterfieldgroup.sequence 
filterfieldgroup_sequence 
, 
filterfieldgroup.caption 
filterfieldgroup_caption 
, 
 filterfieldgroup.allowignore  
filterfieldgroup_allowignore_val, 
 case filterfieldgroup.allowignore 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
filterfieldgroup_allowignore 
, b2g(filterfieldgroup.instanceid) instanceid 
, filterfieldgroup.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(filterfieldgroup.filterfieldgroupid) id 
, 'filterfieldgroup' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FilterFieldGroup
 join INSTANCE on FilterFieldGroup.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofileterfield
go
create view v_autofileterfield as 
select   b2g(fileterfield. fileterfieldid) fileterfieldid,fileterfield. changestamp changestamp, b2g(filterfieldgroupid) filterfieldgroupid
, 
 b2g(fileterfield.reftopart)  
fileterfield_reftopart_id, 
 part_brief_f(fileterfield.reftopart, null) 
fileterfield_reftopart 
, 
fileterfield.name 
fileterfield_name 
, 
 fileterfield.reftype  
fileterfield_reftype_val, 
 case fileterfield.reftype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
fileterfield_reftype 
, 
 fileterfield.valuearray  
fileterfield_valuearray_val, 
 case fileterfield.valuearray 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fileterfield_valuearray 
, 
fileterfield.fieldsize 
fileterfield_fieldsize 
, 
 b2g(fileterfield.fieldtype)  
fileterfield_fieldtype_id, 
 fieldtype_brief_f(fileterfield.fieldtype, null) 
fileterfield_fieldtype 
, 
 b2g(fileterfield.reftotype)  
fileterfield_reftotype_id, 
 objecttype_brief_f(fileterfield.reftotype, null) 
fileterfield_reftotype 
, 
fileterfield.sequence 
fileterfield_sequence 
, 
fileterfield.caption 
fileterfield_caption 
, b2g(filterfieldgroup.instanceid) instanceid 
, filterfieldgroup.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fileterfield.fileterfieldid) id 
, 'fileterfield' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FileterField
 join FilterFieldGroup on FilterFieldGroup.FilterFieldGroupID=FileterField.ParentStructRowID 
 join INSTANCE on FilterFieldGroup.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofileterfield_ru_ru
go
create view v_autofileterfield_ru_ru as 
select   b2g(fileterfield. fileterfieldid) fileterfieldid,fileterfield. changestamp changestamp, b2g(filterfieldgroupid) filterfieldgroupid
, 
 b2g(fileterfield.reftopart)  
fileterfield_reftopart_id, 
 part_brief_f(fileterfield.reftopart, 'ru_ru') 
fileterfield_reftopart 
, 
fileterfield.name 
fileterfield_name 
, 
 fileterfield.reftype  
fileterfield_reftype_val, 
 case fileterfield.reftype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
fileterfield_reftype 
, 
 fileterfield.valuearray  
fileterfield_valuearray_val, 
 case fileterfield.valuearray 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fileterfield_valuearray 
, 
fileterfield.fieldsize 
fileterfield_fieldsize 
, 
 b2g(fileterfield.fieldtype)  
fileterfield_fieldtype_id, 
 fieldtype_brief_f(fileterfield.fieldtype, 'ru_ru') 
fileterfield_fieldtype 
, 
 b2g(fileterfield.reftotype)  
fileterfield_reftotype_id, 
 objecttype_brief_f(fileterfield.reftotype, 'ru_ru') 
fileterfield_reftotype 
, 
fileterfield.sequence 
fileterfield_sequence 
, 
fileterfield.caption 
fileterfield_caption 
, b2g(filterfieldgroup.instanceid) instanceid 
, filterfieldgroup.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fileterfield.fileterfieldid) id 
, 'fileterfield' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FileterField
 join FilterFieldGroup on FilterFieldGroup.FilterFieldGroupID=FileterField.ParentStructRowID 
 join INSTANCE on FilterFieldGroup.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofileterfield_en_us
go
create view v_autofileterfield_en_us as 
select   b2g(fileterfield. fileterfieldid) fileterfieldid,fileterfield. changestamp changestamp, b2g(filterfieldgroupid) filterfieldgroupid
, 
 b2g(fileterfield.reftopart)  
fileterfield_reftopart_id, 
 part_brief_f(fileterfield.reftopart, 'en_us') 
fileterfield_reftopart 
, 
fileterfield.name 
fileterfield_name 
, 
 fileterfield.reftype  
fileterfield_reftype_val, 
 case fileterfield.reftype 
when 3 then 'на источник данных'
when 0 then 'скалярное поле ( не ссылка)'
when 2 then 'на строку раздела'
when 1 then 'на объект '
 else '' 
 end  
fileterfield_reftype 
, 
 fileterfield.valuearray  
fileterfield_valuearray_val, 
 case fileterfield.valuearray 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
fileterfield_valuearray 
, 
fileterfield.fieldsize 
fileterfield_fieldsize 
, 
 b2g(fileterfield.fieldtype)  
fileterfield_fieldtype_id, 
 fieldtype_brief_f(fileterfield.fieldtype, 'en_us') 
fileterfield_fieldtype 
, 
 b2g(fileterfield.reftotype)  
fileterfield_reftotype_id, 
 objecttype_brief_f(fileterfield.reftotype, 'en_us') 
fileterfield_reftotype 
, 
fileterfield.sequence 
fileterfield_sequence 
, 
fileterfield.caption 
fileterfield_caption 
, b2g(filterfieldgroup.instanceid) instanceid 
, filterfieldgroup.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(fileterfield.fileterfieldid) id 
, 'fileterfield' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from FileterField
 join FilterFieldGroup on FilterFieldGroup.FilterFieldGroupID=FileterField.ParentStructRowID 
 join INSTANCE on FilterFieldGroup.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofilters
go
create view v_autofilters as 
select   b2g(filters. filtersid) filtersid,filters. changestamp changestamp
, 
filters.thecaption 
filters_thecaption 
, 
filters.name 
filters_name 
, 
filters.thecomment 
filters_thecomment 
, b2g(filters.instanceid) instanceid 
, filters.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(filters.filtersid) id 
, 'filters' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Filters
 join INSTANCE on Filters.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofilters_ru_ru
go
create view v_autofilters_ru_ru as 
select   b2g(filters. filtersid) filtersid,filters. changestamp changestamp
, 
filters.thecaption 
filters_thecaption 
, 
filters.name 
filters_name 
, 
filters.thecomment 
filters_thecomment 
, b2g(filters.instanceid) instanceid 
, filters.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(filters.filtersid) id 
, 'filters' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Filters
 join INSTANCE on Filters.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autofilters_en_us
go
create view v_autofilters_en_us as 
select   b2g(filters. filtersid) filtersid,filters. changestamp changestamp
, 
filters.thecaption 
filters_thecaption 
, 
filters.name 
filters_name 
, 
filters.thecomment 
filters_thecomment 
, b2g(filters.instanceid) instanceid 
, filters.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(filters.filtersid) id 
, 'filters' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Filters
 join INSTANCE on Filters.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_int_modules
go
create view v_autoiu_int_modules as 
select   b2g(iu_int_modules. iu_int_modulesid) iu_int_modulesid,iu_int_modules. changestamp changestamp
, 
 iu_int_modules.visiblecontrol  
iu_int_modules_visiblecontrol_val, 
 case iu_int_modules.visiblecontrol 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_visiblecontrol 
, 
 iu_int_modules.colegsobject  
iu_int_modules_colegsobject_val, 
 case iu_int_modules.colegsobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_colegsobject 
, 
iu_int_modules.caption 
iu_int_modules_caption 
, 
 iu_int_modules.substructobjects  
iu_int_modules_substructobjects_val, 
 case iu_int_modules.substructobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_substructobjects 
, 
 iu_int_modules.allobjects  
iu_int_modules_allobjects_val, 
 case iu_int_modules.allobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_allobjects 
, 
iu_int_modules.otherdocmode 
iu_int_modules_otherdocmode 
, 
iu_int_modules.mydocmode 
iu_int_modules_mydocmode 
, 
iu_int_modules.name 
iu_int_modules_name 
, 
iu_int_modules.controldocmode 
iu_int_modules_controldocmode 
, 
iu_int_modules.sequence 
iu_int_modules_sequence 
, 
iu_int_modules.theicon 
iu_int_modules_theicon 
, 
iu_int_modules.groupname 
iu_int_modules_groupname 
, b2g(iu_int_modules.instanceid) instanceid 
, iu_int_modules.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_int_modules.iu_int_modulesid) id 
, 'iu_int_modules' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_int_modules
 join INSTANCE on iu_int_modules.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_int_modules_ru_ru
go
create view v_autoiu_int_modules_ru_ru as 
select   b2g(iu_int_modules. iu_int_modulesid) iu_int_modulesid,iu_int_modules. changestamp changestamp
, 
 iu_int_modules.visiblecontrol  
iu_int_modules_visiblecontrol_val, 
 case iu_int_modules.visiblecontrol 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_visiblecontrol 
, 
 iu_int_modules.colegsobject  
iu_int_modules_colegsobject_val, 
 case iu_int_modules.colegsobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_colegsobject 
, 
iu_int_modules.caption 
iu_int_modules_caption 
, 
 iu_int_modules.substructobjects  
iu_int_modules_substructobjects_val, 
 case iu_int_modules.substructobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_substructobjects 
, 
 iu_int_modules.allobjects  
iu_int_modules_allobjects_val, 
 case iu_int_modules.allobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_allobjects 
, 
iu_int_modules.otherdocmode 
iu_int_modules_otherdocmode 
, 
iu_int_modules.mydocmode 
iu_int_modules_mydocmode 
, 
iu_int_modules.name 
iu_int_modules_name 
, 
iu_int_modules.controldocmode 
iu_int_modules_controldocmode 
, 
iu_int_modules.sequence 
iu_int_modules_sequence 
, 
iu_int_modules.theicon 
iu_int_modules_theicon 
, 
iu_int_modules.groupname 
iu_int_modules_groupname 
, b2g(iu_int_modules.instanceid) instanceid 
, iu_int_modules.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_int_modules.iu_int_modulesid) id 
, 'iu_int_modules' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_int_modules
 join INSTANCE on iu_int_modules.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoiu_int_modules_en_us
go
create view v_autoiu_int_modules_en_us as 
select   b2g(iu_int_modules. iu_int_modulesid) iu_int_modulesid,iu_int_modules. changestamp changestamp
, 
 iu_int_modules.visiblecontrol  
iu_int_modules_visiblecontrol_val, 
 case iu_int_modules.visiblecontrol 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_visiblecontrol 
, 
 iu_int_modules.colegsobject  
iu_int_modules_colegsobject_val, 
 case iu_int_modules.colegsobject 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_colegsobject 
, 
iu_int_modules.caption 
iu_int_modules_caption 
, 
 iu_int_modules.substructobjects  
iu_int_modules_substructobjects_val, 
 case iu_int_modules.substructobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_substructobjects 
, 
 iu_int_modules.allobjects  
iu_int_modules_allobjects_val, 
 case iu_int_modules.allobjects 
when -1 then 'да'
when 0 then 'нет'
 else '' 
 end  
iu_int_modules_allobjects 
, 
iu_int_modules.otherdocmode 
iu_int_modules_otherdocmode 
, 
iu_int_modules.mydocmode 
iu_int_modules_mydocmode 
, 
iu_int_modules.name 
iu_int_modules_name 
, 
iu_int_modules.controldocmode 
iu_int_modules_controldocmode 
, 
iu_int_modules.sequence 
iu_int_modules_sequence 
, 
iu_int_modules.theicon 
iu_int_modules_theicon 
, 
iu_int_modules.groupname 
iu_int_modules_groupname 
, b2g(iu_int_modules.instanceid) instanceid 
, iu_int_modules.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(iu_int_modules.iu_int_modulesid) id 
, 'iu_int_modules' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from iu_int_modules
 join INSTANCE on iu_int_modules.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptstruct
go
create view v_autorptstruct as 
select   b2g(rptstruct. rptstructid) rptstructid,rptstruct. changestamp changestamp
, 
rptstruct.caption 
rptstruct_caption 
, 
rptstruct.name 
rptstruct_name 
, b2g(rptstruct.instanceid) instanceid 
, rptstruct.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptstruct.rptstructid) id 
, 'rptstruct' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTStruct
 join INSTANCE on RPTStruct.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptstruct_ru_ru
go
create view v_autorptstruct_ru_ru as 
select   b2g(rptstruct. rptstructid) rptstructid,rptstruct. changestamp changestamp
, 
rptstruct.caption 
rptstruct_caption 
, 
rptstruct.name 
rptstruct_name 
, b2g(rptstruct.instanceid) instanceid 
, rptstruct.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptstruct.rptstructid) id 
, 'rptstruct' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTStruct
 join INSTANCE on RPTStruct.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptstruct_en_us
go
create view v_autorptstruct_en_us as 
select   b2g(rptstruct. rptstructid) rptstructid,rptstruct. changestamp changestamp
, 
rptstruct.caption 
rptstruct_caption 
, 
rptstruct.name 
rptstruct_name 
, b2g(rptstruct.instanceid) instanceid 
, rptstruct.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptstruct.rptstructid) id 
, 'rptstruct' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTStruct
 join INSTANCE on RPTStruct.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptfields
go
create view v_autorptfields as 
select   b2g(rptfields. rptfieldsid) rptfieldsid,rptfields. changestamp changestamp, b2g(rptstructid) rptstructid
, 
 b2g(rptfields.fieldtype)  
rptfields_fieldtype_id, 
 fieldtype_brief_f(rptfields.fieldtype, null) 
rptfields_fieldtype 
, 
rptfields.fieldsize 
rptfields_fieldsize 
, 
rptfields.caption 
rptfields_caption 
, 
rptfields.name 
rptfields_name 
, b2g(rptstruct.instanceid) instanceid 
, rptstruct.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptfields.rptfieldsid) id 
, 'rptfields' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTFields
 join RPTStruct on RPTStruct.RPTStructID=RPTFields.ParentStructRowID 
 join INSTANCE on RPTStruct.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptfields_ru_ru
go
create view v_autorptfields_ru_ru as 
select   b2g(rptfields. rptfieldsid) rptfieldsid,rptfields. changestamp changestamp, b2g(rptstructid) rptstructid
, 
 b2g(rptfields.fieldtype)  
rptfields_fieldtype_id, 
 fieldtype_brief_f(rptfields.fieldtype, 'ru_ru') 
rptfields_fieldtype 
, 
rptfields.fieldsize 
rptfields_fieldsize 
, 
rptfields.caption 
rptfields_caption 
, 
rptfields.name 
rptfields_name 
, b2g(rptstruct.instanceid) instanceid 
, rptstruct.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptfields.rptfieldsid) id 
, 'rptfields' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTFields
 join RPTStruct on RPTStruct.RPTStructID=RPTFields.ParentStructRowID 
 join INSTANCE on RPTStruct.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptfields_en_us
go
create view v_autorptfields_en_us as 
select   b2g(rptfields. rptfieldsid) rptfieldsid,rptfields. changestamp changestamp, b2g(rptstructid) rptstructid
, 
 b2g(rptfields.fieldtype)  
rptfields_fieldtype_id, 
 fieldtype_brief_f(rptfields.fieldtype, 'en_us') 
rptfields_fieldtype 
, 
rptfields.fieldsize 
rptfields_fieldsize 
, 
rptfields.caption 
rptfields_caption 
, 
rptfields.name 
rptfields_name 
, b2g(rptstruct.instanceid) instanceid 
, rptstruct.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptfields.rptfieldsid) id 
, 'rptfields' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTFields
 join RPTStruct on RPTStruct.RPTStructID=RPTFields.ParentStructRowID 
 join INSTANCE on RPTStruct.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptformula
go
create view v_autorptformula as 
select   b2g(rptformula. rptformulaid) rptformulaid,rptformula. changestamp changestamp
, 
 b2g(rptformula.platform)  
rptformula_platform_id, 
 generator_target_brief_f(rptformula.platform, null) 
rptformula_platform 
, 
rptformula.name 
rptformula_name 
, 
rptformula.code 
rptformula_code 
, b2g(rptformula.instanceid) instanceid 
, rptformula.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptformula.rptformulaid) id 
, 'rptformula' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTFormula
 join INSTANCE on RPTFormula.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptformula_ru_ru
go
create view v_autorptformula_ru_ru as 
select   b2g(rptformula. rptformulaid) rptformulaid,rptformula. changestamp changestamp
, 
 b2g(rptformula.platform)  
rptformula_platform_id, 
 generator_target_brief_f(rptformula.platform, 'ru_ru') 
rptformula_platform 
, 
rptformula.name 
rptformula_name 
, 
rptformula.code 
rptformula_code 
, b2g(rptformula.instanceid) instanceid 
, rptformula.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptformula.rptformulaid) id 
, 'rptformula' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTFormula
 join INSTANCE on RPTFormula.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autorptformula_en_us
go
create view v_autorptformula_en_us as 
select   b2g(rptformula. rptformulaid) rptformulaid,rptformula. changestamp changestamp
, 
 b2g(rptformula.platform)  
rptformula_platform_id, 
 generator_target_brief_f(rptformula.platform, 'en_us') 
rptformula_platform 
, 
rptformula.name 
rptformula_name 
, 
rptformula.code 
rptformula_code 
, b2g(rptformula.instanceid) instanceid 
, rptformula.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(rptformula.rptformulaid) id 
, 'rptformula' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from RPTFormula
 join INSTANCE on RPTFormula.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoreports
go
create view v_autoreports as 
select   b2g(reports. reportsid) reportsid,reports. changestamp changestamp
, 
reports.name 
reports_name 
, 
reports.thecomment 
reports_thecomment 
, 
reports.reportfile 
reports_reportfile 
, 
reports.caption 
reports_caption 
, 
 b2g(reports.preparemethod)  
reports_preparemethod_id, 
 sharedmethod_brief_f(reports.preparemethod, null) 
reports_preparemethod 
, 
 b2g(reports.thereportext)  
reports_thereportext_id, 
 instance_brief_f(reports.thereportext , null) 
reports_thereportext 
, 
 reports.reporttype  
reports_reporttype_val, 
 case reports.reporttype 
when 4 then 'экспорт по excel шаблону'
when 0 then 'таблица'
when 3 then 'экспорт по word шаблону'
when 1 then 'двумерная матрица'
when 2 then 'только расчет'
 else '' 
 end  
reports_reporttype 
, 
reports.reportview 
reports_reportview 
, b2g(reports.instanceid) instanceid 
, reports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(reports.reportsid) id 
, 'reports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Reports
 join INSTANCE on Reports.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoreports_ru_ru
go
create view v_autoreports_ru_ru as 
select   b2g(reports. reportsid) reportsid,reports. changestamp changestamp
, 
reports.name 
reports_name 
, 
reports.thecomment 
reports_thecomment 
, 
reports.reportfile 
reports_reportfile 
, 
reports.caption 
reports_caption 
, 
 b2g(reports.preparemethod)  
reports_preparemethod_id, 
 sharedmethod_brief_f(reports.preparemethod, 'ru_ru') 
reports_preparemethod 
, 
 b2g(reports.thereportext)  
reports_thereportext_id, 
 instance_brief_f(reports.thereportext, 'ru_ru') 
reports_thereportext 
, 
 reports.reporttype  
reports_reporttype_val, 
 case reports.reporttype 
when 4 then 'экспорт по excel шаблону'
when 0 then 'таблица'
when 3 then 'экспорт по word шаблону'
when 1 then 'двумерная матрица'
when 2 then 'только расчет'
 else '' 
 end  
reports_reporttype 
, 
reports.reportview 
reports_reportview 
, b2g(reports.instanceid) instanceid 
, reports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(reports.reportsid) id 
, 'reports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Reports
 join INSTANCE on Reports.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO


drop view if exists v_autoreports_en_us
go
create view v_autoreports_en_us as 
select   b2g(reports. reportsid) reportsid,reports. changestamp changestamp
, 
reports.name 
reports_name 
, 
reports.thecomment 
reports_thecomment 
, 
reports.reportfile 
reports_reportfile 
, 
reports.caption 
reports_caption 
, 
 b2g(reports.preparemethod)  
reports_preparemethod_id, 
 sharedmethod_brief_f(reports.preparemethod, 'en_us') 
reports_preparemethod 
, 
 b2g(reports.thereportext)  
reports_thereportext_id, 
 instance_brief_f(reports.thereportext, 'en_us') 
reports_thereportext 
, 
 reports.reporttype  
reports_reporttype_val, 
 case reports.reporttype 
when 4 then 'экспорт по excel шаблону'
when 0 then 'таблица'
when 3 then 'экспорт по word шаблону'
when 1 then 'двумерная матрица'
when 2 then 'только расчет'
 else '' 
 end  
reports_reporttype 
, 
reports.reportview 
reports_reportview 
, b2g(reports.instanceid) instanceid 
, reports.instanceid instanceid_val 
,  instance.archived   instance_archived 
, b2g(reports.reportsid) id 
, 'reports' viewbase 
, xxxmystatusxxx.name statusname 
, b2g(xxxmystatusxxx.objstatusid) intsancestatusid
 from Reports
 join INSTANCE on Reports.INSTANCEID=INSTANCE.INSTANCEID
 left join objstatus XXXMYSTATUSXXX on instance.status=XXXMYSTATUSXXX.objstatusid

GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Procs" File="">
    <BlockHolder BlockName="--body" BlockCode=" 


drop procedure if exists tplc_copy
go

create procedure tplc_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call tplc_e_copy(acursession,aaction,ainstanceid);
call tplc_m_copy(acursession,aaction,ainstanceid);
call tplc_header_copy(acursession,aaction,ainstanceid);
call tplc_d_copy(acursession,aaction,ainstanceid);
call tplc_h_copy(acursession,aaction,ainstanceid);
call tplc_missing_copy(acursession,aaction,ainstanceid);
call tplc_t_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists tplc_access_f
go

create function tplc_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists tplc_export_f
go

create function tplc_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists tpn_copy
go

create procedure tpn_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call tpn_def_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists tpn_access_f
go

create function tpn_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists tpn_export_f
go

create function tpn_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists bpu_copy
go

create procedure bpu_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call iu_u_def_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists bpu_access_f
go

create function bpu_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists bpu_export_f
go

create function bpu_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists bpu_gettotemp
go

create procedure bpu_gettotemp (
 acursession varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
call iu_u_def_gettotemp(acursession,ainstanceid);
select 'ok' result;
 end 
GO


drop procedure if exists bpu_commitfromtemp
go

create procedure bpu_commitfromtemp (
 acursession varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
call iu_u_def_commitfromtemp(acursession,ainstanceid);
select 'ok' result;
 end 
GO


drop procedure if exists bpu_droptempdata
go

create procedure bpu_droptempdata (
 acursession varchar(38),
 ainstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
call iu_u_def_droptempdata(acursession,ainstanceid);
select 'ok' result;
 end 
GO


drop procedure if exists mtzmetamodel_copy
go

create procedure mtzmetamodel_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call genpackage_copy(acursession,aaction,ainstanceid);
call localizeinfo_copy(acursession,aaction,ainstanceid);
call fieldtype_copy(acursession,aaction,ainstanceid);
call sharedmethod_copy(acursession,aaction,ainstanceid);
call objecttype_copy(acursession,aaction,ainstanceid);
call mtzapp_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists mtzmetamodel_access_f
go

create function mtzmetamodel_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists mtzmetamodel_export_f
go

create function mtzmetamodel_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists mtzjrnl_copy
go

create procedure mtzjrnl_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call journalcolumn_copy(acursession,aaction,ainstanceid);
call journalsrc_copy(acursession,aaction,ainstanceid);
call journal_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists mtzjrnl_access_f
go

create function mtzjrnl_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists mtzjrnl_export_f
go

create function mtzjrnl_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists bpc_copy
go

create procedure bpc_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call bpc_info_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists bpc_access_f
go

create function bpc_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists bpc_export_f
go

create function bpc_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists mtzsystem_copy
go

create procedure mtzsystem_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call the_session_copy(acursession,aaction,ainstanceid);
call sysrefcache_copy(acursession,aaction,ainstanceid);
call syslog_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists mtzsystem_access_f
go

create function mtzsystem_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists mtzsystem_export_f
go

create function mtzsystem_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists tpls_copy
go

create procedure tpls_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call tpls_info_copy(acursession,aaction,ainstanceid);
call tpls_param_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists tpls_access_f
go

create function tpls_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists tpls_export_f
go

create function tpls_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists mtzwp_copy
go

create procedure mtzwp_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call armjournal_copy(acursession,aaction,ainstanceid);
call entrypoints_copy(acursession,aaction,ainstanceid);
call workplace_copy(acursession,aaction,ainstanceid);
call armtypes_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists mtzwp_access_f
go

create function mtzwp_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists mtzwp_export_f
go

create function mtzwp_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists bpdr_copy
go

create procedure bpdr_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call iu_crole_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists bpdr_access_f
go

create function bpdr_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists bpdr_export_f
go

create function bpdr_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists tpld_copy
go

create procedure tpld_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call tpld_connecttype_copy(acursession,aaction,ainstanceid);
call tpld_devclass_copy(acursession,aaction,ainstanceid);
call tpld_f_copy(acursession,aaction,ainstanceid);
call tpld_snab_copy(acursession,aaction,ainstanceid);
call tpld_paramtype_copy(acursession,aaction,ainstanceid);
call tpld_grp_copy(acursession,aaction,ainstanceid);
call tpld_snabtop_copy(acursession,aaction,ainstanceid);
call tpld_param_copy(acursession,aaction,ainstanceid);
call tpld_devtype_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists tpld_access_f
go

create function tpld_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists tpld_export_f
go

create function tpld_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists mtzusers_copy
go

create procedure mtzusers_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call users_copy(acursession,aaction,ainstanceid);
call groups_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists mtzusers_access_f
go

create function mtzusers_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists mtzusers_export_f
go

create function mtzusers_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists tpsrv_copy
go

create procedure tpsrv_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call tpsrv_modems_copy(acursession,aaction,ainstanceid);
call tpsrv_info_copy(acursession,aaction,ainstanceid);
call tpsrv_ports_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists tpsrv_access_f
go

create function tpsrv_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists tpsrv_export_f
go

create function tpsrv_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists stdnumerator_copy
go

create procedure stdnumerator_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call num_zones_copy(acursession,aaction,ainstanceid);
call num_head_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists stdnumerator_access_f
go

create function stdnumerator_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists stdnumerator_export_f
go

create function stdnumerator_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists tplt_copy
go

create procedure tplt_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call tplt_reports_copy(acursession,aaction,ainstanceid);
call tplt_connect_copy(acursession,aaction,ainstanceid);
call tplt_valuebounds_copy(acursession,aaction,ainstanceid);
call tplt_plancall_copy(acursession,aaction,ainstanceid);
call tplt_mask_copy(acursession,aaction,ainstanceid);
call tplt_bdevices_copy(acursession,aaction,ainstanceid);
call tplt_contract_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO


drop procedure if exists tplt_initownership
go

create procedure tplt_initownership  (
 acursession varchar(38),
 ainstanceid varchar(38)
) body: begin  
 declare aec int;
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     leave body;
  end if;
end 
go
GO



drop function if exists tplt_access_f
go

create function tplt_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists tplt_export_f
go

create function tplt_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists mtzext_copy
go

create procedure mtzext_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call mtzext_def_copy(acursession,aaction,ainstanceid);
call mtzextrel_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists mtzext_access_f
go

create function mtzext_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists mtzext_export_f
go

create function mtzext_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists bprcfg_copy
go

create procedure bprcfg_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call iu_rcfg_mod_copy(acursession,aaction,ainstanceid);
call iu_rcfg_docmode_copy(acursession,aaction,ainstanceid);
call iu_rcfg_def_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists bprcfg_access_f
go

create function bprcfg_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists bprcfg_export_f
go

create function bprcfg_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists tpq_copy
go

create procedure tpq_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call tpq_def_copy(acursession,aaction,ainstanceid);
call tpq_result_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists tpq_access_f
go

create function tpq_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists tpq_export_f
go

create function tpq_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists mtzfltr_copy
go

create procedure mtzfltr_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call filterfieldgroup_copy(acursession,aaction,ainstanceid);
call filters_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists mtzfltr_access_f
go

create function mtzfltr_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists mtzfltr_export_f
go

create function mtzfltr_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists bpdi_copy
go

create procedure bpdi_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call iu_int_modules_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists bpdi_access_f
go

create function bpdi_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists bpdi_export_f
go

create function bpdi_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO


drop procedure if exists mtzrprt_copy
go

create procedure mtzrprt_copy (
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)  body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select 'сессия уже завершена.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call rptstruct_copy(acursession,aaction,ainstanceid);
call rptformula_copy(acursession,aaction,ainstanceid);
call reports_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end 
GO



drop function if exists mtzrprt_access_f
go

create function mtzrprt_access_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt &gt; 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
go


drop function if exists mtzrprt_export_f
go

create function mtzrprt_export_f  (
 acursession varchar(38)
, ainstanceid varchar(38)
) returns tinyint(1)  
  reads sql data  
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
go
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--ManualCode" File="">
    <BlockHolder BlockName="--body" BlockCode=" 
/*индексы ()*/
CREATE  INDEX Syslog_times ON SysLog(ChangeStamp) 
$$

create index instance_lockuser on instance(lockuserid)

$$

create index instance_locksession on instance(locksessionid)

$$

 

GO
/*V_ROLEENTRY (V_ROLEENTRY)*/
drop view if exists V_RoleEntryPoints 
$$
create view V_RoleEntryPoints as
select 
Roles_WP.instanceid ROLEID ,
Roles_WP.WP ARMID,
Roles_ACT.Accesible,
Entrypoints.Name,
Entrypoints.Caption
from ROLES_WP 
join ROLES_ACT on ROLES_WP.ROLES_WPID=ROLES_ACT.parentstructrowid
join entrypoints on 
ROLES_ACT.entrypoints=entrypoints.entrypointsid
$$
GO
/*V_SYSLOG (V_SYSLOG)*/
drop view if exists V_SYSLOG
$$

create view V_SYSLOG as
select 
syslog.syslogid,syslog.changestamp,syslog.the_Resource,syslog.LogStructID,syslog.VERB,users.login,users.Family,users.Name,users.Surname,syslog.LogInstanceID 
from  syslog 
join the_session on syslog.thesession=the_session.the_sessionid 
join users on the_session.usersid=users.usersid
GO
/*V_LOG (V_LOG)*/
drop view if exists V_LOG
$$
create view V_LOG as 
select syslog.syslogid
,syslog.changestamp
,the_session.StartAt
,the_session.Closed
,syslog.the_Resource
,syslog.LogStructID
,syslog.LogInstanceID
,syslog.VERB
,users.login
,users.Family
,users.Name
,users.Surname
,instance.name instname
,instance.objtype
,part.caption
,objecttype.the_comment
 from  syslog
join the_session on syslog.thesession=the_session.the_sessionid
join users on the_session.usersid=users.usersid
left join instance on syslog.loginstanceid = instance.instanceid
left join part on syslog.logstructid = part.name
left join objecttype on instance.objtype =objecttype.name

$$
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Maintains" File="">
    <BlockHolder BlockName="--create" BlockCode=" 
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Options" File="">
    <BlockHolder BlockName="--Load" BlockCode=" 

drop procedure if exists init;
go
create procedure init() begin
declare aid binary(16);
declare ainstid binary(16);
declare auid binary(16);
declare asession varchar(38);
declare acid binary(16);
declare asecid binary(16);
declare ahid binary(16);
declare atmpstr varchar(255);
declare aec int;
select count(*) into aec from instance where objtype='mtzsystem';
if aec=0 then
    set ainstid = g2b('ee28f9e4-afe3-44e9-8fef-411e81913423');
    insert into instance(instanceid,objtype,name,changestamp) values(ainstid, 'mtzsystem','системная информация',now());
else
    select instanceid into ainstid from instance where objtype='mtzsystem';
end if;
set auid = g2b('38def86a-191e-49a8-963b-63e0c94f4f99'); 
set asecid = g2b('993daafd-589e-480d-97ff-1f9ab0568800'); 
set ahid = g2b('27f56741-4140-4c9c-909b-446eca089409'); 
select count(*) into aec from users where usersid=auid;
if aec=0 then
insert into users(usersid,instanceid,login,password,changestamp) values(auid,null,'init','init',now());
end if;
select count(*) into aec from typelist where name='tplc';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'tplc', 'tplc_register', 'tplc_delete', 'tplc_hcl', 'tplc_propagate');
end if;
select count(*) into aec from typelist where name='tpn';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'tpn', 'tpn_register', 'tpn_delete', 'tpn_hcl', 'tpn_propagate');
end if;
select count(*) into aec from typelist where name='bpu';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bpu', 'bpu_register', 'bpu_delete', 'bpu_hcl', 'bpu_propagate');
end if;
select count(*) into aec from typelist where name='mtzmetamodel';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzmetamodel', 'mtzmetamodel_register', 'mtzmetamodel_delete', 'mtzmetamodel_hcl', 'mtzmetamodel_propagate');
end if;
select count(*) into aec from typelist where name='mtzjrnl';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzjrnl', 'mtzjrnl_register', 'mtzjrnl_delete', 'mtzjrnl_hcl', 'mtzjrnl_propagate');
end if;
select count(*) into aec from typelist where name='bpc';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bpc', 'bpc_register', 'bpc_delete', 'bpc_hcl', 'bpc_propagate');
end if;
select count(*) into aec from typelist where name='mtzsystem';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzsystem', 'mtzsystem_register', 'mtzsystem_delete', 'mtzsystem_hcl', 'mtzsystem_propagate');
end if;
select count(*) into aec from typelist where name='tpls';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'tpls', 'tpls_register', 'tpls_delete', 'tpls_hcl', 'tpls_propagate');
end if;
select count(*) into aec from typelist where name='mtzwp';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzwp', 'mtzwp_register', 'mtzwp_delete', 'mtzwp_hcl', 'mtzwp_propagate');
end if;
select count(*) into aec from typelist where name='bpdr';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bpdr', 'bpdr_register', 'bpdr_delete', 'bpdr_hcl', 'bpdr_propagate');
end if;
select count(*) into aec from typelist where name='tpld';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'tpld', 'tpld_register', 'tpld_delete', 'tpld_hcl', 'tpld_propagate');
end if;
select count(*) into aec from typelist where name='mtzusers';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzusers', 'mtzusers_register', 'mtzusers_delete', 'mtzusers_hcl', 'mtzusers_propagate');
end if;
select count(*) into aec from typelist where name='tpsrv';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'tpsrv', 'tpsrv_register', 'tpsrv_delete', 'tpsrv_hcl', 'tpsrv_propagate');
end if;
select count(*) into aec from typelist where name='stdnumerator';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'stdnumerator', 'stdnumerator_register', 'stdnumerator_delete', 'stdnumerator_hcl', 'stdnumerator_propagate');
end if;
select count(*) into aec from typelist where name='tplt';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'tplt', 'tplt_register', 'tplt_delete', 'tplt_hcl', 'tplt_propagate');
end if;
select count(*) into aec from typelist where name='mtzext';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzext', 'mtzext_register', 'mtzext_delete', 'mtzext_hcl', 'mtzext_propagate');
end if;
select count(*) into aec from typelist where name='bprcfg';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bprcfg', 'bprcfg_register', 'bprcfg_delete', 'bprcfg_hcl', 'bprcfg_propagate');
end if;
select count(*) into aec from typelist where name='tpq';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'tpq', 'tpq_register', 'tpq_delete', 'tpq_hcl', 'tpq_propagate');
end if;
select count(*) into aec from typelist where name='mtzfltr';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzfltr', 'mtzfltr_register', 'mtzfltr_delete', 'mtzfltr_hcl', 'mtzfltr_propagate');
end if;
select count(*) into aec from typelist where name='bpdi';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bpdi', 'bpdi_register', 'bpdi_delete', 'bpdi_hcl', 'bpdi_propagate');
end if;
select count(*) into aec from typelist where name='mtzrprt';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzrprt', 'mtzrprt_register', 'mtzrprt_delete', 'mtzrprt_hcl', 'mtzrprt_propagate');
end if;

set aid = g2b('e1131966-b5bd-4b12-8f13-4636408449df');
call sysoptions_save ( b2g(aid), 'tplc_e', 'tplc', 'struct_type');

set aid = g2b('8cc67e0e-16ab-4044-881c-f6a62c094657');
call sysoptions_save ( b2g(aid), 'tplc_e', 'autotplc_e', 'defview');

set aid = g2b('70c0f258-d3fe-4ae7-9673-e064f954e7ee');
call sysoptions_save ( b2g(aid), 'tplc_m', 'tplc', 'struct_type');

set aid = g2b('093e4ea1-f81c-46ed-aa40-371b329aad74');
call sysoptions_save ( b2g(aid), 'tplc_m', 'autotplc_m', 'defview');

set aid = g2b('1746f4a6-95b3-4332-91d1-da28bda3f792');
call sysoptions_save ( b2g(aid), 'tplc_header', 'tplc', 'struct_type');

set aid = g2b('2b3b3f26-32be-4458-afbd-fa4b6e6a792c');
call sysoptions_save ( b2g(aid), 'tplc_header', 'autotplc_header', 'defview');

set aid = g2b('ef9a6a04-7b67-48ff-b0ce-0f0c15a05555');
call sysoptions_save ( b2g(aid), 'tplc_d', 'tplc', 'struct_type');

set aid = g2b('8d2487ce-0898-4ecf-9c43-4ca95dc39493');
call sysoptions_save ( b2g(aid), 'tplc_d', 'autotplc_d', 'defview');

set aid = g2b('43f92678-6aa2-4e70-af6f-cd651bb659d4');
call sysoptions_save ( b2g(aid), 'tplc_h', 'tplc', 'struct_type');

set aid = g2b('147f4d25-df26-42ac-80e2-7ac46a1f9c17');
call sysoptions_save ( b2g(aid), 'tplc_h', 'autotplc_h', 'defview');

set aid = g2b('a465b3f9-01c7-4c86-9146-6560236558ce');
call sysoptions_save ( b2g(aid), 'tplc_missing', 'tplc', 'struct_type');

set aid = g2b('81cb0364-6598-423f-8872-e8706f236b2e');
call sysoptions_save ( b2g(aid), 'tplc_missing', 'autotplc_missing', 'defview');

set aid = g2b('ae57bbb0-061a-44e2-b8ef-0f55e3d43ea5');
call sysoptions_save ( b2g(aid), 'tplc_t', 'tplc', 'struct_type');

set aid = g2b('c6a6d576-13e0-4834-a581-a3a2602fa006');
call sysoptions_save ( b2g(aid), 'tplc_t', 'autotplc_t', 'defview');

set aid = g2b('eece4eb0-b390-4476-a9c0-a5b1bec5c4b1');
call sysoptions_save ( b2g(aid), 'tpn_def', 'tpn', 'struct_type');

set aid = g2b('9d2fc9c8-56b9-44b5-8d17-3453f02e17bc');
call sysoptions_save ( b2g(aid), 'tpn_def', 'autotpn_def', 'defview');

set aid = g2b('6988c503-7e5a-40a7-81e4-2aa55196d29a');
call sysoptions_save ( b2g(aid), 'iu_u_def', 'bpu', 'struct_type');

set aid = g2b('5a6d1ae9-dfd7-4023-bbb3-3bf183add956');
call sysoptions_save ( b2g(aid), 'iu_u_def', 'autoiu_u_def', 'defview');

set aid = g2b('a9d13db7-f13b-4c78-8790-d263d5a970ed');
call sysoptions_save ( b2g(aid), 'genpackage', 'mtzmetamodel', 'struct_type');

set aid = g2b('d81baef1-b6a2-4441-a861-a9f66293163d');
call sysoptions_save ( b2g(aid), 'generator_target', 'mtzmetamodel', 'struct_type');
set aid = g2b('69c879e6-5803-4f66-b9b0-ae4347c53ce1');
call sysoptions_save(  b2g(aid), 'generator_target', 'genpackage', 'parent');

set aid = g2b('def245da-30ae-4a76-b58d-32c8d11b60d7');
call sysoptions_save ( b2g(aid), 'genreference', 'mtzmetamodel', 'struct_type');
set aid = g2b('2d00c138-719a-47de-b7a0-69689e240659');
call sysoptions_save(  b2g(aid), 'genreference', 'generator_target', 'parent');

set aid = g2b('ece9f87c-b4f5-44dd-b5e3-159089332d53');
call sysoptions_save ( b2g(aid), 'genmanualcode', 'mtzmetamodel', 'struct_type');
set aid = g2b('23b0c317-14da-473d-b1ad-99efc84cd196');
call sysoptions_save(  b2g(aid), 'genmanualcode', 'generator_target', 'parent');

set aid = g2b('a7e7647c-4b0b-4952-acfe-251f6d2b1604');
call sysoptions_save ( b2g(aid), 'gencontrols', 'mtzmetamodel', 'struct_type');
set aid = g2b('ff8de6ad-1024-4884-9ef3-d0c7a32ead1b');
call sysoptions_save(  b2g(aid), 'gencontrols', 'generator_target', 'parent');

set aid = g2b('5426f592-e8d2-44c1-8cef-f6fecc621fda');
call sysoptions_save ( b2g(aid), 'genpackage', 'autogenpackage', 'defview');

set aid = g2b('3a47de37-b043-4277-a9b3-6d7ae228b78d');
call sysoptions_save ( b2g(aid), 'generator_target', 'autogenerator_target', 'defview');

set aid = g2b('8a630815-287f-4ebb-8574-2398f019013d');
call sysoptions_save ( b2g(aid), 'genreference', 'autogenreference', 'defview');

set aid = g2b('63df4844-e5fd-4f87-9476-fe864fce7848');
call sysoptions_save ( b2g(aid), 'genmanualcode', 'autogenmanualcode', 'defview');

set aid = g2b('bfb66cb3-20a0-439a-a5da-d78c5e6d123d');
call sysoptions_save ( b2g(aid), 'gencontrols', 'autogencontrols', 'defview');

set aid = g2b('878da760-09be-40a7-b2cb-cb14224edf20');
call sysoptions_save ( b2g(aid), 'localizeinfo', 'mtzmetamodel', 'struct_type');

set aid = g2b('7f65d271-5e3a-4be8-92d2-d26c56e35f94');
call sysoptions_save ( b2g(aid), 'localizeinfo', 'autolocalizeinfo', 'defview');

set aid = g2b('5db0073f-4a8d-478c-9df2-4acf5f17d89a');
call sysoptions_save ( b2g(aid), 'fieldtype', 'mtzmetamodel', 'struct_type');

set aid = g2b('0bc965e3-9af9-4dd6-ae61-0419d2816cd8');
call sysoptions_save ( b2g(aid), 'enumitem', 'mtzmetamodel', 'struct_type');
set aid = g2b('64bc9ddd-a6eb-44b1-8196-f4756b5e64ad');
call sysoptions_save(  b2g(aid), 'enumitem', 'fieldtype', 'parent');

set aid = g2b('c22b384b-3a33-4b0d-9875-6e073676323f');
call sysoptions_save ( b2g(aid), 'fieldtypemap', 'mtzmetamodel', 'struct_type');
set aid = g2b('03651b0f-a732-419a-b858-87cf253946ed');
call sysoptions_save(  b2g(aid), 'fieldtypemap', 'fieldtype', 'parent');

set aid = g2b('4751f190-6b1d-48e2-8b7f-b50adc81dbd3');
call sysoptions_save ( b2g(aid), 'fieldtype', 'autofieldtype', 'defview');

set aid = g2b('2737248f-3e88-4602-990d-a345b3145bd0');
call sysoptions_save ( b2g(aid), 'enumitem', 'autoenumitem', 'defview');

set aid = g2b('2f8f5b56-77f4-45c3-9c5c-991677bf009c');
call sysoptions_save ( b2g(aid), 'fieldtypemap', 'autofieldtypemap', 'defview');

set aid = g2b('a68bfc42-ba0b-4e9f-b43c-c22f6a887134');
call sysoptions_save ( b2g(aid), 'sharedmethod', 'mtzmetamodel', 'struct_type');

set aid = g2b('521a778c-1d02-411a-8af5-8971def082a7');
call sysoptions_save ( b2g(aid), 'script', 'mtzmetamodel', 'struct_type');
set aid = g2b('cff65a38-fcca-4f0b-a660-33d4a6388405');
call sysoptions_save(  b2g(aid), 'script', 'sharedmethod', 'parent');

set aid = g2b('ccb0fd7f-fb1d-4c6a-99c7-1a8565abf123');
call sysoptions_save ( b2g(aid), 'parameters', 'mtzmetamodel', 'struct_type');
set aid = g2b('b9a1b232-bb94-462c-a984-dfd0c9c19fae');
call sysoptions_save(  b2g(aid), 'parameters', 'script', 'parent');

set aid = g2b('48e60a2a-0d9c-4807-90a5-7093e6975c04');
call sysoptions_save ( b2g(aid), 'sharedmethod', 'autosharedmethod', 'defview');

set aid = g2b('bcef53f0-9bea-49fe-82c5-aec66abfe6a2');
call sysoptions_save ( b2g(aid), 'script', 'autoscript', 'defview');

set aid = g2b('1fa48bcd-3fbc-4760-9156-9fbb1678babf');
call sysoptions_save ( b2g(aid), 'parameters', 'autoparameters', 'defview');

set aid = g2b('f581813e-cd46-4c2f-9827-cb5e6b76c7ca');
call sysoptions_save ( b2g(aid), 'objecttype', 'mtzmetamodel', 'struct_type');

set aid = g2b('4fabfe2f-72a8-469f-ac56-d48b4a1522cc');
call sysoptions_save ( b2g(aid), 'objstatus', 'mtzmetamodel', 'struct_type');
set aid = g2b('d023571a-a8e7-4b20-a590-6c358a4bcfb1');
call sysoptions_save(  b2g(aid), 'objstatus', 'objecttype', 'parent');

set aid = g2b('15c360e1-62b0-40b0-8af9-2888713fb658');
call sysoptions_save ( b2g(aid), 'nextstate', 'mtzmetamodel', 'struct_type');
set aid = g2b('11b239c9-da07-4438-9bfd-7b47cc9e6d66');
call sysoptions_save(  b2g(aid), 'nextstate', 'objstatus', 'parent');

set aid = g2b('faccc759-7c6a-4a3a-a5b2-c9ce835e1c0a');
call sysoptions_save ( b2g(aid), 'objectmode', 'mtzmetamodel', 'struct_type');
set aid = g2b('18fff991-ebb3-4b80-8514-53146d46f1d6');
call sysoptions_save(  b2g(aid), 'objectmode', 'objecttype', 'parent');

set aid = g2b('f436fd5f-8c76-4c7f-9a94-50536a58e3a4');
call sysoptions_save ( b2g(aid), 'structrestriction', 'mtzmetamodel', 'struct_type');
set aid = g2b('4fcfbe5b-a3c5-4799-86b5-cfdd78580a9a');
call sysoptions_save(  b2g(aid), 'structrestriction', 'objectmode', 'parent');

set aid = g2b('93c1b60f-1731-40f3-b88e-9f138e0ddde8');
call sysoptions_save ( b2g(aid), 'methodrestriction', 'mtzmetamodel', 'struct_type');
set aid = g2b('bfb11f0e-a953-48fb-9c18-60acaa0a43ea');
call sysoptions_save(  b2g(aid), 'methodrestriction', 'objectmode', 'parent');

set aid = g2b('12c3c0dc-294d-405f-9e19-9c4f59729084');
call sysoptions_save ( b2g(aid), 'fieldrestriction', 'mtzmetamodel', 'struct_type');
set aid = g2b('1c3cab54-dd31-4c54-ba2f-6ff5e3439a42');
call sysoptions_save(  b2g(aid), 'fieldrestriction', 'objectmode', 'parent');

set aid = g2b('a49b593b-11c2-4acf-87cf-9c1141ca4fd8');
call sysoptions_save ( b2g(aid), 'typemenu', 'mtzmetamodel', 'struct_type');
set aid = g2b('28093c41-690e-4755-b538-654b7806899d');
call sysoptions_save(  b2g(aid), 'typemenu', 'objecttype', 'parent');

set aid = g2b('f456edef-d69c-40eb-8902-c49b68855731');
call sysoptions_save ( b2g(aid), 'instancevalidator', 'mtzmetamodel', 'struct_type');
set aid = g2b('de53e14c-deb4-4ea0-8589-01ac3fc4016f');
call sysoptions_save(  b2g(aid), 'instancevalidator', 'objecttype', 'parent');

set aid = g2b('bd4cad32-72d4-40a6-b8bf-e163e2dbd948');
call sysoptions_save ( b2g(aid), 'part', 'mtzmetamodel', 'struct_type');
set aid = g2b('3bdeb3ad-05e8-4dc1-8bed-8aeaecbf3360');
call sysoptions_save(  b2g(aid), 'part', 'objecttype', 'parent');

set aid = g2b('84c2925d-b29f-4479-8778-9a32ab18ce55');
call sysoptions_save ( b2g(aid), 'partmenu', 'mtzmetamodel', 'struct_type');
set aid = g2b('4561bd06-62d6-42f6-87d6-42045dd04bc3');
call sysoptions_save(  b2g(aid), 'partmenu', 'part', 'parent');

set aid = g2b('f80cdf54-74d5-4178-bd81-16ed99eb01cc');
call sysoptions_save ( b2g(aid), 'partparammap', 'mtzmetamodel', 'struct_type');
set aid = g2b('03bb5cbb-b464-45ad-a371-48cd9dc8db8c');
call sysoptions_save(  b2g(aid), 'partparammap', 'partmenu', 'parent');

set aid = g2b('9a50c6fe-1548-4de7-9ed8-ddc673b6c22c');
call sysoptions_save ( b2g(aid), 'partview', 'mtzmetamodel', 'struct_type');
set aid = g2b('7158eda6-983d-4c44-810f-215384920d5e');
call sysoptions_save(  b2g(aid), 'partview', 'part', 'parent');

set aid = g2b('2b9a3aed-3b2c-4c48-8c15-954fd5996112');
call sysoptions_save ( b2g(aid), 'viewcolumn', 'mtzmetamodel', 'struct_type');
set aid = g2b('3097d9ed-29b8-4cc9-b414-62312d302a8e');
call sysoptions_save(  b2g(aid), 'viewcolumn', 'partview', 'parent');

set aid = g2b('1b0bac13-ff9e-45b2-a7ee-e09c695157b2');
call sysoptions_save ( b2g(aid), 'partview_lnk', 'mtzmetamodel', 'struct_type');
set aid = g2b('6d11a5b8-8103-4e6d-b9ab-e3d47cb362c5');
call sysoptions_save(  b2g(aid), 'partview_lnk', 'partview', 'parent');

set aid = g2b('ff882c2f-13df-4b54-a96d-1ccb78f75a04');
call sysoptions_save ( b2g(aid), 'validator', 'mtzmetamodel', 'struct_type');
set aid = g2b('c906f847-6565-4078-bb5d-5e2679c670ee');
call sysoptions_save(  b2g(aid), 'validator', 'part', 'parent');

set aid = g2b('4e2d1673-a72a-4729-9688-a21b075ead28');
call sysoptions_save ( b2g(aid), 'uniqueconstraint', 'mtzmetamodel', 'struct_type');
set aid = g2b('285bcc5d-dad1-472a-8aa6-faf06c684063');
call sysoptions_save(  b2g(aid), 'uniqueconstraint', 'part', 'parent');

set aid = g2b('1dca18b0-78d0-4af1-a8cc-e53846afba59');
call sysoptions_save ( b2g(aid), 'constraintfield', 'mtzmetamodel', 'struct_type');
set aid = g2b('203f5750-0e5d-4e2e-b74b-30c866a75e1f');
call sysoptions_save(  b2g(aid), 'constraintfield', 'uniqueconstraint', 'parent');

set aid = g2b('c63426e6-121c-41ab-b771-67ad3bc6d535');
call sysoptions_save ( b2g(aid), 'extenderinterface', 'mtzmetamodel', 'struct_type');
set aid = g2b('c8acc0a9-ebbf-4d3c-90bd-8b2aff66af1e');
call sysoptions_save(  b2g(aid), 'extenderinterface', 'part', 'parent');

set aid = g2b('c3ba4b0f-9dd3-40b3-80a3-b2e3846c70d5');
call sysoptions_save ( b2g(aid), 'field', 'mtzmetamodel', 'struct_type');
set aid = g2b('44642d93-5c69-4a02-bc7b-cadfc586d4b8');
call sysoptions_save(  b2g(aid), 'field', 'part', 'parent');

set aid = g2b('d86634db-ab9f-4789-876d-9fbcef1e274e');
call sysoptions_save ( b2g(aid), 'fldextenders', 'mtzmetamodel', 'struct_type');
set aid = g2b('a343b47e-d7e5-4217-a73c-2ffa67bb0879');
call sysoptions_save(  b2g(aid), 'fldextenders', 'field', 'parent');

set aid = g2b('ff000879-3651-4c4c-8f43-ca89812bb074');
call sysoptions_save ( b2g(aid), 'fieldsrcdef', 'mtzmetamodel', 'struct_type');
set aid = g2b('d24e7acd-dcf9-45b0-bda9-157b5638cb56');
call sysoptions_save(  b2g(aid), 'fieldsrcdef', 'field', 'parent');

set aid = g2b('b6173f3e-82d2-4e54-b7ac-d1d07d7ae9b6');
call sysoptions_save ( b2g(aid), 'dinamicfilterscript', 'mtzmetamodel', 'struct_type');
set aid = g2b('10a530ec-7bfd-48d9-a5b7-0e93ac164d45');
call sysoptions_save(  b2g(aid), 'dinamicfilterscript', 'field', 'parent');

set aid = g2b('34ae8b58-5bb7-44e3-a6c5-735223814596');
call sysoptions_save ( b2g(aid), 'fieldexpression', 'mtzmetamodel', 'struct_type');
set aid = g2b('f95f1793-10a2-4c09-8384-ffe09844b2e5');
call sysoptions_save(  b2g(aid), 'fieldexpression', 'field', 'parent');

set aid = g2b('0754f72e-fe37-4d2d-bfef-7a760821751e');
call sysoptions_save ( b2g(aid), 'fieldvalidator', 'mtzmetamodel', 'struct_type');
set aid = g2b('91e1fb7f-24a2-4587-9ff3-a6f306b104fe');
call sysoptions_save(  b2g(aid), 'fieldvalidator', 'field', 'parent');

set aid = g2b('f094185d-07e6-4433-927c-e8161d4c42c5');
call sysoptions_save ( b2g(aid), 'fieldmenu', 'mtzmetamodel', 'struct_type');
set aid = g2b('78de4f4b-992f-472b-96ca-2cc506b8736d');
call sysoptions_save(  b2g(aid), 'fieldmenu', 'field', 'parent');

set aid = g2b('9dc705c9-3630-4121-aa63-e5c2abba055b');
call sysoptions_save ( b2g(aid), 'fieldparammap', 'mtzmetamodel', 'struct_type');
set aid = g2b('be04baae-fdaa-4101-acfb-203c213487a6');
call sysoptions_save(  b2g(aid), 'fieldparammap', 'fieldmenu', 'parent');

set aid = g2b('e34bc24d-e567-4776-a46c-f597ba854a43');
call sysoptions_save ( b2g(aid), 'objecttype', 'autoobjecttype', 'defview');

set aid = g2b('c4acc1ee-088a-4bbc-b31f-daeab956fd45');
call sysoptions_save ( b2g(aid), 'objstatus', 'autoobjstatus', 'defview');

set aid = g2b('1db30afb-201b-46ac-b989-65639140295e');
call sysoptions_save ( b2g(aid), 'nextstate', 'autonextstate', 'defview');

set aid = g2b('073ec315-0a87-4fb7-9842-ce60ee5b34f5');
call sysoptions_save ( b2g(aid), 'objectmode', 'autoobjectmode', 'defview');

set aid = g2b('a7a75dce-6eaf-4464-bb5f-65e9d604c8a4');
call sysoptions_save ( b2g(aid), 'structrestriction', 'autostructrestriction', 'defview');

set aid = g2b('ef96f476-604e-4b0b-b5f9-aec7ebfaf5d5');
call sysoptions_save ( b2g(aid), 'methodrestriction', 'automethodrestriction', 'defview');

set aid = g2b('6298a72b-243b-433e-9851-20430408cc60');
call sysoptions_save ( b2g(aid), 'fieldrestriction', 'autofieldrestriction', 'defview');

set aid = g2b('48cec391-5707-4a4a-a567-3db25e66a9fe');
call sysoptions_save ( b2g(aid), 'typemenu', 'autotypemenu', 'defview');

set aid = g2b('7c3060dd-0785-4329-801e-0fe211da8744');
call sysoptions_save ( b2g(aid), 'instancevalidator', 'autoinstancevalidator', 'defview');


set aid = g2b('4f8b2f6c-1be5-4aaa-9d61-5cd444bd2453');
call sysoptions_save ( b2g(aid), 'partmenu', 'autopartmenu', 'defview');

set aid = g2b('f7c0caa7-e6f6-4a1a-a5d0-20dec6d849e0');
call sysoptions_save ( b2g(aid), 'partparammap', 'autopartparammap', 'defview');

set aid = g2b('5ec07ec3-7e3d-42e6-a488-ee26af3feaba');
call sysoptions_save ( b2g(aid), 'partview', 'autopartview', 'defview');

set aid = g2b('30e939d1-f2c6-4f22-911d-3bf182749ba2');
call sysoptions_save ( b2g(aid), 'viewcolumn', 'autoviewcolumn', 'defview');

set aid = g2b('3024745e-9cb6-400a-8645-ca1a7aa188bc');
call sysoptions_save ( b2g(aid), 'partview_lnk', 'autopartview_lnk', 'defview');

set aid = g2b('dfd78e23-86d9-4155-861a-47547eee75c1');
call sysoptions_save ( b2g(aid), 'validator', 'autovalidator', 'defview');

set aid = g2b('b26f45fd-af87-4c2d-a495-5e67b6af0539');
call sysoptions_save ( b2g(aid), 'uniqueconstraint', 'autouniqueconstraint', 'defview');

set aid = g2b('93436f0f-74f5-4bfd-a0b5-726fa9c38785');
call sysoptions_save ( b2g(aid), 'constraintfield', 'autoconstraintfield', 'defview');

set aid = g2b('1aa6b319-2047-4c06-a794-7ac792b7f351');
call sysoptions_save ( b2g(aid), 'extenderinterface', 'autoextenderinterface', 'defview');

set aid = g2b('403870fe-c67b-4b80-a41b-9fa2d90ec81a');
call sysoptions_save ( b2g(aid), 'field', 'autofield', 'defview');

set aid = g2b('1628a775-a12f-4bc2-a777-d4688fa7d6bc');
call sysoptions_save ( b2g(aid), 'fldextenders', 'autofldextenders', 'defview');

set aid = g2b('37fbf961-d6d1-4012-b458-4dc7c27ee021');
call sysoptions_save ( b2g(aid), 'fieldsrcdef', 'autofieldsrcdef', 'defview');

set aid = g2b('66014338-36cd-485c-a8b9-01c2220e51e4');
call sysoptions_save ( b2g(aid), 'dinamicfilterscript', 'autodinamicfilterscript', 'defview');

set aid = g2b('ec4cdb72-fb5f-48d8-b98d-d28e9200633e');
call sysoptions_save ( b2g(aid), 'fieldexpression', 'autofieldexpression', 'defview');

set aid = g2b('c02baf6f-6238-414d-b527-5a7387772bdc');
call sysoptions_save ( b2g(aid), 'fieldvalidator', 'autofieldvalidator', 'defview');

set aid = g2b('54a54e33-31d3-46e1-bc4e-9ae9b60b6661');
call sysoptions_save ( b2g(aid), 'fieldmenu', 'autofieldmenu', 'defview');

set aid = g2b('a55e875a-6c71-4d07-afb9-3580ec643380');
call sysoptions_save ( b2g(aid), 'fieldparammap', 'autofieldparammap', 'defview');

set aid = g2b('2c3bba40-47ca-4377-84ec-d17262021159');
call sysoptions_save ( b2g(aid), 'mtzapp', 'mtzmetamodel', 'struct_type');

set aid = g2b('620bafac-5825-4b38-8697-57374889b729');
call sysoptions_save ( b2g(aid), 'parentpackage', 'mtzmetamodel', 'struct_type');
set aid = g2b('45543174-af32-48c8-8bd9-3d59ba0d04cd');
call sysoptions_save(  b2g(aid), 'parentpackage', 'mtzapp', 'parent');

set aid = g2b('fb62e1a3-7b4f-4a3c-9aca-cc1f92bdf540');
call sysoptions_save ( b2g(aid), 'mtzapp', 'automtzapp', 'defview');

set aid = g2b('f6be89bd-0d15-455c-ad1b-708f0f942f39');
call sysoptions_save ( b2g(aid), 'parentpackage', 'autoparentpackage', 'defview');

set aid = g2b('7c845ce4-6b84-4664-ab30-1472bd5ff0f7');
call sysoptions_save ( b2g(aid), 'journalcolumn', 'mtzjrnl', 'struct_type');

set aid = g2b('fbb263a6-43e7-45d5-a484-76d05f2b8c99');
call sysoptions_save ( b2g(aid), 'jcolumnsource', 'mtzjrnl', 'struct_type');
set aid = g2b('180dbcce-2730-42ff-b058-49271d147789');
call sysoptions_save(  b2g(aid), 'jcolumnsource', 'journalcolumn', 'parent');

set aid = g2b('bd57a1f5-a8c6-410e-8e41-bae7cb35d007');
call sysoptions_save ( b2g(aid), 'journalcolumn', 'autojournalcolumn', 'defview');

set aid = g2b('92778e38-054c-465f-bed7-237654942da9');
call sysoptions_save ( b2g(aid), 'jcolumnsource', 'autojcolumnsource', 'defview');

set aid = g2b('4be6cfcb-ce9a-497f-8ce7-7ca155584d08');
call sysoptions_save ( b2g(aid), 'journalsrc', 'mtzjrnl', 'struct_type');

set aid = g2b('55ae0d69-6bb4-4f56-86b4-3e6833b0379f');
call sysoptions_save ( b2g(aid), 'journalsrc', 'autojournalsrc', 'defview');

set aid = g2b('ab57a1df-91b6-4f49-9312-ff7c70eb8297');
call sysoptions_save ( b2g(aid), 'journal', 'mtzjrnl', 'struct_type');

set aid = g2b('32ba14df-0464-4d77-88ac-5c6055a35c99');
call sysoptions_save ( b2g(aid), 'journal', 'autojournal', 'defview');

set aid = g2b('262182ce-a143-4753-bb3d-a045cb3fe12a');
call sysoptions_save ( b2g(aid), 'bpc_info', 'bpc', 'struct_type');

set aid = g2b('5f6a95c7-9b7c-4089-89dd-eb5fb71aefb1');
call sysoptions_save ( b2g(aid), 'bpc_info', 'autobpc_info', 'defview');

set aid = g2b('b2fc3435-1965-420c-a428-2929308447ac');
call sysoptions_save ( b2g(aid), 'the_session', 'mtzsystem', 'struct_type');

set aid = g2b('d2b45e08-4d04-4285-970a-123d3ac6c9d6');
call sysoptions_save ( b2g(aid), 'the_session', 'autothe_session', 'defview');

set aid = g2b('c2913043-21d1-472a-ad50-02d5fc03afe7');
call sysoptions_save ( b2g(aid), 'sysrefcache', 'mtzsystem', 'struct_type');

set aid = g2b('4fc37f53-3d12-4d75-9e20-2efad88bd726');
call sysoptions_save ( b2g(aid), 'sysrefcache', 'autosysrefcache', 'defview');

set aid = g2b('d848f6d2-2959-43ce-8f64-7155ae119a05');
call sysoptions_save ( b2g(aid), 'syslog', 'mtzsystem', 'struct_type');

set aid = g2b('0e1b575e-2c5f-43e6-a601-eea8ae0bdb84');
call sysoptions_save ( b2g(aid), 'syslog', 'autosyslog', 'defview');

set aid = g2b('79a094b2-9d32-453a-962f-9c0b5209c82e');
call sysoptions_save ( b2g(aid), 'tpls_info', 'tpls', 'struct_type');

set aid = g2b('275fac3c-6717-4d41-9762-2777c4cb49d4');
call sysoptions_save ( b2g(aid), 'tpls_info', 'autotpls_info', 'defview');

set aid = g2b('f5fe59ab-5ae6-4aae-8492-4a3ba141b0c8');
call sysoptions_save ( b2g(aid), 'tpls_param', 'tpls', 'struct_type');

set aid = g2b('d6208fb1-6b91-4cb4-8c93-75625f04af75');
call sysoptions_save ( b2g(aid), 'tpls_param', 'autotpls_param', 'defview');

set aid = g2b('194db352-47c6-46b4-9605-42ea3807ee16');
call sysoptions_save ( b2g(aid), 'armjournal', 'mtzwp', 'struct_type');

set aid = g2b('fe4b2823-20f3-4af3-beb9-b1290971c284');
call sysoptions_save ( b2g(aid), 'armjrnlrep', 'mtzwp', 'struct_type');
set aid = g2b('f3dcf7bb-b9d8-421e-9399-5e77bff2678a');
call sysoptions_save(  b2g(aid), 'armjrnlrep', 'armjournal', 'parent');

set aid = g2b('118bfa22-6d43-4e12-b596-f7117ec035e5');
call sysoptions_save ( b2g(aid), 'armjrnlrun', 'mtzwp', 'struct_type');
set aid = g2b('8b8391e4-837c-4a3d-9547-838d115d13aa');
call sysoptions_save(  b2g(aid), 'armjrnlrun', 'armjournal', 'parent');

set aid = g2b('2f39b9c7-3510-4682-89da-749056aa2688');
call sysoptions_save ( b2g(aid), 'armjrnladd', 'mtzwp', 'struct_type');
set aid = g2b('6d00c414-7c25-4cf7-9208-c2d0d601cf23');
call sysoptions_save(  b2g(aid), 'armjrnladd', 'armjournal', 'parent');

set aid = g2b('7bd62cdb-f734-4f2c-a2a6-72a30cde9d47');
call sysoptions_save ( b2g(aid), 'armjournal', 'autoarmjournal', 'defview');

set aid = g2b('80199746-6c06-4674-847c-6828f00652ec');
call sysoptions_save ( b2g(aid), 'armjrnlrep', 'autoarmjrnlrep', 'defview');

set aid = g2b('fa1808f4-6f2e-40b5-bfd0-bad6a1520c84');
call sysoptions_save ( b2g(aid), 'armjrnlrun', 'autoarmjrnlrun', 'defview');

set aid = g2b('6fc80045-40f9-40aa-a95e-f6227c63d3ee');
call sysoptions_save ( b2g(aid), 'armjrnladd', 'autoarmjrnladd', 'defview');

set aid = g2b('0adf47a1-6f9f-4e86-983f-20046c09a8de');
call sysoptions_save ( b2g(aid), 'entrypoints', 'mtzwp', 'struct_type');

set aid = g2b('230baa26-a354-4a3c-b07d-fbf422ad4f16');
call sysoptions_save ( b2g(aid), 'epfilterlink', 'mtzwp', 'struct_type');
set aid = g2b('6e717f09-9bc8-46ee-a656-6581a8b3b353');
call sysoptions_save(  b2g(aid), 'epfilterlink', 'entrypoints', 'parent');


set aid = g2b('d17b23aa-ff06-4cd6-bf68-523814df248c');
call sysoptions_save ( b2g(aid), 'epfilterlink', 'autoepfilterlink', 'defview');

set aid = g2b('4bec1f9b-89fc-41d8-88cb-a953fa4e706c');
call sysoptions_save ( b2g(aid), 'workplace', 'mtzwp', 'struct_type');

set aid = g2b('0a1581d2-8c2d-4e9b-81e5-cf432e28f4aa');
call sysoptions_save ( b2g(aid), 'workplace', 'autoworkplace', 'defview');

set aid = g2b('b84fa687-1ae4-4cc6-8157-1d259fe9d894');
call sysoptions_save ( b2g(aid), 'armtypes', 'mtzwp', 'struct_type');

set aid = g2b('7e1f6af9-eee2-41e0-9d88-7e973c0f447a');
call sysoptions_save ( b2g(aid), 'armtypes', 'autoarmtypes', 'defview');

set aid = g2b('46d48d4e-2b6f-4896-b7c5-364f99ed481a');
call sysoptions_save ( b2g(aid), 'iu_crole', 'bpdr', 'struct_type');

set aid = g2b('bda0a536-6149-4796-836b-a8b3d4ff8051');
call sysoptions_save ( b2g(aid), 'iu_crole', 'autoiu_crole', 'defview');

set aid = g2b('79829224-3469-49ce-9004-488e335bb2fe');
call sysoptions_save ( b2g(aid), 'tpld_connecttype', 'tpld', 'struct_type');

set aid = g2b('a4798b28-1144-4167-b3e3-d3356fa9a6c8');
call sysoptions_save ( b2g(aid), 'tpld_connecttype', 'autotpld_connecttype', 'defview');

set aid = g2b('95a9262d-26a8-493e-978b-22f577e24059');
call sysoptions_save ( b2g(aid), 'tpld_devclass', 'tpld', 'struct_type');

set aid = g2b('0f6a0869-74b5-409d-baa1-bb455b342f9d');
call sysoptions_save ( b2g(aid), 'tpld_devclass', 'autotpld_devclass', 'defview');

set aid = g2b('80276552-6734-487a-9a7e-56d7bb982f57');
call sysoptions_save ( b2g(aid), 'tpld_f', 'tpld', 'struct_type');

set aid = g2b('2f120474-7cb4-4bfa-8ca5-b69c0312ea46');
call sysoptions_save ( b2g(aid), 'tpld_f', 'autotpld_f', 'defview');

set aid = g2b('87ca2a9c-f7f0-484b-80ed-f618debc678c');
call sysoptions_save ( b2g(aid), 'tpld_snab', 'tpld', 'struct_type');

set aid = g2b('12b77288-2d01-4ae5-b56e-716c5a223c5c');
call sysoptions_save ( b2g(aid), 'tpld_snab', 'autotpld_snab', 'defview');

set aid = g2b('9eb5d6a2-de7e-43aa-a057-557bffa964db');
call sysoptions_save ( b2g(aid), 'tpld_paramtype', 'tpld', 'struct_type');

set aid = g2b('ac4c8f9c-243b-4f37-8343-7d2c9636dac3');
call sysoptions_save ( b2g(aid), 'tpld_paramtype', 'autotpld_paramtype', 'defview');

set aid = g2b('c9c234ca-ed47-47e4-8660-061f7a53e53f');
call sysoptions_save ( b2g(aid), 'tpld_grp', 'tpld', 'struct_type');

set aid = g2b('4f3e8c50-0034-4281-8cbc-17ecad54838e');
call sysoptions_save ( b2g(aid), 'tpld_grp', 'autotpld_grp', 'defview');

set aid = g2b('c07e7bce-d2aa-4925-b5d7-9293c47fb6cd');
call sysoptions_save ( b2g(aid), 'tpld_snabtop', 'tpld', 'struct_type');

set aid = g2b('3590c50a-0206-4f46-8638-8f54a2a177c3');
call sysoptions_save ( b2g(aid), 'tpld_snabtop', 'autotpld_snabtop', 'defview');

set aid = g2b('45eaf298-c0ce-4880-ac7a-17819390c9d0');
call sysoptions_save ( b2g(aid), 'tpld_param', 'tpld', 'struct_type');

set aid = g2b('7beaa565-feeb-4c21-b71b-f296afc45827');
call sysoptions_save ( b2g(aid), 'tpld_param', 'autotpld_param', 'defview');

set aid = g2b('dba97be7-12ee-443b-af04-b3df91c4e667');
call sysoptions_save ( b2g(aid), 'tpld_devtype', 'tpld', 'struct_type');

set aid = g2b('fa815442-6a41-4d9b-9795-397d4abd2014');
call sysoptions_save ( b2g(aid), 'tpld_devtype', 'autotpld_devtype', 'defview');

set aid = g2b('b813870d-7d14-44c1-a423-7021580b7927');
call sysoptions_save ( b2g(aid), 'users', 'mtzusers', 'struct_type');

set aid = g2b('8d8a1043-79f0-42bd-8206-44cad39c4b6e');
call sysoptions_save ( b2g(aid), 'users', 'autousers', 'defview');

set aid = g2b('837223ee-b845-4ace-8b5f-91171ac54113');
call sysoptions_save ( b2g(aid), 'groups', 'mtzusers', 'struct_type');

set aid = g2b('6646062b-f137-4bbb-b687-43cd0aa269bc');
call sysoptions_save ( b2g(aid), 'groupuser', 'mtzusers', 'struct_type');
set aid = g2b('2c2cbb19-fe63-4fd5-b063-c72a374cb948');
call sysoptions_save(  b2g(aid), 'groupuser', 'groups', 'parent');

set aid = g2b('5a0212c9-2d5c-43d9-a89b-38733fd2767d');
call sysoptions_save ( b2g(aid), 'groups', 'autogroups', 'defview');

set aid = g2b('e1b16a7a-8e64-4df6-9376-b17cfa9f1fd9');
call sysoptions_save ( b2g(aid), 'groupuser', 'autogroupuser', 'defview');

set aid = g2b('e182e9b8-5145-455c-9136-307d7bf74f90');
call sysoptions_save ( b2g(aid), 'tpsrv_modems', 'tpsrv', 'struct_type');

set aid = g2b('bf39dc9f-c148-4b75-9746-3b6687c6c19d');
call sysoptions_save ( b2g(aid), 'tpsrv_modems', 'autotpsrv_modems', 'defview');

set aid = g2b('5d2763a4-caa2-44cf-88c0-048e980a98b6');
call sysoptions_save ( b2g(aid), 'tpsrv_info', 'tpsrv', 'struct_type');

set aid = g2b('8355e05a-8fb7-4163-9927-d658d6759885');
call sysoptions_save ( b2g(aid), 'tpsrv_info', 'autotpsrv_info', 'defview');

set aid = g2b('8b5c8a10-ad82-4fe1-8be6-07b6d3054b9c');
call sysoptions_save ( b2g(aid), 'tpsrv_ports', 'tpsrv', 'struct_type');

set aid = g2b('56df4fd2-adf8-4efa-a041-75fdacb6be20');
call sysoptions_save ( b2g(aid), 'tpsrv_ports', 'autotpsrv_ports', 'defview');

set aid = g2b('ff6d2a9d-2bc7-4409-a249-86a512cfba7a');
call sysoptions_save ( b2g(aid), 'num_zones', 'stdnumerator', 'struct_type');

set aid = g2b('e75ae0f3-aba1-45fc-936a-ab4c66d7b9b0');
call sysoptions_save ( b2g(aid), 'num_values', 'stdnumerator', 'struct_type');
set aid = g2b('e035d06e-d06a-4de3-b5fd-e2bebf878c0a');
call sysoptions_save(  b2g(aid), 'num_values', 'num_zones', 'parent');

set aid = g2b('9c136f5f-b507-4e71-9df0-f461ad10106c');
call sysoptions_save ( b2g(aid), 'num_zones', 'autonum_zones', 'defview');

set aid = g2b('a73165f9-9c5c-4083-8c98-5db7ccc3096e');
call sysoptions_save ( b2g(aid), 'num_values', 'autonum_values', 'defview');

set aid = g2b('a7864253-a03f-416f-8605-e1fafd21df50');
call sysoptions_save ( b2g(aid), 'num_head', 'stdnumerator', 'struct_type');

set aid = g2b('544d77c6-484c-4e55-9ddd-7462cbcaddc2');
call sysoptions_save ( b2g(aid), 'num_head', 'autonum_head', 'defview');

set aid = g2b('ce39d7b9-b351-42b5-afa6-36e0d635e31f');
call sysoptions_save ( b2g(aid), 'tplt_reports', 'tplt', 'struct_type');

set aid = g2b('e1acf508-45d1-4455-8a94-72613d52191d');
call sysoptions_save ( b2g(aid), 'tplt_reports', 'autotplt_reports', 'defview');

set aid = g2b('5e75ec92-a433-453d-afee-067aceade06b');
call sysoptions_save ( b2g(aid), 'tplt_connect', 'tplt', 'struct_type');

set aid = g2b('3dd771e4-4012-45f0-b934-ab76a249408e');
call sysoptions_save ( b2g(aid), 'tplt_connect', 'autotplt_connect', 'defview');

set aid = g2b('ef41ada8-66de-44ee-988c-d64dea257b01');
call sysoptions_save ( b2g(aid), 'tplt_valuebounds', 'tplt', 'struct_type');

set aid = g2b('0fc7f1e0-5334-4d3b-aaba-f9cc9c30ec80');
call sysoptions_save ( b2g(aid), 'tplt_valuebounds', 'autotplt_valuebounds', 'defview');

set aid = g2b('fbd8f886-1aef-4674-ac79-c1e634117e93');
call sysoptions_save ( b2g(aid), 'tplt_plancall', 'tplt', 'struct_type');

set aid = g2b('d29b9fb5-9ac6-4188-b767-a2c5aaeb282d');
call sysoptions_save ( b2g(aid), 'tplt_plancall', 'autotplt_plancall', 'defview');

set aid = g2b('b319d868-461c-42f8-b78f-8693e7254817');
call sysoptions_save ( b2g(aid), 'tplt_mask', 'tplt', 'struct_type');

set aid = g2b('9145b061-e679-421c-9f90-d3ca8a52f392');
call sysoptions_save ( b2g(aid), 'tplt_mask', 'autotplt_mask', 'defview');

set aid = g2b('d58b4bad-051e-4dad-ae6d-f621d154b5eb');
call sysoptions_save ( b2g(aid), 'tplt_bdevices', 'tplt', 'struct_type');

set aid = g2b('4a7be2cc-0c1a-4baa-be5a-0e2dbe5bfec9');
call sysoptions_save ( b2g(aid), 'tplt_bdevices', 'autotplt_bdevices', 'defview');

set aid = g2b('f613d923-4b31-4d4e-92e5-81090d1e627e');
call sysoptions_save ( b2g(aid), 'tplt_contract', 'tplt', 'struct_type');

set aid = g2b('f99bf8ab-c39e-4cc4-bdbb-72aa835f2dec');
call sysoptions_save ( b2g(aid), 'tplt_contract', 'autotplt_contract', 'defview');

set aid = g2b('446693cd-a19c-4dd8-8eec-618d08363868');
call sysoptions_save ( b2g(aid), 'mtzext_def', 'mtzext', 'struct_type');

set aid = g2b('9d311dc7-0791-4c4e-b13f-6c26ecc9a605');
call sysoptions_save ( b2g(aid), 'mtzext_def', 'automtzext_def', 'defview');

set aid = g2b('b832cbc5-39ea-4b38-9e81-61afa71196ec');
call sysoptions_save ( b2g(aid), 'mtzextrel', 'mtzext', 'struct_type');

set aid = g2b('8be77482-d5c2-4b71-b32e-5279e431ea06');
call sysoptions_save ( b2g(aid), 'mtzextrel', 'automtzextrel', 'defview');

set aid = g2b('4c5c5553-8b81-4b87-b63a-0ae9d1d93761');
call sysoptions_save ( b2g(aid), 'iu_rcfg_mod', 'bprcfg', 'struct_type');

set aid = g2b('01132f86-0169-49e9-ac24-83aa43601d71');
call sysoptions_save ( b2g(aid), 'iu_rcfg_mod', 'autoiu_rcfg_mod', 'defview');

set aid = g2b('f1a41f74-d89f-4426-86b2-c126ba8c6e50');
call sysoptions_save ( b2g(aid), 'iu_rcfg_docmode', 'bprcfg', 'struct_type');

set aid = g2b('02975b0a-0efb-4310-802c-76aa5f1ba5e9');
call sysoptions_save ( b2g(aid), 'iu_rcfg_docmode', 'autoiu_rcfg_docmode', 'defview');

set aid = g2b('871e37de-342e-4f1d-9900-9485950e2b09');
call sysoptions_save ( b2g(aid), 'iu_rcfg_def', 'bprcfg', 'struct_type');

set aid = g2b('b421ad23-23a7-4b76-8b53-505df49ea5d0');
call sysoptions_save ( b2g(aid), 'iu_rcfg_def', 'autoiu_rcfg_def', 'defview');

set aid = g2b('2c891215-7e62-4c1c-bc8e-c2a2bed04b9e');
call sysoptions_save ( b2g(aid), 'tpq_def', 'tpq', 'struct_type');

set aid = g2b('96fb5293-a5aa-4133-8e48-c73be9a8d6d4');
call sysoptions_save ( b2g(aid), 'tpq_def', 'autotpq_def', 'defview');

set aid = g2b('1367fbb4-559c-4c67-a9cd-5bd31994c9fa');
call sysoptions_save ( b2g(aid), 'tpq_result', 'tpq', 'struct_type');

set aid = g2b('db2fbb47-e406-40cf-9eda-d15258eea73e');
call sysoptions_save ( b2g(aid), 'tpq_result', 'autotpq_result', 'defview');

set aid = g2b('1ce557be-079f-45f3-b396-15cfeadf301b');
call sysoptions_save ( b2g(aid), 'filterfieldgroup', 'mtzfltr', 'struct_type');

set aid = g2b('983b20b6-6434-4210-a6cd-7f295015d8e6');
call sysoptions_save ( b2g(aid), 'fileterfield', 'mtzfltr', 'struct_type');
set aid = g2b('d1a118c8-8ba1-45f2-9bc7-c4c3c4bf1a1e');
call sysoptions_save(  b2g(aid), 'fileterfield', 'filterfieldgroup', 'parent');

set aid = g2b('1a679aba-25c4-4d43-977d-d3b66afbfaba');
call sysoptions_save ( b2g(aid), 'filterfieldgroup', 'autofilterfieldgroup', 'defview');

set aid = g2b('ed5ddf5d-3468-49fd-9a9f-6bc231a24a42');
call sysoptions_save ( b2g(aid), 'fileterfield', 'autofileterfield', 'defview');

set aid = g2b('f2b0f140-0a02-4af3-8f28-f58618c97903');
call sysoptions_save ( b2g(aid), 'filters', 'mtzfltr', 'struct_type');

set aid = g2b('52431265-ecfd-4aef-9448-61a1bfcc8785');
call sysoptions_save ( b2g(aid), 'filters', 'autofilters', 'defview');

set aid = g2b('a0b767bc-c2de-4fec-8100-040fced983e3');
call sysoptions_save ( b2g(aid), 'iu_int_modules', 'bpdi', 'struct_type');

set aid = g2b('46c17297-0779-46d9-986c-28f0efeb1102');
call sysoptions_save ( b2g(aid), 'iu_int_modules', 'autoiu_int_modules', 'defview');

set aid = g2b('59bcf26d-e936-43be-99d2-43661adea40c');
call sysoptions_save ( b2g(aid), 'rptstruct', 'mtzrprt', 'struct_type');

set aid = g2b('0a85b079-9344-4fbd-9e0c-b39b73d3491c');
call sysoptions_save ( b2g(aid), 'rptfields', 'mtzrprt', 'struct_type');
set aid = g2b('7f6e5609-1c3c-48e9-b918-1b73cbe83ddd');
call sysoptions_save(  b2g(aid), 'rptfields', 'rptstruct', 'parent');


set aid = g2b('74f86fd3-293c-4fec-9067-56efa66b3b54');
call sysoptions_save ( b2g(aid), 'rptfields', 'autorptfields', 'defview');

set aid = g2b('cb37665a-7455-4c13-9eb1-6ca15db04d22');
call sysoptions_save ( b2g(aid), 'rptformula', 'mtzrprt', 'struct_type');

set aid = g2b('b4d571d2-7cc7-4be7-8178-2a8b747a329e');
call sysoptions_save ( b2g(aid), 'rptformula', 'autorptformula', 'defview');

set aid = g2b('fb4b9f13-86f2-48b4-acb0-4a07dd045342');
call sysoptions_save ( b2g(aid), 'reports', 'mtzrprt', 'struct_type');

set aid = g2b('c44a43f2-e5a7-47aa-bf8f-30c74f0d284c');
call sysoptions_save ( b2g(aid), 'reports', 'autoreports', 'defview');
set aid = g2b('539637c3-d2d1-4865-b1ad-794a7e151b2c');
call sysoptions_save(b2g(aid),'9181af0d-f0d0-4539-8cdb-67cdb500c41e','getfreenumber', 'methodname');
set aid = g2b('e3fe5890-3545-490c-b1fc-418bd2b92ea9');
call sysoptions_save(b2g(aid),'2bb30818-90ed-4627-8abb-85b3fba46750','vbnewpayout', 'methodname');
set aid = g2b('e7cec5c9-5192-4fb3-80c7-374eb7ec81fe');
call sysoptions_save(b2g(aid),'4fb59d1a-0123-47d3-9f4f-e12085c5d074','vbupdateitemname', 'methodname');
set aid = g2b('57023316-b568-437e-946d-4ce073a6d8ff');
call sysoptions_save(b2g(aid),'477b8d25-4ff7-491a-a0b0-d3437ec16957','makenewfolderec', 'methodname');
set aid = g2b('7dfde093-f450-4715-967a-f2ba9e9aedc3');
call sysoptions_save(b2g(aid),'42a1a436-8aa2-4f1f-999b-6680dff514de','vbsavehistory', 'methodname');
set aid = g2b('0ad1c5e6-b6a5-4394-aeb6-a6f014c52907');
call sysoptions_save(b2g(aid),'6fb1873a-45a9-420f-90ce-cde34b5aee19','autoclosesession', 'methodname');
set aid = g2b('0899adbb-c6db-496d-913c-33d31fdf1d1c');
call sysoptions_save(b2g(aid),'61393545-abf7-46f7-82f3-9b7e610dd9c0','vbupdateobjname', 'methodname');
set aid = g2b('c7316abc-87f0-440a-be14-bc5800e9ca83');
call sysoptions_save(b2g(aid),'897d3b55-6599-42db-aa1c-54bab3d2f597','getnewnumber', 'methodname');
set aid = g2b('24b0741e-8433-4c43-af17-ae1da675fe8d');
call sysoptions_save(b2g(aid),'2b0cee5c-7ffa-490d-9f5a-b5e8692551dd','erasenumber', 'methodname');
set aid = g2b('5a77793b-21d6-4830-9311-eedb61476b95');
call sysoptions_save(b2g(aid),'73be205e-f7ea-4a5a-a41f-85e25ca6511e','sessioncheckpoint', 'methodname');
set aid = g2b('805584b4-71fc-46f3-bf43-46bcba8f0398');
call sysoptions_save(b2g(aid),'a87a3a65-ecd1-414f-8fdf-91e53aced1ba','rowstoinstances', 'methodname');
set aid = g2b('ea50a102-e7e5-494e-b10c-fccd5ad6eee0');
call sysoptions_save(b2g(aid),'a282dd68-9188-4c40-b0f2-be69caee3dea','checkverbright', 'methodname');
set aid = g2b('1be6d1f0-73bf-40c7-adc6-d0103e148238');
call sysoptions_save(b2g(aid),'68bd7f75-ad54-4837-a6a7-a8dde3b2992a','mtzlogin', 'methodname');
set aid = g2b('213ab545-4c74-46af-9a55-b2e227517cfb');
call sysoptions_save(b2g(aid),'a2eee876-54d8-4aed-b124-775f5da2d911','vbaddobjbyref', 'methodname');
set aid = g2b('90e06cb3-8c51-4601-b737-2b7ccbafe161');
call sysoptions_save(b2g(aid),'73e7cf77-e6ba-42b4-a03b-4f67eedef4f1','adminunlockall', 'methodname');
set aid = g2b('9a8960ad-3661-4e12-b070-cf86416d1273');
call sysoptions_save(b2g(aid),'8d492a94-7078-4b7d-9847-aefc27b4855d','rowtoinstance', 'methodname');
set aid = g2b('98a3368c-1756-45b8-9e3b-26535557518b');
call sysoptions_save(b2g(aid),'7929d795-41c5-4a5c-bff2-a4e677a62143','sessiontouch', 'methodname');
set aid = g2b('f278c815-fe38-4247-a36d-e537850813f5');
call sysoptions_save(b2g(aid),'6c6e6daa-5cd2-48c3-a2aa-a24539b45a49','getservertime', 'methodname');
set aid = g2b('9b051e18-b9d8-441c-80a9-cf19bee9218c');
call sysoptions_save(b2g(aid),'0c9985af-27ee-4ad5-a564-635e0bffc9d5','testnumber', 'methodname');
set aid = g2b('f7798bbc-0bf3-4d0f-aa7e-a89dadc64370');
call sysoptions_save(b2g(aid),'8d3b38b4-c4f9-45ac-8ece-bf3be39d8100','logout', 'methodname');
set aid = g2b('19f3107b-7e6f-432a-b13f-e56b5282a943');
call sysoptions_save(b2g(aid),'d8914fb4-6b5d-491a-a72f-985617727583','wffuncname', 'methodname');
set aid = g2b('32e13266-9877-444c-9dfb-993836f87f5c');
call sysoptions_save(b2g(aid),'074e33b9-1ec9-4aa1-8300-e98c73d55fe2','login', 'methodname');
set aid = g2b('54d9eb25-c688-43f0-88fd-a57a943377fe');
call sysoptions_save(b2g(aid),'d49a40b9-6174-4946-a81d-b7fe105c3546','adminunlock', 'methodname');
set aid = g2b('eae0ab6f-62e4-4445-aa63-826efa5ae219');
call sysoptions_save(b2g(aid),'5b8fb7b9-d8b1-4ca0-90af-55f83d1a6e5d','vbmakereport', 'methodname');
set aid = g2b('d3cc9ce8-febb-4f24-9687-c578ada0fc4d');
call sysoptions_save(b2g(aid),'94e8f6db-106a-44dc-9483-86c801798ff0','vbopenref', 'methodname');
set aid = g2b('336eac4a-b37e-4e40-ba4c-79e3fb7ed53e');
call sysoptions_save(b2g(aid),'069956dc-3305-45ef-9331-91ce323b5942','wfdefname', 'methodname');
set aid = g2b('6b900fdf-afe6-4453-af47-541f49808c02');
call sysoptions_save(b2g(aid),'aa4085e6-745b-4a37-8ec4-65d99a653966','vbremovesymmetricobjref', 'methodname');
set aid = g2b('6cbb6348-f835-4257-98cb-829b1493e6d3');
call sysoptions_save(b2g(aid),'49a49ae8-db4b-4329-80fb-801a24c9d7af','clearnumerators', 'methodname');
set aid = g2b('a13b6fcf-5574-4b4f-9e28-c4eb6f066373');
call sysoptions_save(b2g(aid),'79e6bdeb-91d5-4b2e-81f7-3e091fb65e3a','vbcheckdescrs', 'methodname');
set aid = g2b('9f93ce56-5898-4780-b760-fdca4ed2dab4');
call sysoptions_save(b2g(aid),'0454d6f0-8624-4887-94b0-64fbc74775e6','sessionverify', 'methodname');
set aid = g2b('d6337625-bc19-4696-b801-ac3c33c07535');
call sysoptions_save(b2g(aid),'5b376af5-339b-4365-ba80-785e28bcf4da','vbupdatesymmetricobjref', 'methodname');
set aid = g2b('c0fe1466-419c-49a0-9f8e-427edca46e48');
call sysoptions_save(b2g(aid),'31ec6cf7-8dbd-4efe-bf12-4d168f653d34','vbapplysecurity', 'methodname');
set aid = g2b('3ef02c5e-8a51-4a43-9d0c-8e75e00d2f79');
call sysoptions_save(b2g(aid),'79ded4fd-045c-45f8-ac79-2e5a3d956d97','vbmigrateright', 'methodname');
call login( asession  , 'init', 'init');
select count(*) into aec from instance where objtype='mtzusers';
if aec=0 then
   set asecid=g2b('4e15269e-a33c-4222-82ca-59723d82b056');
   insert into instance(instanceid,objtype,name) values(asecid, 'mtzusers','пользователи и группы');
else
   select instanceid into asecid from instance where objtype='mtzusers';
end if;
delete from users where login = 'supervisor';
set auid=g2b('76cf54c1-4bf0-4f1e-ae49-035c433782d7');
insert into users(usersid,instanceid,password,login,name,changestamp) values(auid, asecid,  
 'bami',  'supervisor', 'администратор',now());
call logout(asession);
delete from users where login = 'init';
end
go
call init();
go
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
</root>